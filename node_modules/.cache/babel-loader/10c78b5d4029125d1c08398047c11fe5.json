{"remainingRequest":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/babel-loader/lib/index.js!/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-dev-webpack-plugin/lib/translatesourceloader.js?{}!/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-typing/src/deletecommand.js","dependencies":[{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-typing/src/deletecommand.js","mtime":499162500000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-dev-webpack-plugin/lib/translatesourceloader.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-typing/src/deletecommand.js"],"names":["Command","count","ChangeBuffer","DeleteCommand","editor","direction","_buffer","model","config","get","options","doc","document","enqueueChange","batch","writer","lock","selection","createSelection","sequence","doNotResetEntireContent","isCollapsed","modifySelection","unit","_shouldEntireContentBeReplacedWithParagraph","_replaceEntireContentWithParagraph","_shouldReplaceFirstBlockWithParagraph","execute","changeCount","getFirstRange","getMinimalFlatRanges","forEach","range","getWalker","singleCharacters","ignoreElementEnd","shallow","deleteContent","input","setSelection","unlock","limitElement","schema","getLimitElement","limitElementIsEmpty","containsEntireContent","checkChild","limitElementFirstChild","getChild","name","paragraph","createElement","remove","createRangeIn","insert","position","getFirstPosition","parent"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module typing/deletecommand\n */\n\nimport Command from '@ckeditor/ckeditor5-core/src/command';\nimport count from '@ckeditor/ckeditor5-utils/src/count';\n\nimport ChangeBuffer from './utils/changebuffer';\n\n/**\n * The delete command. Used by the {@link module:typing/delete~Delete delete feature} to handle the <kbd>Delete</kbd> and\n * <kbd>Backspace</kbd> keys.\n *\n * @extends module:core/command~Command\n */\nexport default class DeleteCommand extends Command {\n\t/**\n\t * Creates an instance of the command.\n\t *\n\t * @param {module:core/editor/editor~Editor} editor\n\t * @param {'forward'|'backward'} direction The directionality of the delete describing in what direction it\n\t * should consume the content when the selection is collapsed.\n\t */\n\tconstructor( editor, direction ) {\n\t\tsuper( editor );\n\n\t\t/**\n\t\t * The directionality of the delete describing in what direction it should\n\t\t * consume the content when the selection is collapsed.\n\t\t *\n\t\t * @readonly\n\t\t * @member {'forward'|'backward'} #direction\n\t\t */\n\t\tthis.direction = direction;\n\n\t\t/**\n\t\t * Delete's change buffer used to group subsequent changes into batches.\n\t\t *\n\t\t * @readonly\n\t\t * @private\n\t\t * @type {module:typing/utils/changebuffer~ChangeBuffer}\n\t\t */\n\t\tthis._buffer = new ChangeBuffer( editor.model, editor.config.get( 'typing.undoStep' ) );\n\t}\n\n\t/**\n\t * The current change buffer.\n\t *\n\t * @type {module:typing/utils/changebuffer~ChangeBuffer}\n\t */\n\tget buffer() {\n\t\treturn this._buffer;\n\t}\n\n\t/**\n\t * Executes the delete command. Depending on whether the selection is collapsed or not, deletes its content\n\t * or a piece of content in the {@link #direction defined direction}.\n\t *\n\t * @fires execute\n\t * @param {Object} [options] The command options.\n\t * @param {'character'} [options.unit='character'] See {@link module:engine/model/utils/modifyselection~modifySelection}'s options.\n\t * @param {Number} [options.sequence=1] A number describing which subsequent delete event it is without the key being released.\n\t * See the {@link module:engine/view/document~Document#event:delete} event data.\n\t * @param {module:engine/model/selection~Selection} [options.selection] Selection to remove. If not set, current model selection\n\t * will be used.\n\t */\n\texecute( options = {} ) {\n\t\tconst model = this.editor.model;\n\t\tconst doc = model.document;\n\n\t\tmodel.enqueueChange( this._buffer.batch, writer => {\n\t\t\tthis._buffer.lock();\n\n\t\t\tconst selection = writer.createSelection( options.selection || doc.selection );\n\t\t\tconst sequence = options.sequence || 1;\n\n\t\t\t// Do not replace the whole selected content if selection was collapsed.\n\t\t\t// This prevents such situation:\n\t\t\t//\n\t\t\t// <h1></h1><p>[]</p>\t-->  <h1>[</h1><p>]</p> \t\t-->  <p></p>\n\t\t\t// starting content\t\t-->   after `modifySelection`\t-->  after `deleteContent`.\n\t\t\tconst doNotResetEntireContent = selection.isCollapsed;\n\n\t\t\t// Try to extend the selection in the specified direction.\n\t\t\tif ( selection.isCollapsed ) {\n\t\t\t\tmodel.modifySelection( selection, { direction: this.direction, unit: options.unit } );\n\t\t\t}\n\n\t\t\t// Check if deleting in an empty editor. See #61.\n\t\t\tif ( this._shouldEntireContentBeReplacedWithParagraph( sequence ) ) {\n\t\t\t\tthis._replaceEntireContentWithParagraph( writer );\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Check if deleting in the first empty block.\n\t\t\t// See https://github.com/ckeditor/ckeditor5/issues/8137.\n\t\t\tif ( this._shouldReplaceFirstBlockWithParagraph( selection, sequence ) ) {\n\t\t\t\tthis.editor.execute( 'paragraph', { selection } );\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// If selection is still collapsed, then there's nothing to delete.\n\t\t\tif ( selection.isCollapsed ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet changeCount = 0;\n\n\t\t\tselection.getFirstRange().getMinimalFlatRanges().forEach( range => {\n\t\t\t\tchangeCount += count(\n\t\t\t\t\trange.getWalker( { singleCharacters: true, ignoreElementEnd: true, shallow: true } )\n\t\t\t\t);\n\t\t\t} );\n\n\t\t\tmodel.deleteContent( selection, {\n\t\t\t\tdoNotResetEntireContent,\n\t\t\t\tdirection: this.direction\n\t\t\t} );\n\n\t\t\tthis._buffer.input( changeCount );\n\n\t\t\twriter.setSelection( selection );\n\n\t\t\tthis._buffer.unlock();\n\t\t} );\n\t}\n\n\t/**\n\t * If the user keeps <kbd>Backspace</kbd> or <kbd>Delete</kbd> key pressed, the content of the current\n\t * editable will be cleared. However, this will not yet lead to resetting the remaining block to a paragraph\n\t * (which happens e.g. when the user does <kbd>Ctrl</kbd> + <kbd>A</kbd>, <kbd>Backspace</kbd>).\n\t *\n\t * But, if the user pressed the key in an empty editable for the first time,\n\t * we want to replace the entire content with a paragraph if:\n\t *\n\t * * the current limit element is empty,\n\t * * the paragraph is allowed in the limit element,\n\t * * the limit doesn't already have a paragraph inside.\n\t *\n\t * See https://github.com/ckeditor/ckeditor5-typing/issues/61.\n\t *\n\t * @private\n\t * @param {Number} sequence A number describing which subsequent delete event it is without the key being released.\n\t * @returns {Boolean}\n\t */\n\t_shouldEntireContentBeReplacedWithParagraph( sequence ) {\n\t\t// Does nothing if user pressed and held the \"Backspace\" or \"Delete\" key.\n\t\tif ( sequence > 1 ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst model = this.editor.model;\n\t\tconst doc = model.document;\n\t\tconst selection = doc.selection;\n\t\tconst limitElement = model.schema.getLimitElement( selection );\n\n\t\t// If a collapsed selection contains the whole content it means that the content is empty\n\t\t// (from the user perspective).\n\t\tconst limitElementIsEmpty = selection.isCollapsed && selection.containsEntireContent( limitElement );\n\n\t\tif ( !limitElementIsEmpty ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif ( !model.schema.checkChild( limitElement, 'paragraph' ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst limitElementFirstChild = limitElement.getChild( 0 );\n\n\t\t// Does nothing if the limit element already contains only a paragraph.\n\t\t// We ignore the case when paragraph might have some inline elements (<p><inlineWidget>[]</inlineWidget></p>)\n\t\t// because we don't support such cases yet and it's unclear whether inlineWidget shouldn't be a limit itself.\n\t\tif ( limitElementFirstChild && limitElementFirstChild.name === 'paragraph' ) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * The entire content is replaced with the paragraph. Selection is moved inside the paragraph.\n\t *\n\t * @private\n\t * @param {module:engine/model/writer~Writer} writer The model writer.\n\t */\n\t_replaceEntireContentWithParagraph( writer ) {\n\t\tconst model = this.editor.model;\n\t\tconst doc = model.document;\n\t\tconst selection = doc.selection;\n\t\tconst limitElement = model.schema.getLimitElement( selection );\n\t\tconst paragraph = writer.createElement( 'paragraph' );\n\n\t\twriter.remove( writer.createRangeIn( limitElement ) );\n\t\twriter.insert( paragraph, limitElement );\n\n\t\twriter.setSelection( paragraph, 0 );\n\t}\n\n\t/**\n\t * Checks if the selection is inside an empty element that is the first child of the limit element\n\t * and should be replaced with a paragraph.\n\t *\n\t * @private\n\t * @param {module:engine/model/selection~Selection} selection The selection.\n\t * @param {Number} sequence A number describing which subsequent delete event it is without the key being released.\n\t * @returns {Boolean}\n\t */\n\t_shouldReplaceFirstBlockWithParagraph( selection, sequence ) {\n\t\tconst model = this.editor.model;\n\n\t\t// Does nothing if user pressed and held the \"Backspace\" key or it was a \"Delete\" button.\n\t\tif ( sequence > 1 || this.direction != 'backward' ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif ( !selection.isCollapsed ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst position = selection.getFirstPosition();\n\t\tconst limitElement = model.schema.getLimitElement( position );\n\t\tconst limitElementFirstChild = limitElement.getChild( 0 );\n\n\t\t// Only elements that are direct children of the limit element can be replaced.\n\t\t// Unwrapping from a block quote should be handled in a dedicated feature.\n\t\tif ( position.parent != limitElementFirstChild ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// A block should be replaced only if it was empty.\n\t\tif ( !selection.containsEntireContent( limitElementFirstChild ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Replace with a paragraph only if it's allowed there.\n\t\tif ( !model.schema.checkChild( limitElement, 'paragraph' ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Does nothing if the limit element already contains only a paragraph.\n\t\tif ( limitElementFirstChild.name == 'paragraph' ) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n}\n"]}]}