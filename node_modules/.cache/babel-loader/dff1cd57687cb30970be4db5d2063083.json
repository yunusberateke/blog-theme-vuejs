{"remainingRequest":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/babel-loader/lib/index.js!/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-dev-webpack-plugin/lib/translatesourceloader.js?{}!/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-engine/src/view/observer/selectionobserver.js","dependencies":[{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-engine/src/view/observer/selectionobserver.js","mtime":499162500000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-dev-webpack-plugin/lib/translatesourceloader.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-engine/src/view/observer/selectionobserver.js"],"names":["Observer","MutationObserver","debounce","SelectionObserver","view","mutationObserver","getObserver","selection","document","domConverter","_documents","WeakSet","_fireSelectionChangeDoneDebounced","data","fire","_clearInfiniteLoopInterval","setInterval","_clearInfiniteLoop","_loopbackCounter","domElement","domDocument","ownerDocument","has","listenTo","evt","domEvent","_handleSelectionChange","add","clearInterval","cancel","isEnabled","domSelection","defaultView","getSelection","checkShouldIgnoreEventFromTarget","anchorNode","flush","newViewSelection","domSelectionToView","rangeCount","hasDomSelection","isEqual","isDomSelectionCorrect","isSimilar","forceRender","oldSelection","newSelection"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/observer/selectionobserver\n */\n\n/* global setInterval, clearInterval */\n\nimport Observer from './observer';\nimport MutationObserver from './mutationobserver';\nimport { debounce } from 'lodash-es';\n\n/**\n * Selection observer class observes selection changes in the document. If a selection changes on the document this\n * observer checks if there are any mutations and if the DOM selection is different from the\n * {@link module:engine/view/document~Document#selection view selection}. The selection observer fires\n * {@link module:engine/view/document~Document#event:selectionChange} event only if a selection change was the only change in the document\n * and the DOM selection is different then the view selection.\n *\n * Note that this observer is attached by the {@link module:engine/view/view~View} and is available by default.\n *\n * @see module:engine/view/observer/mutationobserver~MutationObserver\n * @extends module:engine/view/observer/observer~Observer\n */\nexport default class SelectionObserver extends Observer {\n\tconstructor( view ) {\n\t\tsuper( view );\n\n\t\t/**\n\t\t * Instance of the mutation observer. Selection observer calls\n\t\t * {@link module:engine/view/observer/mutationobserver~MutationObserver#flush} to ensure that the mutations will be handled\n\t\t * before the {@link module:engine/view/document~Document#event:selectionChange} event is fired.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/view/observer/mutationobserver~MutationObserver}\n\t\t * module:engine/view/observer/selectionobserver~SelectionObserver#mutationObserver\n\t\t */\n\t\tthis.mutationObserver = view.getObserver( MutationObserver );\n\n\t\t/**\n\t\t * Reference to the view {@link module:engine/view/documentselection~DocumentSelection} object used to compare\n\t\t * new selection with it.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/view/documentselection~DocumentSelection}\n\t\t * module:engine/view/observer/selectionobserver~SelectionObserver#selection\n\t\t */\n\t\tthis.selection = this.document.selection;\n\n\t\t/* eslint-disable max-len */\n\t\t/**\n\t\t * Reference to the {@link module:engine/view/view~View#domConverter}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/view/domconverter~DomConverter} module:engine/view/observer/selectionobserver~SelectionObserver#domConverter\n\t\t */\n\t\t/* eslint-enable max-len */\n\t\tthis.domConverter = view.domConverter;\n\n\t\t/**\n\t\t * A set of documents which have added `selectionchange` listener to avoid adding a listener twice to the same\n\t\t * document.\n\t\t *\n\t\t * @private\n\t\t * @member {WeakSet.<Document>} module:engine/view/observer/selectionobserver~SelectionObserver#_documents\n\t\t */\n\t\tthis._documents = new WeakSet();\n\n\t\t/**\n\t\t * Fires debounced event `selectionChangeDone`. It uses `lodash#debounce` method to delay function call.\n\t\t *\n\t\t * @private\n\t\t * @param {Object} data Selection change data.\n\t\t * @method #_fireSelectionChangeDoneDebounced\n\t\t */\n\t\tthis._fireSelectionChangeDoneDebounced = debounce( data => this.document.fire( 'selectionChangeDone', data ), 200 );\n\n\t\tthis._clearInfiniteLoopInterval = setInterval( () => this._clearInfiniteLoop(), 1000 );\n\n\t\t/**\n\t\t * Private property to check if the code does not enter infinite loop.\n\t\t *\n\t\t * @private\n\t\t * @member {Number} module:engine/view/observer/selectionobserver~SelectionObserver#_loopbackCounter\n\t\t */\n\t\tthis._loopbackCounter = 0;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tobserve( domElement ) {\n\t\tconst domDocument = domElement.ownerDocument;\n\n\t\t// Add listener once per each document.\n\t\tif ( this._documents.has( domDocument ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.listenTo( domDocument, 'selectionchange', ( evt, domEvent ) => {\n\t\t\tthis._handleSelectionChange( domEvent, domDocument );\n\t\t} );\n\n\t\tthis._documents.add( domDocument );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdestroy() {\n\t\tsuper.destroy();\n\n\t\tclearInterval( this._clearInfiniteLoopInterval );\n\t\tthis._fireSelectionChangeDoneDebounced.cancel();\n\t}\n\n\t/**\n\t * Selection change listener. {@link module:engine/view/observer/mutationobserver~MutationObserver#flush Flush} mutations, check if\n\t * a selection changes and fires {@link module:engine/view/document~Document#event:selectionChange} event on every change\n\t * and {@link module:engine/view/document~Document#event:selectionChangeDone} when a selection stop changing.\n\t *\n\t * @private\n\t * @param {Event} domEvent DOM event.\n\t * @param {Document} domDocument DOM document.\n\t */\n\t_handleSelectionChange( domEvent, domDocument ) {\n\t\tif ( !this.isEnabled ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst domSelection = domDocument.defaultView.getSelection();\n\n\t\tif ( this.checkShouldIgnoreEventFromTarget( domSelection.anchorNode ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Ensure the mutation event will be before selection event on all browsers.\n\t\tthis.mutationObserver.flush();\n\n\t\t// If there were mutations then the view will be re-rendered by the mutation observer and the selection\n\t\t// will be updated, so the selections will equal and the event will not be fired, as expected.\n\t\tconst newViewSelection = this.domConverter.domSelectionToView( domSelection );\n\n\t\t// Do not convert selection change if the new view selection has no ranges in it.\n\t\t//\n\t\t// It means that the DOM selection is in some way incorrect. Ranges that were in the DOM selection could not be\n\t\t// converted to the view. This happens when the DOM selection was moved outside of the editable element.\n\t\tif ( newViewSelection.rangeCount == 0 ) {\n\t\t\tthis.view.hasDomSelection = false;\n\n\t\t\treturn;\n\t\t}\n\n\t\tthis.view.hasDomSelection = true;\n\n\t\tif ( this.selection.isEqual( newViewSelection ) && this.domConverter.isDomSelectionCorrect( domSelection ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Ensure we are not in the infinite loop (#400).\n\t\t// This counter is reset each second. 60 selection changes in 1 second is enough high number\n\t\t// to be very difficult (impossible) to achieve using just keyboard keys (during normal editor use).\n\t\tif ( ++this._loopbackCounter > 60 ) {\n\t\t\t// Selection change observer detected an infinite rendering loop.\n\t\t\t// Most probably you try to put the selection in the position which is not allowed\n\t\t\t// by the browser and browser fixes it automatically what causes `selectionchange` event on\n\t\t\t// which a loopback through a model tries to re-render the wrong selection and again.\n\t\t\t//\n\t\t\t// @if CK_DEBUG // console.warn( 'Selection change observer detected an infinite rendering loop.' );\n\n\t\t\treturn;\n\t\t}\n\n\t\tif ( this.selection.isSimilar( newViewSelection ) ) {\n\t\t\t// If selection was equal and we are at this point of algorithm, it means that it was incorrect.\n\t\t\t// Just re-render it, no need to fire any events, etc.\n\t\t\tthis.view.forceRender();\n\t\t} else {\n\t\t\tconst data = {\n\t\t\t\toldSelection: this.selection,\n\t\t\t\tnewSelection: newViewSelection,\n\t\t\t\tdomSelection\n\t\t\t};\n\n\t\t\t// Prepare data for new selection and fire appropriate events.\n\t\t\tthis.document.fire( 'selectionChange', data );\n\n\t\t\t// Call `#_fireSelectionChangeDoneDebounced` every time when `selectionChange` event is fired.\n\t\t\t// This function is debounced what means that `selectionChangeDone` event will be fired only when\n\t\t\t// defined int the function time will elapse since the last time the function was called.\n\t\t\t// So `selectionChangeDone` will be fired when selection will stop changing.\n\t\t\tthis._fireSelectionChangeDoneDebounced( data );\n\t\t}\n\t}\n\n\t/**\n\t * Clears `SelectionObserver` internal properties connected with preventing infinite loop.\n\t *\n\t * @protected\n\t */\n\t_clearInfiniteLoop() {\n\t\tthis._loopbackCounter = 0;\n\t}\n}\n\n/**\n * Fired when a selection has changed. This event is fired only when the selection change was the only change that happened\n * in the document, and the old selection is different then the new selection.\n *\n * Introduced by {@link module:engine/view/observer/selectionobserver~SelectionObserver}.\n *\n * Note that because {@link module:engine/view/observer/selectionobserver~SelectionObserver} is attached by the\n * {@link module:engine/view/view~View} this event is available by default.\n *\n * @see module:engine/view/observer/selectionobserver~SelectionObserver\n * @event module:engine/view/document~Document#event:selectionChange\n * @param {Object} data\n * @param {module:engine/view/documentselection~DocumentSelection} data.oldSelection Old View selection which is\n * {@link module:engine/view/document~Document#selection}.\n * @param {module:engine/view/selection~Selection} data.newSelection New View selection which is converted DOM selection.\n * @param {Selection} data.domSelection Native DOM selection.\n */\n\n/**\n * Fired when selection stops changing.\n *\n * Introduced by {@link module:engine/view/observer/selectionobserver~SelectionObserver}.\n *\n * Note that because {@link module:engine/view/observer/selectionobserver~SelectionObserver} is attached by the\n * {@link module:engine/view/view~View} this event is available by default.\n *\n * @see module:engine/view/observer/selectionobserver~SelectionObserver\n * @event module:engine/view/document~Document#event:selectionChangeDone\n * @param {Object} data\n * @param {module:engine/view/documentselection~DocumentSelection} data.oldSelection Old View selection which is\n * {@link module:engine/view/document~Document#selection}.\n * @param {module:engine/view/selection~Selection} data.newSelection New View selection which is converted DOM selection.\n * @param {Selection} data.domSelection Native DOM selection.\n */\n"]}]}