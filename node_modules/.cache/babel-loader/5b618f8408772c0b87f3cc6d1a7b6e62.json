{"remainingRequest":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/babel-loader/lib/index.js!/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-dev-webpack-plugin/lib/translatesourceloader.js?{}!/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-utils/src/emittermixin.js","dependencies":[{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-utils/src/emittermixin.js","mtime":499162500000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-dev-webpack-plugin/lib/translatesourceloader.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-utils/src/emittermixin.js"],"names":["EventInfo","uid","priorities","CKEditorError","_listeningTo","Symbol","_emitterId","EmitterMixin","on","event","callback","options","listenTo","once","wasFired","onceCallback","off","args","call","stopListening","emitter","emitterInfo","eventCallbacks","emitters","_getEmitterId","_setEmitterId","emitterId","callbacks","push","addEventListener","removeEventListener","index","indexOf","length","pop","fire","eventOrInfo","eventInfo","name","getCallbacksForEvent","path","callbackArgs","Array","from","i","apply","called","_removeEventListener","stop","_delegations","destinations","get","passAllDestinations","fireDelegatedEvents","return","err","rethrowUnexpectedError","delegate","events","to","nameOrFunction","Map","forEach","eventName","set","stopDelegating","clear","delete","_addEventListener","createEventNamespace","lists","getCallbacksListsForNamespace","priority","callbackDefinition","added","splice","_getEmitterListenedTo","listeningEmitter","listenedToEmitterId","id","getEvents","source","_events","Object","defineProperty","value","makeEventNode","childEvents","childEventName","newEventNodes","substr","lastIndexOf","node","slice","eventNode","callbacksLists","childCallbacksLists","concat","fireArgs","delegatedInfo","listener"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/emittermixin\n */\n\nimport EventInfo from './eventinfo';\nimport uid from './uid';\nimport priorities from './priorities';\n\n// To check if component is loaded more than once.\nimport './version';\nimport CKEditorError from './ckeditorerror';\n\nconst _listeningTo = Symbol( 'listeningTo' );\nconst _emitterId = Symbol( 'emitterId' );\n\n/**\n * Mixin that injects the {@link ~Emitter events API} into its host.\n *\n * Read more about the concept of emitters in the:\n * * {@glink framework/guides/architecture/core-editor-architecture#event-system-and-observables Event system and observables}\n * section of the {@glink framework/guides/architecture/core-editor-architecture Core editor architecture} guide.\n * * {@glink framework/guides/deep-dive/event-system Event system} deep dive guide.\n *\n * @mixin EmitterMixin\n * @implements module:utils/emittermixin~Emitter\n */\nconst EmitterMixin = {\n\t/**\n\t * @inheritDoc\n\t */\n\ton( event, callback, options = {} ) {\n\t\tthis.listenTo( this, event, callback, options );\n\t},\n\n\t/**\n\t * @inheritDoc\n\t */\n\tonce( event, callback, options ) {\n\t\tlet wasFired = false;\n\n\t\tconst onceCallback = function( event, ...args ) {\n\t\t\t// Ensure the callback is called only once even if the callback itself leads to re-firing the event\n\t\t\t// (which would call the callback again).\n\t\t\tif ( !wasFired ) {\n\t\t\t\twasFired = true;\n\n\t\t\t\t// Go off() at the first call.\n\t\t\t\tevent.off();\n\n\t\t\t\t// Go with the original callback.\n\t\t\t\tcallback.call( this, event, ...args );\n\t\t\t}\n\t\t};\n\n\t\t// Make a similar on() call, simply replacing the callback.\n\t\tthis.listenTo( this, event, onceCallback, options );\n\t},\n\n\t/**\n\t * @inheritDoc\n\t */\n\toff( event, callback ) {\n\t\tthis.stopListening( this, event, callback );\n\t},\n\n\t/**\n\t * @inheritDoc\n\t */\n\tlistenTo( emitter, event, callback, options = {} ) {\n\t\tlet emitterInfo, eventCallbacks;\n\n\t\t// _listeningTo contains a list of emitters that this object is listening to.\n\t\t// This list has the following format:\n\t\t//\n\t\t// _listeningTo: {\n\t\t//     emitterId: {\n\t\t//         emitter: emitter,\n\t\t//         callbacks: {\n\t\t//             event1: [ callback1, callback2, ... ]\n\t\t//             ....\n\t\t//         }\n\t\t//     },\n\t\t//     ...\n\t\t// }\n\n\t\tif ( !this[ _listeningTo ] ) {\n\t\t\tthis[ _listeningTo ] = {};\n\t\t}\n\n\t\tconst emitters = this[ _listeningTo ];\n\n\t\tif ( !_getEmitterId( emitter ) ) {\n\t\t\t_setEmitterId( emitter );\n\t\t}\n\n\t\tconst emitterId = _getEmitterId( emitter );\n\n\t\tif ( !( emitterInfo = emitters[ emitterId ] ) ) {\n\t\t\temitterInfo = emitters[ emitterId ] = {\n\t\t\t\temitter,\n\t\t\t\tcallbacks: {}\n\t\t\t};\n\t\t}\n\n\t\tif ( !( eventCallbacks = emitterInfo.callbacks[ event ] ) ) {\n\t\t\teventCallbacks = emitterInfo.callbacks[ event ] = [];\n\t\t}\n\n\t\teventCallbacks.push( callback );\n\n\t\t// Finally register the callback to the event.\n\t\taddEventListener( this, emitter, event, callback, options );\n\t},\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstopListening( emitter, event, callback ) {\n\t\tconst emitters = this[ _listeningTo ];\n\t\tlet emitterId = emitter && _getEmitterId( emitter );\n\t\tconst emitterInfo = emitters && emitterId && emitters[ emitterId ];\n\t\tconst eventCallbacks = emitterInfo && event && emitterInfo.callbacks[ event ];\n\n\t\t// Stop if nothing has been listened.\n\t\tif ( !emitters || ( emitter && !emitterInfo ) || ( event && !eventCallbacks ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// All params provided. off() that single callback.\n\t\tif ( callback ) {\n\t\t\tremoveEventListener( this, emitter, event, callback );\n\n\t\t\t// We must remove callbacks as well in order to prevent memory leaks.\n\t\t\t// See https://github.com/ckeditor/ckeditor5/pull/8480\n\t\t\tconst index = eventCallbacks.indexOf( callback );\n\n\t\t\tif ( index !== -1 ) {\n\t\t\t\tif ( eventCallbacks.length === 1 ) {\n\t\t\t\t\tdelete emitterInfo.callbacks[ event ];\n\t\t\t\t} else {\n\t\t\t\t\tremoveEventListener( this, emitter, event, callback );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// Only `emitter` and `event` provided. off() all callbacks for that event.\n\t\telse if ( eventCallbacks ) {\n\t\t\twhile ( ( callback = eventCallbacks.pop() ) ) {\n\t\t\t\tremoveEventListener( this, emitter, event, callback );\n\t\t\t}\n\n\t\t\tdelete emitterInfo.callbacks[ event ];\n\t\t}\n\t\t// Only `emitter` provided. off() all events for that emitter.\n\t\telse if ( emitterInfo ) {\n\t\t\tfor ( event in emitterInfo.callbacks ) {\n\t\t\t\tthis.stopListening( emitter, event );\n\t\t\t}\n\t\t\tdelete emitters[ emitterId ];\n\t\t}\n\t\t// No params provided. off() all emitters.\n\t\telse {\n\t\t\tfor ( emitterId in emitters ) {\n\t\t\t\tthis.stopListening( emitters[ emitterId ].emitter );\n\t\t\t}\n\t\t\tdelete this[ _listeningTo ];\n\t\t}\n\t},\n\n\t/**\n\t * @inheritDoc\n\t */\n\tfire( eventOrInfo, ...args ) {\n\t\ttry {\n\t\t\tconst eventInfo = eventOrInfo instanceof EventInfo ? eventOrInfo : new EventInfo( this, eventOrInfo );\n\t\t\tconst event = eventInfo.name;\n\t\t\tlet callbacks = getCallbacksForEvent( this, event );\n\n\t\t\t// Record that the event passed this emitter on its path.\n\t\t\teventInfo.path.push( this );\n\n\t\t\t// Handle event listener callbacks first.\n\t\t\tif ( callbacks ) {\n\t\t\t\t// Arguments passed to each callback.\n\t\t\t\tconst callbackArgs = [ eventInfo, ...args ];\n\n\t\t\t\t// Copying callbacks array is the easiest and most secure way of preventing infinite loops, when event callbacks\n\t\t\t\t// are added while processing other callbacks. Previous solution involved adding counters (unique ids) but\n\t\t\t\t// failed if callbacks were added to the queue before currently processed callback.\n\t\t\t\t// If this proves to be too inefficient, another method is to change `.on()` so callbacks are stored if same\n\t\t\t\t// event is currently processed. Then, `.fire()` at the end, would have to add all stored events.\n\t\t\t\tcallbacks = Array.from( callbacks );\n\n\t\t\t\tfor ( let i = 0; i < callbacks.length; i++ ) {\n\t\t\t\t\tcallbacks[ i ].callback.apply( this, callbackArgs );\n\n\t\t\t\t\t// Remove the callback from future requests if off() has been called.\n\t\t\t\t\tif ( eventInfo.off.called ) {\n\t\t\t\t\t\t// Remove the called mark for the next calls.\n\t\t\t\t\t\tdelete eventInfo.off.called;\n\n\t\t\t\t\t\tthis._removeEventListener( event, callbacks[ i ].callback );\n\t\t\t\t\t}\n\n\t\t\t\t\t// Do not execute next callbacks if stop() was called.\n\t\t\t\t\tif ( eventInfo.stop.called ) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Delegate event to other emitters if needed.\n\t\t\tif ( this._delegations ) {\n\t\t\t\tconst destinations = this._delegations.get( event );\n\t\t\t\tconst passAllDestinations = this._delegations.get( '*' );\n\n\t\t\t\tif ( destinations ) {\n\t\t\t\t\tfireDelegatedEvents( destinations, eventInfo, args );\n\t\t\t\t}\n\n\t\t\t\tif ( passAllDestinations ) {\n\t\t\t\t\tfireDelegatedEvents( passAllDestinations, eventInfo, args );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn eventInfo.return;\n\t\t} catch ( err ) {\n\t\t\t// @if CK_DEBUG // throw err;\n\t\t\t/* istanbul ignore next */\n\t\t\tCKEditorError.rethrowUnexpectedError( err, this );\n\t\t}\n\t},\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdelegate( ...events ) {\n\t\treturn {\n\t\t\tto: ( emitter, nameOrFunction ) => {\n\t\t\t\tif ( !this._delegations ) {\n\t\t\t\t\tthis._delegations = new Map();\n\t\t\t\t}\n\n\t\t\t\t// Originally there was a for..of loop which unfortunately caused an error in Babel that didn't allow\n\t\t\t\t// build an application. See: https://github.com/ckeditor/ckeditor5-react/issues/40.\n\t\t\t\tevents.forEach( eventName => {\n\t\t\t\t\tconst destinations = this._delegations.get( eventName );\n\n\t\t\t\t\tif ( !destinations ) {\n\t\t\t\t\t\tthis._delegations.set( eventName, new Map( [ [ emitter, nameOrFunction ] ] ) );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdestinations.set( emitter, nameOrFunction );\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t}\n\t\t};\n\t},\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstopDelegating( event, emitter ) {\n\t\tif ( !this._delegations ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( !event ) {\n\t\t\tthis._delegations.clear();\n\t\t} else if ( !emitter ) {\n\t\t\tthis._delegations.delete( event );\n\t\t} else {\n\t\t\tconst destinations = this._delegations.get( event );\n\n\t\t\tif ( destinations ) {\n\t\t\t\tdestinations.delete( emitter );\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t * @inheritDoc\n\t */\n\t_addEventListener( event, callback, options ) {\n\t\tcreateEventNamespace( this, event );\n\n\t\tconst lists = getCallbacksListsForNamespace( this, event );\n\t\tconst priority = priorities.get( options.priority );\n\n\t\tconst callbackDefinition = {\n\t\t\tcallback,\n\t\t\tpriority\n\t\t};\n\n\t\t// Add the callback to all callbacks list.\n\t\tfor ( const callbacks of lists ) {\n\t\t\t// Add the callback to the list in the right priority position.\n\t\t\tlet added = false;\n\n\t\t\tfor ( let i = 0; i < callbacks.length; i++ ) {\n\t\t\t\tif ( callbacks[ i ].priority < priority ) {\n\t\t\t\t\tcallbacks.splice( i, 0, callbackDefinition );\n\t\t\t\t\tadded = true;\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Add at the end, if right place was not found.\n\t\t\tif ( !added ) {\n\t\t\t\tcallbacks.push( callbackDefinition );\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t * @inheritDoc\n\t */\n\t_removeEventListener( event, callback ) {\n\t\tconst lists = getCallbacksListsForNamespace( this, event );\n\n\t\tfor ( const callbacks of lists ) {\n\t\t\tfor ( let i = 0; i < callbacks.length; i++ ) {\n\t\t\t\tif ( callbacks[ i ].callback == callback ) {\n\t\t\t\t\t// Remove the callback from the list (fixing the next index).\n\t\t\t\t\tcallbacks.splice( i, 1 );\n\t\t\t\t\ti--;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\nexport default EmitterMixin;\n\n/**\n * Emitter/listener interface.\n *\n * Can be easily implemented by a class by mixing the {@link module:utils/emittermixin~EmitterMixin} mixin.\n *\n * Read more about the usage of this interface in the:\n * * {@glink framework/guides/architecture/core-editor-architecture#event-system-and-observables Event system and observables}\n * section of the {@glink framework/guides/architecture/core-editor-architecture Core editor architecture} guide.\n * * {@glink framework/guides/deep-dive/event-system Event system} deep dive guide.\n *\n * @interface Emitter\n */\n\n/**\n * Registers a callback function to be executed when an event is fired.\n *\n * Shorthand for {@link #listenTo `this.listenTo( this, event, callback, options )`} (it makes the emitter\n * listen on itself).\n *\n * @method #on\n * @param {String} event The name of the event.\n * @param {Function} callback The function to be called on event.\n * @param {Object} [options={}] Additional options.\n * @param {module:utils/priorities~PriorityString|Number} [options.priority='normal'] The priority of this event callback. The higher\n * the priority value the sooner the callback will be fired. Events having the same priority are called in the\n * order they were added.\n */\n\n/**\n * Registers a callback function to be executed on the next time the event is fired only. This is similar to\n * calling {@link #on} followed by {@link #off} in the callback.\n *\n * @method #once\n * @param {String} event The name of the event.\n * @param {Function} callback The function to be called on event.\n * @param {Object} [options={}] Additional options.\n * @param {module:utils/priorities~PriorityString|Number} [options.priority='normal'] The priority of this event callback. The higher\n * the priority value the sooner the callback will be fired. Events having the same priority are called in the\n * order they were added.\n */\n\n/**\n * Stops executing the callback on the given event.\n * Shorthand for {@link #stopListening `this.stopListening( this, event, callback )`}.\n *\n * @method #off\n * @param {String} event The name of the event.\n * @param {Function} callback The function to stop being called.\n */\n\n/**\n * Registers a callback function to be executed when an event is fired in a specific (emitter) object.\n *\n * Events can be grouped in namespaces using `:`.\n * When namespaced event is fired, it additionally fires all callbacks for that namespace.\n *\n *\t\t// myEmitter.on( ... ) is a shorthand for myEmitter.listenTo( myEmitter, ... ).\n *\t\tmyEmitter.on( 'myGroup', genericCallback );\n *\t\tmyEmitter.on( 'myGroup:myEvent', specificCallback );\n *\n *\t\t// genericCallback is fired.\n *\t\tmyEmitter.fire( 'myGroup' );\n *\t\t// both genericCallback and specificCallback are fired.\n *\t\tmyEmitter.fire( 'myGroup:myEvent' );\n *\t\t// genericCallback is fired even though there are no callbacks for \"foo\".\n *\t\tmyEmitter.fire( 'myGroup:foo' );\n *\n * An event callback can {@link module:utils/eventinfo~EventInfo#stop stop the event} and\n * set the {@link module:utils/eventinfo~EventInfo#return return value} of the {@link #fire} method.\n *\n * @method #listenTo\n * @param {module:utils/emittermixin~Emitter} emitter The object that fires the event.\n * @param {String} event The name of the event.\n * @param {Function} callback The function to be called on event.\n * @param {Object} [options={}] Additional options.\n * @param {module:utils/priorities~PriorityString|Number} [options.priority='normal'] The priority of this event callback. The higher\n * the priority value the sooner the callback will be fired. Events having the same priority are called in the\n * order they were added.\n */\n\n/**\n * Stops listening for events. It can be used at different levels:\n *\n * * To stop listening to a specific callback.\n * * To stop listening to a specific event.\n * * To stop listening to all events fired by a specific object.\n * * To stop listening to all events fired by all objects.\n *\n * @method #stopListening\n * @param {module:utils/emittermixin~Emitter} [emitter] The object to stop listening to. If omitted, stops it for all objects.\n * @param {String} [event] (Requires the `emitter`) The name of the event to stop listening to. If omitted, stops it\n * for all events from `emitter`.\n * @param {Function} [callback] (Requires the `event`) The function to be removed from the call list for the given\n * `event`.\n */\n\n/**\n * Fires an event, executing all callbacks registered for it.\n *\n * The first parameter passed to callbacks is an {@link module:utils/eventinfo~EventInfo} object,\n * followed by the optional `args` provided in the `fire()` method call.\n *\n * @method #fire\n * @param {String|module:utils/eventinfo~EventInfo} eventOrInfo The name of the event or `EventInfo` object if event is delegated.\n * @param {...*} [args] Additional arguments to be passed to the callbacks.\n * @returns {*} By default the method returns `undefined`. However, the return value can be changed by listeners\n * through modification of the {@link module:utils/eventinfo~EventInfo#return `evt.return`}'s property (the event info\n * is the first param of every callback).\n */\n\n/**\n * Delegates selected events to another {@link module:utils/emittermixin~Emitter}. For instance:\n *\n *\t\temitterA.delegate( 'eventX' ).to( emitterB );\n *\t\temitterA.delegate( 'eventX', 'eventY' ).to( emitterC );\n *\n * then `eventX` is delegated (fired by) `emitterB` and `emitterC` along with `data`:\n *\n *\t\temitterA.fire( 'eventX', data );\n *\n * and `eventY` is delegated (fired by) `emitterC` along with `data`:\n *\n *\t\temitterA.fire( 'eventY', data );\n *\n * @method #delegate\n * @param {...String} events Event names that will be delegated to another emitter.\n * @returns {module:utils/emittermixin~EmitterMixinDelegateChain}\n */\n\n/**\n * Stops delegating events. It can be used at different levels:\n *\n * * To stop delegating all events.\n * * To stop delegating a specific event to all emitters.\n * * To stop delegating a specific event to a specific emitter.\n *\n * @method #stopDelegating\n * @param {String} [event] The name of the event to stop delegating. If omitted, stops it all delegations.\n * @param {module:utils/emittermixin~Emitter} [emitter] (requires `event`) The object to stop delegating a particular event to.\n * If omitted, stops delegation of `event` to all emitters.\n */\n\n/**\n * Adds callback to emitter for given event.\n *\n * @protected\n * @method #_addEventListener\n * @param {String} event The name of the event.\n * @param {Function} callback The function to be called on event.\n * @param {Object} [options={}] Additional options.\n * @param {module:utils/priorities~PriorityString|Number} [options.priority='normal'] The priority of this event callback. The higher\n * the priority value the sooner the callback will be fired. Events having the same priority are called in the\n * order they were added.\n */\n\n/**\n * Removes callback from emitter for given event.\n *\n * @protected\n * @method #_removeEventListener\n * @param {String} event The name of the event.\n * @param {Function} callback The function to stop being called.\n */\n\n/**\n * Checks if `listeningEmitter` listens to an emitter with given `listenedToEmitterId` and if so, returns that emitter.\n * If not, returns `null`.\n *\n * @protected\n * @param {module:utils/emittermixin~Emitter} listeningEmitter An emitter that listens.\n * @param {String} listenedToEmitterId Unique emitter id of emitter listened to.\n * @returns {module:utils/emittermixin~Emitter|null}\n */\nexport function _getEmitterListenedTo( listeningEmitter, listenedToEmitterId ) {\n\tif ( listeningEmitter[ _listeningTo ] && listeningEmitter[ _listeningTo ][ listenedToEmitterId ] ) {\n\t\treturn listeningEmitter[ _listeningTo ][ listenedToEmitterId ].emitter;\n\t}\n\n\treturn null;\n}\n\n/**\n * Sets emitter's unique id.\n *\n * **Note:** `_emitterId` can be set only once.\n *\n * @protected\n * @param {module:utils/emittermixin~Emitter} emitter An emitter for which id will be set.\n * @param {String} [id] Unique id to set. If not passed, random unique id will be set.\n */\nexport function _setEmitterId( emitter, id ) {\n\tif ( !emitter[ _emitterId ] ) {\n\t\temitter[ _emitterId ] = id || uid();\n\t}\n}\n\n/**\n * Returns emitter's unique id.\n *\n * @protected\n * @param {module:utils/emittermixin~Emitter} emitter An emitter which id will be returned.\n */\nexport function _getEmitterId( emitter ) {\n\treturn emitter[ _emitterId ];\n}\n\n// Gets the internal `_events` property of the given object.\n// `_events` property store all lists with callbacks for registered event names.\n// If there were no events registered on the object, empty `_events` object is created.\nfunction getEvents( source ) {\n\tif ( !source._events ) {\n\t\tObject.defineProperty( source, '_events', {\n\t\t\tvalue: {}\n\t\t} );\n\t}\n\n\treturn source._events;\n}\n\n// Creates event node for generic-specific events relation architecture.\nfunction makeEventNode() {\n\treturn {\n\t\tcallbacks: [],\n\t\tchildEvents: []\n\t};\n}\n\n// Creates an architecture for generic-specific events relation.\n// If needed, creates all events for given eventName, i.e. if the first registered event\n// is foo:bar:abc, it will create foo:bar:abc, foo:bar and foo event and tie them together.\n// It also copies callbacks from more generic events to more specific events when\n// specific events are created.\nfunction createEventNamespace( source, eventName ) {\n\tconst events = getEvents( source );\n\n\t// First, check if the event we want to add to the structure already exists.\n\tif ( events[ eventName ] ) {\n\t\t// If it exists, we don't have to do anything.\n\t\treturn;\n\t}\n\n\t// In other case, we have to create the structure for the event.\n\t// Note, that we might need to create intermediate events too.\n\t// I.e. if foo:bar:abc is being registered and we only have foo in the structure,\n\t// we need to also register foo:bar.\n\n\t// Currently processed event name.\n\tlet name = eventName;\n\t// Name of the event that is a child event for currently processed event.\n\tlet childEventName = null;\n\n\t// Array containing all newly created specific events.\n\tconst newEventNodes = [];\n\n\t// While loop can't check for ':' index because we have to handle generic events too.\n\t// In each loop, we truncate event name, going from the most specific name to the generic one.\n\t// I.e. foo:bar:abc -> foo:bar -> foo.\n\twhile ( name !== '' ) {\n\t\tif ( events[ name ] ) {\n\t\t\t// If the currently processed event name is already registered, we can be sure\n\t\t\t// that it already has all the structure created, so we can break the loop here\n\t\t\t// as no more events need to be registered.\n\t\t\tbreak;\n\t\t}\n\n\t\t// If this event is not yet registered, create a new object for it.\n\t\tevents[ name ] = makeEventNode();\n\t\t// Add it to the array with newly created events.\n\t\tnewEventNodes.push( events[ name ] );\n\n\t\t// Add previously processed event name as a child of this event.\n\t\tif ( childEventName ) {\n\t\t\tevents[ name ].childEvents.push( childEventName );\n\t\t}\n\n\t\tchildEventName = name;\n\t\t// If `.lastIndexOf()` returns -1, `.substr()` will return '' which will break the loop.\n\t\tname = name.substr( 0, name.lastIndexOf( ':' ) );\n\t}\n\n\tif ( name !== '' ) {\n\t\t// If name is not empty, we found an already registered event that was a parent of the\n\t\t// event we wanted to register.\n\n\t\t// Copy that event's callbacks to newly registered events.\n\t\tfor ( const node of newEventNodes ) {\n\t\t\tnode.callbacks = events[ name ].callbacks.slice();\n\t\t}\n\n\t\t// Add last newly created event to the already registered event.\n\t\tevents[ name ].childEvents.push( childEventName );\n\t}\n}\n\n// Gets an array containing callbacks list for a given event and it's more specific events.\n// I.e. if given event is foo:bar and there is also foo:bar:abc event registered, this will\n// return callback list of foo:bar and foo:bar:abc (but not foo).\nfunction getCallbacksListsForNamespace( source, eventName ) {\n\tconst eventNode = getEvents( source )[ eventName ];\n\n\tif ( !eventNode ) {\n\t\treturn [];\n\t}\n\n\tlet callbacksLists = [ eventNode.callbacks ];\n\n\tfor ( let i = 0; i < eventNode.childEvents.length; i++ ) {\n\t\tconst childCallbacksLists = getCallbacksListsForNamespace( source, eventNode.childEvents[ i ] );\n\n\t\tcallbacksLists = callbacksLists.concat( childCallbacksLists );\n\t}\n\n\treturn callbacksLists;\n}\n\n// Get the list of callbacks for a given event, but only if there any callbacks have been registered.\n// If there are no callbacks registered for given event, it checks if this is a specific event and looks\n// for callbacks for it's more generic version.\nfunction getCallbacksForEvent( source, eventName ) {\n\tlet event;\n\n\tif ( !source._events || !( event = source._events[ eventName ] ) || !event.callbacks.length ) {\n\t\t// There are no callbacks registered for specified eventName.\n\t\t// But this could be a specific-type event that is in a namespace.\n\t\tif ( eventName.indexOf( ':' ) > -1 ) {\n\t\t\t// If the eventName is specific, try to find callback lists for more generic event.\n\t\t\treturn getCallbacksForEvent( source, eventName.substr( 0, eventName.lastIndexOf( ':' ) ) );\n\t\t} else {\n\t\t\t// If this is a top-level generic event, return null;\n\t\t\treturn null;\n\t\t}\n\t}\n\n\treturn event.callbacks;\n}\n\n// Fires delegated events for given map of destinations.\n//\n// @private\n// * @param {Map.<utils.Emitter>} destinations A map containing\n// `[ {@link module:utils/emittermixin~Emitter}, \"event name\" ]` pair destinations.\n// * @param {utils.EventInfo} eventInfo The original event info object.\n// * @param {Array.<*>} fireArgs Arguments the original event was fired with.\nfunction fireDelegatedEvents( destinations, eventInfo, fireArgs ) {\n\tfor ( let [ emitter, name ] of destinations ) {\n\t\tif ( !name ) {\n\t\t\tname = eventInfo.name;\n\t\t} else if ( typeof name == 'function' ) {\n\t\t\tname = name( eventInfo.name );\n\t\t}\n\n\t\tconst delegatedInfo = new EventInfo( eventInfo.source, name );\n\n\t\tdelegatedInfo.path = [ ...eventInfo.path ];\n\n\t\temitter.fire( delegatedInfo, ...fireArgs );\n\t}\n}\n\n// Helper for registering event callback on the emitter.\nfunction addEventListener( listener, emitter, event, callback, options ) {\n\tif ( emitter._addEventListener ) {\n\t\temitter._addEventListener( event, callback, options );\n\t} else {\n\t\t// Allow listening on objects that do not implement Emitter interface.\n\t\t// This is needed in some tests that are using mocks instead of the real objects with EmitterMixin mixed.\n\t\tlistener._addEventListener.call( emitter, event, callback, options );\n\t}\n}\n\n// Helper for removing event callback from the emitter.\nfunction removeEventListener( listener, emitter, event, callback ) {\n\tif ( emitter._removeEventListener ) {\n\t\temitter._removeEventListener( event, callback );\n\t} else {\n\t\t// Allow listening on objects that do not implement Emitter interface.\n\t\t// This is needed in some tests that are using mocks instead of the real objects with EmitterMixin mixed.\n\t\tlistener._removeEventListener.call( emitter, event, callback );\n\t}\n}\n\n/**\n * The return value of {@link ~EmitterMixin#delegate}.\n *\n * @interface module:utils/emittermixin~EmitterMixinDelegateChain\n */\n\n/**\n * Selects destination for {@link module:utils/emittermixin~EmitterMixin#delegate} events.\n *\n * @method #to\n * @param {module:utils/emittermixin~Emitter} emitter An `EmitterMixin` instance which is the destination for delegated events.\n * @param {String|Function} [nameOrFunction] A custom event name or function which converts the original name string.\n */\n"]}]}