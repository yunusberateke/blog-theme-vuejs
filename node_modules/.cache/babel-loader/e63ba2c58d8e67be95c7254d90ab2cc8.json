{"remainingRequest":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/babel-loader/lib/index.js!/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-dev-webpack-plugin/lib/translatesourceloader.js?{}!/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-engine/src/model/utils/selection-post-fixer.js","dependencies":[{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-engine/src/model/utils/selection-post-fixer.js","mtime":499162500000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-dev-webpack-plugin/lib/translatesourceloader.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-engine/src/model/utils/selection-post-fixer.js"],"names":["Range","Position","injectSelectionPostFixer","model","document","registerPostFixer","writer","selectionPostFixer","selection","schema","ranges","wasFixed","getRanges","modelRange","correctedRange","tryFixingRange","isEqual","push","setSelection","mergeIntersectingRanges","backward","isBackward","range","isCollapsed","tryFixingCollapsedRange","tryFixingNonCollapsedRage","originalPosition","start","nearestSelectionRange","getNearestSelectionRange","fixedPosition","end","isTextAllowedOnStart","checkChild","isTextAllowedOnEnd","startLimitElement","getLimitElement","endLimitElement","checkSelectionOnNonLimitElements","isStartBeforeSelectable","nodeAfter","isSelectable","fixedStart","isEndAfterSelectable","nodeBefore","fixedEnd","rangeStart","rangeEnd","isStartInLimit","is","isEndInLimit","bothInSameParent","parent","expandStart","expandEnd","_createBefore","findOutermostLimitAncestor","_createAfter","startingNode","isLimitNode","isLimit","startIsOnBlock","endIsOnBlock","nonIntersectingRanges","shift","previousRange","pop","isIntersecting","isAfter","merged","node"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/utils/selection-post-fixer\n */\n\nimport Range from '../range';\nimport Position from '../position';\n\n/**\n * Injects selection post-fixer to the model.\n *\n * The role of the selection post-fixer is to ensure that the selection is in a correct place\n * after a {@link module:engine/model/model~Model#change `change()`} block was executed.\n *\n * The correct position means that:\n *\n * * All collapsed selection ranges are in a place where the {@link module:engine/model/schema~Schema}\n * allows a `$text`.\n * * None of the selection's non-collapsed ranges crosses a {@link module:engine/model/schema~Schema#isLimit limit element}\n * boundary (a range must be rooted within one limit element).\n * * Only {@link module:engine/model/schema~Schema#isSelectable selectable elements} can be selected from the outside\n * (e.g. `[<paragraph>foo</paragraph>]` is invalid). This rule applies independently to both selection ends, so this\n * selection is correct: `<paragraph>f[oo</paragraph><image></image>]`.\n *\n * If the position is not correct, the post-fixer will automatically correct it.\n *\n * ## Fixing a non-collapsed selection\n *\n * See as an example a selection that starts in a P1 element and ends inside the text of a TD element\n * (`[` and `]` are range boundaries and `(l)` denotes an element defined as `isLimit=true`):\n *\n *\t\troot\n *\t\t |- element P1\n *\t\t |   |- \"foo\"                                      root\n *\t\t |- element TABLE (l)                   P1         TABLE             P2\n *\t\t |   |- element TR (l)                 f o[o     TR      TR         b a r\n *\t\t |   |   |- element TD (l)                       TD      TD\n *\t\t |   |       |- \"aaa\"                          a]a a    b b b\n *\t\t |   |- element TR (l)\n *\t\t |   |   |- element TD (l)                           ||\n *\t\t |   |       |- \"bbb\"                                ||\n *\t\t |- element P2                                       VV\n *\t\t |   |- \"bar\"\n *\t\t                                                   root\n *\t\t                                        P1         TABLE]            P2\n *\t\t                                       f o[o     TR      TR         b a r\n *\t\t                                                 TD      TD\n *\t\t                                               a a a    b b b\n *\n * In the example above, the TABLE, TR and TD are defined as `isLimit=true` in the schema. The range which is not contained within\n * a single limit element must be expanded to select the outermost limit element. The range end is inside the text node of the TD element.\n * As the TD element is a child of the TR and TABLE elements, where both are defined as `isLimit=true` in the schema, the range must be\n * expanded to select the whole TABLE element.\n *\n * **Note** If the selection contains multiple ranges, the method returns a minimal set of ranges that are not intersecting after expanding\n * them to select `isLimit=true` elements.\n *\n * @param {module:engine/model/model~Model} model\n */\nexport function injectSelectionPostFixer( model ) {\n\tmodel.document.registerPostFixer( writer => selectionPostFixer( writer, model ) );\n}\n\n// The selection post-fixer.\n//\n// @param {module:engine/model/writer~Writer} writer\n// @param {module:engine/model/model~Model} model\nfunction selectionPostFixer( writer, model ) {\n\tconst selection = model.document.selection;\n\tconst schema = model.schema;\n\n\tconst ranges = [];\n\n\tlet wasFixed = false;\n\n\tfor ( const modelRange of selection.getRanges() ) {\n\t\t// Go through all ranges in selection and try fixing each of them.\n\t\t// Those ranges might overlap but will be corrected later.\n\t\tconst correctedRange = tryFixingRange( modelRange, schema );\n\n\t\t// \"Selection fixing\" algorithms sometimes get lost. In consequence, it may happen\n\t\t// that a new range is returned but, in fact, it has the same positions as the original\n\t\t// range anyway. If this range is not discarded, a new selection will be set and that,\n\t\t// for instance, would destroy the selection attributes. Let's make sure that the post-fixer\n\t\t// actually worked first before setting a new selection.\n\t\t//\n\t\t// https://github.com/ckeditor/ckeditor5/issues/6693\n\t\tif ( correctedRange && !correctedRange.isEqual( modelRange ) ) {\n\t\t\tranges.push( correctedRange );\n\t\t\twasFixed = true;\n\t\t} else {\n\t\t\tranges.push( modelRange );\n\t\t}\n\t}\n\n\t// If any of ranges were corrected update the selection.\n\tif ( wasFixed ) {\n\t\twriter.setSelection( mergeIntersectingRanges( ranges ), { backward: selection.isBackward } );\n\t}\n}\n\n// Tries fixing a range if it's incorrect.\n//\n// @param {module:engine/model/range~Range} range\n// @param {module:engine/model/schema~Schema} schema\n// @returns {module:engine/model/range~Range|null} Returns fixed range or null if range is valid.\nfunction tryFixingRange( range, schema ) {\n\tif ( range.isCollapsed ) {\n\t\treturn tryFixingCollapsedRange( range, schema );\n\t}\n\n\treturn tryFixingNonCollapsedRage( range, schema );\n}\n\n// Tries to fix collapsed ranges.\n//\n// * Fixes situation when a range is in a place where $text is not allowed\n//\n// @param {module:engine/model/range~Range} range Collapsed range to fix.\n// @param {module:engine/model/schema~Schema} schema\n// @returns {module:engine/model/range~Range|null} Returns fixed range or null if range is valid.\nfunction tryFixingCollapsedRange( range, schema ) {\n\tconst originalPosition = range.start;\n\n\tconst nearestSelectionRange = schema.getNearestSelectionRange( originalPosition );\n\n\t// This might be null ie when editor data is empty.\n\t// In such cases there is no need to fix the selection range.\n\tif ( !nearestSelectionRange ) {\n\t\treturn null;\n\t}\n\n\tif ( !nearestSelectionRange.isCollapsed ) {\n\t\treturn nearestSelectionRange;\n\t}\n\n\tconst fixedPosition = nearestSelectionRange.start;\n\n\t// Fixed position is the same as original - no need to return corrected range.\n\tif ( originalPosition.isEqual( fixedPosition ) ) {\n\t\treturn null;\n\t}\n\n\treturn new Range( fixedPosition );\n}\n\n// Tries to fix an expanded range.\n//\n// @param {module:engine/model/range~Range} range Expanded range to fix.\n// @param {module:engine/model/schema~Schema} schema\n// @returns {module:engine/model/range~Range|null} Returns fixed range or null if range is valid.\nfunction tryFixingNonCollapsedRage( range, schema ) {\n\tconst { start, end } = range;\n\n\tconst isTextAllowedOnStart = schema.checkChild( start, '$text' );\n\tconst isTextAllowedOnEnd = schema.checkChild( end, '$text' );\n\n\tconst startLimitElement = schema.getLimitElement( start );\n\tconst endLimitElement = schema.getLimitElement( end );\n\n\t// Ranges which both end are inside the same limit element (or root) might needs only minor fix.\n\tif ( startLimitElement === endLimitElement ) {\n\t\t// Range is valid when both position allows to place a text:\n\t\t// - <block>f[oobarba]z</block>\n\t\t// This would be \"fixed\" by a next check but as it will be the same it's better to return null so the selection stays the same.\n\t\tif ( isTextAllowedOnStart && isTextAllowedOnEnd ) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// Range that is on non-limit element (or is partially) must be fixed so it is placed inside the block around $text:\n\t\t// - [<block>foo</block>]    ->    <block>[foo]</block>\n\t\t// - [<block>foo]</block>    ->    <block>[foo]</block>\n\t\t// - <block>f[oo</block>]    ->    <block>f[oo]</block>\n\t\t// - [<block>foo</block><selectable></selectable>]    ->    <block>[foo</block><selectable></selectable>]\n\t\tif ( checkSelectionOnNonLimitElements( start, end, schema ) ) {\n\t\t\tconst isStartBeforeSelectable = start.nodeAfter && schema.isSelectable( start.nodeAfter );\n\t\t\tconst fixedStart = isStartBeforeSelectable ? null : schema.getNearestSelectionRange( start, 'forward' );\n\n\t\t\tconst isEndAfterSelectable = end.nodeBefore && schema.isSelectable( end.nodeBefore );\n\t\t\tconst fixedEnd = isEndAfterSelectable ? null : schema.getNearestSelectionRange( end, 'backward' );\n\n\t\t\t// The schema.getNearestSelectionRange might return null - if that happens use original position.\n\t\t\tconst rangeStart = fixedStart ? fixedStart.start : start;\n\t\t\tconst rangeEnd = fixedEnd ? fixedEnd.end : end;\n\n\t\t\treturn new Range( rangeStart, rangeEnd );\n\t\t}\n\t}\n\n\tconst isStartInLimit = startLimitElement && !startLimitElement.is( 'rootElement' );\n\tconst isEndInLimit = endLimitElement && !endLimitElement.is( 'rootElement' );\n\n\t// At this point we eliminated valid positions on text nodes so if one of range positions is placed inside a limit element\n\t// then the range crossed limit element boundaries and needs to be fixed.\n\tif ( isStartInLimit || isEndInLimit ) {\n\t\tconst bothInSameParent = ( start.nodeAfter && end.nodeBefore ) && start.nodeAfter.parent === end.nodeBefore.parent;\n\n\t\tconst expandStart = isStartInLimit && ( !bothInSameParent || !isSelectable( start.nodeAfter, schema ) );\n\t\tconst expandEnd = isEndInLimit && ( !bothInSameParent || !isSelectable( end.nodeBefore, schema ) );\n\n\t\t// Although we've already found limit element on start/end positions we must find the outer-most limit element.\n\t\t// as limit elements might be nested directly inside (ie table > tableRow > tableCell).\n\t\tlet fixedStart = start;\n\t\tlet fixedEnd = end;\n\n\t\tif ( expandStart ) {\n\t\t\tfixedStart = Position._createBefore( findOutermostLimitAncestor( startLimitElement, schema ) );\n\t\t}\n\n\t\tif ( expandEnd ) {\n\t\t\tfixedEnd = Position._createAfter( findOutermostLimitAncestor( endLimitElement, schema ) );\n\t\t}\n\n\t\treturn new Range( fixedStart, fixedEnd );\n\t}\n\n\t// Range was not fixed at this point so it is valid - ie it was placed around limit element already.\n\treturn null;\n}\n\n// Finds the outer-most ancestor.\n//\n// @param {module:engine/model/node~Node} startingNode\n// @param {module:engine/model/schema~Schema} schema\n// @param {String} expandToDirection Direction of expansion - either 'start' or 'end' of the range.\n// @returns {module:engine/model/node~Node}\nfunction findOutermostLimitAncestor( startingNode, schema ) {\n\tlet isLimitNode = startingNode;\n\tlet parent = isLimitNode;\n\n\t// Find outer most isLimit block as such blocks might be nested (ie. in tables).\n\twhile ( schema.isLimit( parent ) && parent.parent ) {\n\t\tisLimitNode = parent;\n\t\tparent = parent.parent;\n\t}\n\n\treturn isLimitNode;\n}\n\n// Checks whether any of range boundaries is placed around non-limit elements.\n//\n// @param {module:engine/model/position~Position} start\n// @param {module:engine/model/position~Position} end\n// @param {module:engine/model/schema~Schema} schema\n// @returns {Boolean}\nfunction checkSelectionOnNonLimitElements( start, end, schema ) {\n\tconst startIsOnBlock = ( start.nodeAfter && !schema.isLimit( start.nodeAfter ) ) || schema.checkChild( start, '$text' );\n\tconst endIsOnBlock = ( end.nodeBefore && !schema.isLimit( end.nodeBefore ) ) || schema.checkChild( end, '$text' );\n\n\t// We should fix such selection when one of those nodes needs fixing.\n\treturn startIsOnBlock || endIsOnBlock;\n}\n\n// Returns a minimal non-intersecting array of ranges.\n//\n// @param {Array.<module:engine/model/range~Range>} ranges\n// @returns {Array.<module:engine/model/range~Range>}\nfunction mergeIntersectingRanges( ranges ) {\n\tconst nonIntersectingRanges = [];\n\n\t// First range will always be fine.\n\tnonIntersectingRanges.push( ranges.shift() );\n\n\tfor ( const range of ranges ) {\n\t\tconst previousRange = nonIntersectingRanges.pop();\n\n\t\tif ( range.isEqual( previousRange ) ) {\n\t\t\t// Use only one of two identical ranges.\n\t\t\tnonIntersectingRanges.push( previousRange );\n\t\t} else if ( range.isIntersecting( previousRange ) ) {\n\t\t\t// Get the sum of two ranges.\n\t\t\tconst start = previousRange.start.isAfter( range.start ) ? range.start : previousRange.start;\n\t\t\tconst end = previousRange.end.isAfter( range.end ) ? previousRange.end : range.end;\n\n\t\t\tconst merged = new Range( start, end );\n\t\t\tnonIntersectingRanges.push( merged );\n\t\t} else {\n\t\t\tnonIntersectingRanges.push( previousRange );\n\t\t\tnonIntersectingRanges.push( range );\n\t\t}\n\t}\n\n\treturn nonIntersectingRanges;\n}\n\n// Checks if node exists and if it's a selectable.\n//\n// @param {module:engine/model/node~Node} node\n// @param {module:engine/model/schema~Schema} schema\n// @returns {Boolean}\nfunction isSelectable( node, schema ) {\n\treturn node && schema.isSelectable( node );\n}\n"]}]}