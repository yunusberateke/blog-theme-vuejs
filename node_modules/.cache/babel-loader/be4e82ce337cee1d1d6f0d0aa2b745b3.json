{"remainingRequest":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/babel-loader/lib/index.js!/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-dev-webpack-plugin/lib/translatesourceloader.js?{}!/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-engine/src/model/position.js","dependencies":[{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-engine/src/model/position.js","mtime":499162500000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-dev-webpack-plugin/lib/translatesourceloader.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-engine/src/model/position.js"],"names":["TreeWalker","compareArrays","CKEditorError","Position","root","path","stickiness","is","Array","length","slice","getPath","newOffset","parent","i","getChild","offsetToIndex","position","offset","getTextNodeAtPosition","getNodeAfterPosition","getNodeBeforePosition","maxOffset","otherPosition","result","skip","options","startPosition","treeWalker","getAncestors","includeSelf","parentName","findAncestor","cmp","diffAt","Math","min","ancestorsA","ancestorsB","shift","shifted","clone","compareWith","left","right","compare","_createAt","leftParent","isEqual","type","thisParentPath","getParentPath","posParentPath","operation","_getTransformedByInsertOperation","_getTransformedByMoveOperation","_getTransformedBySplitOperation","_getTransformedByMergeOperation","_getTransformedByInsertion","howMany","_getTransformedByMove","sourcePosition","targetPosition","movedRange","isContained","containsPosition","start","_getCombined","splitPosition","moveTargetPosition","graveyardPosition","insertionPosition","pos","isBefore","_getTransformedByDeletion","deletionPosition","deletePosition","transformed","insertPosition","isMoved","getShiftedBy","source","target","combined","toJSON","from","constructor","itemOrPosition","node","_createBefore","_createAfter","push","item","endOffset","startOffset","json","doc","graveyard","getRoot","rootName","positionParent","textNode"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/position\n */\n\nimport TreeWalker from './treewalker';\nimport compareArrays from '@ckeditor/ckeditor5-utils/src/comparearrays';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n// To check if component is loaded more than once.\nimport '@ckeditor/ckeditor5-utils/src/version';\n\n/**\n * Represents a position in the model tree.\n *\n * A position is represented by its {@link module:engine/model/position~Position#root} and\n * a {@link module:engine/model/position~Position#path} in that root.\n *\n * You can create position instances via its constructor or the `createPosition*()` factory methods of\n * {@link module:engine/model/model~Model} and {@link module:engine/model/writer~Writer}.\n *\n * **Note:** Position is based on offsets, not indexes. This means that a position between two text nodes\n * `foo` and `bar` has offset `3`, not `1`. See {@link module:engine/model/position~Position#path} for more information.\n *\n * Since a position in the model is represented by a {@link module:engine/model/position~Position#root position root} and\n * {@link module:engine/model/position~Position#path position path} it is possible to create positions placed in non-existing places.\n * This requirement is important for operational transformation algorithms.\n *\n * Also, {@link module:engine/model/operation/operation~Operation operations}\n * kept in the {@link module:engine/model/document~Document#history document history}\n * are storing positions (and ranges) which were correct when those operations were applied, but may not be correct\n * after the document has changed.\n *\n * When changes are applied to the model, it may also happen that {@link module:engine/model/position~Position#parent position parent}\n * will change even if position path has not changed. Keep in mind, that if a position leads to non-existing element,\n * {@link module:engine/model/position~Position#parent} and some other properties and methods will throw errors.\n *\n * In most cases, position with wrong path is caused by an error in code, but it is sometimes needed, as described above.\n */\nexport default class Position {\n\t/**\n\t * Creates a position.\n\t *\n\t * @param {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment} root Root of the position.\n\t * @param {Array.<Number>} path Position path. See {@link module:engine/model/position~Position#path}.\n\t * @param {module:engine/model/position~PositionStickiness} [stickiness='toNone'] Position stickiness.\n\t * See {@link module:engine/model/position~PositionStickiness}.\n\t */\n\tconstructor( root, path, stickiness = 'toNone' ) {\n\t\tif ( !root.is( 'element' ) && !root.is( 'documentFragment' ) ) {\n\t\t\t/**\n\t\t\t * Position root is invalid.\n\t\t\t *\n\t\t\t * Positions can only be anchored in elements or document fragments.\n\t\t\t *\n\t\t\t * @error model-position-root-invalid\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'model-position-root-invalid',\n\t\t\t\troot\n\t\t\t);\n\t\t}\n\n\t\tif ( !( path instanceof Array ) || path.length === 0 ) {\n\t\t\t/**\n\t\t\t * Position path must be an array with at least one item.\n\t\t\t *\n\t\t\t * @error model-position-path-incorrect-format\n\t\t\t * @param path\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'model-position-path-incorrect-format',\n\t\t\t\troot,\n\t\t\t\t{ path }\n\t\t\t);\n\t\t}\n\n\t\t// Normalize the root and path when element (not root) is passed.\n\t\tif ( root.is( 'rootElement' ) ) {\n\t\t\tpath = path.slice();\n\t\t} else {\n\t\t\tpath = [ ...root.getPath(), ...path ];\n\t\t\troot = root.root;\n\t\t}\n\n\t\t/**\n\t\t * Root of the position path.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment}\n\t\t * module:engine/model/position~Position#root\n\t\t */\n\t\tthis.root = root;\n\n\t\t/**\n\t\t * Position of the node in the tree. **Path contains offsets, not indexes.**\n\t\t *\n\t\t * Position can be placed before, after or in a {@link module:engine/model/node~Node node} if that node has\n\t\t * {@link module:engine/model/node~Node#offsetSize} greater than `1`. Items in position path are\n\t\t * {@link module:engine/model/node~Node#startOffset starting offsets} of position ancestors, starting from direct root children,\n\t\t * down to the position offset in it's parent.\n\t\t *\n\t\t *\t\t ROOT\n\t\t *\t\t  |- P            before: [ 0 ]         after: [ 1 ]\n\t\t *\t\t  |- UL           before: [ 1 ]         after: [ 2 ]\n\t\t *\t\t     |- LI        before: [ 1, 0 ]      after: [ 1, 1 ]\n\t\t *\t\t     |  |- foo    before: [ 1, 0, 0 ]   after: [ 1, 0, 3 ]\n\t\t *\t\t     |- LI        before: [ 1, 1 ]      after: [ 1, 2 ]\n\t\t *\t\t        |- bar    before: [ 1, 1, 0 ]   after: [ 1, 1, 3 ]\n\t\t *\n\t\t * `foo` and `bar` are representing {@link module:engine/model/text~Text text nodes}. Since text nodes has offset size\n\t\t * greater than `1` you can place position offset between their start and end:\n\t\t *\n\t\t *\t\t ROOT\n\t\t *\t\t  |- P\n\t\t *\t\t  |- UL\n\t\t *\t\t     |- LI\n\t\t *\t\t     |  |- f^o|o  ^ has path: [ 1, 0, 1 ]   | has path: [ 1, 0, 2 ]\n\t\t *\t\t     |- LI\n\t\t *\t\t        |- b^a|r  ^ has path: [ 1, 1, 1 ]   | has path: [ 1, 1, 2 ]\n\t\t *\n\t\t * @readonly\n\t\t * @member {Array.<Number>} module:engine/model/position~Position#path\n\t\t */\n\t\tthis.path = path;\n\n\t\t/**\n\t\t * Position stickiness. See {@link module:engine/model/position~PositionStickiness}.\n\t\t *\n\t\t * @member {module:engine/model/position~PositionStickiness} module:engine/model/position~Position#stickiness\n\t\t */\n\t\tthis.stickiness = stickiness;\n\t}\n\n\t/**\n\t * Offset at which this position is located in its {@link module:engine/model/position~Position#parent parent}. It is equal\n\t * to the last item in position {@link module:engine/model/position~Position#path path}.\n\t *\n\t * @type {Number}\n\t */\n\tget offset() {\n\t\treturn this.path[ this.path.length - 1 ];\n\t}\n\n\tset offset( newOffset ) {\n\t\tthis.path[ this.path.length - 1 ] = newOffset;\n\t}\n\n\t/**\n\t * Parent element of this position.\n\t *\n\t * Keep in mind that `parent` value is calculated when the property is accessed.\n\t * If {@link module:engine/model/position~Position#path position path}\n\t * leads to a non-existing element, `parent` property will throw error.\n\t *\n\t * Also it is a good idea to cache `parent` property if it is used frequently in an algorithm (i.e. in a long loop).\n\t *\n\t * @readonly\n\t * @type {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment}\n\t */\n\tget parent() {\n\t\tlet parent = this.root;\n\n\t\tfor ( let i = 0; i < this.path.length - 1; i++ ) {\n\t\t\tparent = parent.getChild( parent.offsetToIndex( this.path[ i ] ) );\n\n\t\t\tif ( !parent ) {\n\t\t\t\t/**\n\t\t\t\t * The position's path is incorrect. This means that a position does not point to\n\t\t\t\t * a correct place in the tree and hence, some of its methods and getters cannot work correctly.\n\t\t\t\t *\n\t\t\t\t * **Note**: Unlike DOM and view positions, in the model, the\n\t\t\t\t * {@link module:engine/model/position~Position#parent position's parent} is always an element or a document fragment.\n\t\t\t\t * The last offset in the {@link module:engine/model/position~Position#path position's path} is the point in this element\n\t\t\t\t * where this position points.\n\t\t\t\t *\n\t\t\t\t * Read more about model positions and offsets in\n\t\t\t\t * the {@glink framework/guides/architecture/editing-engine#indexes-and-offsets Editing engine architecture guide}.\n\t\t\t\t *\n\t\t\t\t * @error model-position-path-incorrect\n\t\t\t\t * @param {module:engine/model/position~Position} position The incorrect position.\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError( 'model-position-path-incorrect', this, { position: this } );\n\t\t\t}\n\t\t}\n\n\t\tif ( parent.is( '$text' ) ) {\n\t\t\tthrow new CKEditorError( 'model-position-path-incorrect', this, { position: this } );\n\t\t}\n\n\t\treturn parent;\n\t}\n\n\t/**\n\t * Position {@link module:engine/model/position~Position#offset offset} converted to an index in position's parent node. It is\n\t * equal to the {@link module:engine/model/node~Node#index index} of a node after this position. If position is placed\n\t * in text node, position index is equal to the index of that text node.\n\t *\n\t * @readonly\n\t * @type {Number}\n\t */\n\tget index() {\n\t\treturn this.parent.offsetToIndex( this.offset );\n\t}\n\n\t/**\n\t * Returns {@link module:engine/model/text~Text text node} instance in which this position is placed or `null` if this\n\t * position is not in a text node.\n\t *\n\t * @readonly\n\t * @type {module:engine/model/text~Text|null}\n\t */\n\tget textNode() {\n\t\treturn getTextNodeAtPosition( this, this.parent );\n\t}\n\n\t/**\n\t * Node directly after this position or `null` if this position is in text node.\n\t *\n\t * @readonly\n\t * @type {module:engine/model/node~Node|null}\n\t */\n\tget nodeAfter() {\n\t\t// Cache the parent and reuse for performance reasons. See #6579 and #6582.\n\t\tconst parent = this.parent;\n\n\t\treturn getNodeAfterPosition( this, parent, getTextNodeAtPosition( this, parent ) );\n\t}\n\n\t/**\n\t * Node directly before this position or `null` if this position is in text node.\n\t *\n\t * @readonly\n\t * @type {module:engine/model/node~Node|null}\n\t */\n\tget nodeBefore() {\n\t\t// Cache the parent and reuse for performance reasons. See #6579 and #6582.\n\t\tconst parent = this.parent;\n\n\t\treturn getNodeBeforePosition( this, parent, getTextNodeAtPosition( this, parent ) );\n\t}\n\n\t/**\n\t * Is `true` if position is at the beginning of its {@link module:engine/model/position~Position#parent parent}, `false` otherwise.\n\t *\n\t * @readonly\n\t * @type {Boolean}\n\t */\n\tget isAtStart() {\n\t\treturn this.offset === 0;\n\t}\n\n\t/**\n\t * Is `true` if position is at the end of its {@link module:engine/model/position~Position#parent parent}, `false` otherwise.\n\t *\n\t * @readonly\n\t * @type {Boolean}\n\t */\n\tget isAtEnd() {\n\t\treturn this.offset == this.parent.maxOffset;\n\t}\n\n\t/**\n\t * Checks whether this position is before or after given position.\n\t *\n\t * This method is safe to use it on non-existing positions (for example during operational transformation).\n\t *\n\t * @param {module:engine/model/position~Position} otherPosition Position to compare with.\n\t * @returns {module:engine/model/position~PositionRelation}\n\t */\n\tcompareWith( otherPosition ) {\n\t\tif ( this.root != otherPosition.root ) {\n\t\t\treturn 'different';\n\t\t}\n\n\t\tconst result = compareArrays( this.path, otherPosition.path );\n\n\t\tswitch ( result ) {\n\t\t\tcase 'same':\n\t\t\t\treturn 'same';\n\n\t\t\tcase 'prefix':\n\t\t\t\treturn 'before';\n\n\t\t\tcase 'extension':\n\t\t\t\treturn 'after';\n\n\t\t\tdefault:\n\t\t\t\treturn this.path[ result ] < otherPosition.path[ result ] ? 'before' : 'after';\n\t\t}\n\t}\n\n\t/**\n\t * Gets the farthest position which matches the callback using\n\t * {@link module:engine/model/treewalker~TreeWalker TreeWalker}.\n\t *\n\t * For example:\n\t *\n\t * \t\tgetLastMatchingPosition( value => value.type == 'text' );\n\t * \t\t// <paragraph>[]foo</paragraph> -> <paragraph>foo[]</paragraph>\n\t *\n\t * \t\tgetLastMatchingPosition( value => value.type == 'text', { direction: 'backward' } );\n\t * \t\t// <paragraph>foo[]</paragraph> -> <paragraph>[]foo</paragraph>\n\t *\n\t * \t\tgetLastMatchingPosition( value => false );\n\t * \t\t// Do not move the position.\n\t *\n\t * @param {Function} skip Callback function. Gets {@link module:engine/model/treewalker~TreeWalkerValue} and should\n\t * return `true` if the value should be skipped or `false` if not.\n\t * @param {Object} options Object with configuration options. See {@link module:engine/model/treewalker~TreeWalker}.\n\t *\n\t * @returns {module:engine/model/position~Position} The position after the last item which matches the `skip` callback test.\n\t */\n\tgetLastMatchingPosition( skip, options = {} ) {\n\t\toptions.startPosition = this;\n\n\t\tconst treeWalker = new TreeWalker( options );\n\t\ttreeWalker.skip( skip );\n\n\t\treturn treeWalker.position;\n\t}\n\n\t/**\n\t * Returns a path to this position's parent. Parent path is equal to position {@link module:engine/model/position~Position#path path}\n\t * but without the last item.\n\t *\n\t * This method is safe to use it on non-existing positions (for example during operational transformation).\n\t *\n\t * @returns {Array.<Number>} Path to the parent.\n\t */\n\tgetParentPath() {\n\t\treturn this.path.slice( 0, -1 );\n\t}\n\n\t/**\n\t * Returns ancestors array of this position, that is this position's parent and its ancestors.\n\t *\n\t * @returns {Array.<module:engine/model/item~Item>} Array with ancestors.\n\t */\n\tgetAncestors() {\n\t\tconst parent = this.parent;\n\n\t\tif ( parent.is( 'documentFragment' ) ) {\n\t\t\treturn [ parent ];\n\t\t} else {\n\t\t\treturn parent.getAncestors( { includeSelf: true } );\n\t\t}\n\t}\n\n\t/**\n\t * Returns the parent element of the given name. Returns null if the position is not inside the desired parent.\n\t *\n\t * @param {String} parentName The name of the parent element to find.\n\t * @returns {module:engine/model/element~Element|null}\n\t */\n\tfindAncestor( parentName ) {\n\t\tconst parent = this.parent;\n\n\t\tif ( parent.is( 'element' ) ) {\n\t\t\treturn parent.findAncestor( parentName, { includeSelf: true } );\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Returns the slice of two position {@link #path paths} which is identical. The {@link #root roots}\n\t * of these two paths must be identical.\n\t *\n\t * This method is safe to use it on non-existing positions (for example during operational transformation).\n\t *\n\t * @param {module:engine/model/position~Position} position The second position.\n\t * @returns {Array.<Number>} The common path.\n\t */\n\tgetCommonPath( position ) {\n\t\tif ( this.root != position.root ) {\n\t\t\treturn [];\n\t\t}\n\n\t\t// We find on which tree-level start and end have the lowest common ancestor\n\t\tconst cmp = compareArrays( this.path, position.path );\n\t\t// If comparison returned string it means that arrays are same.\n\t\tconst diffAt = ( typeof cmp == 'string' ) ? Math.min( this.path.length, position.path.length ) : cmp;\n\n\t\treturn this.path.slice( 0, diffAt );\n\t}\n\n\t/**\n\t * Returns an {@link module:engine/model/element~Element} or {@link module:engine/model/documentfragment~DocumentFragment}\n\t * which is a common ancestor of both positions. The {@link #root roots} of these two positions must be identical.\n\t *\n\t * @param {module:engine/model/position~Position} position The second position.\n\t * @returns {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment|null}\n\t */\n\tgetCommonAncestor( position ) {\n\t\tconst ancestorsA = this.getAncestors();\n\t\tconst ancestorsB = position.getAncestors();\n\n\t\tlet i = 0;\n\n\t\twhile ( ancestorsA[ i ] == ancestorsB[ i ] && ancestorsA[ i ] ) {\n\t\t\ti++;\n\t\t}\n\n\t\treturn i === 0 ? null : ancestorsA[ i - 1 ];\n\t}\n\n\t/**\n\t * Returns a new instance of `Position`, that has same {@link #parent parent} but it's offset\n\t * is shifted by `shift` value (can be a negative value).\n\t *\n\t * This method is safe to use it on non-existing positions (for example during operational transformation).\n\t *\n\t * @param {Number} shift Offset shift. Can be a negative value.\n\t * @returns {module:engine/model/position~Position} Shifted position.\n\t */\n\tgetShiftedBy( shift ) {\n\t\tconst shifted = this.clone();\n\n\t\tconst offset = shifted.offset + shift;\n\t\tshifted.offset = offset < 0 ? 0 : offset;\n\n\t\treturn shifted;\n\t}\n\n\t/**\n\t * Checks whether this position is after given position.\n\t *\n\t * This method is safe to use it on non-existing positions (for example during operational transformation).\n\t *\n\t * @see module:engine/model/position~Position#isBefore\n\t * @param {module:engine/model/position~Position} otherPosition Position to compare with.\n\t * @returns {Boolean} True if this position is after given position.\n\t */\n\tisAfter( otherPosition ) {\n\t\treturn this.compareWith( otherPosition ) == 'after';\n\t}\n\n\t/**\n\t * Checks whether this position is before given position.\n\t *\n\t * **Note:** watch out when using negation of the value returned by this method, because the negation will also\n\t * be `true` if positions are in different roots and you might not expect this. You should probably use\n\t * `a.isAfter( b ) || a.isEqual( b )` or `!a.isBefore( p ) && a.root == b.root` in most scenarios. If your\n\t * condition uses multiple `isAfter` and `isBefore` checks, build them so they do not use negated values, i.e.:\n\t *\n\t *\t\tif ( a.isBefore( b ) && c.isAfter( d ) ) {\n\t *\t\t\t// do A.\n\t *\t\t} else {\n\t *\t\t\t// do B.\n\t *\t\t}\n\t *\n\t * or, if you have only one if-branch:\n\t *\n\t *\t\tif ( !( a.isBefore( b ) && c.isAfter( d ) ) {\n\t *\t\t\t// do B.\n\t *\t\t}\n\t *\n\t * rather than:\n\t *\n\t *\t\tif ( !a.isBefore( b ) || && !c.isAfter( d ) ) {\n\t *\t\t\t// do B.\n\t *\t\t} else {\n\t *\t\t\t// do A.\n\t *\t\t}\n\t *\n\t * This method is safe to use it on non-existing positions (for example during operational transformation).\n\t *\n\t * @param {module:engine/model/position~Position} otherPosition Position to compare with.\n\t * @returns {Boolean} True if this position is before given position.\n\t */\n\tisBefore( otherPosition ) {\n\t\treturn this.compareWith( otherPosition ) == 'before';\n\t}\n\n\t/**\n\t * Checks whether this position is equal to given position.\n\t *\n\t * This method is safe to use it on non-existing positions (for example during operational transformation).\n\t *\n\t * @param {module:engine/model/position~Position} otherPosition Position to compare with.\n\t * @returns {Boolean} True if positions are same.\n\t */\n\tisEqual( otherPosition ) {\n\t\treturn this.compareWith( otherPosition ) == 'same';\n\t}\n\n\t/**\n\t * Checks whether this position is touching given position. Positions touch when there are no text nodes\n\t * or empty nodes in a range between them. Technically, those positions are not equal but in many cases\n\t * they are very similar or even indistinguishable.\n\t *\n\t * @param {module:engine/model/position~Position} otherPosition Position to compare with.\n\t * @returns {Boolean} True if positions touch.\n\t */\n\tisTouching( otherPosition ) {\n\t\tlet left = null;\n\t\tlet right = null;\n\t\tconst compare = this.compareWith( otherPosition );\n\n\t\tswitch ( compare ) {\n\t\t\tcase 'same':\n\t\t\t\treturn true;\n\n\t\t\tcase 'before':\n\t\t\t\tleft = Position._createAt( this );\n\t\t\t\tright = Position._createAt( otherPosition );\n\t\t\t\tbreak;\n\n\t\t\tcase 'after':\n\t\t\t\tleft = Position._createAt( otherPosition );\n\t\t\t\tright = Position._createAt( this );\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\treturn false;\n\t\t}\n\n\t\t// Cached for optimization purposes.\n\t\tlet leftParent = left.parent;\n\n\t\twhile ( left.path.length + right.path.length ) {\n\t\t\tif ( left.isEqual( right ) ) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tif ( left.path.length > right.path.length ) {\n\t\t\t\tif ( left.offset !== leftParent.maxOffset ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tleft.path = left.path.slice( 0, -1 );\n\t\t\t\tleftParent = leftParent.parent;\n\t\t\t\tleft.offset++;\n\t\t\t} else {\n\t\t\t\tif ( right.offset !== 0 ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tright.path = right.path.slice( 0, -1 );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Checks whether this object is of the given.\n\t *\n\t *\t\tposition.is( 'position' ); // -> true\n\t *\t\tposition.is( 'model:position' ); // -> true\n\t *\n\t *\t\tposition.is( 'view:position' ); // -> false\n\t *\t\tposition.is( 'documentSelection' ); // -> false\n\t *\n\t * {@link module:engine/model/node~Node#is Check the entire list of model objects} which implement the `is()` method.\n\t *\n\t * @param {String} type\n\t * @returns {Boolean}\n\t */\n\tis( type ) {\n\t\treturn type === 'position' || type === 'model:position';\n\t}\n\n\t/**\n\t * Checks if two positions are in the same parent.\n\t *\n\t * This method is safe to use it on non-existing positions (for example during operational transformation).\n\t *\n\t * @param {module:engine/model/position~Position} position Position to compare with.\n\t * @returns {Boolean} `true` if positions have the same parent, `false` otherwise.\n\t */\n\thasSameParentAs( position ) {\n\t\tif ( this.root !== position.root ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst thisParentPath = this.getParentPath();\n\t\tconst posParentPath = position.getParentPath();\n\n\t\treturn compareArrays( thisParentPath, posParentPath ) == 'same';\n\t}\n\n\t/**\n\t * Returns a copy of this position that is transformed by given `operation`.\n\t *\n\t * The new position's parameters are updated accordingly to the effect of the `operation`.\n\t *\n\t * For example, if `n` nodes are inserted before the position, the returned position {@link ~Position#offset} will be\n\t * increased by `n`. If the position was in a merged element, it will be accordingly moved to the new element, etc.\n\t *\n\t * This method is safe to use it on non-existing positions (for example during operational transformation).\n\t *\n\t * @param {module:engine/model/operation/operation~Operation} operation Operation to transform by.\n\t * @returns {module:engine/model/position~Position} Transformed position.\n\t */\n\tgetTransformedByOperation( operation ) {\n\t\tlet result;\n\n\t\tswitch ( operation.type ) {\n\t\t\tcase 'insert':\n\t\t\t\tresult = this._getTransformedByInsertOperation( operation );\n\t\t\t\tbreak;\n\t\t\tcase 'move':\n\t\t\tcase 'remove':\n\t\t\tcase 'reinsert':\n\t\t\t\tresult = this._getTransformedByMoveOperation( operation );\n\t\t\t\tbreak;\n\t\t\tcase 'split':\n\t\t\t\tresult = this._getTransformedBySplitOperation( operation );\n\t\t\t\tbreak;\n\t\t\tcase 'merge':\n\t\t\t\tresult = this._getTransformedByMergeOperation( operation );\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tresult = Position._createAt( this );\n\t\t\t\tbreak;\n\t\t}\n\n\t\treturn result;\n\t}\n\n\t/**\n\t * Returns a copy of this position transformed by an insert operation.\n\t *\n\t * @protected\n\t * @param {module:engine/model/operation/insertoperation~InsertOperation} operation\n\t * @returns {module:engine/model/position~Position}\n\t */\n\t_getTransformedByInsertOperation( operation ) {\n\t\treturn this._getTransformedByInsertion( operation.position, operation.howMany );\n\t}\n\n\t/**\n\t * Returns a copy of this position transformed by a move operation.\n\t *\n\t * @protected\n\t * @param {module:engine/model/operation/moveoperation~MoveOperation} operation\n\t * @returns {module:engine/model/position~Position}\n\t */\n\t_getTransformedByMoveOperation( operation ) {\n\t\treturn this._getTransformedByMove( operation.sourcePosition, operation.targetPosition, operation.howMany );\n\t}\n\n\t/**\n\t * Returns a copy of this position transformed by a split operation.\n\t *\n\t * @protected\n\t * @param {module:engine/model/operation/splitoperation~SplitOperation} operation\n\t * @returns {module:engine/model/position~Position}\n\t */\n\t_getTransformedBySplitOperation( operation ) {\n\t\tconst movedRange = operation.movedRange;\n\n\t\tconst isContained = movedRange.containsPosition( this ) ||\n\t\t\t( movedRange.start.isEqual( this ) && this.stickiness == 'toNext' );\n\n\t\tif ( isContained ) {\n\t\t\treturn this._getCombined( operation.splitPosition, operation.moveTargetPosition );\n\t\t} else {\n\t\t\tif ( operation.graveyardPosition ) {\n\t\t\t\treturn this._getTransformedByMove( operation.graveyardPosition, operation.insertionPosition, 1 );\n\t\t\t} else {\n\t\t\t\treturn this._getTransformedByInsertion( operation.insertionPosition, 1 );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Returns a copy of this position transformed by merge operation.\n\t *\n\t * @protected\n\t * @param {module:engine/model/operation/mergeoperation~MergeOperation} operation\n\t * @returns {module:engine/model/position~Position}\n\t */\n\t_getTransformedByMergeOperation( operation ) {\n\t\tconst movedRange = operation.movedRange;\n\t\tconst isContained = movedRange.containsPosition( this ) || movedRange.start.isEqual( this );\n\n\t\tlet pos;\n\n\t\tif ( isContained ) {\n\t\t\tpos = this._getCombined( operation.sourcePosition, operation.targetPosition );\n\n\t\t\tif ( operation.sourcePosition.isBefore( operation.targetPosition ) ) {\n\t\t\t\t// Above happens during OT when the merged element is moved before the merged-to element.\n\t\t\t\tpos = pos._getTransformedByDeletion( operation.deletionPosition, 1 );\n\t\t\t}\n\t\t} else if ( this.isEqual( operation.deletionPosition ) ) {\n\t\t\tpos = Position._createAt( operation.deletionPosition );\n\t\t} else {\n\t\t\tpos = this._getTransformedByMove( operation.deletionPosition, operation.graveyardPosition, 1 );\n\t\t}\n\n\t\treturn pos;\n\t}\n\n\t/**\n\t * Returns a copy of this position that is updated by removing `howMany` nodes starting from `deletePosition`.\n\t * It may happen that this position is in a removed node. If that is the case, `null` is returned instead.\n\t *\n\t * @protected\n\t * @param {module:engine/model/position~Position} deletePosition Position before the first removed node.\n\t * @param {Number} howMany How many nodes are removed.\n\t * @returns {module:engine/model/position~Position|null} Transformed position or `null`.\n\t */\n\t_getTransformedByDeletion( deletePosition, howMany ) {\n\t\tconst transformed = Position._createAt( this );\n\n\t\t// This position can't be affected if deletion was in a different root.\n\t\tif ( this.root != deletePosition.root ) {\n\t\t\treturn transformed;\n\t\t}\n\n\t\tif ( compareArrays( deletePosition.getParentPath(), this.getParentPath() ) == 'same' ) {\n\t\t\t// If nodes are removed from the node that is pointed by this position...\n\t\t\tif ( deletePosition.offset < this.offset ) {\n\t\t\t\t// And are removed from before an offset of that position...\n\t\t\t\tif ( deletePosition.offset + howMany > this.offset ) {\n\t\t\t\t\t// Position is in removed range, it's no longer in the tree.\n\t\t\t\t\treturn null;\n\t\t\t\t} else {\n\t\t\t\t\t// Decrement the offset accordingly.\n\t\t\t\t\ttransformed.offset -= howMany;\n\t\t\t\t}\n\t\t\t}\n\t\t} else if ( compareArrays( deletePosition.getParentPath(), this.getParentPath() ) == 'prefix' ) {\n\t\t\t// If nodes are removed from a node that is on a path to this position...\n\t\t\tconst i = deletePosition.path.length - 1;\n\n\t\t\tif ( deletePosition.offset <= this.path[ i ] ) {\n\t\t\t\t// And are removed from before next node of that path...\n\t\t\t\tif ( deletePosition.offset + howMany > this.path[ i ] ) {\n\t\t\t\t\t// If the next node of that path is removed return null\n\t\t\t\t\t// because the node containing this position got removed.\n\t\t\t\t\treturn null;\n\t\t\t\t} else {\n\t\t\t\t\t// Otherwise, decrement index on that path.\n\t\t\t\t\ttransformed.path[ i ] -= howMany;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn transformed;\n\t}\n\n\t/**\n\t * Returns a copy of this position that is updated by inserting `howMany` nodes at `insertPosition`.\n\t *\n\t * @protected\n\t * @param {module:engine/model/position~Position} insertPosition Position where nodes are inserted.\n\t * @param {Number} howMany How many nodes are inserted.\n\t * @returns {module:engine/model/position~Position} Transformed position.\n\t */\n\t_getTransformedByInsertion( insertPosition, howMany ) {\n\t\tconst transformed = Position._createAt( this );\n\n\t\t// This position can't be affected if insertion was in a different root.\n\t\tif ( this.root != insertPosition.root ) {\n\t\t\treturn transformed;\n\t\t}\n\n\t\tif ( compareArrays( insertPosition.getParentPath(), this.getParentPath() ) == 'same' ) {\n\t\t\t// If nodes are inserted in the node that is pointed by this position...\n\t\t\tif ( insertPosition.offset < this.offset || ( insertPosition.offset == this.offset && this.stickiness != 'toPrevious' ) ) {\n\t\t\t\t// And are inserted before an offset of that position...\n\t\t\t\t// \"Push\" this positions offset.\n\t\t\t\ttransformed.offset += howMany;\n\t\t\t}\n\t\t} else if ( compareArrays( insertPosition.getParentPath(), this.getParentPath() ) == 'prefix' ) {\n\t\t\t// If nodes are inserted in a node that is on a path to this position...\n\t\t\tconst i = insertPosition.path.length - 1;\n\n\t\t\tif ( insertPosition.offset <= this.path[ i ] ) {\n\t\t\t\t// And are inserted before next node of that path...\n\t\t\t\t// \"Push\" the index on that path.\n\t\t\t\ttransformed.path[ i ] += howMany;\n\t\t\t}\n\t\t}\n\n\t\treturn transformed;\n\t}\n\n\t/**\n\t * Returns a copy of this position that is updated by moving `howMany` nodes from `sourcePosition` to `targetPosition`.\n\t *\n\t * @protected\n\t * @param {module:engine/model/position~Position} sourcePosition Position before the first element to move.\n\t * @param {module:engine/model/position~Position} targetPosition Position where moved elements will be inserted.\n\t * @param {Number} howMany How many consecutive nodes to move, starting from `sourcePosition`.\n\t * @returns {module:engine/model/position~Position} Transformed position.\n\t */\n\t_getTransformedByMove( sourcePosition, targetPosition, howMany ) {\n\t\t// Update target position, as it could be affected by nodes removal.\n\t\ttargetPosition = targetPosition._getTransformedByDeletion( sourcePosition, howMany );\n\n\t\tif ( sourcePosition.isEqual( targetPosition ) ) {\n\t\t\t// If `targetPosition` is equal to `sourcePosition` this isn't really any move. Just return position as it is.\n\t\t\treturn Position._createAt( this );\n\t\t}\n\n\t\t// Moving a range removes nodes from their original position. We acknowledge this by proper transformation.\n\t\tconst transformed = this._getTransformedByDeletion( sourcePosition, howMany );\n\n\t\tconst isMoved = transformed === null ||\n\t\t\t( sourcePosition.isEqual( this ) && this.stickiness == 'toNext' ) ||\n\t\t\t( sourcePosition.getShiftedBy( howMany ).isEqual( this ) && this.stickiness == 'toPrevious' );\n\n\t\tif ( isMoved ) {\n\t\t\t// This position is inside moved range (or sticks to it).\n\t\t\t// In this case, we calculate a combination of this position, move source position and target position.\n\t\t\treturn this._getCombined( sourcePosition, targetPosition );\n\t\t} else {\n\t\t\t// This position is not inside a removed range.\n\t\t\t//\n\t\t\t// In next step, we simply reflect inserting `howMany` nodes, which might further affect the position.\n\t\t\treturn transformed._getTransformedByInsertion( targetPosition, howMany );\n\t\t}\n\t}\n\n\t/**\n\t * Returns a new position that is a combination of this position and given positions.\n\t *\n\t * The combined position is a copy of this position transformed by moving a range starting at `source` position\n\t * to the `target` position. It is expected that this position is inside the moved range.\n\t *\n\t * Example:\n\t *\n\t *\t\tlet original = model.createPositionFromPath( root, [ 2, 3, 1 ] );\n\t *\t\tlet source = model.createPositionFromPath( root, [ 2, 2 ] );\n\t *\t\tlet target = model.createPositionFromPath( otherRoot, [ 1, 1, 3 ] );\n\t *\t\toriginal._getCombined( source, target ); // path is [ 1, 1, 4, 1 ], root is `otherRoot`\n\t *\n\t * Explanation:\n\t *\n\t * We have a position `[ 2, 3, 1 ]` and move some nodes from `[ 2, 2 ]` to `[ 1, 1, 3 ]`. The original position\n\t * was inside moved nodes and now should point to the new place. The moved nodes will be after\n\t * positions `[ 1, 1, 3 ]`, `[ 1, 1, 4 ]`, `[ 1, 1, 5 ]`. Since our position was in the second moved node,\n\t * the transformed position will be in a sub-tree of a node at `[ 1, 1, 4 ]`. Looking at original path, we\n\t * took care of `[ 2, 3 ]` part of it. Now we have to add the rest of the original path to the transformed path.\n\t * Finally, the transformed position will point to `[ 1, 1, 4, 1 ]`.\n\t *\n\t * @protected\n\t * @param {module:engine/model/position~Position} source Beginning of the moved range.\n\t * @param {module:engine/model/position~Position} target Position where the range is moved.\n\t * @returns {module:engine/model/position~Position} Combined position.\n\t */\n\t_getCombined( source, target ) {\n\t\tconst i = source.path.length - 1;\n\n\t\t// The first part of a path to combined position is a path to the place where nodes were moved.\n\t\tconst combined = Position._createAt( target );\n\t\tcombined.stickiness = this.stickiness;\n\n\t\t// Then we have to update the rest of the path.\n\n\t\t// Fix the offset because this position might be after `from` position and we have to reflect that.\n\t\tcombined.offset = combined.offset + this.path[ i ] - source.offset;\n\n\t\t// Then, add the rest of the path.\n\t\t// If this position is at the same level as `from` position nothing will get added.\n\t\tcombined.path = [ ...combined.path, ...this.path.slice( i + 1 ) ];\n\n\t\treturn combined;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\ttoJSON() {\n\t\treturn {\n\t\t\troot: this.root.toJSON(),\n\t\t\tpath: Array.from( this.path ),\n\t\t\tstickiness: this.stickiness\n\t\t};\n\t}\n\n\t/**\n\t * Returns a new position that is equal to current position.\n\t *\n\t * @returns {module:engine/model/position~Position}\n\t */\n\tclone() {\n\t\treturn new this.constructor( this.root, this.path, this.stickiness );\n\t}\n\n\t/**\n\t * Creates position at the given location. The location can be specified as:\n\t *\n\t * * a {@link module:engine/model/position~Position position},\n\t * * parent element and offset (offset defaults to `0`),\n\t * * parent element and `'end'` (sets position at the end of that element),\n\t * * {@link module:engine/model/item~Item model item} and `'before'` or `'after'` (sets position before or after given model item).\n\t *\n\t * This method is a shortcut to other factory methods such as:\n\t *\n\t * * {@link module:engine/model/position~Position._createBefore},\n\t * * {@link module:engine/model/position~Position._createAfter}.\n\t *\n\t * @param {module:engine/model/item~Item|module:engine/model/position~Position} itemOrPosition\n\t * @param {Number|'end'|'before'|'after'} [offset] Offset or one of the flags. Used only when the\n\t * first parameter is a {@link module:engine/model/item~Item model item}.\n\t * @param {module:engine/model/position~PositionStickiness} [stickiness='toNone'] Position stickiness. Used only when the\n\t * first parameter is a {@link module:engine/model/item~Item model item}.\n\t * @protected\n\t */\n\tstatic _createAt( itemOrPosition, offset, stickiness = 'toNone' ) {\n\t\tif ( itemOrPosition instanceof Position ) {\n\t\t\treturn new Position( itemOrPosition.root, itemOrPosition.path, itemOrPosition.stickiness );\n\t\t} else {\n\t\t\tconst node = itemOrPosition;\n\n\t\t\tif ( offset == 'end' ) {\n\t\t\t\toffset = node.maxOffset;\n\t\t\t} else if ( offset == 'before' ) {\n\t\t\t\treturn this._createBefore( node, stickiness );\n\t\t\t} else if ( offset == 'after' ) {\n\t\t\t\treturn this._createAfter( node, stickiness );\n\t\t\t} else if ( offset !== 0 && !offset ) {\n\t\t\t\t/**\n\t\t\t\t * {@link module:engine/model/model~Model#createPositionAt `Model#createPositionAt()`}\n\t\t\t\t * requires the offset to be specified when the first parameter is a model item.\n\t\t\t\t *\n\t\t\t\t * @error model-createpositionat-offset-required\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError( 'model-createpositionat-offset-required', [ this, itemOrPosition ] );\n\t\t\t}\n\n\t\t\tif ( !node.is( 'element' ) && !node.is( 'documentFragment' ) ) {\n\t\t\t\t/**\n\t\t\t\t * Position parent have to be a model element or model document fragment.\n\t\t\t\t *\n\t\t\t\t * @error model-position-parent-incorrect\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError(\n\t\t\t\t\t'model-position-parent-incorrect',\n\t\t\t\t\t[ this, itemOrPosition ]\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tconst path = node.getPath();\n\n\t\t\tpath.push( offset );\n\n\t\t\treturn new this( node.root, path, stickiness );\n\t\t}\n\t}\n\n\t/**\n\t * Creates a new position, after given {@link module:engine/model/item~Item model item}.\n\t *\n\t * @param {module:engine/model/item~Item} item Item after which the position should be placed.\n\t * @param {module:engine/model/position~PositionStickiness} [stickiness='toNone'] Position stickiness.\n\t * @returns {module:engine/model/position~Position}\n\t * @protected\n\t */\n\tstatic _createAfter( item, stickiness ) {\n\t\tif ( !item.parent ) {\n\t\t\t/**\n\t\t\t * You can not make a position after a root element.\n\t\t\t *\n\t\t\t * @error model-position-after-root\n\t\t\t * @param {module:engine/model/item~Item} root\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'model-position-after-root',\n\t\t\t\t[ this, item ],\n\t\t\t\t{ root: item }\n\t\t\t);\n\t\t}\n\n\t\treturn this._createAt( item.parent, item.endOffset, stickiness );\n\t}\n\n\t/**\n\t * Creates a new position, before the given {@link module:engine/model/item~Item model item}.\n\t *\n\t * @param {module:engine/model/item~Item} item Item before which the position should be placed.\n\t * @param {module:engine/model/position~PositionStickiness} [stickiness='toNone'] Position stickiness.\n\t * @returns {module:engine/model/position~Position}\n\t * @protected\n\t */\n\tstatic _createBefore( item, stickiness ) {\n\t\tif ( !item.parent ) {\n\t\t\t/**\n\t\t\t * You can not make a position before a root element.\n\t\t\t *\n\t\t\t * @error model-position-before-root\n\t\t\t * @param {module:engine/model/item~Item} root\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'model-position-before-root',\n\t\t\t\titem,\n\t\t\t\t{ root: item }\n\t\t\t);\n\t\t}\n\n\t\treturn this._createAt( item.parent, item.startOffset, stickiness );\n\t}\n\n\t/**\n\t * Creates a `Position` instance from given plain object (i.e. parsed JSON string).\n\t *\n\t * @param {Object} json Plain object to be converted to `Position`.\n\t * @param {module:engine/model/document~Document} doc Document object that will be position owner.\n\t * @returns {module:engine/model/position~Position} `Position` instance created using given plain object.\n\t */\n\tstatic fromJSON( json, doc ) {\n\t\tif ( json.root === '$graveyard' ) {\n\t\t\tconst pos = new Position( doc.graveyard, json.path );\n\t\t\tpos.stickiness = json.stickiness;\n\n\t\t\treturn pos;\n\t\t}\n\n\t\tif ( !doc.getRoot( json.root ) ) {\n\t\t\t/**\n\t\t\t * Cannot create position for document. Root with specified name does not exist.\n\t\t\t *\n\t\t\t * @error model-position-fromjson-no-root\n\t\t\t * @param {String} rootName\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'model-position-fromjson-no-root',\n\t\t\t\tdoc,\n\t\t\t\t{ rootName: json.root }\n\t\t\t);\n\t\t}\n\n\t\treturn new Position( doc.getRoot( json.root ), json.path, json.stickiness );\n\t}\n\n\t// @if CK_DEBUG_ENGINE // toString() {\n\t// @if CK_DEBUG_ENGINE // \treturn `${ this.root } [ ${ this.path.join( ', ' ) } ]`;\n\t// @if CK_DEBUG_ENGINE // }\n\n\t// @if CK_DEBUG_ENGINE // log() {\n\t// @if CK_DEBUG_ENGINE // \tconsole.log( 'ModelPosition: ' + this );\n\t// @if CK_DEBUG_ENGINE // }\n}\n\n/**\n * A flag indicating whether this position is `'before'` or `'after'` or `'same'` as given position.\n * If positions are in different roots `'different'` flag is returned.\n *\n * @typedef {String} module:engine/model/position~PositionRelation\n */\n\n/**\n * Represents how position is \"sticking\" with neighbour nodes. Used to define how position should be transformed (moved)\n * in edge cases. Possible values: `'toNone'`, `'toNext'`, `'toPrevious'`.\n *\n * Examples:\n *\n *\t\tInsert. Position is at | and nodes are inserted at the same position, marked as ^:\n *\n *\t\t- sticks to none:           <p>f^|oo</p>  ->  <p>fbar|oo</p>\n *\t\t- sticks to next node:      <p>f^|oo</p>  ->  <p>fbar|oo</p>\n *\t\t- sticks to previous node:  <p>f|^oo</p>  ->  <p>f|baroo</p>\n *\n *\n *\t\tMove. Position is at | and range [oo] is moved to position ^:\n *\n *\t\t- sticks to none:           <p>f|[oo]</p><p>b^ar</p>  ->  <p>f|</p><p>booar</p>\n *\t\t- sticks to none:           <p>f[oo]|</p><p>b^ar</p>  ->  <p>f|</p><p>booar</p>\n *\n *\t\t- sticks to next node:      <p>f|[oo]</p><p>b^ar</p>  ->  <p>f</p><p>b|ooar</p>\n *\t\t- sticks to next node:      <p>f[oo]|</p><p>b^ar</p>  ->  <p>f|</p><p>booar</p>\n *\n *\t\t- sticks to previous node:  <p>f|[oo]</p><p>b^ar</p>  ->  <p>f|</p><p>booar</p>\n *\t\t- sticks to previous node:  <p>f[oo]|</p><p>b^ar</p>  ->  <p>f</p><p>boo|ar</p>\n *\n * @typedef {String} module:engine/model/position~PositionStickiness\n */\n\n/**\n * Returns a text node at the given position.\n *\n * This is a helper function optimized to reuse the position parent instance for performance reasons.\n *\n * Normally, you should use {@link module:engine/model/position~Position#textNode `Position#textNode`}.\n * If you start hitting performance issues with {@link module:engine/model/position~Position#parent `Position#parent`}\n * check if your algorithm does not access it multiple times (which can happen directly or indirectly via other position properties).\n *\n * See https://github.com/ckeditor/ckeditor5/issues/6579.\n *\n * See also:\n *\n * * {@link module:engine/model/position~getNodeAfterPosition}\n * * {@link module:engine/model/position~getNodeBeforePosition}\n *\n * @param {module:engine/model/position~Position} position\n * @param {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment} positionParent The parent of the\n * given position.\n * @returns {module:engine/model/text~Text|null}\n */\nexport function getTextNodeAtPosition( position, positionParent ) {\n\tconst node = positionParent.getChild( positionParent.offsetToIndex( position.offset ) );\n\n\tif ( node && node.is( '$text' ) && node.startOffset < position.offset ) {\n\t\treturn node;\n\t}\n\n\treturn null;\n}\n\n/**\n * Returns the node after the given position.\n *\n * This is a helper function optimized to reuse the position parent instance and the calculation of the text node at the\n * specific position for performance reasons.\n *\n * Normally, you should use {@link module:engine/model/position~Position#nodeAfter `Position#nodeAfter`}.\n * If you start hitting performance issues with {@link module:engine/model/position~Position#parent `Position#parent`} and/or\n * {@link module:engine/model/position~Position#textNode `Position#textNode`}\n * check if your algorithm does not access those properties multiple times\n * (which can happen directly or indirectly via other position properties).\n *\n * See https://github.com/ckeditor/ckeditor5/issues/6579 and https://github.com/ckeditor/ckeditor5/issues/6582.\n *\n * See also:\n *\n * * {@link module:engine/model/position~getTextNodeAtPosition}\n * * {@link module:engine/model/position~getNodeBeforePosition}\n *\n * @param {module:engine/model/position~Position} position\n * @param {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment} positionParent The parent of the\n * given position.\n * @param {module:engine/model/text~Text|null} textNode Text node at the given position.\n * @returns {module:engine/model/node~Node|null}\n */\nexport function getNodeAfterPosition( position, positionParent, textNode ) {\n\tif ( textNode !== null ) {\n\t\treturn null;\n\t}\n\n\treturn positionParent.getChild( positionParent.offsetToIndex( position.offset ) );\n}\n\n/**\n * Returns the node before the given position.\n *\n * Refer to {@link module:engine/model/position~getNodeBeforePosition} for documentation on when to use this util method.\n *\n * See also:\n *\n * * {@link module:engine/model/position~getTextNodeAtPosition}\n * * {@link module:engine/model/position~getNodeAfterPosition}\n *\n * @param {module:engine/model/position~Position} position\n * @param {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment} positionParent The parent of the\n * given position.\n * @param {module:engine/model/text~Text|null} textNode Text node at the given position.\n * @returns {module:engine/model/node~Node|null}\n */\nexport function getNodeBeforePosition( position, positionParent, textNode ) {\n\tif ( textNode !== null ) {\n\t\treturn null;\n\t}\n\n\treturn positionParent.getChild( positionParent.offsetToIndex( position.offset ) - 1 );\n}\n"]}]}