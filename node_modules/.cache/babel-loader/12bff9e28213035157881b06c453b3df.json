{"remainingRequest":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/babel-loader/lib/index.js!/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-dev-webpack-plugin/lib/translatesourceloader.js?{}!/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-engine/src/conversion/upcastdispatcher.js","dependencies":[{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-engine/src/conversion/upcastdispatcher.js","mtime":499162500000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-dev-webpack-plugin/lib/translatesourceloader.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-engine/src/conversion/upcastdispatcher.js"],"names":["ViewConsumable","ModelRange","ModelPosition","SchemaContext","isParagraphable","wrapInParagraph","CKEditorError","EmitterMixin","mix","UpcastDispatcher","conversionApi","_splitParts","Map","_cursorParents","_modelCursor","Object","assign","convertItem","_convertItem","bind","convertChildren","_convertChildren","safeInsert","_safeInsert","updateConversionResult","_updateConversionResult","splitToAllowedParent","_splitToAllowedParent","getSplitParts","_getSplitParts","viewItem","writer","context","fire","createContextTree","consumable","createFrom","store","modelRange","documentFragment","createDocumentFragment","_removeEmptyElements","Array","from","parent","getChildren","item","append","markers","extractMarkersFromModelFragment","clear","modelCursor","data","is","name","elementOrModelCursor","nextModelCursor","_createAt","viewChild","result","end","modelElement","position","splitResult","insert","parts","createRange","createPositionBefore","createPositionAfter","length","savedCursorParent","get","createPositionAt","node","schema","allowedParent","findAllowedParent","getAncestors","includes","split","stack","range","getWalker","treeWalkerValue","type","push","originalPart","pop","splitPart","_registerSplitPair","cursorParent","set","has","list","element","anyRemoved","keys","isEmpty","remove","delete","modelItem","markerElements","Set","_createIn","getItems","add","markerElement","markerName","getAttribute","currentPosition","clone","contextDefinition","attributes","getAttributeKeys","key","current","createElement"],"mappings":";;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA,OAAOA,cAAP,MAA2B,kBAA3B;AACA,OAAOC,UAAP,MAAuB,gBAAvB;AACA,OAAOC,aAAP,MAA0B,mBAA1B;AACA,SAASC,aAAT,QAA8B,iBAA9B;AACA,SAASC,eAAT,EAA0BC,eAA1B,QAAiD,iCAAjD;AAEA,OAAOC,aAAP,MAA0B,6CAA1B;AACA,OAAOC,YAAP,MAAyB,4CAAzB;AACA,OAAOC,GAAP,MAAgB,mCAAhB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IACqBC,gB;AACpB;AACD;AACA;AACA;AACA;AACA;AACA;AACC,8BAAkC;AAAA,QAArBC,aAAqB,uEAAL,EAAK;;AAAA;;AACjC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACE,SAAKC,WAAL,GAAmB,IAAIC,GAAJ,EAAnB;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,SAAKC,cAAL,GAAsB,IAAID,GAAJ,EAAtB;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,SAAKE,YAAL,GAAoB,IAApB;AAEA;AACF;AACA;AACA;AACA;;AACE,SAAKJ,aAAL,GAAqBK,MAAM,CAACC,MAAP,CAAe,EAAf,EAAmBN,aAAnB,CA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AAI,CAACmE,gBAAL,EAHyC;AAAA;;AAAA;AAG5D,+DAA6C;AAAA,cAAjCC,GAAiC;AAC5CF,UAAAA,UAAU,CAAEE,GAAF,CAAV,GAAoBpE,IAAI,CAAC8D,YAAL,CAAmBM,GAAnB,CAApB;AACA;AAL2D;AAAA;AAAA;AAAA;AAAA;;AAO5D,UAAMC,OAAO,GAAGpF,MAAM,CAACqF,aAAP,CAAsBtE,IAAI,CAACQ,IAA3B,EAAiC0D,UAAjC,CAAhB;;AAEA,UAAKlD,QAAL,EAAgB;AACf/B,QAAAA,MAAM,CAACgB,MAAP,CAAeoE,OAAf,EAAwBrD,QAAxB;AACA;;AAEDA,MAAAA,QAAQ,GAAG5D,aAAa,CAACuD,SAAd,CAAyB0D,OAAzB,EAAkC,CAAlC,CAAX;AACA;AAjBsD;AAAA;AAAA;AAAA;AAAA;;AAmBvD,SAAOrD,QAAP;AACA;AAED;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/conversion/upcastdispatcher\n */\n\nimport ViewConsumable from './viewconsumable';\nimport ModelRange from '../model/range';\nimport ModelPosition from '../model/position';\nimport { SchemaContext } from '../model/schema';\nimport { isParagraphable, wrapInParagraph } from '../model/utils/autoparagraphing';\n\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\n\n/**\n * Upcast dispatcher is a central point of the view-to-model conversion, which is a process of\n * converting a given {@link module:engine/view/documentfragment~DocumentFragment view document fragment} or\n * {@link module:engine/view/element~Element view element} into a correct model structure.\n *\n * During the conversion process, the dispatcher fires events for all {@link module:engine/view/node~Node view nodes}\n * from the converted view document fragment.\n * Special callbacks called \"converters\" should listen to these events in order to convert the view nodes.\n *\n * The second parameter of the callback is the `data` object with the following properties:\n *\n * * `data.viewItem` contains a {@link module:engine/view/node~Node view node} or a\n * {@link module:engine/view/documentfragment~DocumentFragment view document fragment}\n * that is converted at the moment and might be handled by the callback.\n * * `data.modelRange` is used to point to the result\n * of the current conversion (e.g. the element that is being inserted)\n * and is always a {@link module:engine/model/range~Range} when the conversion succeeds.\n * * `data.modelCursor` is a {@link module:engine/model/position~Position position} on which the converter should insert\n * the newly created items.\n *\n * The third parameter of the callback is an instance of {@link module:engine/conversion/upcastdispatcher~UpcastConversionApi}\n * which provides additional tools for converters.\n *\n * You can read more about conversion in the following guides:\n *\n * * {@glink framework/guides/deep-dive/conversion/conversion-introduction Advanced conversion concepts &mdash; attributes}\n * * {@glink framework/guides/deep-dive/conversion/custom-element-conversion Custom element conversion}\n *\n * Examples of event-based converters:\n *\n *\t\t// A converter for links (<a>).\n *\t\teditor.data.upcastDispatcher.on( 'element:a', ( evt, data, conversionApi ) => {\n *\t\t\tif ( conversionApi.consumable.consume( data.viewItem, { name: true, attributes: [ 'href' ] } ) ) {\n *\t\t\t\t// The <a> element is inline and is represented by an attribute in the model.\n *\t\t\t\t// This is why you need to convert only children.\n *\t\t\t\tconst { modelRange } = conversionApi.convertChildren( data.viewItem, data.modelCursor );\n *\n *\t\t\t\tfor ( let item of modelRange.getItems() ) {\n *\t\t\t\t\tif ( conversionApi.schema.checkAttribute( item, 'linkHref' ) ) {\n *\t\t\t\t\t\tconversionApi.writer.setAttribute( 'linkHref', data.viewItem.getAttribute( 'href' ), item );\n *\t\t\t\t\t}\n *\t\t\t\t}\n *\t\t\t}\n *\t\t} );\n *\n *\t\t// Convert <p> element's font-size style.\n *\t\t// Note: You should use a low-priority observer in order to ensure that\n *\t\t// it is executed after the element-to-element converter.\n *\t\teditor.data.upcastDispatcher.on( 'element:p', ( evt, data, conversionApi ) => {\n *\t\t\tconst { consumable, schema, writer } = conversionApi;\n *\n *\t\t\tif ( !consumable.consume( data.viewItem, { style: 'font-size' } ) ) {\n *\t\t\t\treturn;\n *\t\t\t}\n *\n *\t\t\tconst fontSize = data.viewItem.getStyle( 'font-size' );\n *\n *\t\t\t// Do not go for the model element after data.modelCursor because it might happen\n *\t\t\t// that a single view element was converted to multiple model elements. Get all of them.\n *\t\t\tfor ( const item of data.modelRange.getItems( { shallow: true } ) ) {\n *\t\t\t\tif ( schema.checkAttribute( item, 'fontSize' ) ) {\n *\t\t\t\t\twriter.setAttribute( 'fontSize', fontSize, item );\n *\t\t\t\t}\n *\t\t\t}\n *\t\t}, { priority: 'low' } );\n *\n *\t\t// Convert all elements which have no custom converter into a paragraph (autoparagraphing).\n *\t\teditor.data.upcastDispatcher.on( 'element', ( evt, data, conversionApi ) => {\n *\t\t\t// Check if an element can be converted.\n *\t\t\tif ( !conversionApi.consumable.test( data.viewItem, { name: data.viewItem.name } ) ) {\n *\t\t\t\t// When an element is already consumed by higher priority converters, do nothing.\n *\t\t\t\treturn;\n *\t\t\t}\n *\n *\t\t\tconst paragraph = conversionApi.writer.createElement( 'paragraph' );\n *\n *\t\t\t// Try to safely insert a paragraph at the model cursor - it will find an allowed parent for the current element.\n *\t\t\tif ( !conversionApi.safeInsert( paragraph, data.modelCursor ) ) {\n *\t\t\t\t// When an element was not inserted, it means that you cannot insert a paragraph at this position.\n *\t\t\t\treturn;\n *\t\t\t}\n *\n *\t\t\t// Consume the inserted element.\n *\t\t\tconversionApi.consumable.consume( data.viewItem, { name: data.viewItem.name } ) );\n *\n *\t\t\t// Convert the children to a paragraph.\n *\t\t\tconst { modelRange } = conversionApi.convertChildren( data.viewItem,  paragraph ) );\n *\n *\t\t\t// Update `modelRange` and `modelCursor` in the `data` as a conversion result.\n *\t\t\tconversionApi.updateConversionResult( paragraph, data );\n *\t\t}, { priority: 'low' } );\n *\n * @mixes module:utils/emittermixin~EmitterMixin\n * @fires viewCleanup\n * @fires element\n * @fires text\n * @fires documentFragment\n */\nexport default class UpcastDispatcher {\n\t/**\n\t * Creates an upcast dispatcher that operates using the passed API.\n\t *\n\t * @see module:engine/conversion/upcastdispatcher~UpcastConversionApi\n\t * @param {Object} [conversionApi] Additional properties for an interface that will be passed to events fired\n\t * by the upcast dispatcher.\n\t */\n\tconstructor( conversionApi = {} ) {\n\t\t/**\n\t\t * The list of elements that were created during splitting.\n\t\t *\n\t\t * After the conversion process the list is cleared.\n\t\t *\n\t\t * @private\n\t\t * @type {Map.<module:engine/model/element~Element,Array.<module:engine/model/element~Element>>}\n\t\t */\n\t\tthis._splitParts = new Map();\n\n\t\t/**\n\t\t * The list of cursor parent elements that were created during splitting.\n\t\t *\n\t\t * After the conversion process the list is cleared.\n\t\t *\n\t\t * @private\n\t\t * @type {Map.<module:engine/model/element~Element,Array.<module:engine/model/element~Element>>}\n\t\t */\n\t\tthis._cursorParents = new Map();\n\n\t\t/**\n\t\t * The position in the temporary structure where the converted content is inserted. The structure reflects the context of\n\t\t * the target position where the content will be inserted. This property is built based on the context parameter of the\n\t\t * convert method.\n\t\t *\n\t\t * @private\n\t\t * @type {module:engine/model/position~Position|null}\n\t\t */\n\t\tthis._modelCursor = null;\n\n\t\t/**\n\t\t * An interface passed by the dispatcher to the event callbacks.\n\t\t *\n\t\t * @member {module:engine/conversion/upcastdispatcher~UpcastConversionApi}\n\t\t */\n\t\tthis.conversionApi = Object.assign( {}, conversionApi );\n\n\t\t// The below methods are bound to this `UpcastDispatcher` instance and set on `conversionApi`.\n\t\t// This way only a part of `UpcastDispatcher` API is exposed.\n\t\tthis.conversionApi.convertItem = this._convertItem.bind( this );\n\t\tthis.conversionApi.convertChildren = this._convertChildren.bind( this );\n\t\tthis.conversionApi.safeInsert = this._safeInsert.bind( this );\n\t\tthis.conversionApi.updateConversionResult = this._updateConversionResult.bind( this );\n\t\t// Advanced API - use only if custom position handling is needed.\n\t\tthis.conversionApi.splitToAllowedParent = this._splitToAllowedParent.bind( this );\n\t\tthis.conversionApi.getSplitParts = this._getSplitParts.bind( this );\n\t}\n\n\t/**\n\t * Starts the conversion process. The entry point for the conversion.\n\t *\n\t * @fires element\n\t * @fires text\n\t * @fires documentFragment\n\t * @param {module:engine/view/documentfragment~DocumentFragment|module:engine/view/element~Element} viewItem\n\t * The part of the view to be converted.\n\t * @param {module:engine/model/writer~Writer} writer An instance of the model writer.\n\t * @param {module:engine/model/schema~SchemaContextDefinition} [context=['$root']] Elements will be converted according to this context.\n\t * @returns {module:engine/model/documentfragment~DocumentFragment} Model data that is the result of the conversion process\n\t * wrapped in `DocumentFragment`. Converted marker elements will be set as the document fragment's\n\t * {@link module:engine/model/documentfragment~DocumentFragment#markers static markers map}.\n\t */\n\tconvert( viewItem, writer, context = [ '$root' ] ) {\n\t\tthis.fire( 'viewCleanup', viewItem );\n\n\t\t// Create context tree and set position in the top element.\n\t\t// Items will be converted according to this position.\n\t\tthis._modelCursor = createContextTree( context, writer );\n\n\t\t// Store writer in conversion as a conversion API\n\t\t// to be sure that conversion process will use the same batch.\n\t\tthis.conversionApi.writer = writer;\n\n\t\t// Create consumable values list for conversion process.\n\t\tthis.conversionApi.consumable = ViewConsumable.createFrom( viewItem );\n\n\t\t// Custom data stored by converter for conversion process.\n\t\tthis.conversionApi.store = {};\n\n\t\t// Do the conversion.\n\t\tconst { modelRange } = this._convertItem( viewItem, this._modelCursor );\n\n\t\t// Conversion result is always a document fragment so let's create it.\n\t\tconst documentFragment = writer.createDocumentFragment();\n\n\t\t// When there is a conversion result.\n\t\tif ( modelRange ) {\n\t\t\t// Remove all empty elements that were create while splitting.\n\t\t\tthis._removeEmptyElements();\n\n\t\t\t// Move all items that were converted in context tree to the document fragment.\n\t\t\tfor ( const item of Array.from( this._modelCursor.parent.getChildren() ) ) {\n\t\t\t\twriter.append( item, documentFragment );\n\t\t\t}\n\n\t\t\t// Extract temporary markers elements from model and set as static markers collection.\n\t\t\tdocumentFragment.markers = extractMarkersFromModelFragment( documentFragment, writer );\n\t\t}\n\n\t\t// Clear context position.\n\t\tthis._modelCursor = null;\n\n\t\t// Clear split elements & parents lists.\n\t\tthis._splitParts.clear();\n\t\tthis._cursorParents.clear();\n\n\t\t// Clear conversion API.\n\t\tthis.conversionApi.writer = null;\n\t\tthis.conversionApi.store = null;\n\n\t\t// Return fragment as conversion result.\n\t\treturn documentFragment;\n\t}\n\n\t/**\n\t * @private\n\t * @see module:engine/conversion/upcastdispatcher~UpcastConversionApi#convertItem\n\t */\n\t_convertItem( viewItem, modelCursor ) {\n\t\tconst data = Object.assign( { viewItem, modelCursor, modelRange: null } );\n\n\t\tif ( viewItem.is( 'element' ) ) {\n\t\t\tthis.fire( 'element:' + viewItem.name, data, this.conversionApi );\n\t\t} else if ( viewItem.is( '$text' ) ) {\n\t\t\tthis.fire( 'text', data, this.conversionApi );\n\t\t} else {\n\t\t\tthis.fire( 'documentFragment', data, this.conversionApi );\n\t\t}\n\n\t\t// Handle incorrect conversion result.\n\t\tif ( data.modelRange && !( data.modelRange instanceof ModelRange ) ) {\n\t\t\t/**\n\t\t\t * Incorrect conversion result was dropped.\n\t\t\t *\n\t\t\t * {@link module:engine/model/range~Range Model range} should be a conversion result.\n\t\t\t *\n\t\t\t * @error view-conversion-dispatcher-incorrect-result\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'view-conversion-dispatcher-incorrect-result', this );\n\t\t}\n\n\t\treturn { modelRange: data.modelRange, modelCursor: data.modelCursor };\n\t}\n\n\t/**\n\t * @private\n\t * @see module:engine/conversion/upcastdispatcher~UpcastConversionApi#convertChildren\n\t */\n\t_convertChildren( viewItem, elementOrModelCursor ) {\n\t\tlet nextModelCursor = elementOrModelCursor.is( 'position' ) ?\n\t\t\telementOrModelCursor : ModelPosition._createAt( elementOrModelCursor, 0 );\n\n\t\tconst modelRange = new ModelRange( nextModelCursor );\n\n\t\tfor ( const viewChild of Array.from( viewItem.getChildren() ) ) {\n\t\t\tconst result = this._convertItem( viewChild, nextModelCursor );\n\n\t\t\tif ( result.modelRange instanceof ModelRange ) {\n\t\t\t\tmodelRange.end = result.modelRange.end;\n\t\t\t\tnextModelCursor = result.modelCursor;\n\t\t\t}\n\t\t}\n\n\t\treturn { modelRange, modelCursor: nextModelCursor };\n\t}\n\n\t/**\n\t * @private\n\t * @see module:engine/conversion/upcastdispatcher~UpcastConversionApi#safeInsert\n\t */\n\t_safeInsert( modelElement, position ) {\n\t\t// Find allowed parent for element that we are going to insert.\n\t\t// If current parent does not allow to insert element but one of the ancestors does\n\t\t// then split nodes to allowed parent.\n\t\tconst splitResult = this._splitToAllowedParent( modelElement, position );\n\n\t\t// When there is no split result it means that we can't insert element to model tree, so let's skip it.\n\t\tif ( !splitResult ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Insert element on allowed position.\n\t\tthis.conversionApi.writer.insert( modelElement, splitResult.position );\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * @private\n\t * @see module:engine/conversion/upcastdispatcher~UpcastConversionApi#updateConversionResult\n\t */\n\t_updateConversionResult( modelElement, data ) {\n\t\tconst parts = this._getSplitParts( modelElement );\n\n\t\tconst writer = this.conversionApi.writer;\n\n\t\t// Set conversion result range - only if not set already.\n\t\tif ( !data.modelRange ) {\n\t\t\tdata.modelRange = writer.createRange(\n\t\t\t\twriter.createPositionBefore( modelElement ),\n\t\t\t\twriter.createPositionAfter( parts[ parts.length - 1 ] )\n\t\t\t);\n\t\t}\n\n\t\tconst savedCursorParent = this._cursorParents.get( modelElement );\n\n\t\t// Now we need to check where the `modelCursor` should be.\n\t\tif ( savedCursorParent ) {\n\t\t\t// If we split parent to insert our element then we want to continue conversion in the new part of the split parent.\n\t\t\t//\n\t\t\t// before: <allowed><notAllowed>foo[]</notAllowed></allowed>\n\t\t\t// after:  <allowed><notAllowed>foo</notAllowed> <converted></converted> <notAllowed>[]</notAllowed></allowed>\n\n\t\t\tdata.modelCursor = writer.createPositionAt( savedCursorParent, 0 );\n\t\t} else {\n\t\t\t// Otherwise just continue after inserted element.\n\n\t\t\tdata.modelCursor = data.modelRange.end;\n\t\t}\n\t}\n\n\t/**\n\t * @private\n\t * @see module:engine/conversion/upcastdispatcher~UpcastConversionApi#splitToAllowedParent\n\t */\n\t_splitToAllowedParent( node, modelCursor ) {\n\t\tconst { schema, writer } = this.conversionApi;\n\n\t\t// Try to find allowed parent.\n\t\tlet allowedParent = schema.findAllowedParent( modelCursor, node );\n\n\t\tif ( allowedParent ) {\n\t\t\t// When current position parent allows to insert node then return this position.\n\t\t\tif ( allowedParent === modelCursor.parent ) {\n\t\t\t\treturn { position: modelCursor };\n\t\t\t}\n\n\t\t\t// When allowed parent is in context tree (it's outside the converted tree).\n\t\t\tif ( this._modelCursor.parent.getAncestors().includes( allowedParent ) ) {\n\t\t\t\tallowedParent = null;\n\t\t\t}\n\t\t}\n\n\t\tif ( !allowedParent ) {\n\t\t\t// Check if the node wrapped with a paragraph would be accepted by the schema.\n\t\t\tif ( !isParagraphable( modelCursor, node, schema ) ) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tposition: wrapInParagraph( modelCursor, writer )\n\t\t\t};\n\t\t}\n\n\t\t// Split element to allowed parent.\n\t\tconst splitResult = this.conversionApi.writer.split( modelCursor, allowedParent );\n\n\t\t// Using the range returned by `model.Writer#split`, we will pair original elements with their split parts.\n\t\t//\n\t\t// The range returned from the writer spans \"over the split\" or, precisely saying, from the end of the original element (the one\n\t\t// that got split) to the beginning of the other part of that element:\n\t\t//\n\t\t// <limit><a><b><c>X[]Y</c></b><a></limit> ->\n\t\t// <limit><a><b><c>X[</c></b></a><a><b><c>]Y</c></b></a>\n\t\t//\n\t\t// After the split there cannot be any full node between the positions in `splitRange`. The positions are touching.\n\t\t// Also, because of how splitting works, it is easy to notice, that \"closing tags\" are in the reverse order than \"opening tags\".\n\t\t// Also, since we split all those elements, each of them has to have the other part.\n\t\t//\n\t\t// With those observations in mind, we will pair the original elements with their split parts by saving \"closing tags\" and matching\n\t\t// them with \"opening tags\" in the reverse order. For that we can use a stack.\n\t\tconst stack = [];\n\n\t\tfor ( const treeWalkerValue of splitResult.range.getWalker() ) {\n\t\t\tif ( treeWalkerValue.type == 'elementEnd' ) {\n\t\t\t\tstack.push( treeWalkerValue.item );\n\t\t\t} else {\n\t\t\t\t// There should not be any text nodes after the element is split, so the only other value is `elementStart`.\n\t\t\t\tconst originalPart = stack.pop();\n\t\t\t\tconst splitPart = treeWalkerValue.item;\n\n\t\t\t\tthis._registerSplitPair( originalPart, splitPart );\n\t\t\t}\n\t\t}\n\n\t\tconst cursorParent = splitResult.range.end.parent;\n\t\tthis._cursorParents.set( node, cursorParent );\n\n\t\treturn {\n\t\t\tposition: splitResult.position,\n\t\t\tcursorParent\n\t\t};\n\t}\n\n\t/**\n\t * Registers that a `splitPart` element is a split part of the `originalPart` element.\n\t *\n\t * The data set by this method is used by {@link #_getSplitParts} and {@link #_removeEmptyElements}.\n\t *\n\t * @private\n\t * @param {module:engine/model/element~Element} originalPart\n\t * @param {module:engine/model/element~Element} splitPart\n\t */\n\t_registerSplitPair( originalPart, splitPart ) {\n\t\tif ( !this._splitParts.has( originalPart ) ) {\n\t\t\tthis._splitParts.set( originalPart, [ originalPart ] );\n\t\t}\n\n\t\tconst list = this._splitParts.get( originalPart );\n\n\t\tthis._splitParts.set( splitPart, list );\n\t\tlist.push( splitPart );\n\t}\n\n\t/**\n\t * @private\n\t * @see module:engine/conversion/upcastdispatcher~UpcastConversionApi#getSplitParts\n\t */\n\t_getSplitParts( element ) {\n\t\tlet parts;\n\n\t\tif ( !this._splitParts.has( element ) ) {\n\t\t\tparts = [ element ];\n\t\t} else {\n\t\t\tparts = this._splitParts.get( element );\n\t\t}\n\n\t\treturn parts;\n\t}\n\n\t/**\n\t * Checks if there are any empty elements created while splitting and removes them.\n\t *\n\t * This method works recursively to re-check empty elements again after at least one element was removed in the initial call,\n\t * as some elements might have become empty after other empty elements were removed from them.\n\t *\n\t * @private\n\t */\n\t_removeEmptyElements() {\n\t\tlet anyRemoved = false;\n\n\t\tfor ( const element of this._splitParts.keys() ) {\n\t\t\tif ( element.isEmpty ) {\n\t\t\t\tthis.conversionApi.writer.remove( element );\n\t\t\t\tthis._splitParts.delete( element );\n\n\t\t\t\tanyRemoved = true;\n\t\t\t}\n\t\t}\n\n\t\tif ( anyRemoved ) {\n\t\t\tthis._removeEmptyElements();\n\t\t}\n\t}\n\n\t/**\n\t * Fired before the first conversion event, at the beginning of the upcast (view-to-model conversion) process.\n\t *\n\t * @event viewCleanup\n\t * @param {module:engine/view/documentfragment~DocumentFragment|module:engine/view/element~Element}\n\t * viewItem A part of the view to be converted.\n\t */\n\n\t/**\n\t * Fired when an {@link module:engine/view/element~Element} is converted.\n\t *\n\t * `element` is a namespace event for a class of events. Names of actually called events follow the pattern of\n\t * `element:<elementName>` where `elementName` is the name of the converted element. This way listeners may listen to\n\t * a conversion of all or just specific elements.\n\t *\n\t * @event element\n\t * @param {module:engine/conversion/upcastdispatcher~UpcastConversionData} data The conversion data. Keep in mind that this object is\n\t * shared by reference between all callbacks that will be called. This means that callbacks can override values if needed, and these\n\t * values will be available in other callbacks.\n\t * @param {module:engine/conversion/upcastdispatcher~UpcastConversionApi} conversionApi Conversion utilities to be used by the\n\t * callback.\n\t */\n\n\t/**\n\t * Fired when a {@link module:engine/view/text~Text} is converted.\n\t *\n\t * @event text\n\t * @see #event:element\n\t */\n\n\t/**\n\t * Fired when a {@link module:engine/view/documentfragment~DocumentFragment} is converted.\n\t *\n\t * @event documentFragment\n\t * @see #event:element\n\t */\n}\n\nmix( UpcastDispatcher, EmitterMixin );\n\n// Traverses given model item and searches elements which marks marker range. Found element is removed from\n// DocumentFragment but path of this element is stored in a Map which is then returned.\n//\n// @param {module:engine/view/documentfragment~DocumentFragment|module:engine/view/node~Node} modelItem Fragment of model.\n// @returns {Map<String, module:engine/model/range~Range>} List of static markers.\nfunction extractMarkersFromModelFragment( modelItem, writer ) {\n\tconst markerElements = new Set();\n\tconst markers = new Map();\n\n\t// Create ModelTreeWalker.\n\tconst range = ModelRange._createIn( modelItem ).getItems();\n\n\t// Walk through DocumentFragment and collect marker elements.\n\tfor ( const item of range ) {\n\t\t// Check if current element is a marker.\n\t\tif ( item.name == '$marker' ) {\n\t\t\tmarkerElements.add( item );\n\t\t}\n\t}\n\n\t// Walk through collected marker elements store its path and remove its from the DocumentFragment.\n\tfor ( const markerElement of markerElements ) {\n\t\tconst markerName = markerElement.getAttribute( 'data-name' );\n\t\tconst currentPosition = writer.createPositionBefore( markerElement );\n\n\t\t// When marker of given name is not stored it means that we have found the beginning of the range.\n\t\tif ( !markers.has( markerName ) ) {\n\t\t\tmarkers.set( markerName, new ModelRange( currentPosition.clone() ) );\n\t\t// Otherwise is means that we have found end of the marker range.\n\t\t} else {\n\t\t\tmarkers.get( markerName ).end = currentPosition.clone();\n\t\t}\n\n\t\t// Remove marker element from DocumentFragment.\n\t\twriter.remove( markerElement );\n\t}\n\n\treturn markers;\n}\n\n// Creates model fragment according to given context and returns position in the bottom (the deepest) element.\nfunction createContextTree( contextDefinition, writer ) {\n\tlet position;\n\n\tfor ( const item of new SchemaContext( contextDefinition ) ) {\n\t\tconst attributes = {};\n\n\t\tfor ( const key of item.getAttributeKeys() ) {\n\t\t\tattributes[ key ] = item.getAttribute( key );\n\t\t}\n\n\t\tconst current = writer.createElement( item.name, attributes );\n\n\t\tif ( position ) {\n\t\t\twriter.append( current, position );\n\t\t}\n\n\t\tposition = ModelPosition._createAt( current, 0 );\n\t}\n\n\treturn position;\n}\n\n/**\n * A set of conversion utilities available as the third parameter of the\n * {@link module:engine/conversion/upcastdispatcher~UpcastDispatcher upcast dispatcher}'s events.\n *\n * @interface module:engine/conversion/upcastdispatcher~UpcastConversionApi\n */\n\n/**\n * Starts the conversion of a given item by firing an appropriate event.\n *\n * Every fired event is passed (as the first parameter) an object with the `modelRange` property. Every event may set and/or\n * modify that property. When all callbacks are done, the final value of the `modelRange` property is returned by this method.\n * The `modelRange` must be a {@link module:engine/model/range~Range model range} or `null` (as set by default).\n *\n * @method #convertItem\n * @fires module:engine/conversion/upcastdispatcher~UpcastDispatcher#event:element\n * @fires module:engine/conversion/upcastdispatcher~UpcastDispatcher#event:text\n * @fires module:engine/conversion/upcastdispatcher~UpcastDispatcher#event:documentFragment\n * @param {module:engine/view/item~Item} viewItem Item to convert.\n * @param {module:engine/model/position~Position} modelCursor The conversion position.\n * @returns {Object} result The conversion result.\n * @returns {module:engine/model/range~Range|null} result.modelRange The model range containing the result of the item conversion,\n * created and modified by callbacks attached to the fired event, or `null` if the conversion result was incorrect.\n * @returns {module:engine/model/position~Position} result.modelCursor The position where the conversion should be continued.\n */\n\n/**\n * Starts the conversion of all children of a given item by firing appropriate events for all the children.\n *\n * @method #convertChildren\n * @fires module:engine/conversion/upcastdispatcher~UpcastDispatcher#event:element\n * @fires module:engine/conversion/upcastdispatcher~UpcastDispatcher#event:text\n * @fires module:engine/conversion/upcastdispatcher~UpcastDispatcher#event:documentFragment\n * @param {module:engine/view/item~Item} viewItem An element whose children should be converted.\n * @param {module:engine/model/position~Position|module:engine/model/element~Element} positionOrElement A position or an element of\n * the conversion.\n * @returns {Object} result The conversion result.\n * @returns {module:engine/model/range~Range} result.modelRange The model range containing the results of the conversion of all children\n * of the given item. When no child was converted, the range is collapsed.\n * @returns {module:engine/model/position~Position} result.modelCursor The position where the conversion should be continued.\n */\n\n/**\n * Safely inserts an element to the document, checking the {@link module:engine/model/schema~Schema schema} to find an allowed parent for\n * an element that you are going to insert, starting from the given position. If the current parent does not allow to insert the element\n * but one of the ancestors does, then splits the nodes to allowed parent.\n *\n * If the schema allows to insert the node in a given position, nothing is split.\n *\n * If it was not possible to find an allowed parent, `false` is returned and nothing is split.\n *\n * Otherwise, ancestors are split.\n *\n * For instance, if `<image>` is not allowed in `<paragraph>` but is allowed in `$root`:\n *\n *\t\t<paragraph>foo[]bar</paragraph>\n *\n *\t\t-> safe insert for `<image>` will split ->\n *\n *\t\t<paragraph>foo</paragraph>[]<paragraph>bar</paragraph>\n *\n * Example usage:\n *\n *\t\tconst myElement = conversionApi.writer.createElement( 'myElement' );\n *\n *\t\tif ( !conversionApi.safeInsert( myElement, data.modelCursor ) ) {\n *\t\t\treturn;\n *\t\t}\n *\n * The split result is saved and {@link #updateConversionResult} should be used to update the\n * {@link module:engine/conversion/upcastdispatcher~UpcastConversionData conversion data}.\n *\n * @method #safeInsert\n * @param {module:engine/model/node~Node} node The node to insert.\n * @param {module:engine/model/position~Position} position The position where an element is going to be inserted.\n * @returns {Boolean} The split result. If it was not possible to find an allowed position, `false` is returned.\n */\n\n/**\n * Updates the conversion result and sets a proper {@link module:engine/conversion/upcastdispatcher~UpcastConversionData#modelRange} and\n * the next {@link module:engine/conversion/upcastdispatcher~UpcastConversionData#modelCursor} after the conversion.\n * Used together with {@link #safeInsert}, it enables you to easily convert elements without worrying if the node was split\n * during the conversion of its children.\n *\n * A usage example in converter code:\n *\n *\t\tconst myElement = conversionApi.writer.createElement( 'myElement' );\n *\n *\t\tif ( !conversionApi.safeInsert( myElement, data.modelCursor ) ) {\n *\t\t\treturn;\n *\t\t}\n *\n *\t\t// Children conversion may split `myElement`.\n *\t\tconversionApi.convertChildren( data.viewItem, myElement );\n *\n *\t\tconversionApi.updateConversionResult( myElement, data );\n *\n * @method #updateConversionResult\n * @param {module:engine/model/element~Element} element\n * @param {module:engine/conversion/upcastdispatcher~UpcastConversionData} data Conversion data.\n * @param {module:engine/conversion/upcastdispatcher~UpcastConversionApi} conversionApi Conversion utilities to be used by the callback.\n */\n\n/**\n * Checks the {@link module:engine/model/schema~Schema schema} to find an allowed parent for an element that is going to be inserted\n * starting from the given position. If the current parent does not allow inserting an element but one of the ancestors does, the method\n * splits nodes to allowed parent.\n *\n * If the schema allows inserting the node in the given position, nothing is split and an object with that position is returned.\n *\n * If it was not possible to find an allowed parent, `null` is returned and nothing is split.\n *\n * Otherwise, ancestors are split and an object with a position and the copy of the split element is returned.\n *\n * For instance, if `<image>` is not allowed in `<paragraph>` but is allowed in `$root`:\n *\n *\t\t<paragraph>foo[]bar</paragraph>\n *\n *\t\t-> split for `<image>` ->\n *\n *\t\t<paragraph>foo</paragraph>[]<paragraph>bar</paragraph>\n *\n * In the example above, the position between `<paragraph>` elements will be returned as `position` and the second `paragraph`\n * as `cursorParent`.\n *\n * **Note:** This is an advanced method. For most cases {@link #safeInsert} and {@link #updateConversionResult} should be used.\n *\n * @method #splitToAllowedParent\n * @param {module:engine/model/position~Position} position The position where the element is going to be inserted.\n * @param {module:engine/model/node~Node} node The node to insert.\n * @returns {Object|null} The split result. If it was not possible to find an allowed position, `null` is returned.\n * @returns {module:engine/model/position~Position} The position between split elements.\n * @returns {module:engine/model/element~Element} [cursorParent] The element inside which the cursor should be placed to\n * continue the conversion. When the element is not defined it means that there was no split.\n */\n\n/**\n * Returns all the split parts of the given `element` that were created during upcasting through using {@link #splitToAllowedParent}.\n * It enables you to easily track these elements and continue processing them after they are split during the conversion of their children.\n *\n *\t\t<paragraph>Foo<image />bar<image />baz</paragraph> ->\n *\t\t<paragraph>Foo</paragraph><image /><paragraph>bar</paragraph><image /><paragraph>baz</paragraph>\n *\n * For a reference to any of above paragraphs, the function will return all three paragraphs (the original element included),\n * sorted in the order of their creation (the original element is the first one).\n *\n * If the given `element` was not split, an array with a single element is returned.\n *\n * A usage example in the converter code:\n *\n *\t\tconst myElement = conversionApi.writer.createElement( 'myElement' );\n *\n *\t\t// Children conversion may split `myElement`.\n *\t\tconversionApi.convertChildren( data.viewItem, data.modelCursor );\n *\n *\t\tconst splitParts = conversionApi.getSplitParts( myElement );\n *\t\tconst lastSplitPart = splitParts[ splitParts.length - 1 ];\n *\n *\t\t// Setting `data.modelRange` basing on split parts:\n *\t\tdata.modelRange = conversionApi.writer.createRange(\n *\t\t\tconversionApi.writer.createPositionBefore( myElement ),\n *\t\t\tconversionApi.writer.createPositionAfter( lastSplitPart )\n *\t\t);\n *\n *\t\t// Setting `data.modelCursor` to continue after the last split element:\n *\t\tdata.modelCursor = conversionApi.writer.createPositionAfter( lastSplitPart );\n *\n * **Tip:** If you are unable to get a reference to the original element (for example because the code is split into multiple converters\n * or even classes) but it has already been converted, you may want to check the first element in `data.modelRange`. This is a common\n * situation if an attribute converter is separated from an element converter.\n *\n * **Note:** This is an advanced method. For most cases {@link #safeInsert} and {@link #updateConversionResult} should be used.\n *\n * @method #getSplitParts\n * @param {module:engine/model/element~Element} element\n * @returns {Array.<module:engine/model/element~Element>}\n */\n\n/**\n * Stores information about what parts of the processed view item are still waiting to be handled. After a piece of view item\n * was converted, an appropriate consumable value should be\n * {@link module:engine/conversion/viewconsumable~ViewConsumable#consume consumed}.\n *\n * @member {module:engine/conversion/viewconsumable~ViewConsumable} #consumable\n */\n\n/**\n * Custom data stored by converters for the conversion process. Custom properties of this object can be defined and use to\n * pass parameters between converters.\n *\n * The difference between this property and the `data` parameter of\n * {@link module:engine/conversion/upcastdispatcher~UpcastDispatcher#event:element} is that the `data` parameters allow you\n * to pass parameters within a single event and `store` within the whole conversion.\n *\n * @member {Object} #store\n */\n\n/**\n * The model's schema instance.\n *\n * @member {module:engine/model/schema~Schema} #schema\n */\n\n/**\n * The {@link module:engine/model/writer~Writer} instance used to manipulate the data during conversion.\n *\n * @member {module:engine/model/writer~Writer} #writer\n */\n\n/**\n * Conversion data.\n *\n * **Note:** Keep in mind that this object is shared by reference between all conversion callbacks that will be called.\n * This means that callbacks can override values if needed, and these values will be available in other callbacks.\n *\n * @typedef {Object} module:engine/conversion/upcastdispatcher~UpcastConversionData\n *\n * @property {module:engine/view/item~Item} viewItem The converted item.\n * @property {module:engine/model/position~Position} modelCursor The position where the converter should start changes.\n * Change this value for the next converter to tell where the conversion should continue.\n * @property {module:engine/model/range~Range} [modelRange] The current state of conversion result. Every change to\n * the converted element should be reflected by setting or modifying this property.\n */\n"]}]}