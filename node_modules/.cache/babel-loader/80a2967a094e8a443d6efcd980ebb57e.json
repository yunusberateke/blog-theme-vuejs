{"remainingRequest":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/babel-loader/lib/index.js!/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-dev-webpack-plugin/lib/translatesourceloader.js?{}!/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-utils/src/collection.js","dependencies":[{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-utils/src/collection.js","mtime":499162500000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-dev-webpack-plugin/lib/translatesourceloader.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-utils/src/collection.js"],"names":["EmitterMixin","CKEditorError","uid","isIterable","mix","Collection","initialItemsOrOptions","options","hasInitialItems","_items","_itemMap","Map","_idProperty","idProperty","_bindToExternalToInternalMap","WeakMap","_bindToInternalToExternalMap","_skippedIndexesFromExternal","item","push","set","_getItemIdBeforeAdding","length","index","addMany","items","undefined","offset","itemId","currentItemIndex","splice","fire","added","removed","idOrIndex","get","itemOrId","has","id","indexOf","subject","_remove","callback","ctx","map","find","filter","_bindToCollection","stopListening","removedItems","Array","from","externalCollection","as","Class","_setUpBindToBinding","using","callbackOrProperty","factory","addItem","evt","externalItem","isExternalBoundToThis","externalItemBound","finalIndex","skipped","add","i","getIndex","listenTo","remove","reduce","result","itemDoesNotExist","delete","Symbol","iterator"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA,OAAOA,YAAP,MAAyB,gBAAzB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,GAAP,MAAgB,OAAhB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IACqBC,U;AACpB;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,wBAAwD;AAAA,QAA3CC,qBAA2C,uEAAnB,EAAmB;AAAA,QAAfC,OAAe,uEAAL,EAAK;;AAAA;;AACvD,QAAMC,eAAe,GAAGL,UAAU,CAAEG,qBAAF,CAAlC;;AAEA,QAAK,CAACE,eAAN,EAAwB;AACvBD,MAAAA,OAAO,GAAGD,qBAAV;AACA;AAED;AACF;AACA;AACA;AACA;AACA;;;AACE,SAAKG,MAAL,GAAc,EAAd;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,SAAKC,QAAL,GAAgB,IAAIC,GAAJ,EAAhB;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,SAAKC,WAAL,GAAmBL,OAAO,CAACM,UAAR,IAAsB,IAAzC;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,SAAKC,4BAAL,GAAoC,IAAIC,OAAJ,EAApC;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,SAAKC,4BAAL,GAAoC,IAAID,OAAJ,EAApC;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,SAAKE,2BAAL,GAAmC,EAAnC,CA7DuD,CA+DvD;;AACA,QAAKT,eAAL,EAAuB;AAAA,iDACFF,qBADE;AAAA;;AAAA;AACtB,4DAA4C;AAAA,cAAhCY,IAAgC;;AAC3C,eAAKT,MAA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C,QAAAA,KAAK,EAAE,EADa;AAEpBC,QAAAA,OAAO,EAAEgB,YAFW;AAGpB1B,QAAAA,KAAK,EAAE;AAHa,OAArB;AAKA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACC,gBAAQ6B,kBAAR,EAA6B;AAAA;;AAC5B,UAAK,KAAKL,iBAAV,EAA8B;AAC7B;AACH;AACA;AACA;AACA;AACG,cAAM,IAAI9C,aAAJ,CAAmB,2BAAnB,EAAgD,IAAhD,CAAN;AACA;;AAED,WAAK8C,iBAAL,GAAyBK,kBAAzB;AAEA,aAAO;AACNC,QAAAA,EAAE,EAAE,YAAAC,KAAK,EAAI;AACZ,UAAA,KAAI,CAACC,mBAAL,CAA0B,UAAArC,IAAI;AAAA,mBAAI,IAAIoC,KAAJ,CAAWpC,IAAX,CAAJ;AAAA,WAA9B;AACA,SAHK;AAKNsC,QAAAA,KAAK,EAAE,eAAAC,kBAAkB,EAAI;AAC5B,cAAK,OAAOA,kBAAP,IAA6B,UAAlC,EAA+C;AAC9C,YAAA,KAAI,CAACF,mBAAL,CAA0B,UAAArC,IAAI;AAAA,qBAAIuC,kBAAkB,CAAEvC,IAAF,CAAtB;AAAA,aAA9B;AACA,WAFD,MAEO;AACN,YAAA,KAAI,CAACqC,mBAAL,CAA0B,UAAArC,IAAI;AAAA,qBAAIA,IAAI,CAAEuC,kBAAF,CAAR;AAAA,aAA9B;AACA;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","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/collection\n */\n\nimport EmitterMixin from './emittermixin';\nimport CKEditorError from './ckeditorerror';\nimport uid from './uid';\nimport isIterable from './isiterable';\nimport mix from './mix';\n\n/**\n * Collections are ordered sets of objects. Items in the collection can be retrieved by their indexes\n * in the collection (like in an array) or by their ids.\n *\n * If an object without an `id` property is being added to the collection, the `id` property will be generated\n * automatically. Note that the automatically generated id is unique only within this single collection instance.\n *\n * By default an item in the collection is identified by its `id` property. The name of the identifier can be\n * configured through the constructor of the collection.\n *\n * @mixes module:utils/emittermixin~EmitterMixin\n */\nexport default class Collection {\n\t/**\n\t * Creates a new Collection instance.\n\t *\n\t * You can provide an iterable of initial items the collection will be created with:\n\t *\n\t *\t\tconst collection = new Collection( [ { id: 'John' }, { id: 'Mike' } ] );\n\t *\n\t *\t\tconsole.log( collection.get( 0 ) ); // -> { id: 'John' }\n\t *\t\tconsole.log( collection.get( 1 ) ); // -> { id: 'Mike' }\n\t *\t\tconsole.log( collection.get( 'Mike' ) ); // -> { id: 'Mike' }\n\t *\n\t * Or you can first create a collection and then add new items using the {@link #add} method:\n\t *\n\t *\t\tconst collection = new Collection();\n\t *\n\t *\t\tcollection.add( { id: 'John' } );\n\t *\t\tconsole.log( collection.get( 0 ) ); // -> { id: 'John' }\n\t *\n\t * Whatever option you choose, you can always pass a configuration object as the last argument\n\t * of the constructor:\n\t *\n\t *\t\tconst emptyCollection = new Collection( { idProperty: 'name' } );\n\t *\t\temptyCollection.add( { name: 'John' } );\n\t *\t\tconsole.log( collection.get( 'John' ) ); // -> { name: 'John' }\n\t *\n\t *\t\tconst nonEmptyCollection = new Collection( [ { name: 'John' } ], { idProperty: 'name' } );\n\t *\t\tnonEmptyCollection.add( { name: 'George' } );\n\t *\t\tconsole.log( collection.get( 'George' ) ); // -> { name: 'George' }\n\t *\t\tconsole.log( collection.get( 'John' ) ); // -> { name: 'John' }\n\t *\n\t * @param {Iterable.<Object>|Object} initialItemsOrOptions The initial items of the collection or\n\t * the options object.\n\t * @param {Object} [options={}] The options object, when the first argument is an array of initial items.\n\t * @param {String} [options.idProperty='id'] The name of the property which is used to identify an item.\n\t * Items that do not have such a property will be assigned one when added to the collection.\n\t */\n\tconstructor( initialItemsOrOptions = {}, options = {} ) {\n\t\tconst hasInitialItems = isIterable( initialItemsOrOptions );\n\n\t\tif ( !hasInitialItems ) {\n\t\t\toptions = initialItemsOrOptions;\n\t\t}\n\n\t\t/**\n\t\t * The internal list of items in the collection.\n\t\t *\n\t\t * @private\n\t\t * @member {Object[]}\n\t\t */\n\t\tthis._items = [];\n\n\t\t/**\n\t\t * The internal map of items in the collection.\n\t\t *\n\t\t * @private\n\t\t * @member {Map}\n\t\t */\n\t\tthis._itemMap = new Map();\n\n\t\t/**\n\t\t * The name of the property which is considered to identify an item.\n\t\t *\n\t\t * @private\n\t\t * @member {String}\n\t\t */\n\t\tthis._idProperty = options.idProperty || 'id';\n\n\t\t/**\n\t\t * A helper mapping external items of a bound collection ({@link #bindTo})\n\t\t * and actual items of this collection. It provides information\n\t\t * necessary to properly remove items bound to another collection.\n\t\t *\n\t\t * See {@link #_bindToInternalToExternalMap}.\n\t\t *\n\t\t * @protected\n\t\t * @member {WeakMap}\n\t\t */\n\t\tthis._bindToExternalToInternalMap = new WeakMap();\n\n\t\t/**\n\t\t * A helper mapping items of this collection to external items of a bound collection\n\t\t * ({@link #bindTo}). It provides information necessary to manage the bindings, e.g.\n\t\t * to avoid loops in two–way bindings.\n\t\t *\n\t\t * See {@link #_bindToExternalToInternalMap}.\n\t\t *\n\t\t * @protected\n\t\t * @member {WeakMap}\n\t\t */\n\t\tthis._bindToInternalToExternalMap = new WeakMap();\n\n\t\t/**\n\t\t * Stores indexes of skipped items from bound external collection.\n\t\t *\n\t\t * @private\n\t\t * @member {Array}\n\t\t */\n\t\tthis._skippedIndexesFromExternal = [];\n\n\t\t// Set the initial content of the collection (if provided in the constructor).\n\t\tif ( hasInitialItems ) {\n\t\t\tfor ( const item of initialItemsOrOptions ) {\n\t\t\t\tthis._items.push( item );\n\t\t\t\tthis._itemMap.set( this._getItemIdBeforeAdding( item ), item );\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * A collection instance this collection is bound to as a result\n\t\t * of calling {@link #bindTo} method.\n\t\t *\n\t\t * @protected\n\t\t * @member {module:utils/collection~Collection} #_bindToCollection\n\t\t */\n\t}\n\n\t/**\n\t * The number of items available in the collection.\n\t *\n\t * @member {Number} #length\n\t */\n\tget length() {\n\t\treturn this._items.length;\n\t}\n\n\t/**\n\t * Returns the first item from the collection or null when collection is empty.\n\t *\n\t * @returns {Object|null} The first item or `null` if collection is empty.\n\t */\n\tget first() {\n\t\treturn this._items[ 0 ] || null;\n\t}\n\n\t/**\n\t * Returns the last item from the collection or null when collection is empty.\n\t *\n\t * @returns {Object|null} The last item or `null` if collection is empty.\n\t */\n\tget last() {\n\t\treturn this._items[ this.length - 1 ] || null;\n\t}\n\n\t/**\n\t * Adds an item into the collection.\n\t *\n\t * If the item does not have an id, then it will be automatically generated and set on the item.\n\t *\n\t * @chainable\n\t * @param {Object} item\n\t * @param {Number} [index] The position of the item in the collection. The item\n\t * is pushed to the collection when `index` not specified.\n\t * @fires add\n\t * @fires change\n\t */\n\tadd( item, index ) {\n\t\treturn this.addMany( [ item ], index );\n\t}\n\n\t/**\n\t * Adds multiple items into the collection.\n\t *\n\t * Any item not containing an id will get an automatically generated one.\n\t *\n\t * @chainable\n\t * @param {Iterable.<Object>} item\n\t * @param {Number} [index] The position of the insertion. Items will be appended if no `index` is specified.\n\t * @fires add\n\t * @fires change\n\t */\n\taddMany( items, index ) {\n\t\tif ( index === undefined ) {\n\t\t\tindex = this._items.length;\n\t\t} else if ( index > this._items.length || index < 0 ) {\n\t\t\t/**\n\t\t\t * The `index` passed to {@link module:utils/collection~Collection#addMany `Collection#addMany()`}\n\t\t\t * is invalid. It must be a number between 0 and the collection's length.\n\t\t\t *\n\t\t\t * @error collection-add-item-invalid-index\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'collection-add-item-invalid-index', this );\n\t\t}\n\n\t\tfor ( let offset = 0; offset < items.length; offset++ ) {\n\t\t\tconst item = items[ offset ];\n\t\t\tconst itemId = this._getItemIdBeforeAdding( item );\n\t\t\tconst currentItemIndex = index + offset;\n\n\t\t\tthis._items.splice( currentItemIndex, 0, item );\n\t\t\tthis._itemMap.set( itemId, item );\n\n\t\t\tthis.fire( 'add', item, currentItemIndex );\n\t\t}\n\n\t\tthis.fire( 'change', {\n\t\t\tadded: items,\n\t\t\tremoved: [],\n\t\t\tindex\n\t\t} );\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Gets an item by its ID or index.\n\t *\n\t * @param {String|Number} idOrIndex The item ID or index in the collection.\n\t * @returns {Object|null} The requested item or `null` if such item does not exist.\n\t */\n\tget( idOrIndex ) {\n\t\tlet item;\n\n\t\tif ( typeof idOrIndex == 'string' ) {\n\t\t\titem = this._itemMap.get( idOrIndex );\n\t\t} else if ( typeof idOrIndex == 'number' ) {\n\t\t\titem = this._items[ idOrIndex ];\n\t\t} else {\n\t\t\t/**\n\t\t\t * An index or ID must be given.\n\t\t\t *\n\t\t\t * @error collection-get-invalid-arg\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'collection-get-invalid-arg', this );\n\t\t}\n\n\t\treturn item || null;\n\t}\n\n\t/**\n\t * Returns a Boolean indicating whether the collection contains an item.\n\t *\n\t * @param {Object|String} itemOrId The item or its ID in the collection.\n\t * @returns {Boolean} `true` if the collection contains the item, `false` otherwise.\n\t */\n\thas( itemOrId ) {\n\t\tif ( typeof itemOrId == 'string' ) {\n\t\t\treturn this._itemMap.has( itemOrId );\n\t\t} else { // Object\n\t\t\tconst idProperty = this._idProperty;\n\t\t\tconst id = itemOrId[ idProperty ];\n\n\t\t\treturn this._itemMap.has( id );\n\t\t}\n\t}\n\n\t/**\n\t * Gets an index of an item in the collection.\n\t * When an item is not defined in the collection, the index will equal -1.\n\t *\n\t * @param {Object|String} itemOrId The item or its ID in the collection.\n\t * @returns {Number} The index of a given item.\n\t */\n\tgetIndex( itemOrId ) {\n\t\tlet item;\n\n\t\tif ( typeof itemOrId == 'string' ) {\n\t\t\titem = this._itemMap.get( itemOrId );\n\t\t} else {\n\t\t\titem = itemOrId;\n\t\t}\n\n\t\treturn this._items.indexOf( item );\n\t}\n\n\t/**\n\t * Removes an item from the collection.\n\t *\n\t * @param {Object|Number|String} subject The item to remove, its ID or index in the collection.\n\t * @returns {Object} The removed item.\n\t * @fires remove\n\t * @fires change\n\t */\n\tremove( subject ) {\n\t\tconst [ item, index ] = this._remove( subject );\n\n\t\tthis.fire( 'change', {\n\t\t\tadded: [],\n\t\t\tremoved: [ item ],\n\t\t\tindex\n\t\t} );\n\n\t\treturn item;\n\t}\n\n\t/**\n\t * Executes the callback for each item in the collection and composes an array or values returned by this callback.\n\t *\n\t * @param {Function} callback\n\t * @param {Object} callback.item\n\t * @param {Number} callback.index\n\t * @param {Object} ctx Context in which the `callback` will be called.\n\t * @returns {Array} The result of mapping.\n\t */\n\tmap( callback, ctx ) {\n\t\treturn this._items.map( callback, ctx );\n\t}\n\n\t/**\n\t * Finds the first item in the collection for which the `callback` returns a true value.\n\t *\n\t * @param {Function} callback\n\t * @param {Object} callback.item\n\t * @param {Number} callback.index\n\t * @param {Object} ctx Context in which the `callback` will be called.\n\t * @returns {Object} The item for which `callback` returned a true value.\n\t */\n\tfind( callback, ctx ) {\n\t\treturn this._items.find( callback, ctx );\n\t}\n\n\t/**\n\t * Returns an array with items for which the `callback` returned a true value.\n\t *\n\t * @param {Function} callback\n\t * @param {Object} callback.item\n\t * @param {Number} callback.index\n\t * @param {Object} ctx Context in which the `callback` will be called.\n\t * @returns {Object[]} The array with matching items.\n\t */\n\tfilter( callback, ctx ) {\n\t\treturn this._items.filter( callback, ctx );\n\t}\n\n\t/**\n\t * Removes all items from the collection and destroys the binding created using\n\t * {@link #bindTo}.\n\t *\n\t * @fires remove\n\t * @fires change\n\t */\n\tclear() {\n\t\tif ( this._bindToCollection ) {\n\t\t\tthis.stopListening( this._bindToCollection );\n\t\t\tthis._bindToCollection = null;\n\t\t}\n\n\t\tconst removedItems = Array.from( this._items );\n\n\t\twhile ( this.length ) {\n\t\t\tthis._remove( 0 );\n\t\t}\n\n\t\tthis.fire( 'change', {\n\t\t\tadded: [],\n\t\t\tremoved: removedItems,\n\t\t\tindex: 0\n\t\t} );\n\t}\n\n\t/**\n\t * Binds and synchronizes the collection with another one.\n\t *\n\t * The binding can be a simple factory:\n\t *\n\t *\t\tclass FactoryClass {\n\t *\t\t\tconstructor( data ) {\n\t *\t\t\t\tthis.label = data.label;\n\t *\t\t\t}\n\t *\t\t}\n\t *\n\t *\t\tconst source = new Collection( { idProperty: 'label' } );\n\t *\t\tconst target = new Collection();\n\t *\n\t *\t\ttarget.bindTo( source ).as( FactoryClass );\n\t *\n\t *\t\tsource.add( { label: 'foo' } );\n\t *\t\tsource.add( { label: 'bar' } );\n\t *\n\t *\t\tconsole.log( target.length ); // 2\n\t *\t\tconsole.log( target.get( 1 ).label ); // 'bar'\n\t *\n\t *\t\tsource.remove( 0 );\n\t *\t\tconsole.log( target.length ); // 1\n\t *\t\tconsole.log( target.get( 0 ).label ); // 'bar'\n\t *\n\t * or the factory driven by a custom callback:\n\t *\n\t *\t\tclass FooClass {\n\t *\t\t\tconstructor( data ) {\n\t *\t\t\t\tthis.label = data.label;\n\t *\t\t\t}\n\t *\t\t}\n\t *\n\t *\t\tclass BarClass {\n\t *\t\t\tconstructor( data ) {\n\t *\t\t\t\tthis.label = data.label;\n\t *\t\t\t}\n\t *\t\t}\n\t *\n\t *\t\tconst source = new Collection( { idProperty: 'label' } );\n\t *\t\tconst target = new Collection();\n\t *\n\t *\t\ttarget.bindTo( source ).using( ( item ) => {\n\t *\t\t\tif ( item.label == 'foo' ) {\n\t *\t\t\t\treturn new FooClass( item );\n\t *\t\t\t} else {\n\t *\t\t\t\treturn new BarClass( item );\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t *\t\tsource.add( { label: 'foo' } );\n\t *\t\tsource.add( { label: 'bar' } );\n\t *\n\t *\t\tconsole.log( target.length ); // 2\n\t *\t\tconsole.log( target.get( 0 ) instanceof FooClass ); // true\n\t *\t\tconsole.log( target.get( 1 ) instanceof BarClass ); // true\n\t *\n\t * or the factory out of property name:\n\t *\n\t *\t\tconst source = new Collection( { idProperty: 'label' } );\n\t *\t\tconst target = new Collection();\n\t *\n\t *\t\ttarget.bindTo( source ).using( 'label' );\n\t *\n\t *\t\tsource.add( { label: { value: 'foo' } } );\n\t *\t\tsource.add( { label: { value: 'bar' } } );\n\t *\n\t *\t\tconsole.log( target.length ); // 2\n\t *\t\tconsole.log( target.get( 0 ).value ); // 'foo'\n\t *\t\tconsole.log( target.get( 1 ).value ); // 'bar'\n\t *\n\t * It's possible to skip specified items by returning falsy value:\n\t *\n\t *\t\tconst source = new Collection();\n\t *\t\tconst target = new Collection();\n\t *\n\t *\t\ttarget.bindTo( source ).using( item => {\n\t *\t\t\tif ( item.hidden ) {\n\t *\t\t\t\treturn null;\n\t *\t\t\t}\n\t *\n\t *\t\t\treturn item;\n\t *\t\t} );\n\t *\n\t *\t\tsource.add( { hidden: true } );\n\t *\t\tsource.add( { hidden: false } );\n\t *\n\t *\t\tconsole.log( source.length ); // 2\n\t *\t\tconsole.log( target.length ); // 1\n\t *\n\t * **Note**: {@link #clear} can be used to break the binding.\n\t *\n\t * @param {module:utils/collection~Collection} externalCollection A collection to be bound.\n\t * @returns {Object}\n\t * @returns {module:utils/collection~CollectionBindToChain} The binding chain object.\n\t */\n\tbindTo( externalCollection ) {\n\t\tif ( this._bindToCollection ) {\n\t\t\t/**\n\t\t\t * The collection cannot be bound more than once.\n\t\t\t *\n\t\t\t * @error collection-bind-to-rebind\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'collection-bind-to-rebind', this );\n\t\t}\n\n\t\tthis._bindToCollection = externalCollection;\n\n\t\treturn {\n\t\t\tas: Class => {\n\t\t\t\tthis._setUpBindToBinding( item => new Class( item ) );\n\t\t\t},\n\n\t\t\tusing: callbackOrProperty => {\n\t\t\t\tif ( typeof callbackOrProperty == 'function' ) {\n\t\t\t\t\tthis._setUpBindToBinding( item => callbackOrProperty( item ) );\n\t\t\t\t} else {\n\t\t\t\t\tthis._setUpBindToBinding( item => item[ callbackOrProperty ] );\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n\n\t/**\n\t * Finalizes and activates a binding initiated by {#bindTo}.\n\t *\n\t * @protected\n\t * @param {Function} factory A function which produces collection items.\n\t */\n\t_setUpBindToBinding( factory ) {\n\t\tconst externalCollection = this._bindToCollection;\n\n\t\t// Adds the item to the collection once a change has been done to the external collection.\n\t\t//\n\t\t// @private\n\t\tconst addItem = ( evt, externalItem, index ) => {\n\t\t\tconst isExternalBoundToThis = externalCollection._bindToCollection == this;\n\t\t\tconst externalItemBound = externalCollection._bindToInternalToExternalMap.get( externalItem );\n\n\t\t\t// If an external collection is bound to this collection, which makes it a 2–way binding,\n\t\t\t// and the particular external collection item is already bound, don't add it here.\n\t\t\t// The external item has been created **out of this collection's item** and (re)adding it will\n\t\t\t// cause a loop.\n\t\t\tif ( isExternalBoundToThis && externalItemBound ) {\n\t\t\t\tthis._bindToExternalToInternalMap.set( externalItem, externalItemBound );\n\t\t\t\tthis._bindToInternalToExternalMap.set( externalItemBound, externalItem );\n\t\t\t} else {\n\t\t\t\tconst item = factory( externalItem );\n\n\t\t\t\t// When there is no item we need to remember skipped index first and then we can skip this item.\n\t\t\t\tif ( !item ) {\n\t\t\t\t\tthis._skippedIndexesFromExternal.push( index );\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Lets try to put item at the same index as index in external collection\n\t\t\t\t// but when there are a skipped items in one or both collections we need to recalculate this index.\n\t\t\t\tlet finalIndex = index;\n\n\t\t\t\t// When we try to insert item after some skipped items from external collection we need\n\t\t\t\t// to include this skipped items and decrease index.\n\t\t\t\t//\n\t\t\t\t// For the following example:\n\t\t\t\t// external -> [ 'A', 'B - skipped for internal', 'C - skipped for internal' ]\n\t\t\t\t// internal -> [ A ]\n\t\t\t\t//\n\t\t\t\t// Another item is been added at the end of external collection:\n\t\t\t\t// external.add( 'D' )\n\t\t\t\t// external -> [ 'A', 'B - skipped for internal', 'C - skipped for internal', 'D' ]\n\t\t\t\t//\n\t\t\t\t// We can't just add 'D' to internal at the same index as index in external because\n\t\t\t\t// this will produce empty indexes what is invalid:\n\t\t\t\t// internal -> [ 'A', empty, empty, 'D' ]\n\t\t\t\t//\n\t\t\t\t// So we need to include skipped items and decrease index\n\t\t\t\t// internal -> [ 'A', 'D' ]\n\t\t\t\tfor ( const skipped of this._skippedIndexesFromExternal ) {\n\t\t\t\t\tif ( index > skipped ) {\n\t\t\t\t\t\tfinalIndex--;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// We need to take into consideration that external collection could skip some items from\n\t\t\t\t// internal collection.\n\t\t\t\t//\n\t\t\t\t// For the following example:\n\t\t\t\t// internal -> [ 'A', 'B - skipped for external', 'C - skipped for external' ]\n\t\t\t\t// external -> [ A ]\n\t\t\t\t//\n\t\t\t\t// Another item is been added at the end of external collection:\n\t\t\t\t// external.add( 'D' )\n\t\t\t\t// external -> [ 'A', 'D' ]\n\t\t\t\t//\n\t\t\t\t// We need to include skipped items and place new item after them:\n\t\t\t\t// internal -> [ 'A', 'B - skipped for external', 'C - skipped for external', 'D' ]\n\t\t\t\tfor ( const skipped of externalCollection._skippedIndexesFromExternal ) {\n\t\t\t\t\tif ( finalIndex >= skipped ) {\n\t\t\t\t\t\tfinalIndex++;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis._bindToExternalToInternalMap.set( externalItem, item );\n\t\t\t\tthis._bindToInternalToExternalMap.set( item, externalItem );\n\t\t\t\tthis.add( item, finalIndex );\n\n\t\t\t\t// After adding new element to internal collection we need update indexes\n\t\t\t\t// of skipped items in external collection.\n\t\t\t\tfor ( let i = 0; i < externalCollection._skippedIndexesFromExternal.length; i++ ) {\n\t\t\t\t\tif ( finalIndex <= externalCollection._skippedIndexesFromExternal[ i ] ) {\n\t\t\t\t\t\texternalCollection._skippedIndexesFromExternal[ i ]++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t// Load the initial content of the collection.\n\t\tfor ( const externalItem of externalCollection ) {\n\t\t\taddItem( null, externalItem, externalCollection.getIndex( externalItem ) );\n\t\t}\n\n\t\t// Synchronize the with collection as new items are added.\n\t\tthis.listenTo( externalCollection, 'add', addItem );\n\n\t\t// Synchronize the with collection as new items are removed.\n\t\tthis.listenTo( externalCollection, 'remove', ( evt, externalItem, index ) => {\n\t\t\tconst item = this._bindToExternalToInternalMap.get( externalItem );\n\n\t\t\tif ( item ) {\n\t\t\t\tthis.remove( item );\n\t\t\t}\n\n\t\t\t// After removing element from external collection we need update/remove indexes\n\t\t\t// of skipped items in internal collection.\n\t\t\tthis._skippedIndexesFromExternal = this._skippedIndexesFromExternal.reduce( ( result, skipped ) => {\n\t\t\t\tif ( index < skipped ) {\n\t\t\t\t\tresult.push( skipped - 1 );\n\t\t\t\t}\n\n\t\t\t\tif ( index > skipped ) {\n\t\t\t\t\tresult.push( skipped );\n\t\t\t\t}\n\n\t\t\t\treturn result;\n\t\t\t}, [] );\n\t\t} );\n\t}\n\n\t/**\n\t * Returns an unique id property for a given `item`.\n\t *\n\t * The method will generate new id and assign it to the `item` if it doesn't have any.\n\t *\n\t * @private\n\t * @param {Object} item Item to be added.\n\t * @returns {String}\n\t */\n\t_getItemIdBeforeAdding( item ) {\n\t\tconst idProperty = this._idProperty;\n\t\tlet itemId;\n\n\t\tif ( ( idProperty in item ) ) {\n\t\t\titemId = item[ idProperty ];\n\n\t\t\tif ( typeof itemId != 'string' ) {\n\t\t\t\t/**\n\t\t\t\t * This item's ID should be a string.\n\t\t\t\t *\n\t\t\t\t * @error collection-add-invalid-id\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError( 'collection-add-invalid-id', this );\n\t\t\t}\n\n\t\t\tif ( this.get( itemId ) ) {\n\t\t\t\t/**\n\t\t\t\t * This item already exists in the collection.\n\t\t\t\t *\n\t\t\t\t * @error collection-add-item-already-exists\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError( 'collection-add-item-already-exists', this );\n\t\t\t}\n\t\t} else {\n\t\t\titem[ idProperty ] = itemId = uid();\n\t\t}\n\n\t\treturn itemId;\n\t}\n\n\t/**\n\t * Core {@link #remove} method implementation shared in other functions.\n\t *\n\t * In contrast this method **does not** fire the {@link #event:change} event.\n\t *\n\t * @private\n\t * @param {Object} subject The item to remove, its id or index in the collection.\n\t * @returns {Array} Returns an array with the removed item and its index.\n\t * @fires remove\n\t */\n\t_remove( subject ) {\n\t\tlet index, id, item;\n\t\tlet itemDoesNotExist = false;\n\t\tconst idProperty = this._idProperty;\n\n\t\tif ( typeof subject == 'string' ) {\n\t\t\tid = subject;\n\t\t\titem = this._itemMap.get( id );\n\t\t\titemDoesNotExist = !item;\n\n\t\t\tif ( item ) {\n\t\t\t\tindex = this._items.indexOf( item );\n\t\t\t}\n\t\t} else if ( typeof subject == 'number' ) {\n\t\t\tindex = subject;\n\t\t\titem = this._items[ index ];\n\t\t\titemDoesNotExist = !item;\n\n\t\t\tif ( item ) {\n\t\t\t\tid = item[ idProperty ];\n\t\t\t}\n\t\t} else {\n\t\t\titem = subject;\n\t\t\tid = item[ idProperty ];\n\t\t\tindex = this._items.indexOf( item );\n\t\t\titemDoesNotExist = ( index == -1 || !this._itemMap.get( id ) );\n\t\t}\n\n\t\tif ( itemDoesNotExist ) {\n\t\t\t/**\n\t\t\t * Item not found.\n\t\t\t *\n\t\t\t * @error collection-remove-404\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'collection-remove-404', this );\n\t\t}\n\n\t\tthis._items.splice( index, 1 );\n\t\tthis._itemMap.delete( id );\n\n\t\tconst externalItem = this._bindToInternalToExternalMap.get( item );\n\t\tthis._bindToInternalToExternalMap.delete( item );\n\t\tthis._bindToExternalToInternalMap.delete( externalItem );\n\n\t\tthis.fire( 'remove', item, index );\n\n\t\treturn [ item, index ];\n\t}\n\n\t/**\n\t * Iterable interface.\n\t *\n\t * @returns {Iterable.<*>}\n\t */\n\t[ Symbol.iterator ]() {\n\t\treturn this._items[ Symbol.iterator ]();\n\t}\n\n\t/**\n\t * Fired when an item is added to the collection.\n\t *\n\t * @event add\n\t * @param {Object} item The added item.\n\t */\n\n\t/**\n\t * Fired when the collection was changed due to adding or removing items.\n\t *\n\t * @event change\n\t * @param {Iterable.<Object>} added A list of added items.\n\t * @param {Iterable.<Object>} removed A list of removed items.\n\t * @param {Number} index An index where the addition or removal occurred.\n\t */\n\n\t/**\n\t * Fired when an item is removed from the collection.\n\t *\n\t * @event remove\n\t * @param {Object} item The removed item.\n\t * @param {Number} index Index from which item was removed.\n\t */\n}\n\nmix( Collection, EmitterMixin );\n\n/**\n * An object returned by the {@link module:utils/collection~Collection#bindTo `bindTo()`} method\n * providing functions that specify the type of the binding.\n *\n * See the {@link module:utils/collection~Collection#bindTo `bindTo()`} documentation for examples.\n *\n * @interface module:utils/collection~CollectionBindToChain\n */\n\n/**\n * Creates a callback or a property binding.\n *\n * @method #using\n * @param {Function|String} callbackOrProperty  When the function is passed, it should return\n * the collection items. When the string is provided, the property value is used to create the bound collection items.\n */\n\n/**\n * Creates the class factory binding in which items of the source collection are passed to\n * the constructor of the specified class.\n *\n * @method #as\n * @param {Function} Class The class constructor used to create instances in the factory.\n */\n"]}]}