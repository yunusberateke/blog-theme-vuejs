{"remainingRequest":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/babel-loader/lib/index.js!/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-dev-webpack-plugin/lib/translatesourceloader.js?{}!/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-engine/src/view/downcastwriter.js","dependencies":[{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-engine/src/view/downcastwriter.js","mtime":499162500000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-dev-webpack-plugin/lib/translatesourceloader.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-engine/src/view/downcastwriter.js"],"names":["Position","Range","Selection","ContainerElement","AttributeElement","EmptyElement","UIElement","RawElement","CKEditorError","DocumentFragment","isIterable","Text","EditableElement","isPlainObject","DowncastWriter","document","_cloneGroups","Map","selectable","placeOrOffset","options","selection","_setTo","itemOrPosition","offset","_setFocus","children","data","name","attributes","attributeElement","priority","_priority","id","_id","containerElement","isAllowedInsideAttributeElement","undefined","_isAllowedInsideAttributeElement","editableElement","_document","emptyElement","renderFunction","uiElement","render","rawElement","key","value","element","_setAttribute","_removeAttribute","className","_addClass","_removeClass","property","_setStyle","_removeStyle","_setCustomProperty","_removeCustomProperty","positionOrRange","_breakAttributes","_breakAttributesRange","position","parent","is","isAtStart","_createBefore","isAtEnd","newElement","_clone","insert","_createAfter","sourceRange","_createAt","targetPosition","move","positionOffset","positionParent","childCount","index","_remove","_removeFromClonedElementsGroup","mergeAttributes","nodeBefore","getChild","nodeAfter","mergeTextNodes","isSimilar","count","_appendChild","getChildren","prev","next","lastChild","newPosition","_createIn","remove","_createOn","nodes","validateNodesToInsert","nodeGroups","reduce","groups","node","lastGroup","length","breakAttributes","push","start","end","range","_insertNodes","rangeOrItem","validateRangeContainer","isCollapsed","breakStart","breakEnd","parentContainer","removed","_removeChildren","mergePosition","clone","walker","getWalker","direction","ignoreElementEnd","current","item","rangeToRemove","nextPosition","isAfter","parentElement","getAncestors","find","ancestor","isBefore","countBefore","attribute","_wrapRange","_hasNonUiChildren","getLastMatchingPosition","_wrapPosition","viewSelection","getFirstPosition","isEqual","setSelection","newRange","_unwrapChildren","newName","viewElement","getAttributes","groupName","delete","getParentContainer","insertionPosition","breakTextNode","_insertChild","_addToClonedElementsGroup","endPosition","getShiftedBy","startOffset","endOffset","wrapElement","i","wrapPositions","child","isText","isAttribute","_wrapAttributeElement","shouldABeOutsideB","newAttribute","_wrapChildren","offsetChange","_createFromParentsAndOffsets","unwrapElement","unwrapPositions","unwrapped","_unwrapAttributeElement","movePositionToTextNode","fakePosition","createAttributeElement","Number","POSITIVE_INFINITY","wrapRange","wrap","wrapper","toWrap","canBeJoined","getAttributeKeys","hasAttribute","getAttribute","getStyleNames","hasStyle","getStyle","setAttribute","setStyle","getClassNames","hasClass","addClass","toUnwrap","removeAttribute","removeClass","Array","from","removeStyle","forceSplitText","rangeStart","rangeEnd","isContainerOrFragment","offsetAfter","clonedNode","nodesToMove","root","group","get","Set","set","add","_clonesGroup","some","a","b","getIdentity","textToMove","slice","_data","t1","t2","nodeBeforeLength","errorContext","validNodesToInsert","validNode","startContainer","endContainer"],"mappings":";;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA,OAAOA,QAAP,MAAqB,YAArB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,aAAP,MAA0B,6CAA1B;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AACA,OAAOC,UAAP,MAAuB,0CAAvB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,SAASC,aAAT,QAA8B,WAA9B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IACqBC,c;AACpB;AACD;AACA;AACC,0BAAaC,QAAb,EAAwB;AAAA;;AACvB;AACF;AACA;AACA;AACA;AACA;AACE,SAAKA,QAAL,GAAgBA,QAAhB;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;;AACE,SAAKC,YAAL,GAAoB,IAAIC,GAAJ,EAApB;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;WACC,sBAAcC,UAAd,EAA0BC,aAA1B,EAAyCC,OAAzC,EAAmD;AAClD,WAAKL,QAAL,CAAcM,SAAd,CAAwBC,MAAxB,CAAgCJ,UAAhC,EAA4CC,aAA5C,EAA2DC,OAA3D;AACA;AAED;AACD;AACA;AAC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EAAqC;AACpC,UAAKnC,aAAa,CAAEyC,QAAF,CAAb,IAA6BN,OAAO,KAAKX,SAA9C,EAA0D;AACzDW,QAAAA,OAAO,GAAGD,KAAV;AACA;;AAEDC,MAAAA,OAAO,CAACO,SAAR,CAAmBD,QAAnB,EAA6BP,KAA7B;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACC,qBAAaO,QAAb,EAAuBN,OAAvB,EAAiC;AAChCA,MAAAA,OAAO,CAACQ,YAAR,CAAsBF,QAAtB;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACC,2BAAmBR,GAAnB,EAAwBC,KAAxB,EAA+BC,OAA/B,EAAyC;AACxCA,MAAAA,OAAO,CAACS,kBAAR,CAA4BX,GAA5B,EAAiCC,KAAjC;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;;;;WACC,8BAAsBD,GAAtB,EAA2BE,OAA3B,EAAqC;AACpC,aAAOA,OAAO,CAACU,qBAAR,CAA+BZ,GAA/B,CAAP;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACC,yBAAiBa,eAAjB,EAAmC;AAClC,UAAKA,eAAe,YAAY3D,QAAhC,EAA2C;AAC1C,eAAO,KAAK4D,gBAAL,CAAuBD,eAAvB,CAAP;AACA,OAFD,MAEO;AACN,eAAO,KAAKE,qBAAL,CAA4BF,eAA5B,CAAP;AACA;AACD;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACC,wBAAgBG,QAAhB,EAA2B;AAC1B,UAAMd,OAAO,GAAGc,QAAQ,CAACC,MAAzB;;AAEA,UAAK,CAAGf,OAAO,CAACgB,EAAR,CAAY,kBAAZ,CAAR,EAA6C;AAC5C;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,KAAX,EAAkBC,GAAlB,CAAP;AACA;AAED;AACD;AACA;AACA;AACA;AACA;;;;WACC,uBAAekB,IAAf,EAAsB;AACrB,aAAO9H,KAAK,CAACgG,SAAN,CAAiB8B,IAAjB,CAAP;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;;;;WACC,uBAAe/E,OAAf,EAAyB;AACxB,aAAO/C,KAAK,CAAC8F,SAAN,CAAiB/C,OAAjB,CAAP;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACC,yBAAiB9B,UAAjB,EAA6BC,aAA7B,EAA4CC,OAA5C,EAAsD;AACrD,aAAO,IAAIlB,SAAJ,CAAegB,UAAf,EAA2BC,aAA3B,EAA0CC,OAA1C,CAAP;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACC,sBAAc0C,QAAd,EAAwBoC,KAAxB,EAA+BQ,eAA/B,EAAiD;AAChD,UAAIyB,aAAJ,CADgD,CAGhD;AACA;;AACA,UAAKzB,eAAL,EAAuB;AACtByB,QAAAA,aAAa,GAAGsB,kBAAkB,CAAE3F,QAAF,CAAlC;AACA,OAFD,MAEO;AACNqE,QAAAA,aAAa,GAAGrE,QAAQ,CAACC,MAAT,CAAgBC,EAAhB,CAAoB,OAApB,IAAgCF,QAAQ,CAACC,MAAT,CAAgBA,MAAhD,GAAyDD,QAAQ,CAACC,MAAlF;AACA;;AAED,UAAK,CAACoE,aAAN,EAAsB;AACrB;AACH;AACA;AACA;AACA;AACG,cAAM,IAAI3H,aAAJ,CACL,wCADK,EAEL,KAAKO,QAFA,CAAN;AAIA;;AAED,UAAI2I,i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","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module module:engine/view/downcastwriter\n */\n\nimport Position from './position';\nimport Range from './range';\nimport Selection from './selection';\nimport ContainerElement from './containerelement';\nimport AttributeElement from './attributeelement';\nimport EmptyElement from './emptyelement';\nimport UIElement from './uielement';\nimport RawElement from './rawelement';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport DocumentFragment from './documentfragment';\nimport isIterable from '@ckeditor/ckeditor5-utils/src/isiterable';\nimport Text from './text';\nimport EditableElement from './editableelement';\nimport { isPlainObject } from 'lodash-es';\n\n/**\n * View downcast writer.\n *\n * It provides a set of methods used to manipulate view nodes.\n *\n * Do not create an instance of this writer manually. To modify a view structure, use\n * the {@link module:engine/view/view~View#change `View#change()`} block.\n *\n * The `DowncastWriter` is designed to work with semantic views which are the views that were/are being downcasted from the model.\n * To work with ordinary views (e.g. parsed from a pasted content) use the\n * {@link module:engine/view/upcastwriter~UpcastWriter upcast writer}.\n *\n * Read more about changing the view in the {@glink framework/guides/architecture/editing-engine#changing-the-view Changing the view}\n * section of the {@glink framework/guides/architecture/editing-engine Editing engine architecture} guide.\n */\nexport default class DowncastWriter {\n\t/**\n\t * @param {module:engine/view/document~Document} document The view document instance.\n\t */\n\tconstructor( document ) {\n\t\t/**\n\t\t * The view document instance in which this writer operates.\n\t\t *\n\t\t * @readonly\n\t\t * @type {module:engine/view/document~Document}\n\t\t */\n\t\tthis.document = document;\n\n\t\t/**\n\t\t * Holds references to the attribute groups that share the same {@link module:engine/view/attributeelement~AttributeElement#id id}.\n\t\t * The keys are `id`s, the values are `Set`s holding {@link module:engine/view/attributeelement~AttributeElement}s.\n\t\t *\n\t\t * @private\n\t\t * @type {Map.<String,Set>}\n\t\t */\n\t\tthis._cloneGroups = new Map();\n\t}\n\n\t/**\n\t * Sets {@link module:engine/view/documentselection~DocumentSelection selection's} ranges and direction to the\n\t * specified location based on the given {@link module:engine/view/selection~Selectable selectable}.\n\t *\n\t * Usage:\n\t *\n\t *\t\t// Sets selection to the given range.\n\t *\t\tconst range = writer.createRange( start, end );\n\t *\t\twriter.setSelection( range );\n\t *\n\t *\t\t// Sets backward selection to the given range.\n\t *\t\tconst range = writer.createRange( start, end );\n\t *\t\twriter.setSelection( range );\n\t *\n\t *\t\t// Sets selection to given ranges.\n\t * \t\tconst ranges = [ writer.createRange( start1, end2 ), writer.createRange( start2, end2 ) ];\n\t *\t\twriter.setSelection( range );\n\t *\n\t *\t\t// Sets selection to the other selection.\n\t *\t\tconst otherSelection = writer.createSelection();\n\t *\t\twriter.setSelection( otherSelection );\n\t *\n\t * \t\t// Sets collapsed selection at the given position.\n\t *\t\tconst position = writer.createPositionFromPath( root, path );\n\t *\t\twriter.setSelection( position );\n\t *\n\t * \t\t// Sets collapsed selection at the position of given item and offset.\n\t *\t\tconst paragraph = writer.createContainerElement( 'p' );\n\t *\t\twriter.setSelection( paragraph, offset );\n\t *\n\t * Creates a range inside an {@link module:engine/view/element~Element element} which starts before the first child of\n \t * that element and ends after the last child of that element.\n\t *\n\t * \t\twriter.setSelection( paragraph, 'in' );\n\t *\n\t * Creates a range on the {@link module:engine/view/item~Item item} which starts before the item and ends just after the item.\n\t *\n\t *\t\twriter.setSelection( paragraph, 'on' );\n\t *\n\t * \t\t// Removes all ranges.\n\t *\t\twriter.setSelection( null );\n\t *\n\t * `DowncastWriter#setSelection()` allow passing additional options (`backward`, `fake` and `label`) as the last argument.\n\t *\n\t *\t\t// Sets selection as backward.\n\t *\t\twriter.setSelection( range, { backward: true } );\n\t *\n\t *\t\t// Sets selection as fake.\n\t *\t\t// Fake selection does not render as browser native selection over selected elements and is hidden to the user.\n\t * \t\t// This way, no native selection UI artifacts are displayed to the user and selection over elements can be\n\t * \t\t// represented in other way, for example by applying proper CSS class.\n\t *\t\twriter.setSelection( range, { fake: true } );\n\t *\n\t * \t\t// Additionally fake's selection label can be provided. It will be used to describe fake selection in DOM\n\t * \t\t// (and be  properly handled by screen readers).\n\t *\t\twriter.setSelection( range, { fake: true, label: 'foo' } );\n\t *\n\t * @param {module:engine/view/selection~Selectable} selectable\n\t * @param {Number|'before'|'end'|'after'|'on'|'in'} [placeOrOffset] Sets place or offset of the selection.\n\t * @param {Object} [options]\n\t * @param {Boolean} [options.backward] Sets this selection instance to be backward.\n\t * @param {Boolean} [options.fake] Sets this selection instance to be marked as `fake`.\n\t * @param {String} [options.label] Label for the fake selection.\n\t */\n\tsetSelection( selectable, placeOrOffset, options ) {\n\t\tthis.document.selection._setTo( selectable, placeOrOffset, options );\n\t}\n\n\t/**\n\t * Moves {@link module:engine/view/documentselection~DocumentSelection#focus selection's focus} to the specified location.\n\t *\n\t * The location can be specified in the same form as {@link module:engine/view/view~View#createPositionAt view.createPositionAt()}\n\t * parameters.\n\t *\n\t * @param {module:engine/view/item~Item|module:engine/view/position~Position} itemOrPosition\n\t * @param {Number|'end'|'before'|'after'} [offset] Offset or one of the flags. Used only when\n\t * first parameter is a {@link module:engine/view/item~Item view item}.\n\t */\n\tsetSelectionFocus( itemOrPosition, offset ) {\n\t\tthis.document.selection._setFocus( itemOrPosition, offset );\n\t}\n\n\t/**\n\t * Creates a new {@link module:engine/view/documentfragment~DocumentFragment} instance.\n\t *\n\t * @param {module:engine/view/node~Node|Iterable.<module:engine/view/node~Node>} [children]\n\t * A list of nodes to be inserted into the created document fragment.\n\t * @returns {module:engine/view/documentfragment~DocumentFragment} The created document fragment.\n\t */\n\tcreateDocumentFragment( children ) {\n\t\treturn new DocumentFragment( this.document, children );\n\t}\n\n\t/**\n\t * Creates a new {@link module:engine/view/text~Text text node}.\n\t *\n\t *\t\twriter.createText( 'foo' );\n\t *\n\t * @param {String} data The text's data.\n\t * @returns {module:engine/view/text~Text} The created text node.\n\t */\n\tcreateText( data ) {\n\t\treturn new Text( this.document, data );\n\t}\n\n\t/**\n\t * Creates a new {@link module:engine/view/attributeelement~AttributeElement}.\n\t *\n\t *\t\twriter.createAttributeElement( 'strong' );\n\t *\t\twriter.createAttributeElement( 'a', { href: 'foo.bar' } );\n\t *\n\t *\t\t// Make `<a>` element contain other attributes element so the `<a>` element is not broken.\n\t *\t\twriter.createAttributeElement( 'a', { href: 'foo.bar' }, { priority: 5 } );\n\t *\n\t *\t\t// Set `id` of a marker element so it is not joined or merged with \"normal\" elements.\n\t *\t\twriter.createAttributeElement( 'span', { class: 'my-marker' }, { id: 'marker:my' } );\n\t *\n\t * **Note:** By default an `AttributeElement` is split by a\n\t * {@link module:engine/view/containerelement~ContainerElement `ContainerElement`} but this behavior can be modified\n\t * with `isAllowedInsideAttributeElement` option set while {@link #createContainerElement creating the element}.\n\t *\n\t * @param {String} name Name of the element.\n\t * @param {Object} [attributes] Element's attributes.\n\t * @param {Object} [options] Element's options.\n\t * @param {Number} [options.priority] Element's {@link module:engine/view/attributeelement~AttributeElement#priority priority}.\n\t * @param {Number|String} [options.id] Element's {@link module:engine/view/attributeelement~AttributeElement#id id}.\n\t * @returns {module:engine/view/attributeelement~AttributeElement} Created element.\n\t */\n\tcreateAttributeElement( name, attributes, options = {} ) {\n\t\tconst attributeElement = new AttributeElement( this.document, name, attributes );\n\n\t\tif ( options.priority ) {\n\t\t\tattributeElement._priority = options.priority;\n\t\t}\n\n\t\tif ( options.id ) {\n\t\t\tattributeElement._id = options.id;\n\t\t}\n\n\t\treturn attributeElement;\n\t}\n\n\t/**\n\t * Creates a new {@link module:engine/view/containerelement~ContainerElement}.\n\t *\n\t *\t\twriter.createContainerElement( 'p' );\n\t *\n\t *\t\t// Create element with custom attributes.\n\t *\t\twriter.createContainerElement( 'div', { id: 'foo-bar', 'data-baz': '123' } );\n\t *\n\t *\t\t// Create element with custom styles.\n\t *\t\twriter.createContainerElement( 'p', { style: 'font-weight: bold; padding-bottom: 10px' } );\n\t *\n\t *\t\t// Create element with custom classes.\n\t *\t\twriter.createContainerElement( 'p', { class: 'foo bar baz' } );\n\t *\n\t * @param {String} name Name of the element.\n\t * @param {Object} [attributes] Elements attributes.\n\t * @param {Object} [options] Element's options.\n\t * @param {Boolean} [options.isAllowedInsideAttributeElement=false] Whether an element is\n\t * {@link module:engine/view/element~Element#isAllowedInsideAttributeElement allowed inside an AttributeElement} and can be wrapped\n\t * with {@link module:engine/view/attributeelement~AttributeElement} by {@link module:engine/view/downcastwriter~DowncastWriter}.\n\t * @returns {module:engine/view/containerelement~ContainerElement} Created element.\n\t */\n\tcreateContainerElement( name, attributes, options = {} ) {\n\t\tconst containerElement = new ContainerElement( this.document, name, attributes );\n\n\t\tif ( options.isAllowedInsideAttributeElement !== undefined ) {\n\t\t\tcontainerElement._isAllowedInsideAttributeElement = options.isAllowedInsideAttributeElement;\n\t\t}\n\n\t\treturn containerElement;\n\t}\n\n\t/**\n\t * Creates a new {@link module:engine/view/editableelement~EditableElement}.\n\t *\n\t *\t\twriter.createEditableElement( 'div' );\n\t *\t\twriter.createEditableElement( 'div', { id: 'foo-1234' } );\n\t *\n\t * Note: The editable element is to be used in the editing pipeline. Usually, together with\n\t * {@link module:widget/utils~toWidgetEditable `toWidgetEditable()`}.\n\t *\n\t * @param {String} name Name of the element.\n\t * @param {Object} [attributes] Elements attributes.\n\t * @returns {module:engine/view/editableelement~EditableElement} Created element.\n\t */\n\tcreateEditableElement( name, attributes ) {\n\t\tconst editableElement = new EditableElement( this.document, name, attributes );\n\t\teditableElement._document = this.document;\n\n\t\treturn editableElement;\n\t}\n\n\t/**\n\t * Creates a new {@link module:engine/view/emptyelement~EmptyElement}.\n\t *\n\t *\t\twriter.createEmptyElement( 'img' );\n\t *\t\twriter.createEmptyElement( 'img', { id: 'foo-1234' } );\n\t *\n\t * @param {String} name Name of the element.\n\t * @param {Object} [attributes] Elements attributes.\n\t * @param {Object} [options] Element's options.\n\t * @param {Boolean} [options.isAllowedInsideAttributeElement=true] Whether an element is\n\t * {@link module:engine/view/element~Element#isAllowedInsideAttributeElement allowed inside an AttributeElement} and can be wrapped\n\t * with {@link module:engine/view/attributeelement~AttributeElement} by {@link module:engine/view/downcastwriter~DowncastWriter}.\n\t * @returns {module:engine/view/emptyelement~EmptyElement} Created element.\n\t */\n\tcreateEmptyElement( name, attributes, options = {} ) {\n\t\tconst emptyElement = new EmptyElement( this.document, name, attributes );\n\n\t\tif ( options.isAllowedInsideAttributeElement !== undefined ) {\n\t\t\temptyElement._isAllowedInsideAttributeElement = options.isAllowedInsideAttributeElement;\n\t\t}\n\n\t\treturn emptyElement;\n\t}\n\n\t/**\n\t * Creates a new {@link module:engine/view/uielement~UIElement}.\n\t *\n\t *\t\twriter.createUIElement( 'span' );\n\t *\t\twriter.createUIElement( 'span', { id: 'foo-1234' } );\n\t *\n\t * A custom render function can be provided as the third parameter:\n\t *\n\t *\t\twriter.createUIElement( 'span', null, function( domDocument ) {\n\t *\t\t\tconst domElement = this.toDomElement( domDocument );\n\t *\t\t\tdomElement.innerHTML = '<b>this is ui element</b>';\n\t *\n\t *\t\t\treturn domElement;\n\t *\t\t} );\n\t *\n\t * Unlike {@link #createRawElement raw elements}, UI elements are by no means editor content, for instance,\n\t * they are ignored by the editor selection system.\n\t *\n\t * You should not use UI elements as data containers. Check out {@link #createRawElement} instead.\n\t *\n\t * @param {String} name The name of the element.\n\t * @param {Object} [attributes] Element attributes.\n\t * @param {Function} [renderFunction] A custom render function.\n\t * @param {Object} [options] Element's options.\n\t * @param {Boolean} [options.isAllowedInsideAttributeElement=true] Whether an element is\n\t * {@link module:engine/view/element~Element#isAllowedInsideAttributeElement allowed inside an AttributeElement} and can be wrapped\n\t * with {@link module:engine/view/attributeelement~AttributeElement} by {@link module:engine/view/downcastwriter~DowncastWriter}.\n\t * @returns {module:engine/view/uielement~UIElement} The created element.\n\t */\n\tcreateUIElement( name, attributes, renderFunction, options = {} ) {\n\t\tconst uiElement = new UIElement( this.document, name, attributes );\n\n\t\tif ( renderFunction ) {\n\t\t\tuiElement.render = renderFunction;\n\t\t}\n\n\t\tif ( options.isAllowedInsideAttributeElement !== undefined ) {\n\t\t\tuiElement._isAllowedInsideAttributeElement = options.isAllowedInsideAttributeElement;\n\t\t}\n\n\t\treturn uiElement;\n\t}\n\n\t/**\n\t * Creates a new {@link module:engine/view/rawelement~RawElement}.\n\t *\n\t *\t\twriter.createRawElement( 'span', { id: 'foo-1234' }, function( domElement ) {\n\t *\t\t\tdomElement.innerHTML = '<b>This is the raw content of the raw element.</b>';\n\t *\t\t} );\n\t *\n\t * Raw elements work as data containers (\"wrappers\", \"sandboxes\") but their children are not managed or\n\t * even recognized by the editor. This encapsulation allows integrations to maintain custom DOM structures\n\t * in the editor content without, for instance, worrying about compatibility with other editor features.\n\t * Raw elements are a perfect tool for integration with external frameworks and data sources.\n\t *\n\t * Unlike {@link #createUIElement UI elements}, raw elements act like \"real\" editor content (similar to\n\t * {@link module:engine/view/containerelement~ContainerElement} or {@link module:engine/view/emptyelement~EmptyElement}),\n\t * and they are considered by the editor selection.\n\t *\n\t * You should not use raw elements to render the UI in the editor content. Check out {@link #createUIElement `#createUIElement()`}\n\t * instead.\n\t *\n\t * @param {String} name The name of the element.\n\t * @param {Object} [attributes] Element attributes.\n\t * @param {Function} [renderFunction] A custom render function.\n\t * @param {Object} [options] Element's options.\n\t * @param {Boolean} [options.isAllowedInsideAttributeElement=true] Whether an element is\n\t * {@link module:engine/view/element~Element#isAllowedInsideAttributeElement allowed inside an AttributeElement} and can be wrapped\n\t * with {@link module:engine/view/attributeelement~AttributeElement} by {@link module:engine/view/downcastwriter~DowncastWriter}.\n\t * @returns {module:engine/view/rawelement~RawElement} The created element.\n\t */\n\tcreateRawElement( name, attributes, renderFunction, options = {} ) {\n\t\tconst rawElement = new RawElement( this.document, name, attributes );\n\n\t\trawElement.render = renderFunction || ( () => {} );\n\n\t\tif ( options.isAllowedInsideAttributeElement !== undefined ) {\n\t\t\trawElement._isAllowedInsideAttributeElement = options.isAllowedInsideAttributeElement;\n\t\t}\n\n\t\treturn rawElement;\n\t}\n\n\t/**\n\t * Adds or overwrites the element's attribute with a specified key and value.\n\t *\n\t *\t\twriter.setAttribute( 'href', 'http://ckeditor.com', linkElement );\n\t *\n\t * @param {String} key The attribute key.\n\t * @param {String} value The attribute value.\n\t * @param {module:engine/view/element~Element} element\n\t */\n\tsetAttribute( key, value, element ) {\n\t\telement._setAttribute( key, value );\n\t}\n\n\t/**\n\t * Removes attribute from the element.\n\t *\n\t *\t\twriter.removeAttribute( 'href', linkElement );\n\t *\n\t * @param {String} key Attribute key.\n\t * @param {module:engine/view/element~Element} element\n\t */\n\tremoveAttribute( key, element ) {\n\t\telement._removeAttribute( key );\n\t}\n\n\t/**\n\t * Adds specified class to the element.\n\t *\n\t *\t\twriter.addClass( 'foo', linkElement );\n\t *\t\twriter.addClass( [ 'foo', 'bar' ], linkElement );\n\t *\n\t * @param {Array.<String>|String} className\n\t * @param {module:engine/view/element~Element} element\n\t */\n\taddClass( className, element ) {\n\t\telement._addClass( className );\n\t}\n\n\t/**\n\t * Removes specified class from the element.\n\t *\n\t *\t\twriter.removeClass( 'foo', linkElement );\n\t *\t\twriter.removeClass( [ 'foo', 'bar' ], linkElement );\n\t *\n\t * @param {Array.<String>|String} className\n\t * @param {module:engine/view/element~Element} element\n\t */\n\tremoveClass( className, element ) {\n\t\telement._removeClass( className );\n\t}\n\n\t/**\n\t * Adds style to the element.\n\t *\n\t *\t\twriter.setStyle( 'color', 'red', element );\n\t *\t\twriter.setStyle( {\n\t *\t\t\tcolor: 'red',\n\t *\t\t\tposition: 'fixed'\n\t *\t\t}, element );\n\t *\n\t * **Note**: The passed style can be normalized if\n\t * {@link module:engine/controller/datacontroller~DataController#addStyleProcessorRules a particular style processor rule is enabled}.\n\t * See {@link module:engine/view/stylesmap~StylesMap#set `StylesMap#set()`} for details.\n\t *\n\t * @param {String|Object} property Property name or object with key - value pairs.\n\t * @param {String} [value] Value to set. This parameter is ignored if object is provided as the first parameter.\n\t * @param {module:engine/view/element~Element} element Element to set styles on.\n\t */\n\tsetStyle( property, value, element ) {\n\t\tif ( isPlainObject( property ) && element === undefined ) {\n\t\t\telement = value;\n\t\t}\n\n\t\telement._setStyle( property, value );\n\t}\n\n\t/**\n\t * Removes specified style from the element.\n\t *\n\t *\t\twriter.removeStyle( 'color', element ); // Removes 'color' style.\n\t *\t\twriter.removeStyle( [ 'color', 'border-top' ], element ); // Removes both 'color' and 'border-top' styles.\n\t *\n\t * **Note**: This method can work with normalized style names if\n\t * {@link module:engine/controller/datacontroller~DataController#addStyleProcessorRules a particular style processor rule is enabled}.\n\t * See {@link module:engine/view/stylesmap~StylesMap#remove `StylesMap#remove()`} for details.\n\t *\n\t * @param {Array.<String>|String} property\n\t * @param {module:engine/view/element~Element} element\n\t */\n\tremoveStyle( property, element ) {\n\t\telement._removeStyle( property );\n\t}\n\n\t/**\n\t * Sets a custom property on element. Unlike attributes, custom properties are not rendered to the DOM,\n\t * so they can be used to add special data to elements.\n\t *\n\t * @param {String|Symbol} key\n\t * @param {*} value\n\t * @param {module:engine/view/element~Element} element\n\t */\n\tsetCustomProperty( key, value, element ) {\n\t\telement._setCustomProperty( key, value );\n\t}\n\n\t/**\n\t * Removes a custom property stored under the given key.\n\t *\n\t * @param {String|Symbol} key\n\t * @param {module:engine/view/element~Element} element\n\t * @returns {Boolean} Returns true if property was removed.\n\t */\n\tremoveCustomProperty( key, element ) {\n\t\treturn element._removeCustomProperty( key );\n\t}\n\n\t/**\n\t * Breaks attribute elements at the provided position or at the boundaries of a provided range. It breaks attribute elements\n\t * up to their first ancestor that is a container element.\n\t *\n\t * In following examples `<p>` is a container, `<b>` and `<u>` are attribute elements:\n\t *\n\t *\t\t<p>foo<b><u>bar{}</u></b></p> -> <p>foo<b><u>bar</u></b>[]</p>\n\t *\t\t<p>foo<b><u>{}bar</u></b></p> -> <p>foo{}<b><u>bar</u></b></p>\n\t *\t\t<p>foo<b><u>b{}ar</u></b></p> -> <p>foo<b><u>b</u></b>[]<b><u>ar</u></b></p>\n\t *\t\t<p><b>fo{o</b><u>ba}r</u></p> -> <p><b>fo</b><b>o</b><u>ba</u><u>r</u></b></p>\n\t *\n\t * **Note:** {@link module:engine/view/documentfragment~DocumentFragment DocumentFragment} is treated like a container.\n\t *\n\t * **Note:** The difference between {@link module:engine/view/downcastwriter~DowncastWriter#breakAttributes breakAttributes()} and\n\t * {@link module:engine/view/downcastwriter~DowncastWriter#breakContainer breakContainer()} is that `breakAttributes()` breaks all\n\t * {@link module:engine/view/attributeelement~AttributeElement attribute elements} that are ancestors of a given `position`,\n\t * up to the first encountered {@link module:engine/view/containerelement~ContainerElement container element}.\n\t * `breakContainer()` assumes that a given `position` is directly in the container element and breaks that container element.\n\t *\n\t * Throws the `view-writer-invalid-range-container` {@link module:utils/ckeditorerror~CKEditorError CKEditorError}\n\t * when the {@link module:engine/view/range~Range#start start}\n\t * and {@link module:engine/view/range~Range#end end} positions of a passed range are not placed inside same parent container.\n\t *\n\t * Throws the `view-writer-cannot-break-empty-element` {@link module:utils/ckeditorerror~CKEditorError CKEditorError}\n\t * when trying to break attributes inside an {@link module:engine/view/emptyelement~EmptyElement EmptyElement}.\n\t *\n\t * Throws the `view-writer-cannot-break-ui-element` {@link module:utils/ckeditorerror~CKEditorError CKEditorError}\n\t * when trying to break attributes inside a {@link module:engine/view/uielement~UIElement UIElement}.\n\t *\n\t * @see module:engine/view/attributeelement~AttributeElement\n\t * @see module:engine/view/containerelement~ContainerElement\n\t * @see module:engine/view/downcastwriter~DowncastWriter#breakContainer\n\t * @param {module:engine/view/position~Position|module:engine/view/range~Range} positionOrRange The position where\n\t * to break attribute elements.\n\t * @returns {module:engine/view/position~Position|module:engine/view/range~Range} The new position or range, after breaking the\n\t * attribute elements.\n\t */\n\tbreakAttributes( positionOrRange ) {\n\t\tif ( positionOrRange instanceof Position ) {\n\t\t\treturn this._breakAttributes( positionOrRange );\n\t\t} else {\n\t\t\treturn this._breakAttributesRange( positionOrRange );\n\t\t}\n\t}\n\n\t/**\n\t * Breaks a {@link module:engine/view/containerelement~ContainerElement container view element} into two, at the given position.\n\t * The position has to be directly inside the container element and cannot be in the root. It does not break the conrainer view element\n\t * if the position is at the beginning or at the end of its parent element.\n\t *\n\t *\t\t<p>foo^bar</p> -> <p>foo</p><p>bar</p>\n\t *\t\t<div><p>foo</p>^<p>bar</p></div> -> <div><p>foo</p></div><div><p>bar</p></div>\n\t *\t\t<p>^foobar</p> -> ^<p>foobar</p>\n\t *\t\t<p>foobar^</p> -> <p>foobar</p>^\n\t *\n\t * **Note:** The difference between {@link module:engine/view/downcastwriter~DowncastWriter#breakAttributes breakAttributes()} and\n\t * {@link module:engine/view/downcastwriter~DowncastWriter#breakContainer breakContainer()} is that `breakAttributes()` breaks all\n\t * {@link module:engine/view/attributeelement~AttributeElement attribute elements} that are ancestors of a given `position`,\n\t * up to the first encountered {@link module:engine/view/containerelement~ContainerElement container element}.\n\t * `breakContainer()` assumes that the given `position` is directly in the container element and breaks that container element.\n\t *\n\t * @see module:engine/view/attributeelement~AttributeElement\n\t * @see module:engine/view/containerelement~ContainerElement\n\t * @see module:engine/view/downcastwriter~DowncastWriter#breakAttributes\n\t * @param {module:engine/view/position~Position} position The position where to break the element.\n\t * @returns {module:engine/view/position~Position} The position between broken elements. If an element has not been broken,\n\t * the returned position is placed either before or after it.\n\t */\n\tbreakContainer( position ) {\n\t\tconst element = position.parent;\n\n\t\tif ( !( element.is( 'containerElement' ) ) ) {\n\t\t\t/**\n\t\t\t * Trying to break an element which is not a container element.\n\t\t\t *\n\t\t\t * @error view-writer-break-non-container-element\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'view-writer-break-non-container-element', this.document );\n\t\t}\n\n\t\tif ( !element.parent ) {\n\t\t\t/**\n\t\t\t * Trying to break root element.\n\t\t\t *\n\t\t\t * @error view-writer-break-root\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'view-writer-break-root', this.document );\n\t\t}\n\n\t\tif ( position.isAtStart ) {\n\t\t\treturn Position._createBefore( element );\n\t\t} else if ( !position.isAtEnd ) {\n\t\t\tconst newElement = element._clone( false );\n\n\t\t\tthis.insert( Position._createAfter( element ), newElement );\n\n\t\t\tconst sourceRange = new Range( position, Position._createAt( element, 'end' ) );\n\t\t\tconst targetPosition = new Position( newElement, 0 );\n\n\t\t\tthis.move( sourceRange, targetPosition );\n\t\t}\n\n\t\treturn Position._createAfter( element );\n\t}\n\n\t/**\n\t * Merges {@link module:engine/view/attributeelement~AttributeElement attribute elements}. It also merges text nodes if needed.\n\t * Only {@link module:engine/view/attributeelement~AttributeElement#isSimilar similar} attribute elements can be merged.\n\t *\n\t * In following examples `<p>` is a container and `<b>` is an attribute element:\n\t *\n\t *\t\t<p>foo[]bar</p> -> <p>foo{}bar</p>\n\t *\t\t<p><b>foo</b>[]<b>bar</b></p> -> <p><b>foo{}bar</b></p>\n\t *\t\t<p><b foo=\"bar\">a</b>[]<b foo=\"baz\">b</b></p> -> <p><b foo=\"bar\">a</b>[]<b foo=\"baz\">b</b></p>\n\t *\n\t * It will also take care about empty attributes when merging:\n\t *\n\t *\t\t<p><b>[]</b></p> -> <p>[]</p>\n\t *\t\t<p><b>foo</b><i>[]</i><b>bar</b></p> -> <p><b>foo{}bar</b></p>\n\t *\n\t * **Note:** Difference between {@link module:engine/view/downcastwriter~DowncastWriter#mergeAttributes mergeAttributes} and\n\t * {@link module:engine/view/downcastwriter~DowncastWriter#mergeContainers mergeContainers} is that `mergeAttributes` merges two\n\t * {@link module:engine/view/attributeelement~AttributeElement attribute elements} or {@link module:engine/view/text~Text text nodes}\n\t * while `mergeContainer` merges two {@link module:engine/view/containerelement~ContainerElement container elements}.\n\t *\n\t * @see module:engine/view/attributeelement~AttributeElement\n\t * @see module:engine/view/containerelement~ContainerElement\n\t * @see module:engine/view/downcastwriter~DowncastWriter#mergeContainers\n\t * @param {module:engine/view/position~Position} position Merge position.\n\t * @returns {module:engine/view/position~Position} Position after merge.\n\t */\n\tmergeAttributes( position ) {\n\t\tconst positionOffset = position.offset;\n\t\tconst positionParent = position.parent;\n\n\t\t// When inside text node - nothing to merge.\n\t\tif ( positionParent.is( '$text' ) ) {\n\t\t\treturn position;\n\t\t}\n\n\t\t// When inside empty attribute - remove it.\n\t\tif ( positionParent.is( 'attributeElement' ) && positionParent.childCount === 0 ) {\n\t\t\tconst parent = positionParent.parent;\n\t\t\tconst offset = positionParent.index;\n\n\t\t\tpositionParent._remove();\n\t\t\tthis._removeFromClonedElementsGroup( positionParent );\n\n\t\t\treturn this.mergeAttributes( new Position( parent, offset ) );\n\t\t}\n\n\t\tconst nodeBefore = positionParent.getChild( positionOffset - 1 );\n\t\tconst nodeAfter = positionParent.getChild( positionOffset );\n\n\t\t// Position should be placed between two nodes.\n\t\tif ( !nodeBefore || !nodeAfter ) {\n\t\t\treturn position;\n\t\t}\n\n\t\t// When position is between two text nodes.\n\t\tif ( nodeBefore.is( '$text' ) && nodeAfter.is( '$text' ) ) {\n\t\t\treturn mergeTextNodes( nodeBefore, nodeAfter );\n\t\t}\n\t\t// When position is between two same attribute elements.\n\t\telse if ( nodeBefore.is( 'attributeElement' ) && nodeAfter.is( 'attributeElement' ) && nodeBefore.isSimilar( nodeAfter ) ) {\n\t\t\t// Move all children nodes from node placed after selection and remove that node.\n\t\t\tconst count = nodeBefore.childCount;\n\t\t\tnodeBefore._appendChild( nodeAfter.getChildren() );\n\n\t\t\tnodeAfter._remove();\n\t\t\tthis._removeFromClonedElementsGroup( nodeAfter );\n\n\t\t\t// New position is located inside the first node, before new nodes.\n\t\t\t// Call this method recursively to merge again if needed.\n\t\t\treturn this.mergeAttributes( new Position( nodeBefore, count ) );\n\t\t}\n\n\t\treturn position;\n\t}\n\n\t/**\n\t * Merges two {@link module:engine/view/containerelement~ContainerElement container elements} that are before and after given position.\n\t * Precisely, the element after the position is removed and it's contents are moved to element before the position.\n\t *\n\t *\t\t<p>foo</p>^<p>bar</p> -> <p>foo^bar</p>\n\t *\t\t<div>foo</div>^<p>bar</p> -> <div>foo^bar</div>\n\t *\n\t * **Note:** Difference between {@link module:engine/view/downcastwriter~DowncastWriter#mergeAttributes mergeAttributes} and\n\t * {@link module:engine/view/downcastwriter~DowncastWriter#mergeContainers mergeContainers} is that `mergeAttributes` merges two\n\t * {@link module:engine/view/attributeelement~AttributeElement attribute elements} or {@link module:engine/view/text~Text text nodes}\n\t * while `mergeContainer` merges two {@link module:engine/view/containerelement~ContainerElement container elements}.\n\t *\n\t * @see module:engine/view/attributeelement~AttributeElement\n\t * @see module:engine/view/containerelement~ContainerElement\n\t * @see module:engine/view/downcastwriter~DowncastWriter#mergeAttributes\n\t * @param {module:engine/view/position~Position} position Merge position.\n\t * @returns {module:engine/view/position~Position} Position after merge.\n\t */\n\tmergeContainers( position ) {\n\t\tconst prev = position.nodeBefore;\n\t\tconst next = position.nodeAfter;\n\n\t\tif ( !prev || !next || !prev.is( 'containerElement' ) || !next.is( 'containerElement' ) ) {\n\t\t\t/**\n\t\t\t * Element before and after given position cannot be merged.\n\t\t\t *\n\t\t\t * @error view-writer-merge-containers-invalid-position\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'view-writer-merge-containers-invalid-position', this.document );\n\t\t}\n\n\t\tconst lastChild = prev.getChild( prev.childCount - 1 );\n\t\tconst newPosition = lastChild instanceof Text ? Position._createAt( lastChild, 'end' ) : Position._createAt( prev, 'end' );\n\n\t\tthis.move( Range._createIn( next ), Position._createAt( prev, 'end' ) );\n\t\tthis.remove( Range._createOn( next ) );\n\n\t\treturn newPosition;\n\t}\n\n\t/**\n\t * Inserts a node or nodes at specified position. Takes care about breaking attributes before insertion\n\t * and merging them afterwards.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-writer-insert-invalid-node` when nodes to insert\n\t * contains instances that are not {@link module:engine/view/text~Text Texts},\n\t * {@link module:engine/view/attributeelement~AttributeElement AttributeElements},\n\t * {@link module:engine/view/containerelement~ContainerElement ContainerElements},\n\t * {@link module:engine/view/emptyelement~EmptyElement EmptyElements},\n\t * {@link module:engine/view/rawelement~RawElement RawElements} or\n\t * {@link module:engine/view/uielement~UIElement UIElements}.\n\t *\n\t * @param {module:engine/view/position~Position} position Insertion position.\n\t * @param {module:engine/view/text~Text|module:engine/view/attributeelement~AttributeElement|\n\t * module:engine/view/containerelement~ContainerElement|module:engine/view/emptyelement~EmptyElement|\n\t * module:engine/view/rawelement~RawElement|module:engine/view/uielement~UIElement|\n\t * Iterable.<module:engine/view/text~Text|\n\t * module:engine/view/attributeelement~AttributeElement|module:engine/view/containerelement~ContainerElement|\n\t * module:engine/view/emptyelement~EmptyElement|module:engine/view/rawelement~RawElement|\n\t * module:engine/view/uielement~UIElement>} nodes Node or nodes to insert.\n\t * @returns {module:engine/view/range~Range} Range around inserted nodes.\n\t */\n\tinsert( position, nodes ) {\n\t\tnodes = isIterable( nodes ) ? [ ...nodes ] : [ nodes ];\n\n\t\t// Check if nodes to insert are instances of AttributeElements, ContainerElements, EmptyElements, UIElements or Text.\n\t\tvalidateNodesToInsert( nodes, this.document );\n\n\t\t// Group nodes in batches of nodes that require or do not require breaking an AttributeElements.\n\t\tconst nodeGroups = nodes.reduce( ( groups, node ) => {\n\t\t\tconst lastGroup = groups[ groups.length - 1 ];\n\n\t\t\t// Break attributes on nodes that do exist in the model tree so they can have attributes, other elements\n\t\t\t// can't have an attribute in model and won't get wrapped with an AttributeElement while down-casted.\n\t\t\tconst breakAttributes = !( node.is( 'uiElement' ) && node.isAllowedInsideAttributeElement );\n\n\t\t\tif ( !lastGroup || lastGroup.breakAttributes != breakAttributes ) {\n\t\t\t\tgroups.push( {\n\t\t\t\t\tbreakAttributes,\n\t\t\t\t\tnodes: [ node ]\n\t\t\t\t} );\n\t\t\t} else {\n\t\t\t\tlastGroup.nodes.push( node );\n\t\t\t}\n\n\t\t\treturn groups;\n\t\t}, [] );\n\n\t\t// Insert nodes in batches.\n\t\tlet start = null;\n\t\tlet end = position;\n\n\t\tfor ( const { nodes, breakAttributes } of nodeGroups ) {\n\t\t\tconst range = this._insertNodes( end, nodes, breakAttributes );\n\n\t\t\tif ( !start ) {\n\t\t\t\tstart = range.start;\n\t\t\t}\n\n\t\t\tend = range.end;\n\t\t}\n\n\t\t// When no nodes were inserted - return collapsed range.\n\t\tif ( !start ) {\n\t\t\treturn new Range( position );\n\t\t}\n\n\t\treturn new Range( start, end );\n\t}\n\n\t/**\n\t * Removes provided range from the container.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-writer-invalid-range-container` when\n\t * {@link module:engine/view/range~Range#start start} and {@link module:engine/view/range~Range#end end} positions are not placed inside\n\t * same parent container.\n\t *\n\t * @param {module:engine/view/range~Range|module:engine/view/item~Item} rangeOrItem Range to remove from container\n\t * or an {@link module:engine/view/item~Item item} to remove. If range is provided, after removing, it will be updated\n\t * to a collapsed range showing the new position.\n\t * @returns {module:engine/view/documentfragment~DocumentFragment} Document fragment containing removed nodes.\n\t */\n\tremove( rangeOrItem ) {\n\t\tconst range = rangeOrItem instanceof Range ? rangeOrItem : Range._createOn( rangeOrItem );\n\n\t\tvalidateRangeContainer( range, this.document );\n\n\t\t// If range is collapsed - nothing to remove.\n\t\tif ( range.isCollapsed ) {\n\t\t\treturn new DocumentFragment( this.document );\n\t\t}\n\n\t\t// Break attributes at range start and end.\n\t\tconst { start: breakStart, end: breakEnd } = this._breakAttributesRange( range, true );\n\t\tconst parentContainer = breakStart.parent;\n\n\t\tconst count = breakEnd.offset - breakStart.offset;\n\n\t\t// Remove nodes in range.\n\t\tconst removed = parentContainer._removeChildren( breakStart.offset, count );\n\n\t\tfor ( const node of removed ) {\n\t\t\tthis._removeFromClonedElementsGroup( node );\n\t\t}\n\n\t\t// Merge after removing.\n\t\tconst mergePosition = this.mergeAttributes( breakStart );\n\t\trange.start = mergePosition;\n\t\trange.end = mergePosition.clone();\n\n\t\t// Return removed nodes.\n\t\treturn new DocumentFragment( this.document, removed );\n\t}\n\n\t/**\n\t * Removes matching elements from given range.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-writer-invalid-range-container` when\n\t * {@link module:engine/view/range~Range#start start} and {@link module:engine/view/range~Range#end end} positions are not placed inside\n\t * same parent container.\n\t *\n\t * @param {module:engine/view/range~Range} range Range to clear.\n\t * @param {module:engine/view/element~Element} element Element to remove.\n\t */\n\tclear( range, element ) {\n\t\tvalidateRangeContainer( range, this.document );\n\n\t\t// Create walker on given range.\n\t\t// We walk backward because when we remove element during walk it modifies range end position.\n\t\tconst walker = range.getWalker( {\n\t\t\tdirection: 'backward',\n\t\t\tignoreElementEnd: true\n\t\t} );\n\n\t\t// Let's walk.\n\t\tfor ( const current of walker ) {\n\t\t\tconst item = current.item;\n\t\t\tlet rangeToRemove;\n\n\t\t\t// When current item matches to the given element.\n\t\t\tif ( item.is( 'element' ) && element.isSimilar( item ) ) {\n\t\t\t\t// Create range on this element.\n\t\t\t\trangeToRemove = Range._createOn( item );\n\t\t\t\t// When range starts inside Text or TextProxy element.\n\t\t\t} else if ( !current.nextPosition.isAfter( range.start ) && item.is( '$textProxy' ) ) {\n\t\t\t\t// We need to check if parent of this text matches to given element.\n\t\t\t\tconst parentElement = item.getAncestors().find( ancestor => {\n\t\t\t\t\treturn ancestor.is( 'element' ) && element.isSimilar( ancestor );\n\t\t\t\t} );\n\n\t\t\t\t// If it is then create range inside this element.\n\t\t\t\tif ( parentElement ) {\n\t\t\t\t\trangeToRemove = Range._createIn( parentElement );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// If we have found element to remove.\n\t\t\tif ( rangeToRemove ) {\n\t\t\t\t// We need to check if element range stick out of the given range and truncate if it is.\n\t\t\t\tif ( rangeToRemove.end.isAfter( range.end ) ) {\n\t\t\t\t\trangeToRemove.end = range.end;\n\t\t\t\t}\n\n\t\t\t\tif ( rangeToRemove.start.isBefore( range.start ) ) {\n\t\t\t\t\trangeToRemove.start = range.start;\n\t\t\t\t}\n\n\t\t\t\t// At the end we remove range with found element.\n\t\t\t\tthis.remove( rangeToRemove );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Moves nodes from provided range to target position.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-writer-invalid-range-container` when\n\t * {@link module:engine/view/range~Range#start start} and {@link module:engine/view/range~Range#end end} positions are not placed inside\n\t * same parent container.\n\t *\n\t * @param {module:engine/view/range~Range} sourceRange Range containing nodes to move.\n\t * @param {module:engine/view/position~Position} targetPosition Position to insert.\n\t * @returns {module:engine/view/range~Range} Range in target container. Inserted nodes are placed between\n\t * {@link module:engine/view/range~Range#start start} and {@link module:engine/view/range~Range#end end} positions.\n\t */\n\tmove( sourceRange, targetPosition ) {\n\t\tlet nodes;\n\n\t\tif ( targetPosition.isAfter( sourceRange.end ) ) {\n\t\t\ttargetPosition = this._breakAttributes( targetPosition, true );\n\n\t\t\tconst parent = targetPosition.parent;\n\t\t\tconst countBefore = parent.childCount;\n\n\t\t\tsourceRange = this._breakAttributesRange( sourceRange, true );\n\n\t\t\tnodes = this.remove( sourceRange );\n\n\t\t\ttargetPosition.offset += ( parent.childCount - countBefore );\n\t\t} else {\n\t\t\tnodes = this.remove( sourceRange );\n\t\t}\n\n\t\treturn this.insert( targetPosition, nodes );\n\t}\n\n\t/**\n\t * Wraps elements within range with provided {@link module:engine/view/attributeelement~AttributeElement AttributeElement}.\n\t * If a collapsed range is provided, it will be wrapped only if it is equal to view selection.\n\t *\n\t * If a collapsed range was passed and is same as selection, the selection\n\t * will be moved to the inside of the wrapped attribute element.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError} `view-writer-invalid-range-container`\n\t * when {@link module:engine/view/range~Range#start}\n\t * and {@link module:engine/view/range~Range#end} positions are not placed inside same parent container.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError} `view-writer-wrap-invalid-attribute` when passed attribute element is not\n\t * an instance of {@link module:engine/view/attributeelement~AttributeElement AttributeElement}.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError} `view-writer-wrap-nonselection-collapsed-range` when passed range\n\t * is collapsed and different than view selection.\n\t *\n\t * **Note:** Attribute elements by default can wrap {@link module:engine/view/text~Text},\n\t * {@link module:engine/view/emptyelement~EmptyElement}, {@link module:engine/view/uielement~UIElement},\n\t * {@link module:engine/view/rawelement~RawElement} and other attribute elements with higher priority. Other elements while placed\n\t * inside an attribute element will split it (or nest it in case of an `AttributeElement`). This behavior can be modified by changing\n\t * the `isAllowedInsideAttributeElement` option while using\n\t * {@link module:engine/view/downcastwriter~DowncastWriter#createContainerElement},\n\t * {@link module:engine/view/downcastwriter~DowncastWriter#createEmptyElement},\n\t * {@link module:engine/view/downcastwriter~DowncastWriter#createUIElement} or\n\t * {@link module:engine/view/downcastwriter~DowncastWriter#createRawElement}.\n\t *\n\t * @param {module:engine/view/range~Range} range Range to wrap.\n\t * @param {module:engine/view/attributeelement~AttributeElement} attribute Attribute element to use as wrapper.\n\t * @returns {module:engine/view/range~Range} range Range after wrapping, spanning over wrapping attribute element.\n\t */\n\twrap( range, attribute ) {\n\t\tif ( !( attribute instanceof AttributeElement ) ) {\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'view-writer-wrap-invalid-attribute',\n\t\t\t\tthis.document\n\t\t\t);\n\t\t}\n\n\t\tvalidateRangeContainer( range, this.document );\n\n\t\tif ( !range.isCollapsed ) {\n\t\t\t// Non-collapsed range. Wrap it with the attribute element.\n\t\t\treturn this._wrapRange( range, attribute );\n\t\t} else {\n\t\t\t// Collapsed range. Wrap position.\n\t\t\tlet position = range.start;\n\n\t\t\tif ( position.parent.is( 'element' ) && !_hasNonUiChildren( position.parent ) ) {\n\t\t\t\tposition = position.getLastMatchingPosition( value => value.item.is( 'uiElement' ) );\n\t\t\t}\n\n\t\t\tposition = this._wrapPosition( position, attribute );\n\t\t\tconst viewSelection = this.document.selection;\n\n\t\t\t// If wrapping position is equal to view selection, move view selection inside wrapping attribute element.\n\t\t\tif ( viewSelection.isCollapsed && viewSelection.getFirstPosition().isEqual( range.start ) ) {\n\t\t\t\tthis.setSelection( position );\n\t\t\t}\n\n\t\t\treturn new Range( position );\n\t\t}\n\t}\n\n\t/**\n\t * Unwraps nodes within provided range from attribute element.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-writer-invalid-range-container` when\n\t * {@link module:engine/view/range~Range#start start} and {@link module:engine/view/range~Range#end end} positions are not placed inside\n\t * same parent container.\n\t *\n\t * @param {module:engine/view/range~Range} range\n\t * @param {module:engine/view/attributeelement~AttributeElement} attribute\n\t */\n\tunwrap( range, attribute ) {\n\t\tif ( !( attribute instanceof AttributeElement ) ) {\n\t\t\t/**\n\t\t\t * The `attribute` passed to {@link module:engine/view/downcastwriter~DowncastWriter#unwrap `DowncastWriter#unwrap()`}\n\t\t\t * must be an instance of {@link module:engine/view/attributeelement~AttributeElement `AttributeElement`}.\n\t\t\t *\n\t\t\t * @error view-writer-unwrap-invalid-attribute\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'view-writer-unwrap-invalid-attribute',\n\t\t\t\tthis.document\n\t\t\t);\n\t\t}\n\n\t\tvalidateRangeContainer( range, this.document );\n\n\t\t// If range is collapsed - nothing to unwrap.\n\t\tif ( range.isCollapsed ) {\n\t\t\treturn range;\n\t\t}\n\n\t\t// Break attributes at range start and end.\n\t\tconst { start: breakStart, end: breakEnd } = this._breakAttributesRange( range, true );\n\t\tconst parentContainer = breakStart.parent;\n\n\t\t// Unwrap children located between break points.\n\t\tconst newRange = this._unwrapChildren( parentContainer, breakStart.offset, breakEnd.offset, attribute );\n\n\t\t// Merge attributes at the both ends and return a new range.\n\t\tconst start = this.mergeAttributes( newRange.start );\n\n\t\t// If start position was merged - move end position back.\n\t\tif ( !start.isEqual( newRange.start ) ) {\n\t\t\tnewRange.end.offset--;\n\t\t}\n\n\t\tconst end = this.mergeAttributes( newRange.end );\n\n\t\treturn new Range( start, end );\n\t}\n\n\t/**\n\t * Renames element by creating a copy of renamed element but with changed name and then moving contents of the\n\t * old element to the new one. Keep in mind that this will invalidate all {@link module:engine/view/position~Position positions} which\n\t * has renamed element as {@link module:engine/view/position~Position#parent a parent}.\n\t *\n\t * New element has to be created because `Element#tagName` property in DOM is readonly.\n\t *\n\t * Since this function creates a new element and removes the given one, the new element is returned to keep reference.\n\t *\n\t * @param {String} newName New name for element.\n\t * @param {module:engine/view/containerelement~ContainerElement} viewElement Element to be renamed.\n\t * @returns {module:engine/view/containerelement~ContainerElement} Element created due to rename.\n\t */\n\trename( newName, viewElement ) {\n\t\tconst newElement = new ContainerElement( this.document, newName, viewElement.getAttributes() );\n\n\t\tthis.insert( Position._createAfter( viewElement ), newElement );\n\t\tthis.move( Range._createIn( viewElement ), Position._createAt( newElement, 0 ) );\n\t\tthis.remove( Range._createOn( viewElement ) );\n\n\t\treturn newElement;\n\t}\n\n\t/**\n\t * Cleans up memory by removing obsolete cloned elements group from the writer.\n\t *\n\t * Should be used whenever all {@link module:engine/view/attributeelement~AttributeElement attribute elements}\n\t * with the same {@link module:engine/view/attributeelement~AttributeElement#id id} are going to be removed from the view and\n\t * the group will no longer be needed.\n\t *\n\t * Cloned elements group are not removed automatically in case if the group is still needed after all its elements\n\t * were removed from the view.\n\t *\n\t * Keep in mind that group names are equal to the `id` property of the attribute element.\n\t *\n\t * @param {String} groupName Name of the group to clear.\n\t */\n\tclearClonedElementsGroup( groupName ) {\n\t\tthis._cloneGroups.delete( groupName );\n\t}\n\n\t/**\n\t * Creates position at the given location. The location can be specified as:\n\t *\n\t * * a {@link module:engine/view/position~Position position},\n\t * * parent element and offset (offset defaults to `0`),\n\t * * parent element and `'end'` (sets position at the end of that element),\n\t * * {@link module:engine/view/item~Item view item} and `'before'` or `'after'` (sets position before or after given view item).\n\t *\n\t * This method is a shortcut to other constructors such as:\n\t *\n\t * * {@link #createPositionBefore},\n\t * * {@link #createPositionAfter},\n\t *\n\t * @param {module:engine/view/item~Item|module:engine/model/position~Position} itemOrPosition\n\t * @param {Number|'end'|'before'|'after'} [offset] Offset or one of the flags. Used only when\n\t * first parameter is a {@link module:engine/view/item~Item view item}.\n\t */\n\tcreatePositionAt( itemOrPosition, offset ) {\n\t\treturn Position._createAt( itemOrPosition, offset );\n\t}\n\n\t/**\n\t * Creates a new position after given view item.\n\t *\n\t * @param {module:engine/view/item~Item} item View item after which the position should be located.\n\t * @returns {module:engine/view/position~Position}\n\t */\n\tcreatePositionAfter( item ) {\n\t\treturn Position._createAfter( item );\n\t}\n\n\t/**\n\t * Creates a new position before given view item.\n\t *\n\t * @param {module:engine/view/item~Item} item View item before which the position should be located.\n\t * @returns {module:engine/view/position~Position}\n\t */\n\tcreatePositionBefore( item ) {\n\t\treturn Position._createBefore( item );\n\t}\n\n\t/**\n\t * Creates a range spanning from `start` position to `end` position.\n\t *\n\t * **Note:** This factory method creates its own {@link module:engine/view/position~Position} instances basing on passed values.\n\t *\n\t * @param {module:engine/view/position~Position} start Start position.\n\t * @param {module:engine/view/position~Position} [end] End position. If not set, range will be collapsed at `start` position.\n\t * @returns {module:engine/view/range~Range}\n\t */\n\tcreateRange( start, end ) {\n\t\treturn new Range( start, end );\n\t}\n\n\t/**\n\t * Creates a range that starts before given {@link module:engine/view/item~Item view item} and ends after it.\n\t *\n\t * @param {module:engine/view/item~Item} item\n\t * @returns {module:engine/view/range~Range}\n\t */\n\tcreateRangeOn( item ) {\n\t\treturn Range._createOn( item );\n\t}\n\n\t/**\n\t * Creates a range inside an {@link module:engine/view/element~Element element} which starts before the first child of\n\t * that element and ends after the last child of that element.\n\t *\n\t * @param {module:engine/view/element~Element} element Element which is a parent for the range.\n\t * @returns {module:engine/view/range~Range}\n\t */\n\tcreateRangeIn( element ) {\n\t\treturn Range._createIn( element );\n\t}\n\n\t/**\n\t Creates new {@link module:engine/view/selection~Selection} instance.\n\t *\n\t * \t\t// Creates empty selection without ranges.\n\t *\t\tconst selection = writer.createSelection();\n\t *\n\t *\t\t// Creates selection at the given range.\n\t *\t\tconst range = writer.createRange( start, end );\n\t *\t\tconst selection = writer.createSelection( range );\n\t *\n\t *\t\t// Creates selection at the given ranges\n\t * \t\tconst ranges = [ writer.createRange( start1, end2 ), writer.createRange( star2, end2 ) ];\n\t *\t\tconst selection = writer.createSelection( ranges );\n\t *\n\t *\t\t// Creates selection from the other selection.\n\t *\t\tconst otherSelection = writer.createSelection();\n\t *\t\tconst selection = writer.createSelection( otherSelection );\n\t *\n\t *\t\t// Creates selection from the document selection.\n\t *\t\tconst selection = writer.createSelection( editor.editing.view.document.selection );\n\t *\n\t * \t\t// Creates selection at the given position.\n\t *\t\tconst position = writer.createPositionFromPath( root, path );\n\t *\t\tconst selection = writer.createSelection( position );\n\t *\n\t *\t\t// Creates collapsed selection at the position of given item and offset.\n\t *\t\tconst paragraph = writer.createContainerElement( 'p' );\n\t *\t\tconst selection = writer.createSelection( paragraph, offset );\n\t *\n\t *\t\t// Creates a range inside an {@link module:engine/view/element~Element element} which starts before the\n\t *\t\t// first child of that element and ends after the last child of that element.\n\t *\t\tconst selection = writer.createSelection( paragraph, 'in' );\n\t *\n\t *\t\t// Creates a range on an {@link module:engine/view/item~Item item} which starts before the item and ends\n\t *\t\t// just after the item.\n\t *\t\tconst selection = writer.createSelection( paragraph, 'on' );\n\t *\n\t * `Selection`'s constructor allow passing additional options (`backward`, `fake` and `label`) as the last argument.\n\t *\n\t *\t\t// Creates backward selection.\n\t *\t\tconst selection = writer.createSelection( range, { backward: true } );\n\t *\n\t * Fake selection does not render as browser native selection over selected elements and is hidden to the user.\n\t * This way, no native selection UI artifacts are displayed to the user and selection over elements can be\n\t * represented in other way, for example by applying proper CSS class.\n\t *\n\t * Additionally fake's selection label can be provided. It will be used to describe fake selection in DOM\n\t * (and be  properly handled by screen readers).\n\t *\n\t *\t\t// Creates fake selection with label.\n\t *\t\tconst selection = writer.createSelection( range, { fake: true, label: 'foo' } );\n\t *\n\t * @param {module:engine/view/selection~Selectable} [selectable=null]\n\t * @param {Number|'before'|'end'|'after'|'on'|'in'} [placeOrOffset] Offset or place when selectable is an `Item`.\n\t * @param {Object} [options]\n\t * @param {Boolean} [options.backward] Sets this selection instance to be backward.\n\t * @param {Boolean} [options.fake] Sets this selection instance to be marked as `fake`.\n\t * @param {String} [options.label] Label for the fake selection.\n\t * @returns {module:engine/view/selection~Selection}\n\t */\n\tcreateSelection( selectable, placeOrOffset, options ) {\n\t\treturn new Selection( selectable, placeOrOffset, options );\n\t}\n\n\t/**\n\t * Inserts a node or nodes at the specified position. Takes care of breaking attributes before insertion\n\t * and merging them afterwards if requested by the breakAttributes param.\n\t *\n\t * @private\n\t * @param {module:engine/view/position~Position} position Insertion position.\n\t * @param {module:engine/view/text~Text|module:engine/view/attributeelement~AttributeElement|\n\t * module:engine/view/containerelement~ContainerElement|module:engine/view/emptyelement~EmptyElement|\n\t * module:engine/view/rawelement~RawElement|module:engine/view/uielement~UIElement|\n\t * Iterable.<module:engine/view/text~Text|\n\t * module:engine/view/attributeelement~AttributeElement|module:engine/view/containerelement~ContainerElement|\n\t * module:engine/view/emptyelement~EmptyElement|module:engine/view/rawelement~RawElement|\n\t * module:engine/view/uielement~UIElement>} nodes Node or nodes to insert.\n\t * @param {Boolean} breakAttributes Whether attributes should be broken.\n\t * @returns {module:engine/view/range~Range} Range around inserted nodes.\n\t */\n\t_insertNodes( position, nodes, breakAttributes ) {\n\t\tlet parentElement;\n\n\t\t// Break attributes on nodes that do exist in the model tree so they can have attributes, other elements\n\t\t// can't have an attribute in model and won't get wrapped with an AttributeElement while down-casted.\n\t\tif ( breakAttributes ) {\n\t\t\tparentElement = getParentContainer( position );\n\t\t} else {\n\t\t\tparentElement = position.parent.is( '$text' ) ? position.parent.parent : position.parent;\n\t\t}\n\n\t\tif ( !parentElement ) {\n\t\t\t/**\n\t\t\t * Position's parent container cannot be found.\n\t\t\t *\n\t\t\t * @error view-writer-invalid-position-container\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'view-writer-invalid-position-container',\n\t\t\t\tthis.document\n\t\t\t);\n\t\t}\n\n\t\tlet insertionPosition;\n\n\t\tif ( breakAttributes ) {\n\t\t\tinsertionPosition = this._breakAttributes( position, true );\n\t\t} else {\n\t\t\tinsertionPosition = position.parent.is( '$text' ) ? breakTextNode( position ) : position;\n\t\t}\n\n\t\tconst length = parentElement._insertChild( insertionPosition.offset, nodes );\n\n\t\tfor ( const node of nodes ) {\n\t\t\tthis._addToClonedElementsGroup( node );\n\t\t}\n\n\t\tconst endPosition = insertionPosition.getShiftedBy( length );\n\t\tconst start = this.mergeAttributes( insertionPosition );\n\n\t\t// If start position was merged - move end position.\n\t\tif ( !start.isEqual( insertionPosition ) ) {\n\t\t\tendPosition.offset--;\n\t\t}\n\n\t\tconst end = this.mergeAttributes( endPosition );\n\n\t\treturn new Range( start, end );\n\t}\n\n\t/**\n\t * Wraps children with provided `wrapElement`. Only children contained in `parent` element between\n\t * `startOffset` and `endOffset` will be wrapped.\n\t *\n\t * @private\n\t * @param {module:engine/view/element~Element} parent\n\t * @param {Number} startOffset\n\t * @param {Number} endOffset\n\t * @param {module:engine/view/element~Element} wrapElement\n\t */\n\t_wrapChildren( parent, startOffset, endOffset, wrapElement ) {\n\t\tlet i = startOffset;\n\t\tconst wrapPositions = [];\n\n\t\twhile ( i < endOffset ) {\n\t\t\tconst child = parent.getChild( i );\n\t\t\tconst isText = child.is( '$text' );\n\t\t\tconst isAttribute = child.is( 'attributeElement' );\n\t\t\tconst isAllowedInsideAttributeElement = child.isAllowedInsideAttributeElement;\n\n\t\t\t//\n\t\t\t// (In all examples, assume that `wrapElement` is `<span class=\"foo\">` element.)\n\t\t\t//\n\t\t\t// Check if `wrapElement` can be joined with the wrapped element. One of requirements is having same name.\n\t\t\t// If possible, join elements.\n\t\t\t//\n\t\t\t// <p><span class=\"bar\">abc</span></p>  -->  <p><span class=\"foo bar\">abc</span></p>\n\t\t\t//\n\t\t\tif ( isAttribute && this._wrapAttributeElement( wrapElement, child ) ) {\n\t\t\t\twrapPositions.push( new Position( parent, i ) );\n\t\t\t}\n\t\t\t//\n\t\t\t// Wrap the child if it is not an attribute element or if it is an attribute element that should be inside\n\t\t\t// `wrapElement` (due to priority).\n\t\t\t//\n\t\t\t// <p>abc</p>                   -->  <p><span class=\"foo\">abc</span></p>\n\t\t\t// <p><strong>abc</strong></p>  -->  <p><span class=\"foo\"><strong>abc</strong></span></p>\n\t\t\telse if ( isText || isAllowedInsideAttributeElement || ( isAttribute && shouldABeOutsideB( wrapElement, child ) ) ) {\n\t\t\t\t// Clone attribute.\n\t\t\t\tconst newAttribute = wrapElement._clone();\n\n\t\t\t\t// Wrap current node with new attribute.\n\t\t\t\tchild._remove();\n\t\t\t\tnewAttribute._appendChild( child );\n\n\t\t\t\tparent._insertChild( i, newAttribute );\n\t\t\t\tthis._addToClonedElementsGroup( newAttribute );\n\n\t\t\t\twrapPositions.push( new Position( parent, i ) );\n\t\t\t}\n\t\t\t//\n\t\t\t// If other nested attribute is found and it wasn't wrapped (see above), continue wrapping inside it.\n\t\t\t//\n\t\t\t// <p><a href=\"foo.html\">abc</a></p>  -->  <p><a href=\"foo.html\"><span class=\"foo\">abc</span></a></p>\n\t\t\t//\n\t\t\telse if ( isAttribute ) {\n\t\t\t\tthis._wrapChildren( child, 0, child.childCount, wrapElement );\n\t\t\t}\n\n\t\t\ti++;\n\t\t}\n\n\t\t// Merge at each wrap.\n\t\tlet offsetChange = 0;\n\n\t\tfor ( const position of wrapPositions ) {\n\t\t\tposition.offset -= offsetChange;\n\n\t\t\t// Do not merge with elements outside selected children.\n\t\t\tif ( position.offset == startOffset ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst newPosition = this.mergeAttributes( position );\n\n\t\t\t// If nodes were merged - other merge offsets will change.\n\t\t\tif ( !newPosition.isEqual( position ) ) {\n\t\t\t\toffsetChange++;\n\t\t\t\tendOffset--;\n\t\t\t}\n\t\t}\n\n\t\treturn Range._createFromParentsAndOffsets( parent, startOffset, parent, endOffset );\n\t}\n\n\t/**\n\t * Unwraps children from provided `unwrapElement`. Only children contained in `parent` element between\n\t * `startOffset` and `endOffset` will be unwrapped.\n\t *\n\t * @private\n\t * @param {module:engine/view/element~Element} parent\n\t * @param {Number} startOffset\n\t * @param {Number} endOffset\n\t * @param {module:engine/view/element~Element} unwrapElement\n\t */\n\t_unwrapChildren( parent, startOffset, endOffset, unwrapElement ) {\n\t\tlet i = startOffset;\n\t\tconst unwrapPositions = [];\n\n\t\t// Iterate over each element between provided offsets inside parent.\n\t\t// We don't use tree walker or range iterator because we will be removing and merging potentially multiple nodes,\n\t\t// so it could get messy. It is safer to it manually in this case.\n\t\twhile ( i < endOffset ) {\n\t\t\tconst child = parent.getChild( i );\n\n\t\t\t// Skip all text nodes. There should be no container element's here either.\n\t\t\tif ( !child.is( 'attributeElement' ) ) {\n\t\t\t\ti++;\n\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t//\n\t\t\t// (In all examples, assume that `unwrapElement` is `<span class=\"foo\">` element.)\n\t\t\t//\n\t\t\t// If the child is similar to the given attribute element, unwrap it - it will be completely removed.\n\t\t\t//\n\t\t\t// <p><span class=\"foo\">abc</span>xyz</p>  -->  <p>abcxyz</p>\n\t\t\t//\n\t\t\tif ( child.isSimilar( unwrapElement ) ) {\n\t\t\t\tconst unwrapped = child.getChildren();\n\t\t\t\tconst count = child.childCount;\n\n\t\t\t\t// Replace wrapper element with its children\n\t\t\t\tchild._remove();\n\t\t\t\tparent._insertChild( i, unwrapped );\n\n\t\t\t\tthis._removeFromClonedElementsGroup( child );\n\n\t\t\t\t// Save start and end position of moved items.\n\t\t\t\tunwrapPositions.push(\n\t\t\t\t\tnew Position( parent, i ),\n\t\t\t\t\tnew Position( parent, i + count )\n\t\t\t\t);\n\n\t\t\t\t// Skip elements that were unwrapped. Assuming there won't be another element to unwrap in child elements.\n\t\t\t\ti += count;\n\t\t\t\tendOffset += count - 1;\n\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t//\n\t\t\t// If the child is not similar but is an attribute element, try partial unwrapping - remove the same attributes/styles/classes.\n\t\t\t// Partial unwrapping will happen only if the elements have the same name.\n\t\t\t//\n\t\t\t// <p><span class=\"foo bar\">abc</span>xyz</p>  -->  <p><span class=\"bar\">abc</span>xyz</p>\n\t\t\t// <p><i class=\"foo\">abc</i>xyz</p>            -->  <p><i class=\"foo\">abc</i>xyz</p>\n\t\t\t//\n\t\t\tif ( this._unwrapAttributeElement( unwrapElement, child ) ) {\n\t\t\t\tunwrapPositions.push(\n\t\t\t\t\tnew Position( parent, i ),\n\t\t\t\t\tnew Position( parent, i + 1 )\n\t\t\t\t);\n\n\t\t\t\ti++;\n\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t//\n\t\t\t// If other nested attribute is found, look through it's children for elements to unwrap.\n\t\t\t//\n\t\t\t// <p><i><span class=\"foo\">abc</span></i><p>  -->  <p><i>abc</i><p>\n\t\t\t//\n\t\t\tthis._unwrapChildren( child, 0, child.childCount, unwrapElement );\n\n\t\t\ti++;\n\t\t}\n\n\t\t// Merge at each unwrap.\n\t\tlet offsetChange = 0;\n\n\t\tfor ( const position of unwrapPositions ) {\n\t\t\tposition.offset -= offsetChange;\n\n\t\t\t// Do not merge with elements outside selected children.\n\t\t\tif ( position.offset == startOffset || position.offset == endOffset ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst newPosition = this.mergeAttributes( position );\n\n\t\t\t// If nodes were merged - other merge offsets will change.\n\t\t\tif ( !newPosition.isEqual( position ) ) {\n\t\t\t\toffsetChange++;\n\t\t\t\tendOffset--;\n\t\t\t}\n\t\t}\n\n\t\treturn Range._createFromParentsAndOffsets( parent, startOffset, parent, endOffset );\n\t}\n\n\t/**\n\t * Helper function for `view.writer.wrap`. Wraps range with provided attribute element.\n\t * This method will also merge newly added attribute element with its siblings whenever possible.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError} `view-writer-wrap-invalid-attribute` when passed attribute element is not\n\t * an instance of {@link module:engine/view/attributeelement~AttributeElement AttributeElement}.\n\t *\n\t * @private\n\t * @param {module:engine/view/range~Range} range\n\t * @param {module:engine/view/attributeelement~AttributeElement} attribute\n\t * @returns {module:engine/view/range~Range} New range after wrapping, spanning over wrapping attribute element.\n\t */\n\t_wrapRange( range, attribute ) {\n\t\t// Break attributes at range start and end.\n\t\tconst { start: breakStart, end: breakEnd } = this._breakAttributesRange( range, true );\n\t\tconst parentContainer = breakStart.parent;\n\n\t\t// Wrap all children with attribute.\n\t\tconst newRange = this._wrapChildren( parentContainer, breakStart.offset, breakEnd.offset, attribute );\n\n\t\t// Merge attributes at the both ends and return a new range.\n\t\tconst start = this.mergeAttributes( newRange.start );\n\n\t\t// If start position was merged - move end position back.\n\t\tif ( !start.isEqual( newRange.start ) ) {\n\t\t\tnewRange.end.offset--;\n\t\t}\n\t\tconst end = this.mergeAttributes( newRange.end );\n\n\t\treturn new Range( start, end );\n\t}\n\n\t/**\n\t * Helper function for {@link #wrap}. Wraps position with provided attribute element.\n\t * This method will also merge newly added attribute element with its siblings whenever possible.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError} `view-writer-wrap-invalid-attribute` when passed attribute element is not\n\t * an instance of {@link module:engine/view/attributeelement~AttributeElement AttributeElement}.\n\t *\n\t * @private\n\t * @param {module:engine/view/position~Position} position\n\t * @param {module:engine/view/attributeelement~AttributeElement} attribute\n\t * @returns {module:engine/view/position~Position} New position after wrapping.\n\t */\n\t_wrapPosition( position, attribute ) {\n\t\t// Return same position when trying to wrap with attribute similar to position parent.\n\t\tif ( attribute.isSimilar( position.parent ) ) {\n\t\t\treturn movePositionToTextNode( position.clone() );\n\t\t}\n\n\t\t// When position is inside text node - break it and place new position between two text nodes.\n\t\tif ( position.parent.is( '$text' ) ) {\n\t\t\tposition = breakTextNode( position );\n\t\t}\n\n\t\t// Create fake element that will represent position, and will not be merged with other attributes.\n\t\tconst fakePosition = this.createAttributeElement();\n\t\tfakePosition._priority = Number.POSITIVE_INFINITY;\n\t\tfakePosition.isSimilar = () => false;\n\n\t\t// Insert fake element in position location.\n\t\tposition.parent._insertChild( position.offset, fakePosition );\n\n\t\t// Range around inserted fake attribute element.\n\t\tconst wrapRange = new Range( position, position.getShiftedBy( 1 ) );\n\n\t\t// Wrap fake element with attribute (it will also merge if possible).\n\t\tthis.wrap( wrapRange, attribute );\n\n\t\t// Remove fake element and place new position there.\n\t\tconst newPosition = new Position( fakePosition.parent, fakePosition.index );\n\t\tfakePosition._remove();\n\n\t\t// If position is placed between text nodes - merge them and return position inside.\n\t\tconst nodeBefore = newPosition.nodeBefore;\n\t\tconst nodeAfter = newPosition.nodeAfter;\n\n\t\tif ( nodeBefore instanceof Text && nodeAfter instanceof Text ) {\n\t\t\treturn mergeTextNodes( nodeBefore, nodeAfter );\n\t\t}\n\n\t\t// If position is next to text node - move position inside.\n\t\treturn movePositionToTextNode( newPosition );\n\t}\n\n\t/**\n\t * \tWraps one {@link module:engine/view/attributeelement~AttributeElement AttributeElement} into another by\n\t * \tmerging them if possible. When merging is possible - all attributes, styles and classes are moved from wrapper\n\t * \telement to element being wrapped.\n\t *\n\t * \t@private\n\t * \t@param {module:engine/view/attributeelement~AttributeElement} wrapper Wrapper AttributeElement.\n\t * \t@param {module:engine/view/attributeelement~AttributeElement} toWrap AttributeElement to wrap using wrapper element.\n\t * \t@returns {Boolean} Returns `true` if elements are merged.\n\t */\n\t_wrapAttributeElement( wrapper, toWrap ) {\n\t\tif ( !canBeJoined( wrapper, toWrap ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Can't merge if name or priority differs.\n\t\tif ( wrapper.name !== toWrap.name || wrapper.priority !== toWrap.priority ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Check if attributes can be merged.\n\t\tfor ( const key of wrapper.getAttributeKeys() ) {\n\t\t\t// Classes and styles should be checked separately.\n\t\t\tif ( key === 'class' || key === 'style' ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// If some attributes are different we cannot wrap.\n\t\t\tif ( toWrap.hasAttribute( key ) && toWrap.getAttribute( key ) !== wrapper.getAttribute( key ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\t// Check if styles can be merged.\n\t\tfor ( const key of wrapper.getStyleNames() ) {\n\t\t\tif ( toWrap.hasStyle( key ) && toWrap.getStyle( key ) !== wrapper.getStyle( key ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\t// Move all attributes/classes/styles from wrapper to wrapped AttributeElement.\n\t\tfor ( const key of wrapper.getAttributeKeys() ) {\n\t\t\t// Classes and styles should be checked separately.\n\t\t\tif ( key === 'class' || key === 'style' ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Move only these attributes that are not present - other are similar.\n\t\t\tif ( !toWrap.hasAttribute( key ) ) {\n\t\t\t\tthis.setAttribute( key, wrapper.getAttribute( key ), toWrap );\n\t\t\t}\n\t\t}\n\n\t\tfor ( const key of wrapper.getStyleNames() ) {\n\t\t\tif ( !toWrap.hasStyle( key ) ) {\n\t\t\t\tthis.setStyle( key, wrapper.getStyle( key ), toWrap );\n\t\t\t}\n\t\t}\n\n\t\tfor ( const key of wrapper.getClassNames() ) {\n\t\t\tif ( !toWrap.hasClass( key ) ) {\n\t\t\t\tthis.addClass( key, toWrap );\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Unwraps {@link module:engine/view/attributeelement~AttributeElement AttributeElement} from another by removing\n\t * corresponding attributes, classes and styles. All attributes, classes and styles from wrapper should be present\n\t * inside element being unwrapped.\n\t *\n\t * @private\n\t * @param {module:engine/view/attributeelement~AttributeElement} wrapper Wrapper AttributeElement.\n\t * @param {module:engine/view/attributeelement~AttributeElement} toUnwrap AttributeElement to unwrap using wrapper element.\n\t * @returns {Boolean} Returns `true` if elements are unwrapped.\n\t **/\n\t_unwrapAttributeElement( wrapper, toUnwrap ) {\n\t\tif ( !canBeJoined( wrapper, toUnwrap ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Can't unwrap if name or priority differs.\n\t\tif ( wrapper.name !== toUnwrap.name || wrapper.priority !== toUnwrap.priority ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Check if AttributeElement has all wrapper attributes.\n\t\tfor ( const key of wrapper.getAttributeKeys() ) {\n\t\t\t// Classes and styles should be checked separately.\n\t\t\tif ( key === 'class' || key === 'style' ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// If some attributes are missing or different we cannot unwrap.\n\t\t\tif ( !toUnwrap.hasAttribute( key ) || toUnwrap.getAttribute( key ) !== wrapper.getAttribute( key ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\t// Check if AttributeElement has all wrapper classes.\n\t\tif ( !toUnwrap.hasClass( ...wrapper.getClassNames() ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Check if AttributeElement has all wrapper styles.\n\t\tfor ( const key of wrapper.getStyleNames() ) {\n\t\t\t// If some styles are missing or different we cannot unwrap.\n\t\t\tif ( !toUnwrap.hasStyle( key ) || toUnwrap.getStyle( key ) !== wrapper.getStyle( key ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\t// Remove all wrapper's attributes from unwrapped element.\n\t\tfor ( const key of wrapper.getAttributeKeys() ) {\n\t\t\t// Classes and styles should be checked separately.\n\t\t\tif ( key === 'class' || key === 'style' ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tthis.removeAttribute( key, toUnwrap );\n\t\t}\n\n\t\t// Remove all wrapper's classes from unwrapped element.\n\t\tthis.removeClass( Array.from( wrapper.getClassNames() ), toUnwrap );\n\n\t\t// Remove all wrapper's styles from unwrapped element.\n\t\tthis.removeStyle( Array.from( wrapper.getStyleNames() ), toUnwrap );\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Helper function used by other `DowncastWriter` methods. Breaks attribute elements at the boundaries of given range.\n\t *\n\t * @private\n\t * @param {module:engine/view/range~Range} range Range which `start` and `end` positions will be used to break attributes.\n\t * @param {Boolean} [forceSplitText=false] If set to `true`, will break text nodes even if they are directly in container element.\n\t * This behavior will result in incorrect view state, but is needed by other view writing methods which then fixes view state.\n\t * @returns {module:engine/view/range~Range} New range with located at break positions.\n\t */\n\t_breakAttributesRange( range, forceSplitText = false ) {\n\t\tconst rangeStart = range.start;\n\t\tconst rangeEnd = range.end;\n\n\t\tvalidateRangeContainer( range, this.document );\n\n\t\t// Break at the collapsed position. Return new collapsed range.\n\t\tif ( range.isCollapsed ) {\n\t\t\tconst position = this._breakAttributes( range.start, forceSplitText );\n\n\t\t\treturn new Range( position, position );\n\t\t}\n\n\t\tconst breakEnd = this._breakAttributes( rangeEnd, forceSplitText );\n\t\tconst count = breakEnd.parent.childCount;\n\t\tconst breakStart = this._breakAttributes( rangeStart, forceSplitText );\n\n\t\t// Calculate new break end offset.\n\t\tbreakEnd.offset += breakEnd.parent.childCount - count;\n\n\t\treturn new Range( breakStart, breakEnd );\n\t}\n\n\t/**\n\t * Helper function used by other `DowncastWriter` methods. Breaks attribute elements at given position.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-writer-cannot-break-empty-element` when break position\n\t * is placed inside {@link module:engine/view/emptyelement~EmptyElement EmptyElement}.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-writer-cannot-break-ui-element` when break position\n\t * is placed inside {@link module:engine/view/uielement~UIElement UIElement}.\n\t *\n\t * @private\n\t * @param {module:engine/view/position~Position} position Position where to break attributes.\n\t * @param {Boolean} [forceSplitText=false] If set to `true`, will break text nodes even if they are directly in container element.\n\t * This behavior will result in incorrect view state, but is needed by other view writing methods which then fixes view state.\n\t * @returns {module:engine/view/position~Position} New position after breaking the attributes.\n\t */\n\t_breakAttributes( position, forceSplitText = false ) {\n\t\tconst positionOffset = position.offset;\n\t\tconst positionParent = position.parent;\n\n\t\t// If position is placed inside EmptyElement - throw an exception as we cannot break inside.\n\t\tif ( position.parent.is( 'emptyElement' ) ) {\n\t\t\t/**\n\t\t\t * Cannot break an `EmptyElement` instance.\n\t\t\t *\n\t\t\t * This error is thrown if\n\t\t\t * {@link module:engine/view/downcastwriter~DowncastWriter#breakAttributes `DowncastWriter#breakAttributes()`}\n\t\t\t * was executed in an incorrect position.\n\t\t\t *\n\t\t\t * @error view-writer-cannot-break-empty-element\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'view-writer-cannot-break-empty-element', this.document );\n\t\t}\n\n\t\t// If position is placed inside UIElement - throw an exception as we cannot break inside.\n\t\tif ( position.parent.is( 'uiElement' ) ) {\n\t\t\t/**\n\t\t\t * Cannot break a `UIElement` instance.\n\t\t\t *\n\t\t\t * This error is thrown if\n\t\t\t * {@link module:engine/view/downcastwriter~DowncastWriter#breakAttributes `DowncastWriter#breakAttributes()`}\n\t\t\t * was executed in an incorrect position.\n\t\t\t *\n\t\t\t * @error view-writer-cannot-break-ui-element\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'view-writer-cannot-break-ui-element', this.document );\n\t\t}\n\n\t\t// If position is placed inside RawElement - throw an exception as we cannot break inside.\n\t\tif ( position.parent.is( 'rawElement' ) ) {\n\t\t\t/**\n\t\t\t * Cannot break a `RawElement` instance.\n\t\t\t *\n\t\t\t * This error is thrown if\n\t\t\t * {@link module:engine/view/downcastwriter~DowncastWriter#breakAttributes `DowncastWriter#breakAttributes()`}\n\t\t\t * was executed in an incorrect position.\n\t\t\t *\n\t\t\t * @error view-writer-cannot-break-raw-element\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'view-writer-cannot-break-raw-element', this.document );\n\t\t}\n\n\t\t// There are no attributes to break and text nodes breaking is not forced.\n\t\tif ( !forceSplitText && positionParent.is( '$text' ) && isContainerOrFragment( positionParent.parent ) ) {\n\t\t\treturn position.clone();\n\t\t}\n\n\t\t// Position's parent is container, so no attributes to break.\n\t\tif ( isContainerOrFragment( positionParent ) ) {\n\t\t\treturn position.clone();\n\t\t}\n\n\t\t// Break text and start again in new position.\n\t\tif ( positionParent.is( '$text' ) ) {\n\t\t\treturn this._breakAttributes( breakTextNode( position ), forceSplitText );\n\t\t}\n\n\t\tconst length = positionParent.childCount;\n\n\t\t// <p>foo<b><u>bar{}</u></b></p>\n\t\t// <p>foo<b><u>bar</u>[]</b></p>\n\t\t// <p>foo<b><u>bar</u></b>[]</p>\n\t\tif ( positionOffset == length ) {\n\t\t\tconst newPosition = new Position( positionParent.parent, positionParent.index + 1 );\n\n\t\t\treturn this._breakAttributes( newPosition, forceSplitText );\n\t\t} else {\n\t\t\t// <p>foo<b><u>{}bar</u></b></p>\n\t\t\t// <p>foo<b>[]<u>bar</u></b></p>\n\t\t\t// <p>foo{}<b><u>bar</u></b></p>\n\t\t\tif ( positionOffset === 0 ) {\n\t\t\t\tconst newPosition = new Position( positionParent.parent, positionParent.index );\n\n\t\t\t\treturn this._breakAttributes( newPosition, forceSplitText );\n\t\t\t}\n\t\t\t// <p>foo<b><u>b{}ar</u></b></p>\n\t\t\t// <p>foo<b><u>b[]ar</u></b></p>\n\t\t\t// <p>foo<b><u>b</u>[]<u>ar</u></b></p>\n\t\t\t// <p>foo<b><u>b</u></b>[]<b><u>ar</u></b></p>\n\t\t\telse {\n\t\t\t\tconst offsetAfter = positionParent.index + 1;\n\n\t\t\t\t// Break element.\n\t\t\t\tconst clonedNode = positionParent._clone();\n\n\t\t\t\t// Insert cloned node to position's parent node.\n\t\t\t\tpositionParent.parent._insertChild( offsetAfter, clonedNode );\n\t\t\t\tthis._addToClonedElementsGroup( clonedNode );\n\n\t\t\t\t// Get nodes to move.\n\t\t\t\tconst count = positionParent.childCount - positionOffset;\n\t\t\t\tconst nodesToMove = positionParent._removeChildren( positionOffset, count );\n\n\t\t\t\t// Move nodes to cloned node.\n\t\t\t\tclonedNode._appendChild( nodesToMove );\n\n\t\t\t\t// Create new position to work on.\n\t\t\t\tconst newPosition = new Position( positionParent.parent, offsetAfter );\n\n\t\t\t\treturn this._breakAttributes( newPosition, forceSplitText );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Stores the information that an {@link module:engine/view/attributeelement~AttributeElement attribute element} was\n\t * added to the tree. Saves the reference to the group in the given element and updates the group, so other elements\n\t * from the group now keep a reference to the given attribute element.\n\t *\n\t * The clones group can be obtained using {@link module:engine/view/attributeelement~AttributeElement#getElementsWithSameId}.\n\t *\n\t * Does nothing if added element has no {@link module:engine/view/attributeelement~AttributeElement#id id}.\n\t *\n\t * @private\n\t * @param {module:engine/view/attributeelement~AttributeElement} element Attribute element to save.\n\t */\n\t_addToClonedElementsGroup( element ) {\n\t\t// Add only if the element is in document tree.\n\t\tif ( !element.root.is( 'rootElement' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Traverse the element's children recursively to find other attribute elements that also might got inserted.\n\t\t// The loop is at the beginning so we can make fast returns later in the code.\n\t\tif ( element.is( 'element' ) ) {\n\t\t\tfor ( const child of element.getChildren() ) {\n\t\t\t\tthis._addToClonedElementsGroup( child );\n\t\t\t}\n\t\t}\n\n\t\tconst id = element.id;\n\n\t\tif ( !id ) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet group = this._cloneGroups.get( id );\n\n\t\tif ( !group ) {\n\t\t\tgroup = new Set();\n\t\t\tthis._cloneGroups.set( id, group );\n\t\t}\n\n\t\tgroup.add( element );\n\t\telement._clonesGroup = group;\n\t}\n\n\t/**\n\t * Removes all the information about the given {@link module:engine/view/attributeelement~AttributeElement attribute element}\n\t * from its clones group.\n\t *\n\t * Keep in mind, that the element will still keep a reference to the group (but the group will not keep a reference to it).\n\t * This allows to reference the whole group even if the element was already removed from the tree.\n\t *\n\t * Does nothing if the element has no {@link module:engine/view/attributeelement~AttributeElement#id id}.\n\t *\n\t * @private\n\t * @param {module:engine/view/attributeelement~AttributeElement} element Attribute element to remove.\n\t */\n\t_removeFromClonedElementsGroup( element ) {\n\t\t// Traverse the element's children recursively to find other attribute elements that also got removed.\n\t\t// The loop is at the beginning so we can make fast returns later in the code.\n\t\tif ( element.is( 'element' ) ) {\n\t\t\tfor ( const child of element.getChildren() ) {\n\t\t\t\tthis._removeFromClonedElementsGroup( child );\n\t\t\t}\n\t\t}\n\n\t\tconst id = element.id;\n\n\t\tif ( !id ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst group = this._cloneGroups.get( id );\n\n\t\tif ( !group ) {\n\t\t\treturn;\n\t\t}\n\n\t\tgroup.delete( element );\n\t\t// Not removing group from element on purpose!\n\t\t// If other parts of code have reference to this element, they will be able to get references to other elements from the group.\n\t}\n}\n\n// Helper function for `view.writer.wrap`. Checks if given element has any children that are not ui elements.\nfunction _hasNonUiChildren( parent ) {\n\treturn Array.from( parent.getChildren() ).some( child => !child.is( 'uiElement' ) );\n}\n\n/**\n * The `attribute` passed to {@link module:engine/view/downcastwriter~DowncastWriter#wrap `DowncastWriter#wrap()`}\n * must be an instance of {@link module:engine/view/attributeelement~AttributeElement `AttributeElement`}.\n *\n * @error view-writer-wrap-invalid-attribute\n */\n\n// Returns first parent container of specified {@link module:engine/view/position~Position Position}.\n// Position's parent node is checked as first, then next parents are checked.\n// Note that {@link module:engine/view/documentfragment~DocumentFragment DocumentFragment} is treated like a container.\n//\n// @param {module:engine/view/position~Position} position Position used as a start point to locate parent container.\n// @returns {module:engine/view/containerelement~ContainerElement|module:engine/view/documentfragment~DocumentFragment|undefined}\n// Parent container element or `undefined` if container is not found.\nfunction getParentContainer( position ) {\n\tlet parent = position.parent;\n\n\twhile ( !isContainerOrFragment( parent ) ) {\n\t\tif ( !parent ) {\n\t\t\treturn undefined;\n\t\t}\n\t\tparent = parent.parent;\n\t}\n\n\treturn parent;\n}\n\n// Checks if first {@link module:engine/view/attributeelement~AttributeElement AttributeElement} provided to the function\n// can be wrapped outside second element. It is done by comparing elements'\n// {@link module:engine/view/attributeelement~AttributeElement#priority priorities}, if both have same priority\n// {@link module:engine/view/element~Element#getIdentity identities} are compared.\n//\n// @param {module:engine/view/attributeelement~AttributeElement} a\n// @param {module:engine/view/attributeelement~AttributeElement} b\n// @returns {Boolean}\nfunction shouldABeOutsideB( a, b ) {\n\tif ( a.priority < b.priority ) {\n\t\treturn true;\n\t} else if ( a.priority > b.priority ) {\n\t\treturn false;\n\t}\n\n\t// When priorities are equal and names are different - use identities.\n\treturn a.getIdentity() < b.getIdentity();\n}\n\n// Returns new position that is moved to near text node. Returns same position if there is no text node before of after\n// specified position.\n//\n//\t\t<p>foo[]</p>  ->  <p>foo{}</p>\n//\t\t<p>[]foo</p>  ->  <p>{}foo</p>\n//\n// @param {module:engine/view/position~Position} position\n// @returns {module:engine/view/position~Position} Position located inside text node or same position if there is no text nodes\n// before or after position location.\nfunction movePositionToTextNode( position ) {\n\tconst nodeBefore = position.nodeBefore;\n\n\tif ( nodeBefore && nodeBefore.is( '$text' ) ) {\n\t\treturn new Position( nodeBefore, nodeBefore.data.length );\n\t}\n\n\tconst nodeAfter = position.nodeAfter;\n\n\tif ( nodeAfter && nodeAfter.is( '$text' ) ) {\n\t\treturn new Position( nodeAfter, 0 );\n\t}\n\n\treturn position;\n}\n\n// Breaks text node into two text nodes when possible.\n//\n//\t\t<p>foo{}bar</p> -> <p>foo[]bar</p>\n//\t\t<p>{}foobar</p> -> <p>[]foobar</p>\n//\t\t<p>foobar{}</p> -> <p>foobar[]</p>\n//\n// @param {module:engine/view/position~Position} position Position that need to be placed inside text node.\n// @returns {module:engine/view/position~Position} New position after breaking text node.\nfunction breakTextNode( position ) {\n\tif ( position.offset == position.parent.data.length ) {\n\t\treturn new Position( position.parent.parent, position.parent.index + 1 );\n\t}\n\n\tif ( position.offset === 0 ) {\n\t\treturn new Position( position.parent.parent, position.parent.index );\n\t}\n\n\t// Get part of the text that need to be moved.\n\tconst textToMove = position.parent.data.slice( position.offset );\n\n\t// Leave rest of the text in position's parent.\n\tposition.parent._data = position.parent.data.slice( 0, position.offset );\n\n\t// Insert new text node after position's parent text node.\n\tposition.parent.parent._insertChild( position.parent.index + 1, new Text( position.root.document, textToMove ) );\n\n\t// Return new position between two newly created text nodes.\n\treturn new Position( position.parent.parent, position.parent.index + 1 );\n}\n\n// Merges two text nodes into first node. Removes second node and returns merge position.\n//\n// @param {module:engine/view/text~Text} t1 First text node to merge. Data from second text node will be moved at the end of\n// this text node.\n// @param {module:engine/view/text~Text} t2 Second text node to merge. This node will be removed after merging.\n// @returns {module:engine/view/position~Position} Position after merging text nodes.\nfunction mergeTextNodes( t1, t2 ) {\n\t// Merge text data into first text node and remove second one.\n\tconst nodeBeforeLength = t1.data.length;\n\tt1._data += t2.data;\n\tt2._remove();\n\n\treturn new Position( t1, nodeBeforeLength );\n}\n\n// Checks if provided nodes are valid to insert.\n//\n// Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-writer-insert-invalid-node` when nodes to insert\n// contains instances that are not supported ones (see error description for valid ones.\n//\n// @param Iterable.<module:engine/view/text~Text|module:engine/view/element~Element> nodes\n// @param {Object} errorContext\nfunction validateNodesToInsert( nodes, errorContext ) {\n\tfor ( const node of nodes ) {\n\t\tif ( !validNodesToInsert.some( ( validNode => node instanceof validNode ) ) ) { // eslint-disable-line no-use-before-define\n\t\t\t/**\n\t\t\t * One of the nodes to be inserted is of an invalid type.\n\t\t\t *\n\t\t\t * Nodes to be inserted with {@link module:engine/view/downcastwriter~DowncastWriter#insert `DowncastWriter#insert()`} should be\n\t\t\t * of the following types:\n\t\t\t *\n\t\t\t * * {@link module:engine/view/attributeelement~AttributeElement AttributeElement},\n\t\t\t * * {@link module:engine/view/containerelement~ContainerElement ContainerElement},\n\t\t\t * * {@link module:engine/view/emptyelement~EmptyElement EmptyElement},\n\t\t\t * * {@link module:engine/view/uielement~UIElement UIElement},\n\t\t\t * * {@link module:engine/view/rawelement~RawElement RawElement},\n\t\t\t * * {@link module:engine/view/text~Text Text}.\n\t\t\t *\n\t\t\t * @error view-writer-insert-invalid-node-type\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'view-writer-insert-invalid-node-type', errorContext );\n\t\t}\n\n\t\tif ( !node.is( '$text' ) ) {\n\t\t\tvalidateNodesToInsert( node.getChildren(), errorContext );\n\t\t}\n\t}\n}\n\nconst validNodesToInsert = [ Text, AttributeElement, ContainerElement, EmptyElement, RawElement, UIElement ];\n\n// Checks if node is ContainerElement or DocumentFragment, because in most cases they should be treated the same way.\n//\n// @param {module:engine/view/node~Node} node\n// @returns {Boolean} Returns `true` if node is instance of ContainerElement or DocumentFragment.\nfunction isContainerOrFragment( node ) {\n\treturn node && ( node.is( 'containerElement' ) || node.is( 'documentFragment' ) );\n}\n\n// Checks if {@link module:engine/view/range~Range#start range start} and {@link module:engine/view/range~Range#end range end} are placed\n// inside same {@link module:engine/view/containerelement~ContainerElement container element}.\n// Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-writer-invalid-range-container` when validation fails.\n//\n// @param {module:engine/view/range~Range} range\n// @param {Object} errorContext\nfunction validateRangeContainer( range, errorContext ) {\n\tconst startContainer = getParentContainer( range.start );\n\tconst endContainer = getParentContainer( range.end );\n\n\tif ( !startContainer || !endContainer || startContainer !== endContainer ) {\n\t\t/**\n\t\t * The container of the given range is invalid.\n\t\t *\n\t\t * This may happen if {@link module:engine/view/range~Range#start range start} and\n\t\t * {@link module:engine/view/range~Range#end range end} positions are not placed inside the same container element or\n\t\t * a parent container for these positions cannot be found.\n\t\t *\n\t\t * Methods like {@link module:engine/view/downcastwriter~DowncastWriter#wrap `DowncastWriter#remove()`},\n\t\t * {@link module:engine/view/downcastwriter~DowncastWriter#wrap `DowncastWriter#clean()`},\n\t\t * {@link module:engine/view/downcastwriter~DowncastWriter#wrap `DowncastWriter#wrap()`},\n\t\t * {@link module:engine/view/downcastwriter~DowncastWriter#wrap `DowncastWriter#unwrap()`} need to be called\n\t\t * on a range that has its start and end positions located in the same container element. Both positions can be\n\t\t * nested within other elements (e.g. an attribute element) but the closest container ancestor must be the same.\n\t\t *\n\t\t * @error view-writer-invalid-range-container\n\t\t */\n\t\tthrow new CKEditorError( 'view-writer-invalid-range-container', errorContext );\n\t}\n}\n\n// Checks if two attribute elements can be joined together. Elements can be joined together if, and only if\n// they do not have ids specified.\n//\n// @private\n// @param {module:engine/view/element~Element} a\n// @param {module:engine/view/element~Element} b\n// @returns {Boolean}\nfunction canBeJoined( a, b ) {\n\treturn a.id === null && b.id === null;\n}\n"]}]}