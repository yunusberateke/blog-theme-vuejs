{"remainingRequest":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/babel-loader/lib/index.js!/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-dev-webpack-plugin/lib/translatesourceloader.js?{}!/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-undo/src/basecommand.js","dependencies":[{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-undo/src/basecommand.js","mtime":499162500000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-dev-webpack-plugin/lib/translatesourceloader.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-undo/src/basecommand.js"],"names":["Command","transformSets","BaseCommand","editor","_stack","_createdBatches","WeakSet","refresh","listenTo","data","clearStack","isEnabled","length","batch","docSelection","model","document","selection","ranges","hasOwnRange","Array","from","getRanges","isBackward","push","operations","selectionRanges","transformedRangeGroups","map","range","getTransformedByOperations","allRanges","flat","rangeGroup","transformed","filter","root","graveyard","isRangeContainedByAnyOtherRange","normalizeRanges","change","writer","setSelection","backward","batchToUndo","undoingBatch","add","operationsToUndo","slice","operation","isDocumentOperation","reverse","operationToUndo","nextBaseVersion","baseVersion","historyOperations","history","getOperations","transformedSets","getReversed","useRelations","padWithNoOps","forceWeakRemove","reversedOperations","operationsA","addOperation","applyOperation","setOperationAsUndone","sort","a","b","start","isBefore","i","previousRange","joinedRange","getJoined","splice","some","otherRange","containsRange"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module undo/basecommand\n */\n\nimport Command from '@ckeditor/ckeditor5-core/src/command';\nimport { transformSets } from '@ckeditor/ckeditor5-engine/src/model/operation/transform';\n\n/**\n * Base class for undo feature commands: {@link module:undo/undocommand~UndoCommand} and {@link module:undo/redocommand~RedoCommand}.\n *\n * @protected\n * @extends module:core/command~Command\n */\nexport default class BaseCommand extends Command {\n\tconstructor( editor ) {\n\t\tsuper( editor );\n\n\t\t/**\n\t\t * Stack of items stored by the command. These are pairs of:\n\t\t *\n\t\t * * {@link module:engine/model/batch~Batch batch} saved by the command,\n\t\t * * {@link module:engine/model/selection~Selection selection} state at the moment of saving the batch.\n\t\t *\n\t\t * @protected\n\t\t * @member {Array} #_stack\n\t\t */\n\t\tthis._stack = [];\n\n\t\t/**\n\t\t * Stores all batches that were created by this command.\n\t\t *\n\t\t * @protected\n\t\t * @member {WeakSet.<module:engine/model/batch~Batch>} #_createdBatches\n\t\t */\n\t\tthis._createdBatches = new WeakSet();\n\n\t\t// Refresh state, so the command is inactive right after initialization.\n\t\tthis.refresh();\n\n\t\tthis.listenTo( editor.data, 'set', () => this.clearStack() );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trefresh() {\n\t\tthis.isEnabled = this._stack.length > 0;\n\t}\n\n\t/**\n\t * Stores a batch in the command, together with the selection state of the {@link module:engine/model/document~Document document}\n\t * created by the editor which this command is registered to.\n\t *\n\t * @param {module:engine/model/batch~Batch} batch The batch to add.\n\t */\n\taddBatch( batch ) {\n\t\tconst docSelection = this.editor.model.document.selection;\n\n\t\tconst selection = {\n\t\t\tranges: docSelection.hasOwnRange ? Array.from( docSelection.getRanges() ) : [],\n\t\t\tisBackward: docSelection.isBackward\n\t\t};\n\n\t\tthis._stack.push( { batch, selection } );\n\t\tthis.refresh();\n\t}\n\n\t/**\n\t * Removes all items from the stack.\n\t */\n\tclearStack() {\n\t\tthis._stack = [];\n\t\tthis.refresh();\n\t}\n\n\t/**\n\t * Restores the {@link module:engine/model/document~Document#selection document selection} state after a batch was undone.\n\t *\n\t * @protected\n\t * @param {Array.<module:engine/model/range~Range>} ranges Ranges to be restored.\n\t * @param {Boolean} isBackward A flag describing whether the restored range was selected forward or backward.\n\t * @param {Array.<module:engine/model/operation/operation~Operation>} operations Operations which has been applied\n\t * since selection has been stored.\n\t */\n\t_restoreSelection( ranges, isBackward, operations ) {\n\t\tconst model = this.editor.model;\n\t\tconst document = model.document;\n\n\t\t// This will keep the transformed selection ranges.\n\t\tconst selectionRanges = [];\n\n\t\t// Transform all ranges from the restored selection.\n\t\tconst transformedRangeGroups = ranges.map( range => range.getTransformedByOperations( operations ) );\n\t\tconst allRanges = transformedRangeGroups.flat();\n\n\t\tfor ( const rangeGroup of transformedRangeGroups ) {\n\t\t\t// While transforming there could appear ranges that are contained by other ranges, we shall ignore them.\n\t\t\tconst transformed = rangeGroup\n\t\t\t\t.filter( range => range.root != document.graveyard )\n\t\t\t\t.filter( range => !isRangeContainedByAnyOtherRange( range, allRanges ) );\n\n\t\t\t// All the transformed ranges ended up in graveyard.\n\t\t\tif ( !transformed.length ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// After the range got transformed, we have an array of ranges. Some of those\n\t\t\t// ranges may be \"touching\" -- they can be next to each other and could be merged.\n\t\t\tnormalizeRanges( transformed );\n\n\t\t\t// For each `range` from `ranges`, we take only one transformed range.\n\t\t\t// This is because we want to prevent situation where single-range selection\n\t\t\t// got transformed to multi-range selection.\n\t\t\tselectionRanges.push( transformed[ 0 ] );\n\t\t}\n\n\t\t// @if CK_DEBUG_ENGINE // console.log( `Restored selection by undo: ${ selectionRanges.join( ', ' ) }` );\n\n\t\t// `selectionRanges` may be empty if all ranges ended up in graveyard. If that is the case, do not restore selection.\n\t\tif ( selectionRanges.length ) {\n\t\t\tmodel.change( writer => {\n\t\t\t\twriter.setSelection( selectionRanges, { backward: isBackward } );\n\t\t\t} );\n\t\t}\n\t}\n\n\t/**\n\t * Undoes a batch by reversing that batch, transforming reversed batch and finally applying it.\n\t * This is a helper method for {@link #execute}.\n\t *\n\t * @protected\n\t * @param {module:engine/model/batch~Batch} batchToUndo The batch to be undone.\n\t * @param {module:engine/model/batch~Batch} undoingBatch The batch that will contain undoing changes.\n\t */\n\t_undo( batchToUndo, undoingBatch ) {\n\t\tconst model = this.editor.model;\n\t\tconst document = model.document;\n\n\t\t// All changes done by the command execution will be saved as one batch.\n\t\tthis._createdBatches.add( undoingBatch );\n\n\t\tconst operationsToUndo = batchToUndo.operations.slice().filter( operation => operation.isDocumentOperation );\n\t\toperationsToUndo.reverse();\n\n\t\t// We will process each operation from `batchToUndo`, in reverse order. If there were operations A, B and C in undone batch,\n\t\t// we need to revert them in reverse order, so first C' (reversed C), then B', then A'.\n\t\tfor ( const operationToUndo of operationsToUndo ) {\n\t\t\tconst nextBaseVersion = operationToUndo.baseVersion + 1;\n\t\t\tconst historyOperations = Array.from( document.history.getOperations( nextBaseVersion ) );\n\n\t\t\tconst transformedSets = transformSets(\n\t\t\t\t[ operationToUndo.getReversed() ],\n\t\t\t\thistoryOperations,\n\t\t\t\t{\n\t\t\t\t\tuseRelations: true,\n\t\t\t\t\tdocument: this.editor.model.document,\n\t\t\t\t\tpadWithNoOps: false,\n\t\t\t\t\tforceWeakRemove: true\n\t\t\t\t}\n\t\t\t);\n\n\t\t\tconst reversedOperations = transformedSets.operationsA;\n\n\t\t\t// After reversed operation has been transformed by all history operations, apply it.\n\t\t\tfor ( const operation of reversedOperations ) {\n\t\t\t\t// Before applying, add the operation to the `undoingBatch`.\n\t\t\t\tundoingBatch.addOperation( operation );\n\t\t\t\tmodel.applyOperation( operation );\n\n\t\t\t\tdocument.history.setOperationAsUndone( operationToUndo, operation );\n\t\t\t}\n\t\t}\n\t}\n}\n\n// Normalizes list of ranges by joining intersecting or \"touching\" ranges.\n//\n// @param {Array.<module:engine/model/range~Range>} ranges\n//\nfunction normalizeRanges( ranges ) {\n\tranges.sort( ( a, b ) => a.start.isBefore( b.start ) ? -1 : 1 );\n\n\tfor ( let i = 1; i < ranges.length; i++ ) {\n\t\tconst previousRange = ranges[ i - 1 ];\n\t\tconst joinedRange = previousRange.getJoined( ranges[ i ], true );\n\n\t\tif ( joinedRange ) {\n\t\t\t// Replace the ranges on the list with the new joined range.\n\t\t\ti--;\n\t\t\tranges.splice( i, 2, joinedRange );\n\t\t}\n\t}\n}\n\nfunction isRangeContainedByAnyOtherRange( range, ranges ) {\n\treturn ranges.some( otherRange => otherRange !== range && otherRange.containsRange( range, true ) );\n}\n"]}]}