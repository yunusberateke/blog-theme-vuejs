{"remainingRequest":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/babel-loader/lib/index.js!/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-dev-webpack-plugin/lib/translatesourceloader.js?{}!/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-engine/src/model/documentselection.js","dependencies":[{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-engine/src/model/documentselection.js","mtime":499162500000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-dev-webpack-plugin/lib/translatesourceloader.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-engine/src/model/documentselection.js"],"names":["mix","EmitterMixin","Selection","LiveRange","Text","TextProxy","toMap","Collection","CKEditorError","uid","storePrefix","DocumentSelection","doc","_selection","LiveSelection","delegate","to","isCollapsed","anchor","focus","rangeCount","hasOwnRange","isBackward","isGravityOverridden","markers","_ranges","getRanges","getFirstPosition","getLastPosition","getFirstRange","getLastRange","getSelectedBlocks","getSelectedElement","element","containsEntireContent","destroy","getAttributeKeys","getAttributes","key","getAttribute","hasAttribute","_updateMarkers","_updateAttributes","prefixOrName","observeMarkers","type","itemOrPosition","offset","setFocus","selectable","placeOrOffset","options","setTo","value","setAttribute","removeAttribute","_getStoredAttributes","overrideGravity","restoreGravity","startsWith","idProperty","_model","model","_document","_attributePriority","Map","_selectionRestorePosition","_hasChangedRange","_overriddenGravityRegister","Set","_observedMarkers","listenTo","evt","args","operation","isDocumentOperation","length","_fixGraveyardSelection","fire","directChange","priority","on","range","_validateSelectionRange","marker","oldRange","newRange","_updateMarker","batch","clearAttributesStoredInElement","_getDefaultRange","start","end","size","i","detach","stopListening","optionsOrPlaceOrOffset","_setAttribute","attributeKeys","_removeAttribute","overrideUid","add","has","delete","pop","liveRange","_prepareRange","push","_checkRange","root","graveyard","fromRange","data","deletionPosition","index","indexOf","splice","changed","markerGroup","name","split","markerRange","getRange","selectionRange","containsRange","oldMarkers","Array","from","includes","remove","hasMarker","contained","clearAll","newAttributes","_getSurroundingAttributes","oldAttributes","_attrs","_setAttributesTo","newKey","newValue","get","oldKey","oldValue","set","attrs","gotAdded","selectionParent","parent","isEmpty","realKey","substr","position","schema","item","is","isObject","nodeBefore","textNode","nodeAfter","getAttrsIfCharacter","node","isInline","previousSibling","nextSibling","getNearestSelectionRange","_pushRange","differ","document","getChanges","entry","changeParent","isNoLongerEmpty","maxOffset","enqueueChange","writer","storedAttributes","filter"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA,OAAOA,GAAP,MAAgB,mCAAhB;AACA,OAAOC,YAAP,MAAyB,4CAAzB;AAEA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,KAAP,MAAkB,qCAAlB;AACA,OAAOC,UAAP,MAAuB,0CAAvB;AACA,OAAOC,aAAP,MAA0B,6CAA1B;AACA,OAAOC,GAAP,MAAgB,mCAAhB;AAEA,IAAMC,WAAW,GAAG,YAApB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IACqBC,iB;AACpB;AACD;AACA;AACA;AACA;AACC,6BAAaC,GAAb,EAAmB;AAAA;;AAClB;AACF;AACA;AACA;AACA;AACE,SAAKC,UAAL,GAAkB,IAAIC,aAAJ,CAAmBF,GAAnB,CAAlB;;AAEA,SAAKC,UAAL,CAAgBE,QAAhB,CAA0B,cAA1B,EAA2CC,EAA3C,CAA+C,IAA/C;;AACA,SAAKH,UAAL,CAAgBE,QAAhB,CAA0B,kBAA1B,EAA+CC,EAA/C,CAAmD,IAAnD;;AACA,SAAKH,UAAL,CAAgBE,QAAhB,CAA0B,eAA1B,EAA4CC,EAA5C,CAAgD,IAAhD;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;;;;;SACC,eAAkB;AACjB,aAAO,KAAKH,UAAL,CAAgBI,WAAvB;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;SACC,eAAa;AACZ,aAAO,KAAKJ,UAAL,CAAgBK,MAAvB;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;SACC,eAAY;AACX,aAAO,KAAKL,UAAL,CAAgBM,KAAvB;AACA;AAED;AACD;AACA;AACA;AACA;AACA;;;;SACC,eAAiB;AAChB,aAAO,KAAKN,UAAL,CAAgBO,UAAvB;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;;;;SACC,eAAkB;AACjB,aAAO,KAAKP,UAAL,CAAgBQ,WAAvB;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;;;;SACC,eAAiB;AAChB,aAAO,KAAKR,UAAL,CAAgBS,UAAvB;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;;SACC,eAA0B;AACzB,aAAO,KAAKT,UAAL,CAAgBU,mBAAvB;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;SACC,eAAc;AACb,aAAO,KAAKV,UAAL,CAAgBW,OAAvB;AACA;AAED;AACD;AACA;AACA;AACA;;;;SACC,eAAc;AACb,aAAO,KAAKX,UAAL,CAAgBY,OAAvB;AACA;AAED;AACD;AACA;AACA;AACA;;;;WACC,qBAAY;AACX,aAAO,KAAKZ,UAAL,CAAgBa,SAAhB,EAAP;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACC,4BAAmB;AAClB,aAAO,KAAKb,UAAL,CAAgBc,gBAAhB,EAAP;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACC,2BAAkB;AACjB,aAAO,KAAKd,UAAL,CAAgBe,eAAhB,EAAP;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACC,yBAAgB;AACf,aAAO,KAAKf,UAAL,CAAgBgB,aAAhB,EAAP;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACC,wBAAe;AACd,aAAO,KAAKhB,UAAL,CAAgBiB,YAAhB,EAAP;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACC,6BAAoB;AACnB,aAAO,KAAKjB,UAAL,CAAgBkB,iBAAhB,EAAP;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;;;;WACC,8BAAqB;AACpB,aAAO,KAAKlB,UAAL,CAAgBmB,kBAAhB,EAAP;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACC,+BAAuBC,OAAvB,EAAiC;AAChC,aAAO,KAAKpB,UAAL,CAAgBqB,qBAAhB,CAAuCD,OAAvC,CAAP;AACA;AAED;AACD;AACA;;;;WACC,mBAAU;AACT,WAAKpB,UAAL,CAAgBsB,OAAhB;AACA;AAED;AACD;AACA;AACA;AACA;;;;WACC,4BAAmB;AAClB,aAAO,KAAKtB,UAAL,CAAgBuB,gBAAhB,EAAP;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACC,yBAAgB;AACf,aAAO,KAAKvB,UAAL,CAAgBwB,aAAhB,EAAP;AACA;AAED;AACD;AACA;AACA;AACA;AACA;;;;WACC,sBAAcC,GAAd,EAAoB;AACnB,aAAO,KAAKzB,UAAL,CAAgB0B,YAAhB,CAA8BD,GAA9B,CAAP;AACA;AAED;AACD;AACA;AACA;AACA;AACA;;;;WACC,sBAAcA,GAAd,EAAoB;AACnB,aAAO,KAAKzB,UAAL,CAAgB2B,YAAhB,CAA8BF,GAA9B,CAAP;AACA;AAED;AACD;AACA;;;;WACC,mBAAU;AACT,WAAKzB,UAAL,CAAgB4B,cAAhB;;AACA,WAAK5B,UAAL,CAAgB6B,iBAAhB,CAAmC,KAAnC;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACC,wBAAgBC,YAAhB,EAA+B;AAC9B,WAAK9B,UAAL,CAAgB+B,cAAhB,CAAgCD,YAAhC;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACC,YAAIE,IAAJ,EAAW;AACV,aAAOA,IAAI,KAAK,WAAT,IACNA,IAAI,IAAI,iBADF,IAENA,IAAI,IAAI,mBAFF,IAGNA,IAAI,IAAI,yBAHT;AAIA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACC,mBAAWC,cAAX,EAA2BC,MAA3B,EAAoC;AACnC,WAAKlC,UAAL,CAAgBmC,QAAhB,CAA0BF,cAA1B,EAA0CC,MAA1C;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACC,gBAAQE,UAAR,EAAoBC,aAApB,EAAmCC,OAAnC,EAA6C;AAC5C,WAAKtC,UAAL,CAAgBuC,KAAhB,CAAuBH,UAAvB,EAAmCC,aAAnC,EAAkDC,OAAlD;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACC,uBAAeb,GAAf,EAAoBe,KAApB,EAA4B;AAC3B,WAAKxC,UAAL,CAAgByC,YAAhB,CAA8BhB,GAA9B,EAAmCe,KAAnC;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACC,0BAAkBf,GAAlB,EAAwB;AACvB,WAAKzB,UAAL,CAAgB0C,eAAhB,CAAiCjB,GAAjC;AACA;AAED;AACD;AACA;AACA;AACA;AACA;;;;WACC,gCAAuB;AACtB,aAAO,KAAKzB,UAAL,CAAgB2C,oBAAhB,EAAP;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACC,4BAAmB;AAClB,aAAO,KAAK3C,UAAL,CAAgB4C,eAAhB,EAAP;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACC,yBAAiBhD,GAAjB,EAAuB;AACtB,WAAKI,UAAL,CAAgB6C,cAAhB,CAAgCjD,GAAhC;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;;;;WACC,+BAA8B6B,GAA9B,EAAoC;AACnC,aAAO5B,WAAW,GAAG4B,GAArB;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;;;;WACC,8BAA6BA,GAA7B,EAA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","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/documentselection\n */\n\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\n\nimport Selection from './selection';\nimport LiveRange from './liverange';\nimport Text from './text';\nimport TextProxy from './textproxy';\nimport toMap from '@ckeditor/ckeditor5-utils/src/tomap';\nimport Collection from '@ckeditor/ckeditor5-utils/src/collection';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport uid from '@ckeditor/ckeditor5-utils/src/uid';\n\nconst storePrefix = 'selection:';\n\n/**\n * `DocumentSelection` is a special selection which is used as the\n * {@link module:engine/model/document~Document#selection document's selection}.\n * There can be only one instance of `DocumentSelection` per document.\n *\n * Document selection can only be changed by using the {@link module:engine/model/writer~Writer} instance\n * inside the {@link module:engine/model/model~Model#change `change()`} block, as it provides a secure way to modify model.\n *\n * `DocumentSelection` is automatically updated upon changes in the {@link module:engine/model/document~Document document}\n * to always contain valid ranges. Its attributes are inherited from the text unless set explicitly.\n *\n * Differences between {@link module:engine/model/selection~Selection} and `DocumentSelection` are:\n * * there is always a range in `DocumentSelection` - even if no ranges were added there is a \"default range\"\n * present in the selection,\n * * ranges added to this selection updates automatically when the document changes,\n * * attributes of `DocumentSelection` are updated automatically according to selection ranges.\n *\n * Since `DocumentSelection` uses {@link module:engine/model/liverange~LiveRange live ranges}\n * and is updated when {@link module:engine/model/document~Document document}\n * changes, it cannot be set on {@link module:engine/model/node~Node nodes}\n * that are inside {@link module:engine/model/documentfragment~DocumentFragment document fragment}.\n * If you need to represent a selection in document fragment,\n * use {@link module:engine/model/selection~Selection Selection class} instead.\n *\n * @mixes module:utils/emittermixin~EmitterMixin\n */\nexport default class DocumentSelection {\n\t/**\n\t * Creates an empty live selection for given {@link module:engine/model/document~Document}.\n\t *\n\t * @param {module:engine/model/document~Document} doc Document which owns this selection.\n\t */\n\tconstructor( doc ) {\n\t\t/**\n\t\t * Selection used internally by that class (`DocumentSelection` is a proxy to that selection).\n\t\t *\n\t\t * @protected\n\t\t */\n\t\tthis._selection = new LiveSelection( doc );\n\n\t\tthis._selection.delegate( 'change:range' ).to( this );\n\t\tthis._selection.delegate( 'change:attribute' ).to( this );\n\t\tthis._selection.delegate( 'change:marker' ).to( this );\n\t}\n\n\t/**\n\t * Returns whether the selection is collapsed. Selection is collapsed when there is exactly one range which is\n\t * collapsed.\n\t *\n\t * @readonly\n\t * @type {Boolean}\n\t */\n\tget isCollapsed() {\n\t\treturn this._selection.isCollapsed;\n\t}\n\n\t/**\n\t * Selection anchor. Anchor may be described as a position where the most recent part of the selection starts.\n\t * Together with {@link #focus} they define the direction of selection, which is important\n\t * when expanding/shrinking selection. Anchor is always {@link module:engine/model/range~Range#start start} or\n\t * {@link module:engine/model/range~Range#end end} position of the most recently added range.\n\t *\n\t * Is set to `null` if there are no ranges in selection.\n\t *\n\t * @see #focus\n\t * @readonly\n\t * @type {module:engine/model/position~Position|null}\n\t */\n\tget anchor() {\n\t\treturn this._selection.anchor;\n\t}\n\n\t/**\n\t * Selection focus. Focus is a position where the selection ends.\n\t *\n\t * Is set to `null` if there are no ranges in selection.\n\t *\n\t * @see #anchor\n\t * @readonly\n\t * @type {module:engine/model/position~Position|null}\n\t */\n\tget focus() {\n\t\treturn this._selection.focus;\n\t}\n\n\t/**\n\t * Returns number of ranges in selection.\n\t *\n\t * @readonly\n\t * @type {Number}\n\t */\n\tget rangeCount() {\n\t\treturn this._selection.rangeCount;\n\t}\n\n\t/**\n\t * Describes whether `Documentselection` has own range(s) set, or if it is defaulted to\n\t * {@link module:engine/model/document~Document#_getDefaultRange document's default range}.\n\t *\n\t * @readonly\n\t * @type {Boolean}\n\t */\n\tget hasOwnRange() {\n\t\treturn this._selection.hasOwnRange;\n\t}\n\n\t/**\n\t * Specifies whether the {@link #focus}\n\t * precedes {@link #anchor}.\n\t *\n\t * @readonly\n\t * @type {Boolean}\n\t */\n\tget isBackward() {\n\t\treturn this._selection.isBackward;\n\t}\n\n\t/**\n\t * Describes whether the gravity is overridden (using {@link module:engine/model/writer~Writer#overrideSelectionGravity}) or not.\n\t *\n\t * Note that the gravity remains overridden as long as will not be restored the same number of times as it was overridden.\n\t *\n\t * @readonly\n\t * @returns {Boolean}\n\t */\n\tget isGravityOverridden() {\n\t\treturn this._selection.isGravityOverridden;\n\t}\n\n\t/**\n\t * A collection of selection {@link module:engine/model/markercollection~Marker markers}.\n\t * Marker is a selection marker when selection range is inside the marker range.\n\t *\n\t * **Note**: Only markers from {@link ~DocumentSelection#observeMarkers observed markers groups} are collected.\n\t *\n\t * @readonly\n\t * @type {module:utils/collection~Collection}\n\t */\n\tget markers() {\n\t\treturn this._selection.markers;\n\t}\n\n\t/**\n\t * Used for the compatibility with the {@link module:engine/model/selection~Selection#isEqual} method.\n\t *\n\t * @protected\n\t */\n\tget _ranges() {\n\t\treturn this._selection._ranges;\n\t}\n\n\t/**\n\t * Returns an iterable that iterates over copies of selection ranges.\n\t *\n\t * @returns {Iterable.<module:engine/model/range~Range>}\n\t */\n\tgetRanges() {\n\t\treturn this._selection.getRanges();\n\t}\n\n\t/**\n\t * Returns the first position in the selection.\n\t * First position is the position that {@link module:engine/model/position~Position#isBefore is before}\n\t * any other position in the selection.\n\t *\n\t * Returns `null` if there are no ranges in selection.\n\t *\n\t * @returns {module:engine/model/position~Position|null}\n\t */\n\tgetFirstPosition() {\n\t\treturn this._selection.getFirstPosition();\n\t}\n\n\t/**\n\t * Returns the last position in the selection.\n\t * Last position is the position that {@link module:engine/model/position~Position#isAfter is after}\n\t * any other position in the selection.\n\t *\n\t * Returns `null` if there are no ranges in selection.\n\t *\n\t * @returns {module:engine/model/position~Position|null}\n\t */\n\tgetLastPosition() {\n\t\treturn this._selection.getLastPosition();\n\t}\n\n\t/**\n\t * Returns a copy of the first range in the selection.\n\t * First range is the one which {@link module:engine/model/range~Range#start start} position\n\t * {@link module:engine/model/position~Position#isBefore is before} start position of all other ranges\n\t * (not to confuse with the first range added to the selection).\n\t *\n\t * Returns `null` if there are no ranges in selection.\n\t *\n\t * @returns {module:engine/model/range~Range|null}\n\t */\n\tgetFirstRange() {\n\t\treturn this._selection.getFirstRange();\n\t}\n\n\t/**\n\t * Returns a copy of the last range in the selection.\n\t * Last range is the one which {@link module:engine/model/range~Range#end end} position\n\t * {@link module:engine/model/position~Position#isAfter is after} end position of all other ranges (not to confuse with the range most\n\t * recently added to the selection).\n\t *\n\t * Returns `null` if there are no ranges in selection.\n\t *\n\t * @returns {module:engine/model/range~Range|null}\n\t */\n\tgetLastRange() {\n\t\treturn this._selection.getLastRange();\n\t}\n\n\t/**\n\t * Gets elements of type {@link module:engine/model/schema~Schema#isBlock \"block\"} touched by the selection.\n\t *\n\t * This method's result can be used for example to apply block styling to all blocks covered by this selection.\n\t *\n\t * **Note:** `getSelectedBlocks()` returns blocks that are nested in other non-block elements\n\t * but will not return blocks nested in other blocks.\n\t *\n\t * In this case the function will return exactly all 3 paragraphs (note: `<blockQuote>` is not a block itself):\n\t *\n\t *\t\t<paragraph>[a</paragraph>\n\t *\t\t<blockQuote>\n\t *\t\t\t<paragraph>b</paragraph>\n\t *\t\t</blockQuote>\n\t *\t\t<paragraph>c]d</paragraph>\n\t *\n\t * In this case the paragraph will also be returned, despite the collapsed selection:\n\t *\n\t *\t\t<paragraph>[]a</paragraph>\n\t *\n\t * In such a scenario, however, only blocks A, B & E will be returned as blocks C & D are nested in block B:\n\t *\n\t *\t\t[<blockA></blockA>\n\t *\t\t<blockB>\n\t *\t\t\t<blockC></blockC>\n\t *\t\t\t<blockD></blockD>\n\t *\t\t</blockB>\n\t *\t\t<blockE></blockE>]\n\t *\n\t * If the selection is inside a block all the inner blocks (A & B) are returned:\n\t *\n\t * \t\t<block>\n\t *\t\t\t<blockA>[a</blockA>\n\t * \t\t\t<blockB>b]</blockB>\n\t * \t\t</block>\n\t *\n\t * **Special case**: If a selection ends at the beginning of a block, that block is not returned as from user perspective\n\t * this block wasn't selected. See [#984](https://github.com/ckeditor/ckeditor5-engine/issues/984) for more details.\n\t *\n\t *\t\t<paragraph>[a</paragraph>\n\t *\t\t<paragraph>b</paragraph>\n\t *\t\t<paragraph>]c</paragraph> // this block will not be returned\n\t *\n\t * @returns {Iterable.<module:engine/model/element~Element>}\n\t */\n\tgetSelectedBlocks() {\n\t\treturn this._selection.getSelectedBlocks();\n\t}\n\n\t/**\n\t * Returns the selected element. {@link module:engine/model/element~Element Element} is considered as selected if there is only\n\t * one range in the selection, and that range contains exactly one element.\n\t * Returns `null` if there is no selected element.\n\t *\n\t * @returns {module:engine/model/element~Element|null}\n\t */\n\tgetSelectedElement() {\n\t\treturn this._selection.getSelectedElement();\n\t}\n\n\t/**\n\t * Checks whether the selection contains the entire content of the given element. This means that selection must start\n\t * at a position {@link module:engine/model/position~Position#isTouching touching} the element's start and ends at position\n\t * touching the element's end.\n\t *\n\t * By default, this method will check whether the entire content of the selection's current root is selected.\n\t * Useful to check if e.g. the user has just pressed <kbd>Ctrl</kbd> + <kbd>A</kbd>.\n\t *\n\t * @param {module:engine/model/element~Element} [element=this.anchor.root]\n\t * @returns {Boolean}\n\t */\n\tcontainsEntireContent( element ) {\n\t\treturn this._selection.containsEntireContent( element );\n\t}\n\n\t/**\n\t * Unbinds all events previously bound by document selection.\n\t */\n\tdestroy() {\n\t\tthis._selection.destroy();\n\t}\n\n\t/**\n\t * Returns iterable that iterates over this selection's attribute keys.\n\t *\n\t * @returns {Iterable.<String>}\n\t */\n\tgetAttributeKeys() {\n\t\treturn this._selection.getAttributeKeys();\n\t}\n\n\t/**\n\t * Returns iterable that iterates over this selection's attributes.\n\t *\n\t * Attributes are returned as arrays containing two items. First one is attribute key and second is attribute value.\n\t * This format is accepted by native `Map` object and also can be passed in `Node` constructor.\n\t *\n\t * @returns {Iterable.<*>}\n\t */\n\tgetAttributes() {\n\t\treturn this._selection.getAttributes();\n\t}\n\n\t/**\n\t * Gets an attribute value for given key or `undefined` if that attribute is not set on the selection.\n\t *\n\t * @param {String} key Key of attribute to look for.\n\t * @returns {*} Attribute value or `undefined`.\n\t */\n\tgetAttribute( key ) {\n\t\treturn this._selection.getAttribute( key );\n\t}\n\n\t/**\n\t * Checks if the selection has an attribute for given key.\n\t *\n\t * @param {String} key Key of attribute to check.\n\t * @returns {Boolean} `true` if attribute with given key is set on selection, `false` otherwise.\n\t */\n\thasAttribute( key ) {\n\t\treturn this._selection.hasAttribute( key );\n\t}\n\n\t/**\n\t * Refreshes selection attributes and markers according to the current position in the model.\n\t */\n\trefresh() {\n\t\tthis._selection._updateMarkers();\n\t\tthis._selection._updateAttributes( false );\n\t}\n\n\t/**\n\t * Registers a marker group prefix or a marker name to be collected in the\n\t * {@link ~DocumentSelection#markers selection markers collection}.\n\t *\n\t * See also {@link module:engine/model/markercollection~MarkerCollection#getMarkersGroup `MarkerCollection#getMarkersGroup()`}.\n\t *\n\t * @param {String} prefixOrName The marker group prefix or marker name.\n\t */\n\tobserveMarkers( prefixOrName ) {\n\t\tthis._selection.observeMarkers( prefixOrName );\n\t}\n\n\t/**\n\t * Checks whether this object is of the given type.\n\t *\n\t *\t\tselection.is( 'selection' ); // -> true\n\t *\t\tselection.is( 'documentSelection' ); // -> true\n\t *\t\tselection.is( 'model:selection' ); // -> true\n\t *\t\tselection.is( 'model:documentSelection' ); // -> true\n\t *\n\t *\t\tselection.is( 'view:selection' ); // -> false\n\t *\t\tselection.is( 'element' ); // -> false\n\t *\t\tselection.is( 'node' ); // -> false\n\t *\n\t * {@link module:engine/model/node~Node#is Check the entire list of model objects} which implement the `is()` method.\n\t *\n\t * @param {String} type\n\t * @returns {Boolean}\n\t */\n\tis( type ) {\n\t\treturn type === 'selection' ||\n\t\t\ttype == 'model:selection' ||\n\t\t\ttype == 'documentSelection' ||\n\t\t\ttype == 'model:documentSelection';\n\t}\n\n\t/**\n\t * Moves {@link module:engine/model/documentselection~DocumentSelection#focus} to the specified location.\n\t * Should be used only within the {@link module:engine/model/writer~Writer#setSelectionFocus} method.\n\t *\n\t * The location can be specified in the same form as\n\t * {@link module:engine/model/writer~Writer#createPositionAt writer.createPositionAt()} parameters.\n\t *\n\t * @see module:engine/model/writer~Writer#setSelectionFocus\n\t * @protected\n\t * @param {module:engine/model/item~Item|module:engine/model/position~Position} itemOrPosition\n\t * @param {Number|'end'|'before'|'after'} [offset] Offset or one of the flags. Used only when\n\t * first parameter is a {@link module:engine/model/item~Item model item}.\n\t */\n\t_setFocus( itemOrPosition, offset ) {\n\t\tthis._selection.setFocus( itemOrPosition, offset );\n\t}\n\n\t/**\n\t * Sets this selection's ranges and direction to the specified location based on the given\n\t * {@link module:engine/model/selection~Selectable selectable}.\n\t * Should be used only within the {@link module:engine/model/writer~Writer#setSelection} method.\n\t *\n\t * @see module:engine/model/writer~Writer#setSelection\n\t * @protected\n\t * @param {module:engine/model/selection~Selectable} selectable\n\t * @param {Number|'before'|'end'|'after'|'on'|'in'} [placeOrOffset] Sets place or offset of the selection.\n\t * @param {Object} [options]\n\t * @param {Boolean} [options.backward] Sets this selection instance to be backward.\n\t */\n\t_setTo( selectable, placeOrOffset, options ) {\n\t\tthis._selection.setTo( selectable, placeOrOffset, options );\n\t}\n\n\t/**\n\t * Sets attribute on the selection. If attribute with the same key already is set, it's value is overwritten.\n\t * Should be used only within the {@link module:engine/model/writer~Writer#setSelectionAttribute} method.\n\t *\n\t * @see module:engine/model/writer~Writer#setSelectionAttribute\n\t * @protected\n\t * @param {String} key Key of the attribute to set.\n\t * @param {*} value Attribute value.\n\t */\n\t_setAttribute( key, value ) {\n\t\tthis._selection.setAttribute( key, value );\n\t}\n\n\t/**\n\t * Removes an attribute with given key from the selection.\n\t * If the given attribute was set on the selection, fires the {@link module:engine/model/selection~Selection#event:change:range}\n\t * event with removed attribute key.\n\t * Should be used only within the {@link module:engine/model/writer~Writer#removeSelectionAttribute} method.\n\t *\n\t * @see module:engine/model/writer~Writer#removeSelectionAttribute\n\t * @protected\n\t * @param {String} key Key of the attribute to remove.\n\t */\n\t_removeAttribute( key ) {\n\t\tthis._selection.removeAttribute( key );\n\t}\n\n\t/**\n\t * Returns an iterable that iterates through all selection attributes stored in current selection's parent.\n\t *\n\t * @protected\n\t * @returns {Iterable.<*>}\n\t */\n\t_getStoredAttributes() {\n\t\treturn this._selection._getStoredAttributes();\n\t}\n\n\t/**\n\t * Temporarily changes the gravity of the selection from the left to the right.\n\t *\n\t * The gravity defines from which direction the selection inherits its attributes. If it's the default left\n\t * gravity, the selection (after being moved by the the user) inherits attributes from its left hand side.\n\t * This method allows to temporarily override this behavior by forcing the gravity to the right.\n\t *\n\t * It returns an unique identifier which is required to restore the gravity. It guarantees the symmetry\n\t * of the process.\n\t *\n\t * @see module:engine/model/writer~Writer#overrideSelectionGravity\n\t * @protected\n\t * @returns {String} The unique id which allows restoring the gravity.\n\t */\n\t_overrideGravity() {\n\t\treturn this._selection.overrideGravity();\n\t}\n\n\t/**\n\t * Restores the {@link ~DocumentSelection#_overrideGravity overridden gravity}.\n\t *\n\t * Restoring the gravity is only possible using the unique identifier returned by\n\t * {@link ~DocumentSelection#_overrideGravity}. Note that the gravity remains overridden as long as won't be restored\n\t * the same number of times it was overridden.\n\t *\n\t * @see module:engine/model/writer~Writer#restoreSelectionGravity\n\t * @protected\n\t * @param {String} uid The unique id returned by {@link #_overrideGravity}.\n\t */\n\t_restoreGravity( uid ) {\n\t\tthis._selection.restoreGravity( uid );\n\t}\n\n\t/**\n\t * Generates and returns an attribute key for selection attributes store, basing on original attribute key.\n\t *\n\t * @protected\n\t * @param {String} key Attribute key to convert.\n\t * @returns {String} Converted attribute key, applicable for selection store.\n\t */\n\tstatic _getStoreAttributeKey( key ) {\n\t\treturn storePrefix + key;\n\t}\n\n\t/**\n\t * Checks whether the given attribute key is an attribute stored on an element.\n\t *\n\t * @protected\n\t * @param {String} key\n\t * @returns {Boolean}\n\t */\n\tstatic _isStoreAttributeKey( key ) {\n\t\treturn key.startsWith( storePrefix );\n\t}\n}\n\nmix( DocumentSelection, EmitterMixin );\n\n/**\n * Fired when selection range(s) changed.\n *\n * @event change:range\n * @param {Boolean} directChange In case of {@link module:engine/model/selection~Selection} class it is always set\n * to `true` which indicates that the selection change was caused by a direct use of selection's API.\n * The {@link module:engine/model/documentselection~DocumentSelection}, however, may change because its position\n * was directly changed through the {@link module:engine/model/writer~Writer writer} or because its position was\n * changed because the structure of the model has been changed (which means an indirect change).\n * The indirect change does not occur in case of normal (detached) selections because they are \"static\" (as \"not live\")\n * which mean that they are not updated once the document changes.\n */\n\n/**\n * Fired when selection attribute changed.\n *\n * @event change:attribute\n * @param {Boolean} directChange In case of {@link module:engine/model/selection~Selection} class it is always set\n * to `true` which indicates that the selection change was caused by a direct use of selection's API.\n * The {@link module:engine/model/documentselection~DocumentSelection}, however, may change because its attributes\n * were directly changed through the {@link module:engine/model/writer~Writer writer} or because its position was\n * changed in the model and its attributes were refreshed (which means an indirect change).\n * The indirect change does not occur in case of normal (detached) selections because they are \"static\" (as \"not live\")\n * which mean that they are not updated once the document changes.\n * @param {Array.<String>} attributeKeys Array containing keys of attributes that changed.\n */\n\n/**\n * Fired when selection marker(s) changed.\n *\n * @event change:marker\n * @param {Boolean} directChange This is always set to `false` in case of `change:marker` event as there is no possibility\n * to change markers directly through {@link module:engine/model/documentselection~DocumentSelection} API.\n * See also {@link module:engine/model/documentselection~DocumentSelection#event:change:range} and\n * {@link module:engine/model/documentselection~DocumentSelection#event:change:attribute}.\n * @param {Array.<module:engine/model/markercollection~Marker>} oldMarkers Markers in which the selection was before the change.\n */\n\n// `LiveSelection` is used internally by {@link module:engine/model/documentselection~DocumentSelection} and shouldn't be used directly.\n//\n// LiveSelection` is automatically updated upon changes in the {@link module:engine/model/document~Document document}\n// to always contain valid ranges. Its attributes are inherited from the text unless set explicitly.\n//\n// Differences between {@link module:engine/model/selection~Selection} and `LiveSelection` are:\n// * there is always a range in `LiveSelection` - even if no ranges were added there is a \"default range\"\n// present in the selection,\n// * ranges added to this selection updates automatically when the document changes,\n// * attributes of `LiveSelection` are updated automatically according to selection ranges.\n//\n// @extends module:engine/model/selection~Selection\n//\nclass LiveSelection extends Selection {\n\t// Creates an empty live selection for given {@link module:engine/model/document~Document}.\n\t// @param {module:engine/model/document~Document} doc Document which owns this selection.\n\tconstructor( doc ) {\n\t\tsuper();\n\n\t\t// List of selection markers.\n\t\t// Marker is a selection marker when selection range is inside the marker range.\n\t\t//\n\t\t// @type {module:utils/collection~Collection}\n\t\tthis.markers = new Collection( { idProperty: 'name' } );\n\n\t\t// Document which owns this selection.\n\t\t//\n\t\t// @protected\n\t\t// @member {module:engine/model/model~Model}\n\t\tthis._model = doc.model;\n\n\t\t// Document which owns this selection.\n\t\t//\n\t\t// @protected\n\t\t// @member {module:engine/model/document~Document}\n\t\tthis._document = doc;\n\n\t\t// Keeps mapping of attribute name to priority with which the attribute got modified (added/changed/removed)\n\t\t// last time. Possible values of priority are: `'low'` and `'normal'`.\n\t\t//\n\t\t// Priorities are used by internal `LiveSelection` mechanisms. All attributes set using `LiveSelection`\n\t\t// attributes API are set with `'normal'` priority.\n\t\t//\n\t\t// @private\n\t\t// @member {Map} module:engine/model/liveselection~LiveSelection#_attributePriority\n\t\tthis._attributePriority = new Map();\n\n\t\t// Position to which the selection should be set if the last selection range was moved to the graveyard.\n\t\t// @private\n\t\t// @member {module:engine/model/position~Position} module:engine/model/liveselection~LiveSelection#_selectionRestorePosition\n\t\tthis._selectionRestorePosition = null;\n\n\t\t// Flag that informs whether the selection ranges have changed. It is changed on true when `LiveRange#change:range` event is fired.\n\t\t// @private\n\t\t// @member {Array} module:engine/model/liveselection~LiveSelection#_hasChangedRange\n\t\tthis._hasChangedRange = false;\n\n\t\t// Each overriding gravity adds an UID to the set and each removal removes it.\n\t\t// Gravity is overridden when there's at least one UID in the set.\n\t\t// Gravity is restored when the set is empty.\n\t\t// This is to prevent conflicts when gravity is overridden by more than one feature at the same time.\n\t\t// @private\n\t\t// @type {Set}\n\t\tthis._overriddenGravityRegister = new Set();\n\n\t\t// Prefixes of marker names that should affect `LiveSelection#markers` collection.\n\t\t// @private\n\t\t// @type {Set}\n\t\tthis._observedMarkers = new Set();\n\n\t\t// Ensure selection is correct after each operation.\n\t\tthis.listenTo( this._model, 'applyOperation', ( evt, args ) => {\n\t\t\tconst operation = args[ 0 ];\n\n\t\t\tif ( !operation.isDocumentOperation || operation.type == 'marker' || operation.type == 'rename' || operation.type == 'noop' ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Fix selection if the last range was removed from it and we have a position to which we can restore the selection.\n\t\t\tif ( this._ranges.length == 0 && this._selectionRestorePosition ) {\n\t\t\t\tthis._fixGraveyardSelection( this._selectionRestorePosition );\n\t\t\t}\n\n\t\t\t// \"Forget\" the restore position even if it was not \"used\".\n\t\t\tthis._selectionRestorePosition = null;\n\n\t\t\tif ( this._hasChangedRange ) {\n\t\t\t\tthis._hasChangedRange = false;\n\t\t\t\tthis.fire( 'change:range', { directChange: false } );\n\t\t\t}\n\t\t}, { priority: 'lowest' } );\n\n\t\t// Ensure selection is correct and up to date after each range change.\n\t\tthis.on( 'change:range', () => {\n\t\t\tfor ( const range of this.getRanges() ) {\n\t\t\t\tif ( !this._document._validateSelectionRange( range ) ) {\n\t\t\t\t\t/**\n\t\t\t\t\t * Range from {@link module:engine/model/documentselection~DocumentSelection document selection}\n\t\t\t\t\t * starts or ends at incorrect position.\n\t\t\t\t\t *\n\t\t\t\t\t * @error document-selection-wrong-position\n\t\t\t\t\t * @param {module:engine/model/range~Range} range\n\t\t\t\t\t */\n\t\t\t\t\tthrow new CKEditorError(\n\t\t\t\t\t\t'document-selection-wrong-position',\n\t\t\t\t\t\tthis,\n\t\t\t\t\t\t{ range }\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\n\t\t// Update markers data stored by the selection after each marker change.\n\t\t// This handles only marker changes done through marker operations (not model tree changes).\n\t\tthis.listenTo( this._model.markers, 'update', ( evt, marker, oldRange, newRange ) => {\n\t\t\tthis._updateMarker( marker, newRange );\n\t\t} );\n\n\t\t// Ensure selection is up to date after each change block.\n\t\tthis.listenTo( this._document, 'change', ( evt, batch ) => {\n\t\t\tclearAttributesStoredInElement( this._model, batch );\n\t\t} );\n\t}\n\n\tget isCollapsed() {\n\t\tconst length = this._ranges.length;\n\n\t\treturn length === 0 ? this._document._getDefaultRange().isCollapsed : super.isCollapsed;\n\t}\n\n\tget anchor() {\n\t\treturn super.anchor || this._document._getDefaultRange().start;\n\t}\n\n\tget focus() {\n\t\treturn super.focus || this._document._getDefaultRange().end;\n\t}\n\n\tget rangeCount() {\n\t\treturn this._ranges.length ? this._ranges.length : 1;\n\t}\n\n\t// Describes whether `LiveSelection` has own range(s) set, or if it is defaulted to\n\t// {@link module:engine/model/document~Document#_getDefaultRange document's default range}.\n\t//\n\t// @readonly\n\t// @type {Boolean}\n\tget hasOwnRange() {\n\t\treturn this._ranges.length > 0;\n\t}\n\n\t// When set to `true` then selection attributes on node before the caret won't be taken\n\t// into consideration while updating selection attributes.\n\t//\n\t// @protected\n\t// @type {Boolean}\n\tget isGravityOverridden() {\n\t\treturn !!this._overriddenGravityRegister.size;\n\t}\n\n\t// Unbinds all events previously bound by live selection.\n\tdestroy() {\n\t\tfor ( let i = 0; i < this._ranges.length; i++ ) {\n\t\t\tthis._ranges[ i ].detach();\n\t\t}\n\n\t\tthis.stopListening();\n\t}\n\n\t* getRanges() {\n\t\tif ( this._ranges.length ) {\n\t\t\tyield* super.getRanges();\n\t\t} else {\n\t\t\tyield this._document._getDefaultRange();\n\t\t}\n\t}\n\n\tgetFirstRange() {\n\t\treturn super.getFirstRange() || this._document._getDefaultRange();\n\t}\n\n\tgetLastRange() {\n\t\treturn super.getLastRange() || this._document._getDefaultRange();\n\t}\n\n\tsetTo( selectable, optionsOrPlaceOrOffset, options ) {\n\t\tsuper.setTo( selectable, optionsOrPlaceOrOffset, options );\n\t\tthis._updateAttributes( true );\n\t\tthis._updateMarkers();\n\t}\n\n\tsetFocus( itemOrPosition, offset ) {\n\t\tsuper.setFocus( itemOrPosition, offset );\n\t\tthis._updateAttributes( true );\n\t\tthis._updateMarkers();\n\t}\n\n\tsetAttribute( key, value ) {\n\t\tif ( this._setAttribute( key, value ) ) {\n\t\t\t// Fire event with exact data.\n\t\t\tconst attributeKeys = [ key ];\n\t\t\tthis.fire( 'change:attribute', { attributeKeys, directChange: true } );\n\t\t}\n\t}\n\n\tremoveAttribute( key ) {\n\t\tif ( this._removeAttribute( key ) ) {\n\t\t\t// Fire event with exact data.\n\t\t\tconst attributeKeys = [ key ];\n\t\t\tthis.fire( 'change:attribute', { attributeKeys, directChange: true } );\n\t\t}\n\t}\n\n\toverrideGravity() {\n\t\tconst overrideUid = uid();\n\n\t\t// Remember that another overriding has been requested. It will need to be removed\n\t\t// before the gravity is to be restored.\n\t\tthis._overriddenGravityRegister.add( overrideUid );\n\n\t\tif ( this._overriddenGravityRegister.size === 1 ) {\n\t\t\tthis._updateAttributes( true );\n\t\t}\n\n\t\treturn overrideUid;\n\t}\n\n\trestoreGravity( uid ) {\n\t\tif ( !this._overriddenGravityRegister.has( uid ) ) {\n\t\t\t/**\n\t\t\t * Restoring gravity for an unknown UID is not possible. Make sure you are using a correct\n\t\t\t * UID obtained from the {@link module:engine/model/writer~Writer#overrideSelectionGravity} to restore.\n\t\t\t *\n\t\t\t * @error document-selection-gravity-wrong-restore\n\t\t\t * @param {String} uid The unique identifier returned by\n\t\t\t * {@link module:engine/model/documentselection~DocumentSelection#_overrideGravity}.\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'document-selection-gravity-wrong-restore',\n\t\t\t\tthis,\n\t\t\t\t{ uid }\n\t\t\t);\n\t\t}\n\n\t\tthis._overriddenGravityRegister.delete( uid );\n\n\t\t// Restore gravity only when all overriding have been restored.\n\t\tif ( !this.isGravityOverridden ) {\n\t\t\tthis._updateAttributes( true );\n\t\t}\n\t}\n\n\tobserveMarkers( prefixOrName ) {\n\t\tthis._observedMarkers.add( prefixOrName );\n\t\tthis._updateMarkers();\n\t}\n\n\t_popRange() {\n\t\tthis._ranges.pop().detach();\n\t}\n\n\t_pushRange( range ) {\n\t\tconst liveRange = this._prepareRange( range );\n\n\t\t// `undefined` is returned when given `range` is in graveyard root.\n\t\tif ( liveRange ) {\n\t\t\tthis._ranges.push( liveRange );\n\t\t}\n\t}\n\n\t// Prepares given range to be added to selection. Checks if it is correct,\n\t// converts it to {@link module:engine/model/liverange~LiveRange LiveRange}\n\t// and sets listeners listening to the range's change event.\n\t//\n\t// @private\n\t// @param {module:engine/model/range~Range} range\n\t_prepareRange( range ) {\n\t\tthis._checkRange( range );\n\n\t\tif ( range.root == this._document.graveyard ) {\n\t\t\t// @if CK_DEBUG // console.warn( 'Trying to add a Range that is in the graveyard root. Range rejected.' );\n\n\t\t\treturn;\n\t\t}\n\n\t\tconst liveRange = LiveRange.fromRange( range );\n\n\t\t// If selection range is moved to the graveyard remove it from the selection object.\n\t\t// Also, save some data that can be used to restore selection later, on `Model#applyOperation` event.\n\t\tliveRange.on( 'change:range', ( evt, oldRange, data ) => {\n\t\t\tthis._hasChangedRange = true;\n\n\t\t\tif ( liveRange.root == this._document.graveyard ) {\n\t\t\t\tthis._selectionRestorePosition = data.deletionPosition;\n\n\t\t\t\tconst index = this._ranges.indexOf( liveRange );\n\t\t\t\tthis._ranges.splice( index, 1 );\n\t\t\t\tliveRange.detach();\n\t\t\t}\n\t\t} );\n\n\t\treturn liveRange;\n\t}\n\n\t_updateMarkers() {\n\t\tif ( !this._observedMarkers.size ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst markers = [];\n\t\tlet changed = false;\n\n\t\tfor ( const marker of this._model.markers ) {\n\t\t\tconst markerGroup = marker.name.split( ':', 1 )[ 0 ];\n\n\t\t\tif ( !this._observedMarkers.has( markerGroup ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst markerRange = marker.getRange();\n\n\t\t\tfor ( const selectionRange of this.getRanges() ) {\n\t\t\t\tif ( markerRange.containsRange( selectionRange, !selectionRange.isCollapsed ) ) {\n\t\t\t\t\tmarkers.push( marker );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst oldMarkers = Array.from( this.markers );\n\n\t\tfor ( const marker of markers ) {\n\t\t\tif ( !this.markers.has( marker ) ) {\n\t\t\t\tthis.markers.add( marker );\n\n\t\t\t\tchanged = true;\n\t\t\t}\n\t\t}\n\n\t\tfor ( const marker of Array.from( this.markers ) ) {\n\t\t\tif ( !markers.includes( marker ) ) {\n\t\t\t\tthis.markers.remove( marker );\n\n\t\t\t\tchanged = true;\n\t\t\t}\n\t\t}\n\n\t\tif ( changed ) {\n\t\t\tthis.fire( 'change:marker', { oldMarkers, directChange: false } );\n\t\t}\n\t}\n\n\t_updateMarker( marker, markerRange ) {\n\t\tconst markerGroup = marker.name.split( ':', 1 )[ 0 ];\n\n\t\tif ( !this._observedMarkers.has( markerGroup ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet changed = false;\n\n\t\tconst oldMarkers = Array.from( this.markers );\n\t\tconst hasMarker = this.markers.has( marker );\n\n\t\tif ( !markerRange ) {\n\t\t\tif ( hasMarker ) {\n\t\t\t\tthis.markers.remove( marker );\n\t\t\t\tchanged = true;\n\t\t\t}\n\t\t} else {\n\t\t\tlet contained = false;\n\n\t\t\tfor ( const selectionRange of this.getRanges() ) {\n\t\t\t\tif ( markerRange.containsRange( selectionRange, !selectionRange.isCollapsed ) ) {\n\t\t\t\t\tcontained = true;\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( contained && !hasMarker ) {\n\t\t\t\tthis.markers.add( marker );\n\n\t\t\t\tchanged = true;\n\t\t\t} else if ( !contained && hasMarker ) {\n\t\t\t\tthis.markers.remove( marker );\n\n\t\t\t\tchanged = true;\n\t\t\t}\n\t\t}\n\n\t\tif ( changed ) {\n\t\t\tthis.fire( 'change:marker', { oldMarkers, directChange: false } );\n\t\t}\n\t}\n\n\t// Updates this selection attributes according to its ranges and the {@link module:engine/model/document~Document model document}.\n\t//\n\t// @protected\n\t// @param {Boolean} clearAll\n\t// @fires change:attribute\n\t_updateAttributes( clearAll ) {\n\t\tconst newAttributes = toMap( this._getSurroundingAttributes() );\n\t\tconst oldAttributes = toMap( this.getAttributes() );\n\n\t\tif ( clearAll ) {\n\t\t\t// If `clearAll` remove all attributes and reset priorities.\n\t\t\tthis._attributePriority = new Map();\n\t\t\tthis._attrs = new Map();\n\t\t} else {\n\t\t\t// If not, remove only attributes added with `low` priority.\n\t\t\tfor ( const [ key, priority ] of this._attributePriority ) {\n\t\t\t\tif ( priority == 'low' ) {\n\t\t\t\t\tthis._attrs.delete( key );\n\t\t\t\t\tthis._attributePriority.delete( key );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis._setAttributesTo( newAttributes );\n\n\t\t// Let's evaluate which attributes really changed.\n\t\tconst changed = [];\n\n\t\t// First, loop through all attributes that are set on selection right now.\n\t\t// Check which of them are different than old attributes.\n\t\tfor ( const [ newKey, newValue ] of this.getAttributes() ) {\n\t\t\tif ( !oldAttributes.has( newKey ) || oldAttributes.get( newKey ) !== newValue ) {\n\t\t\t\tchanged.push( newKey );\n\t\t\t}\n\t\t}\n\n\t\t// Then, check which of old attributes got removed.\n\t\tfor ( const [ oldKey ] of oldAttributes ) {\n\t\t\tif ( !this.hasAttribute( oldKey ) ) {\n\t\t\t\tchanged.push( oldKey );\n\t\t\t}\n\t\t}\n\n\t\t// Fire event with exact data (fire only if anything changed).\n\t\tif ( changed.length > 0 ) {\n\t\t\tthis.fire( 'change:attribute', { attributeKeys: changed, directChange: false } );\n\t\t}\n\t}\n\n\t// Internal method for setting `LiveSelection` attribute. Supports attribute priorities (through `directChange`\n\t// parameter).\n\t//\n\t// @private\n\t// @param {String} key Attribute key.\n\t// @param {*} value Attribute value.\n\t// @param {Boolean} [directChange=true] `true` if the change is caused by `Selection` API, `false` if change\n\t// is caused by `Batch` API.\n\t// @returns {Boolean} Whether value has changed.\n\t_setAttribute( key, value, directChange = true ) {\n\t\tconst priority = directChange ? 'normal' : 'low';\n\n\t\tif ( priority == 'low' && this._attributePriority.get( key ) == 'normal' ) {\n\t\t\t// Priority too low.\n\t\t\treturn false;\n\t\t}\n\n\t\tconst oldValue = super.getAttribute( key );\n\n\t\t// Don't do anything if value has not changed.\n\t\tif ( oldValue === value ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tthis._attrs.set( key, value );\n\n\t\t// Update priorities map.\n\t\tthis._attributePriority.set( key, priority );\n\n\t\treturn true;\n\t}\n\n\t// Internal method for removing `LiveSelection` attribute. Supports attribute priorities (through `directChange`\n\t// parameter).\n\t//\n\t// NOTE: Even if attribute is not present in the selection but is provided to this method, it's priority will\n\t// be changed according to `directChange` parameter.\n\t//\n\t// @private\n\t// @param {String} key Attribute key.\n\t// @param {Boolean} [directChange=true] `true` if the change is caused by `Selection` API, `false` if change\n\t// is caused by `Batch` API.\n\t// @returns {Boolean} Whether attribute was removed. May not be true if such attributes didn't exist or the\n\t// existing attribute had higher priority.\n\t_removeAttribute( key, directChange = true ) {\n\t\tconst priority = directChange ? 'normal' : 'low';\n\n\t\tif ( priority == 'low' && this._attributePriority.get( key ) == 'normal' ) {\n\t\t\t// Priority too low.\n\t\t\treturn false;\n\t\t}\n\n\t\t// Update priorities map.\n\t\tthis._attributePriority.set( key, priority );\n\n\t\t// Don't do anything if value has not changed.\n\t\tif ( !super.hasAttribute( key ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tthis._attrs.delete( key );\n\n\t\treturn true;\n\t}\n\n\t// Internal method for setting multiple `LiveSelection` attributes. Supports attribute priorities (through\n\t// `directChange` parameter).\n\t//\n\t// @private\n\t// @param {Map.<String,*>} attrs Iterable object containing attributes to be set.\n\t// @returns {Set.<String>} Changed attribute keys.\n\t_setAttributesTo( attrs ) {\n\t\tconst changed = new Set();\n\n\t\tfor ( const [ oldKey, oldValue ] of this.getAttributes() ) {\n\t\t\t// Do not remove attribute if attribute with same key and value is about to be set.\n\t\t\tif ( attrs.get( oldKey ) === oldValue ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// All rest attributes will be removed so changed attributes won't change .\n\t\t\tthis._removeAttribute( oldKey, false );\n\t\t}\n\n\t\tfor ( const [ key, value ] of attrs ) {\n\t\t\t// Attribute may not be set because of attributes or because same key/value is already added.\n\t\t\tconst gotAdded = this._setAttribute( key, value, false );\n\n\t\t\tif ( gotAdded ) {\n\t\t\t\tchanged.add( key );\n\t\t\t}\n\t\t}\n\n\t\treturn changed;\n\t}\n\n\t// Returns an iterable that iterates through all selection attributes stored in current selection's parent.\n\t//\n\t// @protected\n\t// @returns {Iterable.<*>}\n\t* _getStoredAttributes() {\n\t\tconst selectionParent = this.getFirstPosition().parent;\n\n\t\tif ( this.isCollapsed && selectionParent.isEmpty ) {\n\t\t\tfor ( const key of selectionParent.getAttributeKeys() ) {\n\t\t\t\tif ( key.startsWith( storePrefix ) ) {\n\t\t\t\t\tconst realKey = key.substr( storePrefix.length );\n\n\t\t\t\t\tyield [ realKey, selectionParent.getAttribute( key ) ];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Checks model text nodes that are closest to the selection's first position and returns attributes of first\n\t// found element. If there are no text nodes in selection's first position parent, it returns selection\n\t// attributes stored in that parent.\n\t//\n\t// @private\n\t// @returns {Iterable.<*>} Collection of attributes.\n\t_getSurroundingAttributes() {\n\t\tconst position = this.getFirstPosition();\n\t\tconst schema = this._model.schema;\n\n\t\tlet attrs = null;\n\n\t\tif ( !this.isCollapsed ) {\n\t\t\t// 1. If selection is a range...\n\t\t\tconst range = this.getFirstRange();\n\n\t\t\t// ...look for a first character node in that range and take attributes from it.\n\t\t\tfor ( const value of range ) {\n\t\t\t\t// If the item is an object, we don't want to get attributes from its children.\n\t\t\t\tif ( value.item.is( 'element' ) && schema.isObject( value.item ) ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tif ( value.type == 'text' ) {\n\t\t\t\t\tattrs = value.item.getAttributes();\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\t// 2. If the selection is a caret or the range does not contain a character node...\n\n\t\t\tconst nodeBefore = position.textNode ? position.textNode : position.nodeBefore;\n\t\t\tconst nodeAfter = position.textNode ? position.textNode : position.nodeAfter;\n\n\t\t\t// When gravity is overridden then don't take node before into consideration.\n\t\t\tif ( !this.isGravityOverridden ) {\n\t\t\t\t// ...look at the node before caret and take attributes from it if it is a character node.\n\t\t\t\tattrs = getAttrsIfCharacter( nodeBefore );\n\t\t\t}\n\n\t\t\t// 3. If not, look at the node after caret...\n\t\t\tif ( !attrs ) {\n\t\t\t\tattrs = getAttrsIfCharacter( nodeAfter );\n\t\t\t}\n\n\t\t\t// 4. If not, try to find the first character on the left, that is in the same node.\n\t\t\t// When gravity is overridden then don't take node before into consideration.\n\t\t\tif ( !this.isGravityOverridden && !attrs ) {\n\t\t\t\tlet node = nodeBefore;\n\n\t\t\t\twhile ( node && !schema.isInline( node ) && !attrs ) {\n\t\t\t\t\tnode = node.previousSibling;\n\t\t\t\t\tattrs = getAttrsIfCharacter( node );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// 5. If not found, try to find the first character on the right, that is in the same node.\n\t\t\tif ( !attrs ) {\n\t\t\t\tlet node = nodeAfter;\n\n\t\t\t\twhile ( node && !schema.isInline( node ) && !attrs ) {\n\t\t\t\t\tnode = node.nextSibling;\n\t\t\t\t\tattrs = getAttrsIfCharacter( node );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// 6. If not found, selection should retrieve attributes from parent.\n\t\t\tif ( !attrs ) {\n\t\t\t\tattrs = this._getStoredAttributes();\n\t\t\t}\n\t\t}\n\n\t\treturn attrs;\n\t}\n\n\t// Fixes the selection after all its ranges got removed.\n\t//\n\t// @private\n\t// @param {module:engine/model/position~Position} deletionPosition Position where the deletion happened.\n\t_fixGraveyardSelection( deletionPosition ) {\n\t\t// Find a range that is a correct selection range and is closest to the position where the deletion happened.\n\t\tconst selectionRange = this._model.schema.getNearestSelectionRange( deletionPosition );\n\n\t\t// If nearest valid selection range has been found - add it in the place of old range.\n\t\tif ( selectionRange ) {\n\t\t\t// Check the range, convert it to live range, bind events, etc.\n\t\t\tthis._pushRange( selectionRange );\n\t\t}\n\t\t// If nearest valid selection range cannot be found don't add any range. Selection will be set to the default range.\n\t}\n}\n\n// Helper function for {@link module:engine/model/liveselection~LiveSelection#_updateAttributes}.\n//\n// It takes model item, checks whether it is a text node (or text proxy) and, if so, returns it's attributes. If not, returns `null`.\n//\n// @param {module:engine/model/item~Item|null}  node\n// @returns {Boolean}\nfunction getAttrsIfCharacter( node ) {\n\tif ( node instanceof TextProxy || node instanceof Text ) {\n\t\treturn node.getAttributes();\n\t}\n\n\treturn null;\n}\n\n// Removes selection attributes from element which is not empty anymore.\n//\n// @param {module:engine/model/model~Model} model\n// @param {module:engine/model/batch~Batch} batch\nfunction clearAttributesStoredInElement( model, batch ) {\n\tconst differ = model.document.differ;\n\n\tfor ( const entry of differ.getChanges() ) {\n\t\tif ( entry.type != 'insert' ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst changeParent = entry.position.parent;\n\t\tconst isNoLongerEmpty = entry.length === changeParent.maxOffset;\n\n\t\tif ( isNoLongerEmpty ) {\n\t\t\tmodel.enqueueChange( batch, writer => {\n\t\t\t\tconst storedAttributes = Array.from( changeParent.getAttributeKeys() )\n\t\t\t\t\t.filter( key => key.startsWith( storePrefix ) );\n\n\t\t\t\tfor ( const key of storedAttributes ) {\n\t\t\t\t\twriter.removeAttribute( key, changeParent );\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\t}\n}\n"]}]}