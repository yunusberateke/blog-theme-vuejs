{"remainingRequest":"/home/eke/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/babel-loader/lib/index.js!/home/eke/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/eslint-loader/index.js??ref--13-0!/home/eke/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/src/store/modules/PostModule/mutations.js","dependencies":[{"path":"/home/eke/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/src/store/modules/PostModule/mutations.js","mtime":1620557381545},{"path":"/home/eke/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/eke/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/eke/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tICIvaG9tZS9la2UvWWFuZGV4LkRpc2svUHJvamVsZXJpbS9CZW5pbVByb2plbGVyaW0vd2Vic2l0ZW0vd2Vic2l0ZW0td2ViL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9kZWZpbmVQcm9wZXJ0eSI7Cgp2YXIgX211dGF0aW9uczsKCmltcG9ydCB7IENMRUFSX1NUQVRFLCBTRVRfUE9TVFMsIFNFVF9DT1VOVCB9IGZyb20gJy4vbXV0YXRpb25fdHlwZXMnOwppbXBvcnQgZGVmYXVsdFN0YXRlIGZyb20gJy4vc3RhdGUnOwp2YXIgbXV0YXRpb25zID0gKF9tdXRhdGlvbnMgPSB7fSwgX2RlZmluZVByb3BlcnR5KF9tdXRhdGlvbnMsIFNFVF9QT1NUUywgZnVuY3Rpb24gKHN0YXRlLCBwb3N0cykgewogIHN0YXRlLnBvc3RzID0gcG9zdHM7Cn0pLCBfZGVmaW5lUHJvcGVydHkoX211dGF0aW9ucywgQ0xFQVJfU1RBVEUsIGZ1bmN0aW9uIChzdGF0ZSkgewogIE9iamVjdC5hc3NpZ24oc3RhdGUsIGRlZmF1bHRTdGF0ZSgpKTsKfSksIF9kZWZpbmVQcm9wZXJ0eShfbXV0YXRpb25zLCBTRVRfQ09VTlQsIGZ1bmN0aW9uIChzdGF0ZSwgY291bnQpIHsKICBzdGF0ZS5jb3VudCA9IGNvdW50Owp9KSwgX211dGF0aW9ucyk7CmV4cG9ydCBkZWZhdWx0IG11dGF0aW9uczs="},{"version":3,"sources":["/home/eke/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/src/store/modules/PostModule/mutations.js"],"names":["CLEAR_STATE","SET_POSTS","SET_COUNT","defaultState","mutations","state","posts","Object","assign","count"],"mappings":";;;;AAAA,SACIA,WADJ,EAEIC,SAFJ,EAGIC,SAHJ,QAIO,kBAJP;AAKA,OAAOC,YAAP,MAAyB,SAAzB;AAEA,IAAMC,SAAS,iDAEVH,SAFU,YAECI,KAFD,EAEOC,KAFP,EAEa;AACpBD,EAAAA,KAAK,CAACC,KAAN,GAAcA,KAAd;AACH,CAJU,+BAMVN,WANU,YAMGK,KANH,EAMS;AAChBE,EAAAA,MAAM,CAACC,MAAP,CAAcH,KAAd,EAAqBF,YAAY,EAAjC;AACH,CARU,+BAUVD,SAVU,YAUCG,KAVD,EAUQI,KAVR,EAUc;AACrBJ,EAAAA,KAAK,CAACI,KAAN,GAAcA,KAAd;AACH,CAZU,cAAf;AAeA,eAAeL,SAAf","sourcesContent":["import {\n    CLEAR_STATE,\n    SET_POSTS,\n    SET_COUNT,\n} from './mutation_types';\nimport defaultState from './state'\n\nconst mutations = {\n\n    [SET_POSTS](state,posts){\n        state.posts = posts;\n    },\n\n    [CLEAR_STATE](state){\n        Object.assign(state, defaultState())\n    },\n\n    [SET_COUNT](state, count){\n        state.count = count;\n    },\n}\n\nexport default mutations;\n"]}]}