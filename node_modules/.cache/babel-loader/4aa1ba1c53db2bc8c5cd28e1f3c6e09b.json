{"remainingRequest":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/babel-loader/lib/index.js!/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-dev-webpack-plugin/lib/translatesourceloader.js?{}!/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-ui/src/focuscycler.js","dependencies":[{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-ui/src/focuscycler.js","mtime":499162500000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-dev-webpack-plugin/lib/translatesourceloader.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-ui/src/focuscycler.js"],"names":["global","FocusCycler","options","Object","assign","actions","keystrokeHandler","methodName","keystroke","set","data","cancel","focusables","find","isFocusable","filter","slice","_getFocusableItem","index","focusTracker","focusedElement","view","viewIndex","focused","element","_focus","first","last","next","previous","focus","step","current","collectionLength","length","get","window","getComputedStyle","display"],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA,OAAOA,MAAP,MAAmB,0CAAnB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IACqBC,W;AACpB;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,uBAAaC,OAAb,EAAuB;AAAA;;AAAA;;AACtBC,IAAAA,MAAM,CAACC,MAAP,CAAe,IAAf,EAAqBF,OAArB;AAEA;AACF;AACA;AACA;AACA;AACA;;AAEE;AACF;AACA;AACA;AACA;AACA;AACA;;AAEE;AACF;AACA;AACA;AACA;AACA;AACA;;AAEE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEE,QAAKA,OAAO,CAACG,OAAR,IAAmBH,OAAO,CAACI,gBAAhC,EAAmD;AAAA,iCACtCC,UADsC;AAEjD,YAAIF,OAAO,GAAGH,OAAO,CAACG,OAAR,CAAiBE,UAAjB,CAAd;;AAEA,YAAK,OAAOF,OAAP,IAAkB,QAAvB,EAAkC;AACjCA,UAAAA,OAAO,GAAG,CAAEA,OAAF,CAAV;AACA;;AANgD,mDAQxBA,OARwB;AAAA;;AAAA;AAQjD,8DAAmC;AAAA,gBAAvBG,SAAuB;AAClCN,YAAAA,OAAO,CAACI,gBAAR,CAAyBG,GAAzB,CAA8BD,SAA9B,EAAyC,UAAEE,IAAF,EAAQC,MAAR,EAAoB;AAC5D,cAAA,KAAI,CAAEJ,UAAF,CAAJ;;AACAI,cAAAA,MAAM;AACN,aAHD;AAIA;AAbgD;AAAA;AAAA;AAAA;AAAA;AAAA;;AAClD,WAAM,IAAMJ,UAAZ,IAA0BL,OAAO,CAACG,OAAlC,EAA4C;AAAA,cAAhCE,UAAgC;AAa3C;AACD;AACD;AAED;AACD;A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","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/focuscycler\n */\n\nimport global from '@ckeditor/ckeditor5-utils/src/dom/global';\n\n/**\n * A utility class that helps cycling over focusable {@link module:ui/view~View views} in a\n * {@link module:ui/viewcollection~ViewCollection} when the focus is tracked by the\n * {@link module:utils/focustracker~FocusTracker} instance. It helps implementing keyboard\n * navigation in HTML forms, toolbars, lists and the like.\n *\n * To work properly it requires:\n * * a collection of focusable (HTML `tabindex` attribute) views that implement the `focus()` method,\n * * an associated focus tracker to determine which view is focused.\n *\n * A simple cycler setup can look like this:\n *\n *\t\tconst focusables = new ViewCollection();\n *\t\tconst focusTracker = new FocusTracker();\n *\n *\t\t// Add focusable views to the focus tracker.\n *\t\tfocusTracker.add( ... );\n *\n * Then, the cycler can be used manually:\n *\n *\t\tconst cycler = new FocusCycler( { focusables, focusTracker } );\n *\n *\t\t// Will focus the first focusable view in #focusables.\n *\t\tcycler.focusFirst();\n *\n *\t\t// Will log the next focusable item in #focusables.\n *\t\tconsole.log( cycler.next );\n *\n * Alternatively, it can work side by side with the {@link module:utils/keystrokehandler~KeystrokeHandler}:\n *\n *\t\tconst keystrokeHandler = new KeystrokeHandler();\n *\n *\t\t// Activate the keystroke handler.\n *\t\tkeystrokeHandler.listenTo( sourceOfEvents );\n *\n *\t\tconst cycler = new FocusCycler( {\n *\t\t\tfocusables, focusTracker, keystrokeHandler,\n *\t\t\tactions: {\n *\t\t\t\t// When arrowup of arrowleft is detected by the #keystrokeHandler,\n *\t\t\t\t// focusPrevious() will be called on the cycler.\n *\t\t\t\tfocusPrevious: [ 'arrowup', 'arrowleft' ],\n *\t\t\t}\n *\t\t} );\n *\n * Check out the {@glink framework/guides/deep-dive/ui/focus-tracking \"Deep dive into focus tracking\" guide} to learn more.\n */\nexport default class FocusCycler {\n\t/**\n\t * Creates an instance of the focus cycler utility.\n\t *\n\t * @param {Object} options Configuration options.\n\t * @param {module:utils/collection~Collection|Object} options.focusables\n\t * @param {module:utils/focustracker~FocusTracker} options.focusTracker\n\t * @param {module:utils/keystrokehandler~KeystrokeHandler} [options.keystrokeHandler]\n\t * @param {Object} [options.actions]\n\t */\n\tconstructor( options ) {\n\t\tObject.assign( this, options );\n\n\t\t/**\n\t\t * A {@link module:ui/view~View view} collection that the cycler operates on.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/collection~Collection} #focusables\n\t\t */\n\n\t\t/**\n\t\t * A focus tracker instance that the cycler uses to determine the current focus\n\t\t * state in {@link #focusables}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/focustracker~FocusTracker} #focusTracker\n\t\t */\n\n\t\t/**\n\t\t * An instance of the {@link module:utils/keystrokehandler~KeystrokeHandler}\n\t\t * which can respond to certain keystrokes and cycle the focus.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/keystrokehandler~KeystrokeHandler} #keystrokeHandler\n\t\t */\n\n\t\t/**\n\t\t * Actions that the cycler can take when a keystroke is pressed. Requires\n\t\t * `options.keystrokeHandler` to be passed and working. When an action is\n\t\t * performed, `preventDefault` and `stopPropagation` will be called on the event\n\t\t * the keystroke fired in the DOM.\n\t\t *\n\t\t *\t\tactions: {\n\t\t *\t\t\t// Will call #focusPrevious() when arrowleft or arrowup is pressed.\n\t\t *\t\t\tfocusPrevious: [ 'arrowleft', 'arrowup' ],\n\t\t *\n\t\t *\t\t\t// Will call #focusNext() when arrowdown is pressed.\n\t\t *\t\t\tfocusNext: 'arrowdown'\n\t\t *\t\t}\n\t\t *\n\t\t * @readonly\n\t\t * @member {Object} #actions\n\t\t */\n\n\t\tif ( options.actions && options.keystrokeHandler ) {\n\t\t\tfor ( const methodName in options.actions ) {\n\t\t\t\tlet actions = options.actions[ methodName ];\n\n\t\t\t\tif ( typeof actions == 'string' ) {\n\t\t\t\t\tactions = [ actions ];\n\t\t\t\t}\n\n\t\t\t\tfor ( const keystroke of actions ) {\n\t\t\t\t\toptions.keystrokeHandler.set( keystroke, ( data, cancel ) => {\n\t\t\t\t\t\tthis[ methodName ]();\n\t\t\t\t\t\tcancel();\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Returns the first focusable view in {@link #focusables}.\n\t * Returns `null` if there is none.\n\t *\n\t * @readonly\n\t * @member {module:ui/view~View|null} #first\n\t */\n\tget first() {\n\t\treturn this.focusables.find( isFocusable ) || null;\n\t}\n\n\t/**\n\t * Returns the last focusable view in {@link #focusables}.\n\t * Returns `null` if there is none.\n\t *\n\t * @readonly\n\t * @member {module:ui/view~View|null} #last\n\t */\n\tget last() {\n\t\treturn this.focusables.filter( isFocusable ).slice( -1 )[ 0 ] || null;\n\t}\n\n\t/**\n\t * Returns the next focusable view in {@link #focusables} based on {@link #current}.\n\t * Returns `null` if there is none.\n\t *\n\t * @readonly\n\t * @member {module:ui/view~View|null} #next\n\t */\n\tget next() {\n\t\treturn this._getFocusableItem( 1 );\n\t}\n\n\t/**\n\t * Returns the previous focusable view in {@link #focusables} based on {@link #current}.\n\t * Returns `null` if there is none.\n\t *\n\t * @readonly\n\t * @member {module:ui/view~View|null} #previous\n\t */\n\tget previous() {\n\t\treturn this._getFocusableItem( -1 );\n\t}\n\n\t/**\n\t * An index of the view in the {@link #focusables} which is focused according\n\t * to {@link #focusTracker}. Returns `null` when there is no such view.\n\t *\n\t * @readonly\n\t * @member {Number|null} #current\n\t */\n\tget current() {\n\t\tlet index = null;\n\n\t\t// There's no focused view in the focusables.\n\t\tif ( this.focusTracker.focusedElement === null ) {\n\t\t\treturn null;\n\t\t}\n\n\t\tthis.focusables.find( ( view, viewIndex ) => {\n\t\t\tconst focused = view.element === this.focusTracker.focusedElement;\n\n\t\t\tif ( focused ) {\n\t\t\t\tindex = viewIndex;\n\t\t\t}\n\n\t\t\treturn focused;\n\t\t} );\n\n\t\treturn index;\n\t}\n\n\t/**\n\t * Focuses the {@link #first} item in {@link #focusables}.\n\t */\n\tfocusFirst() {\n\t\tthis._focus( this.first );\n\t}\n\n\t/**\n\t * Focuses the {@link #last} item in {@link #focusables}.\n\t */\n\tfocusLast() {\n\t\tthis._focus( this.last );\n\t}\n\n\t/**\n\t * Focuses the {@link #next} item in {@link #focusables}.\n\t */\n\tfocusNext() {\n\t\tthis._focus( this.next );\n\t}\n\n\t/**\n\t * Focuses the {@link #previous} item in {@link #focusables}.\n\t */\n\tfocusPrevious() {\n\t\tthis._focus( this.previous );\n\t}\n\n\t/**\n\t * Focuses the given view if it exists.\n\t *\n\t * @protected\n\t * @param {module:ui/view~View} view\n\t */\n\t_focus( view ) {\n\t\tif ( view ) {\n\t\t\tview.focus();\n\t\t}\n\t}\n\n\t/**\n\t * Returns the next or previous focusable view in {@link #focusables} with respect\n\t * to {@link #current}.\n\t *\n\t * @protected\n\t * @param {Number} step Either `1` for checking forward from {@link #current} or\n\t * `-1` for checking backwards.\n\t * @returns {module:ui/view~View|null}\n\t */\n\t_getFocusableItem( step ) {\n\t\t// Cache for speed.\n\t\tconst current = this.current;\n\t\tconst collectionLength = this.focusables.length;\n\n\t\tif ( !collectionLength ) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// Start from the beginning if no view is focused.\n\t\t// https://github.com/ckeditor/ckeditor5-ui/issues/206\n\t\tif ( current === null ) {\n\t\t\treturn this[ step === 1 ? 'first' : 'last' ];\n\t\t}\n\n\t\t// Cycle in both directions.\n\t\tlet index = ( current + collectionLength + step ) % collectionLength;\n\n\t\tdo {\n\t\t\tconst view = this.focusables.get( index );\n\n\t\t\t// TODO: Check if view is visible.\n\t\t\tif ( isFocusable( view ) ) {\n\t\t\t\treturn view;\n\t\t\t}\n\n\t\t\t// Cycle in both directions.\n\t\t\tindex = ( index + collectionLength + step ) % collectionLength;\n\t\t} while ( index !== current );\n\n\t\treturn null;\n\t}\n}\n\n// Checks whether a view is focusable.\n//\n// @private\n// @param {module:ui/view~View} view A view to be checked.\n// @returns {Boolean}\nfunction isFocusable( view ) {\n\treturn !!( view.focus && global.window.getComputedStyle( view.element ).display != 'none' );\n}\n"]}]}