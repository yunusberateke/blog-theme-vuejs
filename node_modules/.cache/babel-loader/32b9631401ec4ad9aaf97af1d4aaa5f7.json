{"remainingRequest":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/babel-loader/lib/index.js!/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-dev-webpack-plugin/lib/translatesourceloader.js?{}!/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-utils/src/keystrokehandler.js","dependencies":[{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-utils/src/keystrokehandler.js","mtime":499162500000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-dev-webpack-plugin/lib/translatesourceloader.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tICIvaG9tZS9la2ViZXJhdC9ZYW5kZXguRGlzay9Qcm9qZWxlcmltL0JlbmltUHJvamVsZXJpbS93ZWJzaXRlbS93ZWJzaXRlbS13ZWIvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NsYXNzQ2FsbENoZWNrIjsKaW1wb3J0IF9jcmVhdGVDbGFzcyBmcm9tICIvaG9tZS9la2ViZXJhdC9ZYW5kZXguRGlzay9Qcm9qZWxlcmltL0JlbmltUHJvamVsZXJpbS93ZWJzaXRlbS93ZWJzaXRlbS13ZWIvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZUNsYXNzIjsKCi8qKgogKiBAbGljZW5zZSBDb3B5cmlnaHQgKGMpIDIwMDMtMjAyMSwgQ0tTb3VyY2UgLSBGcmVkZXJpY28gS25hYmJlbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KICogRm9yIGxpY2Vuc2luZywgc2VlIExJQ0VOU0UubWQgb3IgaHR0cHM6Ly9ja2VkaXRvci5jb20vbGVnYWwvY2tlZGl0b3Itb3NzLWxpY2Vuc2UKICovCgovKioKICogQG1vZHVsZSB1dGlscy9rZXlzdHJva2VoYW5kbGVyCiAqLwppbXBvcnQgRG9tRW1pdHRlck1peGluIGZyb20gJy4vZG9tL2VtaXR0ZXJtaXhpbic7CmltcG9ydCB7IGdldENvZGUsIHBhcnNlS2V5c3Ryb2tlIH0gZnJvbSAnLi9rZXlib2FyZCc7Ci8qKgogKiBLZXlzdHJva2UgaGFuZGxlciBhbGxvd3MgcmVnaXN0ZXJpbmcgY2FsbGJhY2tzIGZvciBnaXZlbiBrZXlzdHJva2VzLgogKgogKiBUaGUgbW9zdCBmcmVxdWVudCB1c2Ugb2YgdGhpcyBjbGFzcyBpcyB0aHJvdWdoIHRoZSB7QGxpbmsgbW9kdWxlOmNvcmUvZWRpdG9yL2VkaXRvcn5FZGl0b3Ija2V5c3Ryb2tlcyBgZWRpdG9yLmtleXN0cm9rZXNgfQogKiBwcm9wZXJ0eS4gSXQgYWxsb3dzIGxpc3RlbmluZyB0byBrZXlzdHJva2VzIGV4ZWN1dGVkIGluIHRoZSBlZGl0aW5nIHZpZXc6CiAqCiAqCQllZGl0b3Iua2V5c3Ryb2tlcy5zZXQoICdDdHJsK0EnLCAoIGtleUV2dERhdGEsIGNhbmNlbCApID0+IHsKICoJCQljb25zb2xlLmxvZyggJ0N0cmwrQSBoYXMgYmVlbiBwcmVzc2VkJyApOwogKgkJCWNhbmNlbCgpOwogKgkJfSApOwogKgogKiBIb3dldmVyLCB0aGlzIHV0aWxpdHkgY2xhc3MgY2FuIGJlIHVzZWQgaW4gdmFyaW91cyBwYXJ0IG9mIHRoZSBVSS4gRm9yIGluc3RhbmNlLCBhIGNlcnRhaW4ge0BsaW5rIG1vZHVsZTp1aS92aWV3flZpZXd9CiAqIGNhbiB1c2UgaXQgbGlrZSB0aGlzOgogKgogKgkJY2xhc3MgTXlWaWV3IGV4dGVuZHMgVmlldyB7CiAqCQkJY29uc3RydWN0b3IoKSB7CiAqCQkJCXRoaXMua2V5c3Ryb2tlcyA9IG5ldyBLZXlzdHJva2VIYW5kbGVyKCk7CiAqCiAqIAkJCQl0aGlzLmtleXN0cm9rZXMuc2V0KCAndGFiJywgaGFuZGxlVGFiS2V5ICk7CiAqCQkJfQogKgogKgkJCXJlbmRlcigpIHsKICoJCQkJc3VwZXIucmVuZGVyKCk7CiAqCiAqCQkJCXRoaXMua2V5c3Ryb2tlcy5saXN0ZW5UbyggdGhpcy5lbGVtZW50ICk7CiAqCQkJfQogKgkJfQogKgogKiBUaGF0IGtleXN0cm9rZSBoYW5kbGVyIHdpbGwgbGlzdGVuIHRvIGBrZXlkb3duYCBldmVudHMgZmlyZWQgaW4gdGhpcyB2aWV3J3MgbWFpbiBlbGVtZW50LgogKgogKi8KCnZhciBLZXlzdHJva2VIYW5kbGVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHsKICAvKioKICAgKiBDcmVhdGVzIGFuIGluc3RhbmNlIG9mIHRoZSBrZXlzdHJva2UgaGFuZGxlci4KICAgKi8KICBmdW5jdGlvbiBLZXlzdHJva2VIYW5kbGVyKCkgewogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEtleXN0cm9rZUhhbmRsZXIpOwoKICAgIC8qKgogICAgICogTGlzdGVuZXIgdXNlZCB0byBsaXN0ZW4gdG8gZXZlbnRzIGZvciBlYXNpZXIga2V5c3Ryb2tlIGhhbmRsZXIgZGVzdHJ1Y3Rpb24uCiAgICAgKgogICAgICogQHByb3RlY3RlZAogICAgICogQG1lbWJlciB7bW9kdWxlOnV0aWxzL2RvbS9lbWl0dGVybWl4aW5+RW1pdHRlcn0KICAgICAqLwogICAgdGhpcy5fbGlzdGVuZXIgPSBPYmplY3QuY3JlYXRlKERvbUVtaXR0ZXJNaXhpbik7CiAgfQogIC8qKgogICAqIFN0YXJ0cyBsaXN0ZW5pbmcgZm9yIGBrZXlkb3duYCBldmVudHMgZnJvbSBhIGdpdmVuIGVtaXR0ZXIuCiAgICoKICAgKiBAcGFyYW0ge21vZHVsZTp1dGlscy9lbWl0dGVybWl4aW5+RW1pdHRlcn0gZW1pdHRlcgogICAqLwoKCiAgX2NyZWF0ZUNsYXNzKEtleXN0cm9rZUhhbmRsZXIsIFt7CiAgICBrZXk6ICJsaXN0ZW5UbyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gbGlzdGVuVG8oZW1pdHRlcikgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgLy8gVGhlICNfbGlzdGVuZXIgd29ya3MgaGVyZSBhcyBhIGtpbmQgb2YgZGlzcGF0Y2hlci4gSXQgZ3JvdXBzIHRoZSBldmVudHMgY29taW5nIGZyb20gdGhlIHNhbWUKICAgICAgLy8ga2V5c3Ryb2tlIHNvIHRoZSBsaXN0ZW5lcnMgY2FuIGJlIGF0dGFjaGVkIHRvIHRoZW0gd2l0aCBkaWZmZXJlbnQgcHJpb3JpdGllcy4KICAgICAgLy8KICAgICAgLy8gRS5nLiBhbGwgdGhlIGtleXN0cm9rZXMgd2l0aCB0aGUgYGtleUNvZGVgIG9mIDQyIGNvbWluZyBmcm9tIHRoZSBgZW1pdHRlcmAgYXJlIHByb3BhZ2F0ZWQKICAgICAgLy8gYXMgYSBgX2tleWRvd246NDJgIGV2ZW50IGJ5IHRoZSBgX2xpc3RlbmVyYC4gSWYgdGhlcmUncyBhIGNhbGxiYWNrIGNyZWF0ZWQgYnkgdGhlIGBzZXRgCiAgICAgIC8vIG1ldGhvZCBmb3IgdGhpcyA0MiBrZXlzdHJva2UsIGl0IGxpc3RlbnMgdG8gdGhlIGBfbGlzdGVuZXIjX2tleWRvd246NDJgIGV2ZW50IG9ubHkgYW5kIGludGVyYWN0cwogICAgICAvLyBvbmx5IHdpdGggb3RoZXIgbGlzdGVuZXJzIG9mIHRoaXMgcGFydGljdWxhciBldmVudCwgdGh1cyBtYWtpbmcgaXQgcG9zc2libGUgdG8gcHJpb3JpdGl6ZQogICAgICAvLyB0aGUgbGlzdGVuZXJzIGFuZCBzYWZlbHkgY2FuY2VsIGV4ZWN1dGlvbiwgd2hlbiBuZWVkZWQuIEluc3RlYWQgb2YgZHVwbGljYXRpbmcgdGhlIEVtaXR0ZXIgbG9naWMsCiAgICAgIC8vIHRoZSBLZXlzdHJva2VIYW5kbGVyIHJl4oCTdXNlcyBpdCB0byBkbyBpdHMgam9iLgogICAgICB0aGlzLl9saXN0ZW5lci5saXN0ZW5UbyhlbWl0dGVyLCAna2V5ZG93bicsIGZ1bmN0aW9uIChldnQsIGtleUV2dERhdGEpIHsKICAgICAgICBfdGhpcy5fbGlzdGVuZXIuZmlyZSgnX2tleWRvd246JyArIGdldENvZGUoa2V5RXZ0RGF0YSksIGtleUV2dERhdGEpOwogICAgICB9KTsKICAgIH0KICAgIC8qKgogICAgICogUmVnaXN0ZXJzIGEgaGFuZGxlciBmb3IgdGhlIHNwZWNpZmllZCBrZXlzdHJva2UuCiAgICAgKgogICAgICogQHBhcmFtIHtTdHJpbmd8QXJyYXkuPFN0cmluZ3xOdW1iZXI+fSBrZXlzdHJva2UgS2V5c3Ryb2tlIGRlZmluZWQgaW4gYSBmb3JtYXQgYWNjZXB0ZWQgYnkKICAgICAqIHRoZSB7QGxpbmsgbW9kdWxlOnV0aWxzL2tleWJvYXJkfnBhcnNlS2V5c3Ryb2tlfSBmdW5jdGlvbi4KICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIEEgZnVuY3Rpb24gY2FsbGVkIHdpdGggdGhlCiAgICAgKiB7QGxpbmsgbW9kdWxlOmVuZ2luZS92aWV3L29ic2VydmVyL2tleW9ic2VydmVyfktleUV2ZW50RGF0YSBrZXkgZXZlbnQgZGF0YX0gb2JqZWN0IGFuZAogICAgICogYSBoZWxwZXIgZnVuY2lvbiB0byBjYWxsIGJvdGggYHByZXZlbnREZWZhdWx0KClgIGFuZCBgc3RvcFByb3BhZ2F0aW9uKClgIG9uIHRoZSB1bmRlcmx5aW5nIGV2ZW50LgogICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XSBBZGRpdGlvbmFsIG9wdGlvbnMuCiAgICAgKiBAcGFyYW0ge21vZHVsZTp1dGlscy9wcmlvcml0aWVzflByaW9yaXR5U3RyaW5nfE51bWJlcn0gW29wdGlvbnMucHJpb3JpdHk9J25vcm1hbCddIFRoZSBwcmlvcml0eSBvZiB0aGUga2V5c3Ryb2tlCiAgICAgKiBjYWxsYmFjay4gVGhlIGhpZ2hlciB0aGUgcHJpb3JpdHkgdmFsdWUgdGhlIHNvb25lciB0aGUgY2FsbGJhY2sgd2lsbCBiZSBleGVjdXRlZC4gS2V5c3Ryb2tlcyBoYXZpbmcgdGhlIHNhbWUgcHJpb3JpdHkKICAgICAqIGFyZSBjYWxsZWQgaW4gdGhlIG9yZGVyIHRoZXkgd2VyZSBhZGRlZC4KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJzZXQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHNldChrZXlzdHJva2UsIGNhbGxiYWNrKSB7CiAgICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiB7fTsKICAgICAgdmFyIGtleUNvZGUgPSBwYXJzZUtleXN0cm9rZShrZXlzdHJva2UpOwogICAgICB2YXIgcHJpb3JpdHkgPSBvcHRpb25zLnByaW9yaXR5OyAvLyBFeGVjdXRlIHRoZSBwYXNzZWQgY2FsbGJhY2sgb24gS2V5c3Ryb2tlSGFuZGxlciNfa2V5ZG93bi4KICAgICAgLy8gVE9ETzogaHR0cHM6Ly9naXRodWIuY29tL2NrZWRpdG9yL2NrZWRpdG9yNS11dGlscy9pc3N1ZXMvMTQ0CgogICAgICB0aGlzLl9saXN0ZW5lci5saXN0ZW5Ubyh0aGlzLl9saXN0ZW5lciwgJ19rZXlkb3duOicgKyBrZXlDb2RlLCBmdW5jdGlvbiAoZXZ0LCBrZXlFdnREYXRhKSB7CiAgICAgICAgY2FsbGJhY2soa2V5RXZ0RGF0YSwgZnVuY3Rpb24gKCkgewogICAgICAgICAgLy8gU3RvcCB0aGUgZXZlbnQgaW4gdGhlIERPTTogbm8gbGlzdGVuZXIgaW4gdGhlIHdlYiBwYWdlCiAgICAgICAgICAvLyB3aWxsIGJlIHRyaWdnZXJlZCBieSB0aGlzIGV2ZW50LgogICAgICAgICAga2V5RXZ0RGF0YS5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgICAga2V5RXZ0RGF0YS5zdG9wUHJvcGFnYXRpb24oKTsgLy8gU3RvcCB0aGUgZXZlbnQgaW4gdGhlIEtleXN0cm9rZUhhbmRsZXI6IG5vIG1vcmUgY2FsbGJhY2tzCiAgICAgICAgICAvLyB3aWxsIGJlIGV4ZWN1dGVkIGZvciB0aGlzIGtleXN0cm9rZS4KCiAgICAgICAgICBldnQuc3RvcCgpOwogICAgICAgIH0pOyAvLyBNYXJrIHRoaXMga2V5c3Ryb2tlIGFzIGhhbmRsZWQgYnkgdGhlIGNhbGxiYWNrLiBTZWU6ICNwcmVzcy4KCiAgICAgICAgZXZ0LnJldHVybiA9IHRydWU7CiAgICAgIH0sIHsKICAgICAgICBwcmlvcml0eTogcHJpb3JpdHkKICAgICAgfSk7CiAgICB9CiAgICAvKioKICAgICAqIFRyaWdnZXJzIGEga2V5c3Ryb2tlIGhhbmRsZXIgZm9yIGEgc3BlY2lmaWVkIGtleSBjb21iaW5hdGlvbiwgaWYgc3VjaCBhIGtleXN0cm9rZSB3YXMge0BsaW5rICNzZXQgZGVmaW5lZH0uCiAgICAgKgogICAgICogQHBhcmFtIHttb2R1bGU6ZW5naW5lL3ZpZXcvb2JzZXJ2ZXIva2V5b2JzZXJ2ZXJ+S2V5RXZlbnREYXRhfSBrZXlFdnREYXRhIEtleSBldmVudCBkYXRhLgogICAgICogQHJldHVybnMge0Jvb2xlYW59IFdoZXRoZXIgdGhlIGtleXN0cm9rZSB3YXMgaGFuZGxlZC4KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJwcmVzcyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcHJlc3Moa2V5RXZ0RGF0YSkgewogICAgICByZXR1cm4gISF0aGlzLl9saXN0ZW5lci5maXJlKCdfa2V5ZG93bjonICsgZ2V0Q29kZShrZXlFdnREYXRhKSwga2V5RXZ0RGF0YSk7CiAgICB9CiAgICAvKioKICAgICAqIERlc3Ryb3lzIHRoZSBrZXlzdHJva2UgaGFuZGxlci4KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJkZXN0cm95IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBkZXN0cm95KCkgewogICAgICB0aGlzLl9saXN0ZW5lci5zdG9wTGlzdGVuaW5nKCk7CiAgICB9CiAgfV0pOwoKICByZXR1cm4gS2V5c3Ryb2tlSGFuZGxlcjsKfSgpOwoKZXhwb3J0IHsgS2V5c3Ryb2tlSGFuZGxlciBhcyBkZWZhdWx0IH07"},{"version":3,"sources":["/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-utils/src/keystrokehandler.js"],"names":["DomEmitterMixin","getCode","parseKeystroke","KeystrokeHandler","_listener","Object","create","emitter","listenTo","evt","keyEvtData","fire","keystroke","callback","options","keyCode","priority","preventDefault","stopPropagation","stop","return","stopListening"],"mappings":";;;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA,OAAOA,eAAP,MAA4B,oBAA5B;AACA,SAASC,OAAT,EAAkBC,cAAlB,QAAwC,YAAxC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IACqBC,gB;AACpB;AACD;AACA;AACC,8BAAc;AAAA;;AACb;AACF;AACA;AACA;AACA;AACA;AACE,SAAKC,SAAL,GAAiBC,MAAM,CAACC,MAAP,CAAeN,eAAf,CAAjB;AACA;AAED;AACD;AACA;AACA;AACA;;;;;WACC,kBAAUO,OAAV,EAAoB;AAAA;;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAKH,SAAL,CAAeI,QAAf,CAAyBD,OAAzB,EAAkC,SAAlC,EAA6C,UAAEE,GAAF,EAAOC,UAAP,EAAuB;AACnE,QAAA,KAAI,CAACN,SAAL,CAAeO,IAAf,CAAqB,cAAcV,OAAO,CAAES,UAAF,CAA1C,EAA0DA,UAA1D;AACA,OAFD;AAGA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACC,aAAKE,SAAL,EAAgBC,QAAhB,EAAyC;AAAA,UAAfC,OAAe,uEAAL,EAAK;AACxC,UAAMC,OAAO,GAAGb,cAAc,CAAEU,SAAF,CAA9B;AACA,UAAMI,QAAQ,GAAGF,OAAO,CAACE,QAAzB,CAFwC,CAIxC;AACA;;AACA,WAAKZ,SAAL,CAAeI,QAAf,CAAyB,KAAKJ,SAA9B,EAAyC,cAAcW,OAAvD,EAAgE,UAAEN,GAAF,EAAOC,UAAP,EAAuB;AACtFG,QAAAA,QAAQ,CAAEH,UAAF,EAAc,YAAM;AAC3B;AACA;AACAA,UAAAA,UAAU,CAACO,cAAX;AACAP,UAAAA,UAAU,CAACQ,eAAX,GAJ2B,CAM3B;AACA;;AACAT,UAAAA,GAAG,CAACU,IAAJ;AACA,SATO,CAAR,CADsF,CAYtF;;AACAV,QAAAA,GAAG,CAACW,MAAJ,GAAa,IAAb;AACA,OAdD,EAcG;AAAEJ,QAAAA,QAAQ,EAARA;AAAF,OAdH;AAeA;AAED;AACD;AACA;AACA;AACA;AACA;;;;WACC,eAAON,UAAP,EAAoB;AACnB,aAAO,CAAC,CAAC,KAAKN,SAAL,CAAeO,IAAf,CAAqB,cAAcV,OAAO,CAAES,UAAF,CAA1C,EAA0DA,UAA1D,CAAT;AACA;AAED;AACD;AACA;;;;WACC,mBAAU;AACT,WAAKN,SAAL,CAAeiB,aAAf;AACA;;;;;;SArFmBlB,gB","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/keystrokehandler\n */\n\nimport DomEmitterMixin from './dom/emittermixin';\nimport { getCode, parseKeystroke } from './keyboard';\n\n/**\n * Keystroke handler allows registering callbacks for given keystrokes.\n *\n * The most frequent use of this class is through the {@link module:core/editor/editor~Editor#keystrokes `editor.keystrokes`}\n * property. It allows listening to keystrokes executed in the editing view:\n *\n *\t\teditor.keystrokes.set( 'Ctrl+A', ( keyEvtData, cancel ) => {\n *\t\t\tconsole.log( 'Ctrl+A has been pressed' );\n *\t\t\tcancel();\n *\t\t} );\n *\n * However, this utility class can be used in various part of the UI. For instance, a certain {@link module:ui/view~View}\n * can use it like this:\n *\n *\t\tclass MyView extends View {\n *\t\t\tconstructor() {\n *\t\t\t\tthis.keystrokes = new KeystrokeHandler();\n *\n * \t\t\t\tthis.keystrokes.set( 'tab', handleTabKey );\n *\t\t\t}\n *\n *\t\t\trender() {\n *\t\t\t\tsuper.render();\n *\n *\t\t\t\tthis.keystrokes.listenTo( this.element );\n *\t\t\t}\n *\t\t}\n *\n * That keystroke handler will listen to `keydown` events fired in this view's main element.\n *\n */\nexport default class KeystrokeHandler {\n\t/**\n\t * Creates an instance of the keystroke handler.\n\t */\n\tconstructor() {\n\t\t/**\n\t\t * Listener used to listen to events for easier keystroke handler destruction.\n\t\t *\n\t\t * @protected\n\t\t * @member {module:utils/dom/emittermixin~Emitter}\n\t\t */\n\t\tthis._listener = Object.create( DomEmitterMixin );\n\t}\n\n\t/**\n\t * Starts listening for `keydown` events from a given emitter.\n\t *\n\t * @param {module:utils/emittermixin~Emitter} emitter\n\t */\n\tlistenTo( emitter ) {\n\t\t// The #_listener works here as a kind of dispatcher. It groups the events coming from the same\n\t\t// keystroke so the listeners can be attached to them with different priorities.\n\t\t//\n\t\t// E.g. all the keystrokes with the `keyCode` of 42 coming from the `emitter` are propagated\n\t\t// as a `_keydown:42` event by the `_listener`. If there's a callback created by the `set`\n\t\t// method for this 42 keystroke, it listens to the `_listener#_keydown:42` event only and interacts\n\t\t// only with other listeners of this particular event, thus making it possible to prioritize\n\t\t// the listeners and safely cancel execution, when needed. Instead of duplicating the Emitter logic,\n\t\t// the KeystrokeHandler re–uses it to do its job.\n\t\tthis._listener.listenTo( emitter, 'keydown', ( evt, keyEvtData ) => {\n\t\t\tthis._listener.fire( '_keydown:' + getCode( keyEvtData ), keyEvtData );\n\t\t} );\n\t}\n\n\t/**\n\t * Registers a handler for the specified keystroke.\n\t *\n\t * @param {String|Array.<String|Number>} keystroke Keystroke defined in a format accepted by\n\t * the {@link module:utils/keyboard~parseKeystroke} function.\n\t * @param {Function} callback A function called with the\n\t * {@link module:engine/view/observer/keyobserver~KeyEventData key event data} object and\n\t * a helper funcion to call both `preventDefault()` and `stopPropagation()` on the underlying event.\n\t * @param {Object} [options={}] Additional options.\n\t * @param {module:utils/priorities~PriorityString|Number} [options.priority='normal'] The priority of the keystroke\n\t * callback. The higher the priority value the sooner the callback will be executed. Keystrokes having the same priority\n\t * are called in the order they were added.\n\t */\n\tset( keystroke, callback, options = {} ) {\n\t\tconst keyCode = parseKeystroke( keystroke );\n\t\tconst priority = options.priority;\n\n\t\t// Execute the passed callback on KeystrokeHandler#_keydown.\n\t\t// TODO: https://github.com/ckeditor/ckeditor5-utils/issues/144\n\t\tthis._listener.listenTo( this._listener, '_keydown:' + keyCode, ( evt, keyEvtData ) => {\n\t\t\tcallback( keyEvtData, () => {\n\t\t\t\t// Stop the event in the DOM: no listener in the web page\n\t\t\t\t// will be triggered by this event.\n\t\t\t\tkeyEvtData.preventDefault();\n\t\t\t\tkeyEvtData.stopPropagation();\n\n\t\t\t\t// Stop the event in the KeystrokeHandler: no more callbacks\n\t\t\t\t// will be executed for this keystroke.\n\t\t\t\tevt.stop();\n\t\t\t} );\n\n\t\t\t// Mark this keystroke as handled by the callback. See: #press.\n\t\t\tevt.return = true;\n\t\t}, { priority } );\n\t}\n\n\t/**\n\t * Triggers a keystroke handler for a specified key combination, if such a keystroke was {@link #set defined}.\n\t *\n\t * @param {module:engine/view/observer/keyobserver~KeyEventData} keyEvtData Key event data.\n\t * @returns {Boolean} Whether the keystroke was handled.\n\t */\n\tpress( keyEvtData ) {\n\t\treturn !!this._listener.fire( '_keydown:' + getCode( keyEvtData ), keyEvtData );\n\t}\n\n\t/**\n\t * Destroys the keystroke handler.\n\t */\n\tdestroy() {\n\t\tthis._listener.stopListening();\n\t}\n}\n"]}]}