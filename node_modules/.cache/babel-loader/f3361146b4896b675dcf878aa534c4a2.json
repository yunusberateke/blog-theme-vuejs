{"remainingRequest":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/babel-loader/lib/index.js!/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-dev-webpack-plugin/lib/translatesourceloader.js?{}!/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-engine/src/view/element.js","dependencies":[{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-engine/src/view/element.js","mtime":499162500000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-dev-webpack-plugin/lib/translatesourceloader.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-engine/src/view/element.js"],"names":["Node","Text","TextProxy","toMap","toArray","isIterable","Matcher","StylesMap","Element","document","name","attrs","children","_attrs","parseAttributes","_children","_insertChild","_classes","Set","has","classString","get","parseClasses","delete","_styles","stylesProcessor","setTo","_customProperties","Map","_isAllowedInsideAttributeElement","length","type","index","node","indexOf","Symbol","iterator","size","isEmpty","keys","entries","getAttribute","key","join","undefined","inlineStyle","toString","otherElement","isAllowedInsideAttributeElement","value","className","getStyleNames","property","getAsString","getNormalized","patterns","matcher","parent","match","classes","Array","from","sort","styles","attributes","map","i","deep","childrenClone","getChildren","child","push","_clone","cloned","constructor","set","getFillerOffset","items","childCount","_fireChange","count","nodes","normalize","_remove","splice","howMany","String","clear","add","remove","classesSet","classesString","classArray","split","forEach","data"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/element\n */\n\nimport Node from './node';\nimport Text from './text';\nimport TextProxy from './textproxy';\nimport toMap from '@ckeditor/ckeditor5-utils/src/tomap';\nimport toArray from '@ckeditor/ckeditor5-utils/src/toarray';\nimport isIterable from '@ckeditor/ckeditor5-utils/src/isiterable';\nimport Matcher from './matcher';\nimport StylesMap from './stylesmap';\n\n// @if CK_DEBUG_ENGINE // const { convertMapToTags } = require( '../dev-utils/utils' );\n\n/**\n * View element.\n *\n * The editing engine does not define a fixed semantics of its elements (it is \"DTD-free\").\n * This is why the type of the {@link module:engine/view/element~Element} need to\n * be defined by the feature developer. When creating an element you should use one of the following methods:\n *\n * * {@link module:engine/view/downcastwriter~DowncastWriter#createContainerElement `downcastWriter#createContainerElement()`}\n * in order to create a {@link module:engine/view/containerelement~ContainerElement},\n * * {@link module:engine/view/downcastwriter~DowncastWriter#createAttributeElement `downcastWriter#createAttributeElement()`}\n * in order to create a {@link module:engine/view/attributeelement~AttributeElement},\n * * {@link module:engine/view/downcastwriter~DowncastWriter#createEmptyElement `downcastWriter#createEmptyElement()`}\n * in order to create a {@link module:engine/view/emptyelement~EmptyElement}.\n * * {@link module:engine/view/downcastwriter~DowncastWriter#createUIElement `downcastWriter#createUIElement()`}\n * in order to create a {@link module:engine/view/uielement~UIElement}.\n * * {@link module:engine/view/downcastwriter~DowncastWriter#createEditableElement `downcastWriter#createEditableElement()`}\n * in order to create a {@link module:engine/view/editableelement~EditableElement}.\n *\n * Note that for view elements which are not created from the model, like elements from mutations, paste or\n * {@link module:engine/controller/datacontroller~DataController#set data.set} it is not possible to define the type of the element.\n * In such cases the {@link module:engine/view/upcastwriter~UpcastWriter#createElement `UpcastWriter#createElement()`} method\n * should be used to create generic view elements.\n *\n * @extends module:engine/view/node~Node\n */\nexport default class Element extends Node {\n\t/**\n\t * Creates a view element.\n\t *\n\t * Attributes can be passed in various formats:\n\t *\n\t *\t\tnew Element( viewDocument, 'div', { class: 'editor', contentEditable: 'true' } ); // object\n\t *\t\tnew Element( viewDocument, 'div', [ [ 'class', 'editor' ], [ 'contentEditable', 'true' ] ] ); // map-like iterator\n\t *\t\tnew Element( viewDocument, 'div', mapOfAttributes ); // map\n\t *\n\t * @protected\n\t * @param {module:engine/view/document~Document} document The document instance to which this element belongs.\n\t * @param {String} name Node name.\n\t * @param {Object|Iterable} [attrs] Collection of attributes.\n\t * @param {module:engine/view/node~Node|Iterable.<module:engine/view/node~Node>} [children]\n\t * A list of nodes to be inserted into created element.\n\t */\n\tconstructor( document, name, attrs, children ) {\n\t\tsuper( document );\n\n\t\t/**\n\t\t * Name of the element.\n\t\t *\n\t\t * @readonly\n\t\t * @member {String}\n\t\t */\n\t\tthis.name = name;\n\n\t\t/**\n\t\t * Map of attributes, where attributes names are keys and attributes values are values.\n\t\t *\n\t\t * @protected\n\t\t * @member {Map} #_attrs\n\t\t */\n\t\tthis._attrs = parseAttributes( attrs );\n\n\t\t/**\n\t\t * Array of child nodes.\n\t\t *\n\t\t * @protected\n\t\t * @member {Array.<module:engine/view/node~Node>}\n\t\t */\n\t\tthis._children = [];\n\n\t\tif ( children ) {\n\t\t\tthis._insertChild( 0, children );\n\t\t}\n\n\t\t/**\n\t\t * Set of classes associated with element instance.\n\t\t *\n\t\t * @protected\n\t\t * @member {Set}\n\t\t */\n\t\tthis._classes = new Set();\n\n\t\tif ( this._attrs.has( 'class' ) ) {\n\t\t\t// Remove class attribute and handle it by class set.\n\t\t\tconst classString = this._attrs.get( 'class' );\n\t\t\tparseClasses( this._classes, classString );\n\t\t\tthis._attrs.delete( 'class' );\n\t\t}\n\n\t\t/**\n\t\t * Normalized styles.\n\t\t *\n\t\t * @protected\n\t\t * @member {module:engine/view/stylesmap~StylesMap} module:engine/view/element~Element#_styles\n\t\t */\n\t\tthis._styles = new StylesMap( this.document.stylesProcessor );\n\n\t\tif ( this._attrs.has( 'style' ) ) {\n\t\t\t// Remove style attribute and handle it by styles map.\n\t\t\tthis._styles.setTo( this._attrs.get( 'style' ) );\n\n\t\t\tthis._attrs.delete( 'style' );\n\t\t}\n\n\t\t/**\n\t\t * Map of custom properties.\n\t\t * Custom properties can be added to element instance, will be cloned but not rendered into DOM.\n\t\t *\n\t\t * @protected\n\t\t * @member {Map}\n\t\t */\n\t\tthis._customProperties = new Map();\n\n\t\t/**\n\t\t * Whether an element is allowed inside an AttributeElement and can be wrapped with\n\t\t * {@link module:engine/view/attributeelement~AttributeElement} by {@link module:engine/view/downcastwriter~DowncastWriter}.\n\t\t *\n\t\t * @protected\n\t\t * @member {Boolean}\n\t\t */\n\t\tthis._isAllowedInsideAttributeElement = false;\n\t}\n\n\t/**\n\t * Number of element's children.\n\t *\n\t * @readonly\n\t * @type {Number}\n\t */\n\tget childCount() {\n\t\treturn this._children.length;\n\t}\n\n\t/**\n\t * Is `true` if there are no nodes inside this element, `false` otherwise.\n\t *\n\t * @readonly\n\t * @type {Boolean}\n\t */\n\tget isEmpty() {\n\t\treturn this._children.length === 0;\n\t}\n\n\t/**\n\t * Whether the element is allowed inside an AttributeElement and can be wrapped with\n\t * {@link module:engine/view/attributeelement~AttributeElement} by {@link module:engine/view/downcastwriter~DowncastWriter}.\n\t *\n\t * @readonly\n\t * @type {Boolean}\n\t */\n\tget isAllowedInsideAttributeElement() {\n\t\treturn this._isAllowedInsideAttributeElement;\n\t}\n\n\t/**\n\t * Checks whether this object is of the given.\n\t *\n\t *\t\telement.is( 'element' ); // -> true\n\t *\t\telement.is( 'node' ); // -> true\n\t *\t\telement.is( 'view:element' ); // -> true\n\t *\t\telement.is( 'view:node' ); // -> true\n\t *\n\t *\t\telement.is( 'model:element' ); // -> false\n\t *\t\telement.is( 'documentSelection' ); // -> false\n\t *\n\t * Assuming that the object being checked is an element, you can also check its\n\t * {@link module:engine/view/element~Element#name name}:\n\t *\n\t *\t\telement.is( 'element', 'img' ); // -> true if this is an <img> element\n\t *\t\ttext.is( 'element', 'img' ); -> false\n\t *\n\t * {@link module:engine/view/node~Node#is Check the entire list of view objects} which implement the `is()` method.\n\t *\n\t * @param {String} type Type to check.\n\t * @param {String} [name] Element name.\n\t * @returns {Boolean}\n\t */\n\tis( type, name = null ) {\n\t\tif ( !name ) {\n\t\t\treturn type === 'element' || type === 'view:element' ||\n\t\t\t\t// From super.is(). This is highly utilised method and cannot call super. See ckeditor/ckeditor5#6529.\n\t\t\t\ttype === 'node' || type === 'view:node';\n\t\t} else {\n\t\t\treturn name === this.name && ( type === 'element' || type === 'view:element' );\n\t\t}\n\t}\n\n\t/**\n\t * Gets child at the given index.\n\t *\n\t * @param {Number} index Index of child.\n\t * @returns {module:engine/view/node~Node} Child node.\n\t */\n\tgetChild( index ) {\n\t\treturn this._children[ index ];\n\t}\n\n\t/**\n\t * Gets index of the given child node. Returns `-1` if child node is not found.\n\t *\n\t * @param {module:engine/view/node~Node} node Child node.\n\t * @returns {Number} Index of the child node.\n\t */\n\tgetChildIndex( node ) {\n\t\treturn this._children.indexOf( node );\n\t}\n\n\t/**\n\t * Gets child nodes iterator.\n\t *\n\t * @returns {Iterable.<module:engine/view/node~Node>} Child nodes iterator.\n\t */\n\tgetChildren() {\n\t\treturn this._children[ Symbol.iterator ]();\n\t}\n\n\t/**\n\t * Returns an iterator that contains the keys for attributes. Order of inserting attributes is not preserved.\n\t *\n\t * @returns {Iterable.<String>} Keys for attributes.\n\t */\n\t* getAttributeKeys() {\n\t\tif ( this._classes.size > 0 ) {\n\t\t\tyield 'class';\n\t\t}\n\n\t\tif ( !this._styles.isEmpty ) {\n\t\t\tyield 'style';\n\t\t}\n\n\t\tyield* this._attrs.keys();\n\t}\n\n\t/**\n\t * Returns iterator that iterates over this element's attributes.\n\t *\n\t * Attributes are returned as arrays containing two items. First one is attribute key and second is attribute value.\n\t * This format is accepted by native `Map` object and also can be passed in `Node` constructor.\n\t *\n\t * @returns {Iterable.<*>}\n\t */\n\t* getAttributes() {\n\t\tyield* this._attrs.entries();\n\n\t\tif ( this._classes.size > 0 ) {\n\t\t\tyield [ 'class', this.getAttribute( 'class' ) ];\n\t\t}\n\n\t\tif ( !this._styles.isEmpty ) {\n\t\t\tyield [ 'style', this.getAttribute( 'style' ) ];\n\t\t}\n\t}\n\n\t/**\n\t * Gets attribute by key. If attribute is not present - returns undefined.\n\t *\n\t * @param {String} key Attribute key.\n\t * @returns {String|undefined} Attribute value.\n\t */\n\tgetAttribute( key ) {\n\t\tif ( key == 'class' ) {\n\t\t\tif ( this._classes.size > 0 ) {\n\t\t\t\treturn [ ...this._classes ].join( ' ' );\n\t\t\t}\n\n\t\t\treturn undefined;\n\t\t}\n\n\t\tif ( key == 'style' ) {\n\t\t\tconst inlineStyle = this._styles.toString();\n\n\t\t\treturn inlineStyle == '' ? undefined : inlineStyle;\n\t\t}\n\n\t\treturn this._attrs.get( key );\n\t}\n\n\t/**\n\t * Returns a boolean indicating whether an attribute with the specified key exists in the element.\n\t *\n\t * @param {String} key Attribute key.\n\t * @returns {Boolean} `true` if attribute with the specified key exists in the element, false otherwise.\n\t */\n\thasAttribute( key ) {\n\t\tif ( key == 'class' ) {\n\t\t\treturn this._classes.size > 0;\n\t\t}\n\n\t\tif ( key == 'style' ) {\n\t\t\treturn !this._styles.isEmpty;\n\t\t}\n\n\t\treturn this._attrs.has( key );\n\t}\n\n\t/**\n\t * Checks if this element is similar to other element.\n\t * Both elements should have the same name and attributes to be considered as similar. Two similar elements\n\t * can contain different set of children nodes.\n\t *\n\t * @param {module:engine/view/element~Element} otherElement\n\t * @returns {Boolean}\n\t */\n\tisSimilar( otherElement ) {\n\t\tif ( !( otherElement instanceof Element ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// If exactly the same Element is provided - return true immediately.\n\t\tif ( this === otherElement ) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Check element name.\n\t\tif ( this.name != otherElement.name ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Check isAllowedInsideAttributeElement property.\n\t\tif ( this.isAllowedInsideAttributeElement != otherElement.isAllowedInsideAttributeElement ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Check number of attributes, classes and styles.\n\t\tif ( this._attrs.size !== otherElement._attrs.size || this._classes.size !== otherElement._classes.size ||\n\t\t\tthis._styles.size !== otherElement._styles.size ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Check if attributes are the same.\n\t\tfor ( const [ key, value ] of this._attrs ) {\n\t\t\tif ( !otherElement._attrs.has( key ) || otherElement._attrs.get( key ) !== value ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\t// Check if classes are the same.\n\t\tfor ( const className of this._classes ) {\n\t\t\tif ( !otherElement._classes.has( className ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\t// Check if styles are the same.\n\t\tfor ( const property of this._styles.getStyleNames() ) {\n\t\t\tif (\n\t\t\t\t!otherElement._styles.has( property ) ||\n\t\t\t\totherElement._styles.getAsString( property ) !== this._styles.getAsString( property )\n\t\t\t) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Returns true if class is present.\n\t * If more then one class is provided - returns true only when all classes are present.\n\t *\n\t *\t\telement.hasClass( 'foo' ); // Returns true if 'foo' class is present.\n\t *\t\telement.hasClass( 'foo', 'bar' ); // Returns true if 'foo' and 'bar' classes are both present.\n\t *\n\t * @param {...String} className\n\t */\n\thasClass( ...className ) {\n\t\tfor ( const name of className ) {\n\t\t\tif ( !this._classes.has( name ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Returns iterator that contains all class names.\n\t *\n\t * @returns {Iterable.<String>}\n\t */\n\tgetClassNames() {\n\t\treturn this._classes.keys();\n\t}\n\n\t/**\n\t * Returns style value for the given property mae.\n\t * If the style does not exist `undefined` is returned.\n\t *\n\t * **Note**: This method can work with normalized style names if\n\t * {@link module:engine/controller/datacontroller~DataController#addStyleProcessorRules a particular style processor rule is enabled}.\n\t * See {@link module:engine/view/stylesmap~StylesMap#getAsString `StylesMap#getAsString()`} for details.\n\t *\n\t * For an element with style set to `'margin:1px'`:\n\t *\n\t *\t\t// Enable 'margin' shorthand processing:\n\t *\t\teditor.data.addStyleProcessorRules( addMarginRules );\n\t *\n\t *\t\tconst element = view.change( writer => {\n\t *\t\t\tconst element = writer.createElement();\n\t *\t\t\twriter.setStyle( 'margin', '1px' );\n\t *\t\t\twriter.setStyle( 'margin-bottom', '3em' );\n\t *\n\t *\t\t\treturn element;\n\t *\t\t} );\n\t *\n\t *\t\telement.getStyle( 'margin' ); // -> 'margin: 1px 1px 3em;'\n\t *\n\t * @param {String} property\n\t * @returns {String|undefined}\n\t */\n\tgetStyle( property ) {\n\t\treturn this._styles.getAsString( property );\n\t}\n\n\t/**\n\t * Returns a normalized style object or single style value.\n\t *\n\t * For an element with style set to: margin:1px 2px 3em;\n\t *\n\t *\t\telement.getNormalizedStyle( 'margin' ) );\n\t *\n\t * will return:\n\t *\n\t *\t\t{\n\t *\t\t\ttop: '1px',\n\t *\t\t\tright: '2px',\n\t *\t\t\tbottom: '3em',\n\t *\t\t\tleft: '2px'    // a normalized value from margin shorthand\n\t *\t\t}\n\t *\n\t * and reading for single style value:\n\t *\n\t *\t\tstyles.getNormalizedStyle( 'margin-left' );\n\t *\n\t * Will return a `2px` string.\n\t *\n\t * **Note**: This method will return normalized values only if\n\t * {@link module:engine/controller/datacontroller~DataController#addStyleProcessorRules a particular style processor rule is enabled}.\n\t * See {@link module:engine/view/stylesmap~StylesMap#getNormalized `StylesMap#getNormalized()`} for details.\n\t *\n\t *\n\t * @param {String} property Name of CSS property\n\t * @returns {Object|String|undefined}\n\t */\n\tgetNormalizedStyle( property ) {\n\t\treturn this._styles.getNormalized( property );\n\t}\n\n\t/**\n\t * Returns iterator that contains all style names.\n\t *\n\t * @returns {Iterable.<String>}\n\t */\n\tgetStyleNames() {\n\t\treturn this._styles.getStyleNames();\n\t}\n\n\t/**\n\t * Returns true if style keys are present.\n\t * If more then one style property is provided - returns true only when all properties are present.\n\t *\n\t *\t\telement.hasStyle( 'color' ); // Returns true if 'border-top' style is present.\n\t *\t\telement.hasStyle( 'color', 'border-top' ); // Returns true if 'color' and 'border-top' styles are both present.\n\t *\n\t * @param {...String} property\n\t */\n\thasStyle( ...property ) {\n\t\tfor ( const name of property ) {\n\t\t\tif ( !this._styles.has( name ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Returns ancestor element that match specified pattern.\n\t * Provided patterns should be compatible with {@link module:engine/view/matcher~Matcher Matcher} as it is used internally.\n\t *\n\t * @see module:engine/view/matcher~Matcher\n\t * @param {Object|String|RegExp|Function} patterns Patterns used to match correct ancestor.\n\t * See {@link module:engine/view/matcher~Matcher}.\n\t * @returns {module:engine/view/element~Element|null} Found element or `null` if no matching ancestor was found.\n\t */\n\tfindAncestor( ...patterns ) {\n\t\tconst matcher = new Matcher( ...patterns );\n\t\tlet parent = this.parent;\n\n\t\twhile ( parent ) {\n\t\t\tif ( matcher.match( parent ) ) {\n\t\t\t\treturn parent;\n\t\t\t}\n\n\t\t\tparent = parent.parent;\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Returns the custom property value for the given key.\n\t *\n\t * @param {String|Symbol} key\n\t * @returns {*}\n\t */\n\tgetCustomProperty( key ) {\n\t\treturn this._customProperties.get( key );\n\t}\n\n\t/**\n\t * Returns an iterator which iterates over this element's custom properties.\n\t * Iterator provides `[ key, value ]` pairs for each stored property.\n\t *\n\t * @returns {Iterable.<*>}\n\t */\n\t* getCustomProperties() {\n\t\tyield* this._customProperties.entries();\n\t}\n\n\t/**\n\t * Returns identity string based on element's name, styles, classes and other attributes.\n\t * Two elements that {@link #isSimilar are similar} will have same identity string.\n\t * It has the following format:\n\t *\n\t *\t\t'name class=\"class1,class2\" style=\"style1:value1;style2:value2\" attr1=\"val1\" attr2=\"val2\"'\n \t *\n\t * For example:\n\t *\n\t *\t\tconst element = writer.createContainerElement( 'foo', {\n\t *\t\t\tbanana: '10',\n\t *\t\t\tapple: '20',\n\t *\t\t\tstyle: 'color: red; border-color: white;',\n\t *\t\t\tclass: 'baz'\n\t *\t\t} );\n\t *\n\t *\t\t// returns 'foo class=\"baz\" style=\"border-color:white;color:red\" apple=\"20\" banana=\"10\"'\n\t *\t\telement.getIdentity();\n\t *\n\t * **Note**: Classes, styles and other attributes are sorted alphabetically.\n\t *\n\t * @returns {String}\n\t */\n\tgetIdentity() {\n\t\tconst classes = Array.from( this._classes ).sort().join( ',' );\n\t\tconst styles = this._styles.toString();\n\t\tconst attributes = Array.from( this._attrs ).map( i => `${ i[ 0 ] }=\"${ i[ 1 ] }\"` ).sort().join( ' ' );\n\n\t\treturn this.name +\n\t\t\t( classes == '' ? '' : ` class=\"${ classes }\"` ) +\n\t\t\t( !styles ? '' : ` style=\"${ styles }\"` ) +\n\t\t\t( attributes == '' ? '' : ` ${ attributes }` );\n\t}\n\n\t/**\n\t * Clones provided element.\n\t *\n\t * @protected\n\t * @param {Boolean} [deep=false] If set to `true` clones element and all its children recursively. When set to `false`,\n\t * element will be cloned without any children.\n\t * @returns {module:engine/view/element~Element} Clone of this element.\n\t */\n\t_clone( deep = false ) {\n\t\tconst childrenClone = [];\n\n\t\tif ( deep ) {\n\t\t\tfor ( const child of this.getChildren() ) {\n\t\t\t\tchildrenClone.push( child._clone( deep ) );\n\t\t\t}\n\t\t}\n\n\t\t// ContainerElement and AttributeElement should be also cloned properly.\n\t\tconst cloned = new this.constructor( this.document, this.name, this._attrs, childrenClone );\n\n\t\t// Classes and styles are cloned separately - this solution is faster than adding them back to attributes and\n\t\t// parse once again in constructor.\n\t\tcloned._classes = new Set( this._classes );\n\t\tcloned._styles.set( this._styles.getNormalized() );\n\n\t\t// Clone custom properties.\n\t\tcloned._customProperties = new Map( this._customProperties );\n\n\t\t// Clone filler offset method.\n\t\t// We can't define this method in a prototype because it's behavior which\n\t\t// is changed by e.g. toWidget() function from ckeditor5-widget. Perhaps this should be one of custom props.\n\t\tcloned.getFillerOffset = this.getFillerOffset;\n\n\t\tcloned._isAllowedInsideAttributeElement = this.isAllowedInsideAttributeElement;\n\n\t\treturn cloned;\n\t}\n\n\t/**\n\t * {@link module:engine/view/element~Element#_insertChild Insert} a child node or a list of child nodes at the end of this node\n\t * and sets the parent of these nodes to this element.\n\t *\n\t * @see module:engine/view/downcastwriter~DowncastWriter#insert\n\t * @protected\n\t * @param {module:engine/view/item~Item|Iterable.<module:engine/view/item~Item>} items Items to be inserted.\n\t * @fires module:engine/view/node~Node#change\n\t * @returns {Number} Number of appended nodes.\n\t */\n\t_appendChild( items ) {\n\t\treturn this._insertChild( this.childCount, items );\n\t}\n\n\t/**\n\t * Inserts a child node or a list of child nodes on the given index and sets the parent of these nodes to\n\t * this element.\n\t *\n\t * @see module:engine/view/downcastwriter~DowncastWriter#insert\n\t * @protected\n\t * @param {Number} index Position where nodes should be inserted.\n\t * @param {module:engine/view/item~Item|Iterable.<module:engine/view/item~Item>} items Items to be inserted.\n\t * @fires module:engine/view/node~Node#change\n\t * @returns {Number} Number of inserted nodes.\n\t */\n\t_insertChild( index, items ) {\n\t\tthis._fireChange( 'children', this );\n\t\tlet count = 0;\n\n\t\tconst nodes = normalize( this.document, items );\n\n\t\tfor ( const node of nodes ) {\n\t\t\t// If node that is being added to this element is already inside another element, first remove it from the old parent.\n\t\t\tif ( node.parent !== null ) {\n\t\t\t\tnode._remove();\n\t\t\t}\n\n\t\t\tnode.parent = this;\n\t\t\tnode.document = this.document;\n\n\t\t\tthis._children.splice( index, 0, node );\n\t\t\tindex++;\n\t\t\tcount++;\n\t\t}\n\n\t\treturn count;\n\t}\n\n\t/**\n\t * Removes number of child nodes starting at the given index and set the parent of these nodes to `null`.\n\t *\n\t * @see module:engine/view/downcastwriter~DowncastWriter#remove\n\t * @protected\n\t * @param {Number} index Number of the first node to remove.\n\t * @param {Number} [howMany=1] Number of nodes to remove.\n\t * @fires module:engine/view/node~Node#change\n\t * @returns {Array.<module:engine/view/node~Node>} The array of removed nodes.\n\t */\n\t_removeChildren( index, howMany = 1 ) {\n\t\tthis._fireChange( 'children', this );\n\n\t\tfor ( let i = index; i < index + howMany; i++ ) {\n\t\t\tthis._children[ i ].parent = null;\n\t\t}\n\n\t\treturn this._children.splice( index, howMany );\n\t}\n\n\t/**\n\t * Adds or overwrite attribute with a specified key and value.\n\t *\n\t * @see module:engine/view/downcastwriter~DowncastWriter#setAttribute\n\t * @protected\n\t * @param {String} key Attribute key.\n\t * @param {String} value Attribute value.\n\t * @fires module:engine/view/node~Node#change\n\t */\n\t_setAttribute( key, value ) {\n\t\tvalue = String( value );\n\n\t\tthis._fireChange( 'attributes', this );\n\n\t\tif ( key == 'class' ) {\n\t\t\tparseClasses( this._classes, value );\n\t\t} else if ( key == 'style' ) {\n\t\t\tthis._styles.setTo( value );\n\t\t} else {\n\t\t\tthis._attrs.set( key, value );\n\t\t}\n\t}\n\n\t/**\n\t * Removes attribute from the element.\n\t *\n\t * @see module:engine/view/downcastwriter~DowncastWriter#removeAttribute\n\t * @protected\n\t * @param {String} key Attribute key.\n\t * @returns {Boolean} Returns true if an attribute existed and has been removed.\n\t * @fires module:engine/view/node~Node#change\n\t */\n\t_removeAttribute( key ) {\n\t\tthis._fireChange( 'attributes', this );\n\n\t\t// Remove class attribute.\n\t\tif ( key == 'class' ) {\n\t\t\tif ( this._classes.size > 0 ) {\n\t\t\t\tthis._classes.clear();\n\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\treturn false;\n\t\t}\n\n\t\t// Remove style attribute.\n\t\tif ( key == 'style' ) {\n\t\t\tif ( !this._styles.isEmpty ) {\n\t\t\t\tthis._styles.clear();\n\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\treturn false;\n\t\t}\n\n\t\t// Remove other attributes.\n\t\treturn this._attrs.delete( key );\n\t}\n\n\t/**\n\t * Adds specified class.\n\t *\n\t *\t\telement._addClass( 'foo' ); // Adds 'foo' class.\n\t *\t\telement._addClass( [ 'foo', 'bar' ] ); // Adds 'foo' and 'bar' classes.\n\t *\n\t * @see module:engine/view/downcastwriter~DowncastWriter#addClass\n\t * @protected\n\t * @param {Array.<String>|String} className\n\t * @fires module:engine/view/node~Node#change\n\t */\n\t_addClass( className ) {\n\t\tthis._fireChange( 'attributes', this );\n\n\t\tfor ( const name of toArray( className ) ) {\n\t\t\tthis._classes.add( name );\n\t\t}\n\t}\n\n\t/**\n\t * Removes specified class.\n\t *\n\t *\t\telement._removeClass( 'foo' );  // Removes 'foo' class.\n\t *\t\telement._removeClass( [ 'foo', 'bar' ] ); // Removes both 'foo' and 'bar' classes.\n\t *\n\t * @see module:engine/view/downcastwriter~DowncastWriter#removeClass\n\t * @protected\n\t * @param {Array.<String>|String} className\n\t * @fires module:engine/view/node~Node#change\n\t */\n\t_removeClass( className ) {\n\t\tthis._fireChange( 'attributes', this );\n\n\t\tfor ( const name of toArray( className ) ) {\n\t\t\tthis._classes.delete( name );\n\t\t}\n\t}\n\n\t/**\n\t * Adds style to the element.\n\t *\n\t *\t\telement._setStyle( 'color', 'red' );\n\t *\t\telement._setStyle( {\n\t *\t\t\tcolor: 'red',\n\t *\t\t\tposition: 'fixed'\n\t *\t\t} );\n\t *\n\t * **Note**: This method can work with normalized style names if\n\t * {@link module:engine/controller/datacontroller~DataController#addStyleProcessorRules a particular style processor rule is enabled}.\n\t * See {@link module:engine/view/stylesmap~StylesMap#set `StylesMap#set()`} for details.\n\t *\n\t * @see module:engine/view/downcastwriter~DowncastWriter#setStyle\n\t * @protected\n\t * @param {String|Object} property Property name or object with key - value pairs.\n\t * @param {String} [value] Value to set. This parameter is ignored if object is provided as the first parameter.\n\t * @fires module:engine/view/node~Node#change\n\t */\n\t_setStyle( property, value ) {\n\t\tthis._fireChange( 'attributes', this );\n\n\t\tthis._styles.set( property, value );\n\t}\n\n\t/**\n\t * Removes specified style.\n\t *\n\t *\t\telement._removeStyle( 'color' );  // Removes 'color' style.\n\t *\t\telement._removeStyle( [ 'color', 'border-top' ] ); // Removes both 'color' and 'border-top' styles.\n\t *\n\t * **Note**: This method can work with normalized style names if\n\t * {@link module:engine/controller/datacontroller~DataController#addStyleProcessorRules a particular style processor rule is enabled}.\n\t * See {@link module:engine/view/stylesmap~StylesMap#remove `StylesMap#remove()`} for details.\n\t *\n\t * @see module:engine/view/downcastwriter~DowncastWriter#removeStyle\n\t * @protected\n\t * @param {Array.<String>|String} property\n\t * @fires module:engine/view/node~Node#change\n\t */\n\t_removeStyle( property ) {\n\t\tthis._fireChange( 'attributes', this );\n\n\t\tfor ( const name of toArray( property ) ) {\n\t\t\tthis._styles.remove( name );\n\t\t}\n\t}\n\n\t/**\n\t * Sets a custom property. Unlike attributes, custom properties are not rendered to the DOM,\n\t * so they can be used to add special data to elements.\n\t *\n\t * @see module:engine/view/downcastwriter~DowncastWriter#setCustomProperty\n\t * @protected\n\t * @param {String|Symbol} key\n\t * @param {*} value\n\t */\n\t_setCustomProperty( key, value ) {\n\t\tthis._customProperties.set( key, value );\n\t}\n\n\t/**\n\t * Removes the custom property stored under the given key.\n\t *\n\t * @see module:engine/view/downcastwriter~DowncastWriter#removeCustomProperty\n\t * @protected\n\t * @param {String|Symbol} key\n\t * @returns {Boolean} Returns true if property was removed.\n\t */\n\t_removeCustomProperty( key ) {\n\t\treturn this._customProperties.delete( key );\n\t}\n\n\t/**\n\t * Returns block {@link module:engine/view/filler filler} offset or `null` if block filler is not needed.\n\t *\n\t * @abstract\n\t * @method module:engine/view/element~Element#getFillerOffset\n\t */\n\n\t// @if CK_DEBUG_ENGINE // printTree( level = 0) {\n\t// @if CK_DEBUG_ENGINE // \tlet string = '';\n\n\t// @if CK_DEBUG_ENGINE //\tstring += '\\t'.repeat( level ) + `<${ this.name }${ convertMapToTags( this.getAttributes() ) }>`;\n\n\t// @if CK_DEBUG_ENGINE //\tfor ( const child of this.getChildren() ) {\n\t// @if CK_DEBUG_ENGINE //\t\tif ( child.is( '$text' ) ) {\n\t// @if CK_DEBUG_ENGINE //\t\t\tstring += '\\n' + '\\t'.repeat( level + 1 ) + child.data;\n\t// @if CK_DEBUG_ENGINE //\t\t} else {\n\t// @if CK_DEBUG_ENGINE //\t\t\tstring += '\\n' + child.printTree( level + 1 );\n\t// @if CK_DEBUG_ENGINE //\t\t}\n\t// @if CK_DEBUG_ENGINE //\t}\n\n\t// @if CK_DEBUG_ENGINE //\tif ( this.childCount ) {\n\t// @if CK_DEBUG_ENGINE //\t\tstring += '\\n' + '\\t'.repeat( level );\n\t// @if CK_DEBUG_ENGINE //\t}\n\n\t// @if CK_DEBUG_ENGINE //\tstring += `</${ this.name }>`;\n\n\t// @if CK_DEBUG_ENGINE //\treturn string;\n\t// @if CK_DEBUG_ENGINE // }\n\n\t// @if CK_DEBUG_ENGINE // logTree() {\n\t// @if CK_DEBUG_ENGINE // \tconsole.log( this.printTree() );\n\t// @if CK_DEBUG_ENGINE // }\n}\n\n// Parses attributes provided to the element constructor before they are applied to an element. If attributes are passed\n// as an object (instead of `Iterable`), the object is transformed to the map. Attributes with `null` value are removed.\n// Attributes with non-`String` value are converted to `String`.\n//\n// @param {Object|Iterable} attrs Attributes to parse.\n// @returns {Map} Parsed attributes.\nfunction parseAttributes( attrs ) {\n\tattrs = toMap( attrs );\n\n\tfor ( const [ key, value ] of attrs ) {\n\t\tif ( value === null ) {\n\t\t\tattrs.delete( key );\n\t\t} else if ( typeof value != 'string' ) {\n\t\t\tattrs.set( key, String( value ) );\n\t\t}\n\t}\n\n\treturn attrs;\n}\n\n// Parses class attribute and puts all classes into classes set.\n// Classes set s cleared before insertion.\n//\n// @param {Set.<String>} classesSet Set to insert parsed classes.\n// @param {String} classesString String with classes to parse.\nfunction parseClasses( classesSet, classesString ) {\n\tconst classArray = classesString.split( /\\s+/ );\n\tclassesSet.clear();\n\tclassArray.forEach( name => classesSet.add( name ) );\n}\n\n// Converts strings to Text and non-iterables to arrays.\n//\n// @param {String|module:engine/view/item~Item|Iterable.<String|module:engine/view/item~Item>}\n// @returns {Iterable.<module:engine/view/node~Node>}\nfunction normalize( document, nodes ) {\n\t// Separate condition because string is iterable.\n\tif ( typeof nodes == 'string' ) {\n\t\treturn [ new Text( document, nodes ) ];\n\t}\n\n\tif ( !isIterable( nodes ) ) {\n\t\tnodes = [ nodes ];\n\t}\n\n\t// Array.from to enable .map() on non-arrays.\n\treturn Array.from( nodes )\n\t\t.map( node => {\n\t\t\tif ( typeof node == 'string' ) {\n\t\t\t\treturn new Text( document, node );\n\t\t\t}\n\n\t\t\tif ( node instanceof TextProxy ) {\n\t\t\t\treturn new Text( document, node.data );\n\t\t\t}\n\n\t\t\treturn node;\n\t\t} );\n}\n"]}]}