{"remainingRequest":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/babel-loader/lib/index.js!/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-dev-webpack-plugin/lib/translatesourceloader.js?{}!/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-clipboard/src/clipboardpipeline.js","dependencies":[{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-clipboard/src/clipboardpipeline.js","mtime":499162500000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-dev-webpack-plugin/lib/translatesourceloader.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-clipboard/src/clipboardpipeline.js"],"names":["Plugin","EventInfo","ClipboardObserver","plainTextToHtml","normalizeClipboardHtml","viewToPlainText","ClipboardPipeline","editor","view","editing","addObserver","_setupPasteDrop","_setupCopyCut","model","viewDocument","document","listenTo","evt","isReadOnly","stop","priority","data","dataTransfer","content","getData","htmlProcessor","toView","eventInfo","fire","targetRanges","method","called","scrollToTheSelection","isEmpty","dataController","modelFragment","toModel","childCount","change","resultRange","insertContent","modelDocument","onCopyCut","preventDefault","getSelectedContent","selection","name","setData","toData","deleteContent"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA,OAAOA,MAAP,MAAmB,qCAAnB;AACA,OAAOC,SAAP,MAAsB,yCAAtB;AAEA,OAAOC,iBAAP,MAA8B,qBAA9B;AAEA,OAAOC,eAAP,MAA4B,yBAA5B;AACA,OAAOC,sBAAP,MAAmC,gCAAnC;AACA,OAAOC,eAAP,MAA4B,4BAA5B,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IACqBC,iB;;;;;;;;;;;;;;AAQpB;AACD;AACA;AACC,oBAAO;AACN,UAAMC,MAAM,GAAG,KAAKA,MAApB;AACA,UAAMC,IAAI,GAAGD,MAAM,CAACE,OAAP,CAAeD,IAA5B;AAEAA,MAAAA,IAAI,CAACE,WAAL,CAAkBR,iBAAlB;;AAEA,WAAKS,eAAL;;AACA,WAAKC,aAAL;AACA;AAED;AACD;AACA;AACA;AACA;;;;WACC,2BAAkB;AAAA;;AACjB,UAAML,MAAM,GAAG,KAAKA,MAApB;AACA,UAAMM,KAAK,GAAGN,MAAM,CAACM,KAArB;AACA,UAAML,IAAI,GAAGD,MAAM,CAACE,OAAP,CAAeD,IAA5B;AACA,UAAMM,YAAY,GAAGN,IAAI,CAACO,QAA1B,CAJiB,CAMjB;AACA;;AACA,WAAKC,QAAL,CAAeF,YAAf,E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","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module clipboard/clipboardpipeline\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport EventInfo from '@ckeditor/ckeditor5-utils/src/eventinfo';\n\nimport ClipboardObserver from './clipboardobserver';\n\nimport plainTextToHtml from './utils/plaintexttohtml';\nimport normalizeClipboardHtml from './utils/normalizeclipboarddata';\nimport viewToPlainText from './utils/viewtoplaintext.js';\n\n// Input pipeline events overview:\n//\n//              ┌──────────────────────┐          ┌──────────────────────┐\n//              │     view.Document    │          │     view.Document    │\n//              │         paste        │          │         drop         │\n//              └───────────┬──────────┘          └───────────┬──────────┘\n//                          │                                 │\n//                          └────────────────┌────────────────┘\n//                                           │\n//                                 ┌─────────V────────┐\n//                                 │   view.Document  │   Retrieves text/html or text/plain from data.dataTransfer\n//                                 │  clipboardInput  │   and processes it to view.DocumentFragment.\n//                                 └─────────┬────────┘\n//                                           │\n//                               ┌───────────V───────────┐\n//                               │   ClipboardPipeline   │   Converts view.DocumentFragment to model.DocumentFragment.\n//                               │  inputTransformation  │\n//                               └───────────┬───────────┘\n//                                           │\n//                                ┌──────────V──────────┐\n//                                │  ClipboardPipeline  │   Calls model.insertContent().\n//                                │   contentInsertion  │\n//                                └─────────────────────┘\n//\n//\n// Output pipeline events overview:\n//\n//              ┌──────────────────────┐          ┌──────────────────────┐\n//              │     view.Document    │          │     view.Document    │   Retrieves the selected model.DocumentFragment\n//              │         copy         │          │          cut         │   and converts it to view.DocumentFragment.\n//              └───────────┬──────────┘          └───────────┬──────────┘\n//                          │                                 │\n//                          └────────────────┌────────────────┘\n//                                           │\n//                                 ┌─────────V────────┐\n//                                 │   view.Document  │   Processes view.DocumentFragment to text/html and text/plain\n//                                 │  clipboardOutput │   and stores the results in data.dataTransfer.\n//                                 └──────────────────┘\n//\n\n/**\n * The clipboard pipeline feature. It is responsible for intercepting the `paste` and `drop` events and\n * passing the pasted content through a series of events in order to insert it into the editor's content.\n * It also handles the `cut` and `copy` events to fill the native clipboard with the serialized editor's data.\n *\n * # Input pipeline\n *\n * The behavior of the default handlers (all at a `low` priority):\n *\n * ## Event: `paste` or `drop`\n *\n * 1. Translates the event data.\n * 2. Fires the {@link module:engine/view/document~Document#event:clipboardInput `view.Document#clipboardInput`} event.\n *\n * ## Event: `view.Document#clipboardInput`\n *\n * 1. If the `data.content` event field is already set (by some listener on a higher priority), it takes this content and fires the event\n *    from the last point.\n * 2. Otherwise, it retrieves `text/html` or `text/plain` from `data.dataTransfer`.\n * 3. Normalizes the raw data by applying simple filters on string data.\n * 4. Processes the raw data to {@link module:engine/view/documentfragment~DocumentFragment `view.DocumentFragment`} with the\n *    {@link module:engine/controller/datacontroller~DataController#htmlProcessor `DataController#htmlProcessor`}.\n * 5. Fires the {@link module:clipboard/clipboardpipeline~ClipboardPipeline#event:inputTransformation\n *   `ClipboardPipeline#inputTransformation`} event with the view document fragment in the `data.content` event field.\n *\n * ## Event: `ClipboardPipeline#inputTransformation`\n *\n * 1. Converts {@link module:engine/view/documentfragment~DocumentFragment `view.DocumentFragment`} from the `data.content` field to\n *    {@link module:engine/model/documentfragment~DocumentFragment `model.DocumentFragment`}.\n * 2. Fires the {@link module:clipboard/clipboardpipeline~ClipboardPipeline#event:contentInsertion `ClipboardPipeline#contentInsertion`}\n *    event with the model document fragment in the `data.content` event field.\n *    **Note**: The `ClipboardPipeline#contentInsertion` event is fired within a model change block to allow other handlers\n *    to run in the same block without post-fixers called in between (i.e., the selection post-fixer).\n *\n * ## Event: `ClipboardPipeline#contentInsertion`\n *\n * 1. Calls {@link module:engine/model/model~Model#insertContent `model.insertContent()`} to insert `data.content`\n *    at the current selection position.\n *\n * # Output pipeline\n *\n * The behavior of the default handlers (all at a `low` priority):\n *\n * ## Event: `copy`, `cut` or `dragstart`\n *\n * 1. Retrieves the selected {@link module:engine/model/documentfragment~DocumentFragment `model.DocumentFragment`} by calling\n *    {@link module:engine/model/model~Model#getSelectedContent `model#getSelectedContent()`}.\n * 2. Converts the model document fragment to {@link module:engine/view/documentfragment~DocumentFragment `view.DocumentFragment`}.\n * 3. Fires the {@link module:engine/view/document~Document#event:clipboardOutput `view.Document#clipboardOutput`} event\n *    with the view document fragment in the `data.content` event field.\n *\n * ## Event: `view.Document#clipboardOutput`\n *\n * 1. Processes `data.content` to HTML and plain text with the\n *    {@link module:engine/controller/datacontroller~DataController#htmlProcessor `DataController#htmlProcessor`}.\n * 2. Updates the `data.dataTransfer` data for `text/html` and `text/plain` with the processed data.\n * 3. For the `cut` method, calls {@link module:engine/model/model~Model#deleteContent `model.deleteContent()`}\n *    on the current selection.\n *\n * Read more about the clipboard integration in the {@glink framework/guides/deep-dive/clipboard clipboard deep dive guide}.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class ClipboardPipeline extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'ClipboardPipeline';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\t\tconst view = editor.editing.view;\n\n\t\tview.addObserver( ClipboardObserver );\n\n\t\tthis._setupPasteDrop();\n\t\tthis._setupCopyCut();\n\t}\n\n\t/**\n\t * The clipboard paste pipeline.\n\t *\n\t * @private\n\t */\n\t_setupPasteDrop() {\n\t\tconst editor = this.editor;\n\t\tconst model = editor.model;\n\t\tconst view = editor.editing.view;\n\t\tconst viewDocument = view.document;\n\n\t\t// Pasting and dropping is disabled when editor is in the read-only mode.\n\t\t// See: https://github.com/ckeditor/ckeditor5-clipboard/issues/26.\n\t\tthis.listenTo( viewDocument, 'clipboardInput', evt => {\n\t\t\tif ( editor.isReadOnly ) {\n\t\t\t\tevt.stop();\n\t\t\t}\n\t\t}, { priority: 'highest' } );\n\n\t\tthis.listenTo( viewDocument, 'clipboardInput', ( evt, data ) => {\n\t\t\tconst dataTransfer = data.dataTransfer;\n\t\t\tlet content = data.content || '';\n\n\t\t\t// Some feature could already inject content in the higher priority event handler (i.e., codeBlock).\n\t\t\tif ( !content ) {\n\t\t\t\tif ( dataTransfer.getData( 'text/html' ) ) {\n\t\t\t\t\tcontent = normalizeClipboardHtml( dataTransfer.getData( 'text/html' ) );\n\t\t\t\t} else if ( dataTransfer.getData( 'text/plain' ) ) {\n\t\t\t\t\tcontent = plainTextToHtml( dataTransfer.getData( 'text/plain' ) );\n\t\t\t\t}\n\n\t\t\t\tcontent = this.editor.data.htmlProcessor.toView( content );\n\t\t\t}\n\n\t\t\tconst eventInfo = new EventInfo( this, 'inputTransformation' );\n\n\t\t\tthis.fire( eventInfo, {\n\t\t\t\tcontent,\n\t\t\t\tdataTransfer,\n\t\t\t\ttargetRanges: data.targetRanges,\n\t\t\t\tmethod: data.method\n\t\t\t} );\n\n\t\t\t// If CKEditor handled the input, do not bubble the original event any further.\n\t\t\t// This helps external integrations recognize this fact and act accordingly.\n\t\t\t// https://github.com/ckeditor/ckeditor5-upload/issues/92\n\t\t\tif ( eventInfo.stop.called ) {\n\t\t\t\tevt.stop();\n\t\t\t}\n\n\t\t\tview.scrollToTheSelection();\n\t\t}, { priority: 'low' } );\n\n\t\tthis.listenTo( this, 'inputTransformation', ( evt, data ) => {\n\t\t\tif ( data.content.isEmpty ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst dataController = this.editor.data;\n\n\t\t\t// Convert the pasted content into a model document fragment.\n\t\t\t// The conversion is contextual, but in this case an \"all allowed\" context is needed\n\t\t\t// and for that we use the $clipboardHolder item.\n\t\t\tconst modelFragment = dataController.toModel( data.content, '$clipboardHolder' );\n\n\t\t\tif ( modelFragment.childCount == 0 ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tevt.stop();\n\n\t\t\t// Fire content insertion event in a single change block to allow other handlers to run in the same block\n\t\t\t// without post-fixers called in between (i.e., the selection post-fixer).\n\t\t\tmodel.change( () => {\n\t\t\t\tthis.fire( 'contentInsertion', {\n\t\t\t\t\tcontent: modelFragment,\n\t\t\t\t\tmethod: data.method,\n\t\t\t\t\tdataTransfer: data.dataTransfer,\n\t\t\t\t\ttargetRanges: data.targetRanges\n\t\t\t\t} );\n\t\t\t} );\n\t\t}, { priority: 'low' } );\n\n\t\tthis.listenTo( this, 'contentInsertion', ( evt, data ) => {\n\t\t\tdata.resultRange = model.insertContent( data.content );\n\t\t}, { priority: 'low' } );\n\t}\n\n\t/**\n\t * The clipboard copy/cut pipeline.\n\t *\n\t * @private\n\t */\n\t_setupCopyCut() {\n\t\tconst editor = this.editor;\n\t\tconst modelDocument = editor.model.document;\n\t\tconst view = editor.editing.view;\n\t\tconst viewDocument = view.document;\n\n\t\tfunction onCopyCut( evt, data ) {\n\t\t\tconst dataTransfer = data.dataTransfer;\n\n\t\t\tdata.preventDefault();\n\n\t\t\tconst content = editor.data.toView( editor.model.getSelectedContent( modelDocument.selection ) );\n\n\t\t\tviewDocument.fire( 'clipboardOutput', { dataTransfer, content, method: evt.name } );\n\t\t}\n\n\t\tthis.listenTo( viewDocument, 'copy', onCopyCut, { priority: 'low' } );\n\t\tthis.listenTo( viewDocument, 'cut', ( evt, data ) => {\n\t\t\t// Cutting is disabled when editor is in the read-only mode.\n\t\t\t// See: https://github.com/ckeditor/ckeditor5-clipboard/issues/26.\n\t\t\tif ( editor.isReadOnly ) {\n\t\t\t\tdata.preventDefault();\n\t\t\t} else {\n\t\t\t\tonCopyCut( evt, data );\n\t\t\t}\n\t\t}, { priority: 'low' } );\n\n\t\tthis.listenTo( viewDocument, 'clipboardOutput', ( evt, data ) => {\n\t\t\tif ( !data.content.isEmpty ) {\n\t\t\t\tdata.dataTransfer.setData( 'text/html', this.editor.data.htmlProcessor.toData( data.content ) );\n\t\t\t\tdata.dataTransfer.setData( 'text/plain', viewToPlainText( data.content ) );\n\t\t\t}\n\n\t\t\tif ( data.method == 'cut' ) {\n\t\t\t\teditor.model.deleteContent( modelDocument.selection );\n\t\t\t}\n\t\t}, { priority: 'low' } );\n\t}\n}\n\n/**\n * Fired with the `content`, `dataTransfer`, `method`, and `targetRanges` properties:\n *\n * * The `content` which comes from the clipboard (it was pasted or dropped) should be processed in order to be inserted into the editor.\n * * The `dataTransfer` object is available in case the transformation functions need access to the raw clipboard data.\n * * The `method` indicates the original DOM event (for example `'drop'` or `'paste'`).\n * * The `targetRanges` property is an array of view ranges (it is available only for `'drop'`).\n *\n * It is a part of the {@glink framework/guides/deep-dive/clipboard#input-pipeline clipboard input pipeline}.\n *\n * **Note**: You should not stop this event if you want to change the input data. You should modify the `content` property instead.\n *\n * @see module:clipboard/clipboardobserver~ClipboardObserver\n * @see module:clipboard/clipboardpipeline~ClipboardPipeline\n * @event module:clipboard/clipboardpipeline~ClipboardPipeline#event:inputTransformation\n * @param {Object} data The event data.\n * @param {module:engine/view/documentfragment~DocumentFragment} data.content The event data. The content to be inserted into the editor.\n * It can be modified by event listeners. Read more about the clipboard pipelines in\n * the {@glink framework/guides/deep-dive/clipboard clipboard deep dive guide}.\n * @param {module:clipboard/datatransfer~DataTransfer} data.dataTransfer The data transfer instance.\n * @param {'paste'|'drop'} data.method Whether the event was triggered by a paste or drop operation.\n * @param {Array.<module:engine/view/range~Range>} data.targetRanges The target drop ranges.\n */\n\n/**\n * Fired with the `content`, `dataTransfer`, `method`, and `targetRanges` properties:\n *\n * * The `content` which comes from the clipboard (was pasted or dropped) should be processed in order to be inserted into the editor.\n * * The `dataTransfer` object is available in case the transformation functions need access to the raw clipboard data.\n * * The `method` indicates the original DOM event (for example `'drop'` or `'paste'`).\n * * The `targetRanges` property is an array of view ranges (it is available only for `'drop'`).\n *\n * Event handlers can modify the content according to the final insertion position.\n *\n * It is a part of the {@glink framework/guides/deep-dive/clipboard#input-pipeline clipboard input pipeline}.\n *\n * **Note**: You should not stop this event if you want to change the input data. You should modify the `content` property instead.\n *\n * @see module:clipboard/clipboardobserver~ClipboardObserver\n * @see module:clipboard/clipboardpipeline~ClipboardPipeline\n * @see module:clipboard/clipboardpipeline~ClipboardPipeline#event:inputTransformation\n * @event module:clipboard/clipboardpipeline~ClipboardPipeline#event:contentInsertion\n * @param {Object} data The event data.\n * @param {module:engine/model/documentfragment~DocumentFragment} data.content The event data. The content to be inserted into the editor.\n * Read more about the clipboard pipelines in the {@glink framework/guides/deep-dive/clipboard clipboard deep dive guide}.\n * @param {module:clipboard/datatransfer~DataTransfer} data.dataTransfer The data transfer instance.\n * @param {'paste'|'drop'} data.method Whether the event was triggered by a paste or drop operation.\n * @param {Array.<module:engine/view/range~Range>} data.targetRanges The target drop ranges.\n * @param {module:engine/model/range~Range} data.resultRange The result of the `model.insertContent()` call\n *  (inserted by the event handler at a low priority).\n */\n\n/**\n * Fired on {@link module:engine/view/document~Document#event:copy} and {@link module:engine/view/document~Document#event:cut}\n * with a copy of the selected content. The content can be processed before it ends up in the clipboard.\n *\n * It is a part of the {@glink framework/guides/deep-dive/clipboard#output-pipeline clipboard output pipeline}.\n *\n * @see module:clipboard/clipboardobserver~ClipboardObserver\n * @see module:clipboard/clipboardpipeline~ClipboardPipeline\n * @event module:engine/view/document~Document#event:clipboardOutput\n * @param {module:clipboard/clipboardpipeline~ClipboardOutputEventData} data The event data.\n */\n\n/**\n * The value of the {@link module:engine/view/document~Document#event:clipboardOutput} event.\n *\n * @class module:clipboard/clipboardpipeline~ClipboardOutputEventData\n */\n\n/**\n * The data transfer instance.\n *\n * @readonly\n * @member {module:clipboard/datatransfer~DataTransfer} module:clipboard/clipboardpipeline~ClipboardOutputEventData#dataTransfer\n */\n\n/**\n * Content to be put into the clipboard. It can be modified by the event listeners.\n * Read more about the clipboard pipelines in the {@glink framework/guides/deep-dive/clipboard clipboard deep dive guide}.\n *\n * @member {module:engine/view/documentfragment~DocumentFragment} module:clipboard/clipboardpipeline~ClipboardOutputEventData#content\n */\n\n/**\n * Whether the event was triggered by a copy or cut operation.\n *\n * @member {'copy'|'cut'} module:clipboard/clipboardpipeline~ClipboardOutputEventData#method\n */\n"]}]}