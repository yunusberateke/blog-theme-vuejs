{"remainingRequest":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/babel-loader/lib/index.js!/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-dev-webpack-plugin/lib/translatesourceloader.js?{}!/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-engine/src/model/text.js","dependencies":[{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-engine/src/model/text.js","mtime":499162500000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-dev-webpack-plugin/lib/translatesourceloader.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tICIvaG9tZS9la2ViZXJhdC9ZYW5kZXguRGlzay9Qcm9qZWxlcmltL0JlbmltUHJvamVsZXJpbS93ZWJzaXRlbS93ZWJzaXRlbS13ZWIvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NsYXNzQ2FsbENoZWNrIjsKaW1wb3J0IF9jcmVhdGVDbGFzcyBmcm9tICIvaG9tZS9la2ViZXJhdC9ZYW5kZXguRGlzay9Qcm9qZWxlcmltL0JlbmltUHJvamVsZXJpbS93ZWJzaXRlbS93ZWJzaXRlbS13ZWIvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZUNsYXNzIjsKaW1wb3J0IF9nZXQgZnJvbSAiL2hvbWUvZWtlYmVyYXQvWWFuZGV4LkRpc2svUHJvamVsZXJpbS9CZW5pbVByb2plbGVyaW0vd2Vic2l0ZW0vd2Vic2l0ZW0td2ViL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9nZXQiOwppbXBvcnQgX2dldFByb3RvdHlwZU9mIGZyb20gIi9ob21lL2VrZWJlcmF0L1lhbmRleC5EaXNrL1Byb2plbGVyaW0vQmVuaW1Qcm9qZWxlcmltL3dlYnNpdGVtL3dlYnNpdGVtLXdlYi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZ2V0UHJvdG90eXBlT2YiOwppbXBvcnQgX2luaGVyaXRzIGZyb20gIi9ob21lL2VrZWJlcmF0L1lhbmRleC5EaXNrL1Byb2plbGVyaW0vQmVuaW1Qcm9qZWxlcmltL3dlYnNpdGVtL3dlYnNpdGVtLXdlYi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHMiOwppbXBvcnQgX2NyZWF0ZVN1cGVyIGZyb20gIi9ob21lL2VrZWJlcmF0L1lhbmRleC5EaXNrL1Byb2plbGVyaW0vQmVuaW1Qcm9qZWxlcmltL3dlYnNpdGVtL3dlYnNpdGVtLXdlYi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY3JlYXRlU3VwZXIiOwoKLyoqCiAqIEBsaWNlbnNlIENvcHlyaWdodCAoYykgMjAwMy0yMDIxLCBDS1NvdXJjZSAtIEZyZWRlcmljbyBLbmFiYmVuLiBBbGwgcmlnaHRzIHJlc2VydmVkLgogKiBGb3IgbGljZW5zaW5nLCBzZWUgTElDRU5TRS5tZCBvciBodHRwczovL2NrZWRpdG9yLmNvbS9sZWdhbC9ja2VkaXRvci1vc3MtbGljZW5zZQogKi8KCi8qKgogKiBAbW9kdWxlIGVuZ2luZS9tb2RlbC90ZXh0CiAqLwppbXBvcnQgTm9kZSBmcm9tICcuL25vZGUnOyAvLyBAaWYgQ0tfREVCVUdfRU5HSU5FIC8vIGNvbnN0IHsgY29udmVydE1hcFRvU3RyaW5naWZpZWRPYmplY3QgfSA9IHJlcXVpcmUoICcuLi9kZXYtdXRpbHMvdXRpbHMnICk7CgovKioKICogTW9kZWwgdGV4dCBub2RlLiBUeXBlIG9mIHtAbGluayBtb2R1bGU6ZW5naW5lL21vZGVsL25vZGV+Tm9kZSBub2RlfSB0aGF0IGNvbnRhaW5zIHtAbGluayBtb2R1bGU6ZW5naW5lL21vZGVsL3RleHR+VGV4dCNkYXRhIHRleHQgZGF0YX0uCiAqCiAqICoqSW1wb3J0YW50OioqIHNlZSB7QGxpbmsgbW9kdWxlOmVuZ2luZS9tb2RlbC9ub2Rlfk5vZGV9IHRvIHJlYWQgYWJvdXQgcmVzdHJpY3Rpb25zIHVzaW5nIGBUZXh0YCBhbmQgYE5vZGVgIEFQSS4KICoKICogKipOb3RlOioqIGtlZXAgaW4gbWluZCB0aGF0IGBUZXh0YCBpbnN0YW5jZXMgbWlnaHQgaW5kaXJlY3RseSBnb3QgcmVtb3ZlZCBmcm9tIG1vZGVsIHRyZWUgd2hlbiBtb2RlbCBpcyBjaGFuZ2VkLgogKiBUaGlzIGhhcHBlbnMgd2hlbiB7QGxpbmsgbW9kdWxlOmVuZ2luZS9tb2RlbC93cml0ZXJ+V3JpdGVyIG1vZGVsIHdyaXRlcn0gaXMgdXNlZCB0byBjaGFuZ2UgbW9kZWwgYW5kIHRoZSB0ZXh0IG5vZGUgaXMgbWVyZ2VkIHdpdGgKICogYW5vdGhlciB0ZXh0IG5vZGUuIFRoZW4sIGJvdGggdGV4dCBub2RlcyBhcmUgcmVtb3ZlZCBhbmQgYSBuZXcgdGV4dCBub2RlIGlzIGluc2VydGVkIGludG8gdGhlIG1vZGVsLiBCZWNhdXNlIG9mCiAqIHRoaXMgYmVoYXZpb3IsIGtlZXBpbmcgcmVmZXJlbmNlcyB0byBgVGV4dGAgaXMgbm90IHJlY29tbWVuZGVkLiBJbnN0ZWFkLCBjb25zaWRlciBjcmVhdGluZwogKiB7QGxpbmsgbW9kdWxlOmVuZ2luZS9tb2RlbC9saXZlcG9zaXRpb25+TGl2ZVBvc2l0aW9uIGxpdmUgcG9zaXRpb259IHBsYWNlZCBiZWZvcmUgdGhlIHRleHQgbm9kZS4KICoKICogQGV4dGVuZHMgbW9kdWxlOmVuZ2luZS9tb2RlbC9ub2Rlfk5vZGUKICovCgp2YXIgVGV4dCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX05vZGUpIHsKICBfaW5oZXJpdHMoVGV4dCwgX05vZGUpOwoKICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKFRleHQpOwoKICAvKioKICAgKiBDcmVhdGVzIGEgdGV4dCBub2RlLgogICAqCiAgICogKipOb3RlOioqIENvbnN0cnVjdG9yIG9mIHRoaXMgY2xhc3Mgc2hvdWxkbid0IGJlIHVzZWQgZGlyZWN0bHkgaW4gdGhlIGNvZGUuCiAgICogVXNlIHRoZSB7QGxpbmsgbW9kdWxlOmVuZ2luZS9tb2RlbC93cml0ZXJ+V3JpdGVyI2NyZWF0ZVRleHR9IG1ldGhvZCBpbnN0ZWFkLgogICAqCiAgICogQHByb3RlY3RlZAogICAqIEBwYXJhbSB7U3RyaW5nfSBkYXRhIE5vZGUncyB0ZXh0LgogICAqIEBwYXJhbSB7T2JqZWN0fSBbYXR0cnNdIE5vZGUncyBhdHRyaWJ1dGVzLiBTZWUge0BsaW5rIG1vZHVsZTp1dGlscy90b21hcH50b01hcH0gZm9yIGEgbGlzdCBvZiBhY2NlcHRlZCB2YWx1ZXMuCiAgICovCiAgZnVuY3Rpb24gVGV4dChkYXRhLCBhdHRycykgewogICAgdmFyIF90aGlzOwoKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBUZXh0KTsKCiAgICBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGF0dHJzKTsKICAgIC8qKgogICAgICogVGV4dCBkYXRhIGNvbnRhaW5lZCBpbiB0aGlzIHRleHQgbm9kZS4KICAgICAqCiAgICAgKiBAcHJvdGVjdGVkCiAgICAgKiBAdHlwZSB7U3RyaW5nfQogICAgICovCgogICAgX3RoaXMuX2RhdGEgPSBkYXRhIHx8ICcnOwogICAgcmV0dXJuIF90aGlzOwogIH0KICAvKioKICAgKiBAaW5oZXJpdERvYwogICAqLwoKCiAgX2NyZWF0ZUNsYXNzKFRleHQsIFt7CiAgICBrZXk6ICJvZmZzZXRTaXplIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gdGhpcy5kYXRhLmxlbmd0aDsKICAgIH0KICAgIC8qKgogICAgICogUmV0dXJucyBhIHRleHQgZGF0YSBjb250YWluZWQgaW4gdGhlIG5vZGUuCiAgICAgKgogICAgICogQHJlYWRvbmx5CiAgICAgKiBAdHlwZSB7U3RyaW5nfQogICAgICovCgogIH0sIHsKICAgIGtleTogImRhdGEiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiB0aGlzLl9kYXRhOwogICAgfQogICAgLyoqCiAgICAgKiBDaGVja3Mgd2hldGhlciB0aGlzIG9iamVjdCBpcyBvZiB0aGUgZ2l2ZW4uCiAgICAgKgogICAgICoJCXRleHQuaXMoICckdGV4dCcgKTsgLy8gLT4gdHJ1ZQogICAgICoJCXRleHQuaXMoICdub2RlJyApOyAvLyAtPiB0cnVlCiAgICAgKgkJdGV4dC5pcyggJ21vZGVsOiR0ZXh0JyApOyAvLyAtPiB0cnVlCiAgICAgKgkJdGV4dC5pcyggJ21vZGVsOm5vZGUnICk7IC8vIC0+IHRydWUKICAgICAqCiAgICAgKgkJdGV4dC5pcyggJ3ZpZXc6JHRleHQnICk7IC8vIC0+IGZhbHNlCiAgICAgKgkJdGV4dC5pcyggJ2RvY3VtZW50U2VsZWN0aW9uJyApOyAvLyAtPiBmYWxzZQogICAgICoKICAgICAqIHtAbGluayBtb2R1bGU6ZW5naW5lL21vZGVsL25vZGV+Tm9kZSNpcyBDaGVjayB0aGUgZW50aXJlIGxpc3Qgb2YgbW9kZWwgb2JqZWN0c30gd2hpY2ggaW1wbGVtZW50IHRoZSBgaXMoKWAgbWV0aG9kLgogICAgICoKICAgICAqICoqTm90ZToqKiBVbnRpbCB2ZXJzaW9uIDIwLjAuMCB0aGlzIG1ldGhvZCB3YXNuJ3QgYWNjZXB0aW5nIGAnJHRleHQnYCB0eXBlLiBUaGUgbGVnYWN5IGAndGV4dCdgIHR5cGUgaXMgc3RpbGwKICAgICAqIGFjY2VwdGVkIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LgogICAgICoKICAgICAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlIFR5cGUgdG8gY2hlY2suCiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn0KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJpcyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gaXModHlwZSkgewogICAgICByZXR1cm4gdHlwZSA9PT0gJyR0ZXh0JyB8fCB0eXBlID09PSAnbW9kZWw6JHRleHQnIHx8IC8vIFRoaXMgYXJlIGxlZ2FjeSB2YWx1ZXMga2VwdCBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eS4KICAgICAgdHlwZSA9PT0gJ3RleHQnIHx8IHR5cGUgPT09ICdtb2RlbDp0ZXh0JyB8fCAvLyBGcm9tIHN1cGVyLmlzKCkuIFRoaXMgaXMgaGlnaGx5IHV0aWxpc2VkIG1ldGhvZCBhbmQgY2Fubm90IGNhbGwgc3VwZXIuIFNlZSBja2VkaXRvci9ja2VkaXRvcjUjNjUyOS4KICAgICAgdHlwZSA9PT0gJ25vZGUnIHx8IHR5cGUgPT09ICdtb2RlbDpub2RlJzsKICAgIH0KICAgIC8qKgogICAgICogQ29udmVydHMgYFRleHRgIGluc3RhbmNlIHRvIHBsYWluIG9iamVjdCBhbmQgcmV0dXJucyBpdC4KICAgICAqCiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBgVGV4dGAgaW5zdGFuY2UgY29udmVydGVkIHRvIHBsYWluIG9iamVjdC4KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJ0b0pTT04iLAogICAgdmFsdWU6IGZ1bmN0aW9uIHRvSlNPTigpIHsKICAgICAgdmFyIGpzb24gPSBfZ2V0KF9nZXRQcm90b3R5cGVPZihUZXh0LnByb3RvdHlwZSksICJ0b0pTT04iLCB0aGlzKS5jYWxsKHRoaXMpOwoKICAgICAganNvbi5kYXRhID0gdGhpcy5kYXRhOwogICAgICByZXR1cm4ganNvbjsKICAgIH0KICAgIC8qKgogICAgICogQ3JlYXRlcyBhIGNvcHkgb2YgdGhpcyB0ZXh0IG5vZGUgYW5kIHJldHVybnMgaXQuIENyZWF0ZWQgdGV4dCBub2RlIGhhcyBzYW1lIHRleHQgZGF0YSBhbmQgYXR0cmlidXRlcyBhcyBvcmlnaW5hbCB0ZXh0IG5vZGUuCiAgICAgKgogICAgICogQHByb3RlY3RlZAogICAgICogQHJldHVybnMge21vZHVsZTplbmdpbmUvbW9kZWwvdGV4dH5UZXh0fSBgVGV4dGAgaW5zdGFuY2UgY3JlYXRlZCB1c2luZyBnaXZlbiBwbGFpbiBvYmplY3QuCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAiX2Nsb25lIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBfY2xvbmUoKSB7CiAgICAgIHJldHVybiBuZXcgVGV4dCh0aGlzLmRhdGEsIHRoaXMuZ2V0QXR0cmlidXRlcygpKTsKICAgIH0KICAgIC8qKgogICAgICogQ3JlYXRlcyBhIGBUZXh0YCBpbnN0YW5jZSBmcm9tIGdpdmVuIHBsYWluIG9iamVjdCAoaS5lLiBwYXJzZWQgSlNPTiBzdHJpbmcpLgogICAgICoKICAgICAqIEBwYXJhbSB7T2JqZWN0fSBqc29uIFBsYWluIG9iamVjdCB0byBiZSBjb252ZXJ0ZWQgdG8gYFRleHRgLgogICAgICogQHJldHVybnMge21vZHVsZTplbmdpbmUvbW9kZWwvdGV4dH5UZXh0fSBgVGV4dGAgaW5zdGFuY2UgY3JlYXRlZCB1c2luZyBnaXZlbiBwbGFpbiBvYmplY3QuCiAgICAgKi8KCiAgfV0sIFt7CiAgICBrZXk6ICJmcm9tSlNPTiIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZnJvbUpTT04oanNvbikgewogICAgICByZXR1cm4gbmV3IFRleHQoanNvbi5kYXRhLCBqc29uLmF0dHJpYnV0ZXMpOwogICAgfSAvLyBAaWYgQ0tfREVCVUdfRU5HSU5FIC8vIHRvU3RyaW5nKCkgewogICAgLy8gQGlmIENLX0RFQlVHX0VOR0lORSAvLyAJcmV0dXJuIGAjJHsgdGhpcy5kYXRhIH1gOwogICAgLy8gQGlmIENLX0RFQlVHX0VOR0lORSAvLyB9CiAgICAvLyBAaWYgQ0tfREVCVUdfRU5HSU5FIC8vIGxvZ0V4dGVuZGVkKCkgewogICAgLy8gQGlmIENLX0RFQlVHX0VOR0lORSAvLyAJY29uc29sZS5sb2coIGBNb2RlbFRleHQ6ICR7IHRoaXMgfSwgYXR0cnM6ICR7IGNvbnZlcnRNYXBUb1N0cmluZ2lmaWVkT2JqZWN0KCB0aGlzLmdldEF0dHJpYnV0ZXMoKSApIH1gICk7CiAgICAvLyBAaWYgQ0tfREVCVUdfRU5HSU5FIC8vIH0KICAgIC8vIEBpZiBDS19ERUJVR19FTkdJTkUgLy8gbG9nKCkgewogICAgLy8gQGlmIENLX0RFQlVHX0VOR0lORSAvLyAJY29uc29sZS5sb2coICdNb2RlbFRleHQ6ICcgKyB0aGlzICk7CiAgICAvLyBAaWYgQ0tfREVCVUdfRU5HSU5FIC8vIH0KCiAgfV0pOwoKICByZXR1cm4gVGV4dDsKfShOb2RlKTsKCmV4cG9ydCB7IFRleHQgYXMgZGVmYXVsdCB9Ow=="},{"version":3,"sources":["/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-engine/src/model/text.js"],"names":["Node","Text","data","attrs","_data","length","type","json","getAttributes","attributes"],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA,OAAOA,IAAP,MAAiB,QAAjB,C,CAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IACqBC,I;;;;;AACpB;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,gBAAaC,IAAb,EAAmBC,KAAnB,EAA2B;AAAA;;AAAA;;AAC1B,8BAAOA,KAAP;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,UAAKC,KAAL,GAAaF,IAAI,IAAI,EAArB;AAT0B;AAU1B;AAED;AACD;AACA;;;;;SACC,eAAiB;AAChB,aAAO,KAAKA,IAAL,CAAUG,MAAjB;AACA;AAED;AACD;AACA;AACA;AACA;AACA;;;;SACC,eAAW;AACV,aAAO,KAAKD,KAAZ;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACC,YAAIE,IAAJ,EAAW;AACV,aAAOA,IAAI,KAAK,OAAT,IAAoBA,IAAI,KAAK,aAA7B,IACN;AACAA,MAAAA,IAAI,KAAK,MAFH,IAEaA,IAAI,KAAK,YAFtB,IAGN;AACAA,MAAAA,IAAI,KAAK,MAJH,IAIaA,IAAI,KAAK,YAJ7B;AAKA;AAED;AACD;AACA;AACA;AACA;;;;WACC,kBAAS;AACR,UAAMC,IAAI,mEAAV;;AAEAA,MAAAA,IAAI,CAACL,IAAL,GAAY,KAAKA,IAAjB;AAEA,aAAOK,IAAP;AACA;AAED;AACD;AACA;AACA;AACA;AACA;;;;WACC,kBAAS;AACR,aAAO,IAAIN,IAAJ,CAAU,KAAKC,IAAf,EAAqB,KAAKM,aAAL,EAArB,CAAP;AACA;AAED;AACD;AACA;AACA;AACA;AACA;;;;WACC,kBAAiBD,IAAjB,EAAwB;AACvB,aAAO,IAAIN,IAAJ,CAAUM,IAAI,CAACL,IAAf,EAAqBK,IAAI,CAACE,UAA1B,CAAP;AACA,K,CAED;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;;;;;EA9GiCT,I;;SAAbC,I","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/text\n */\n\nimport Node from './node';\n\n// @if CK_DEBUG_ENGINE // const { convertMapToStringifiedObject } = require( '../dev-utils/utils' );\n\n/**\n * Model text node. Type of {@link module:engine/model/node~Node node} that contains {@link module:engine/model/text~Text#data text data}.\n *\n * **Important:** see {@link module:engine/model/node~Node} to read about restrictions using `Text` and `Node` API.\n *\n * **Note:** keep in mind that `Text` instances might indirectly got removed from model tree when model is changed.\n * This happens when {@link module:engine/model/writer~Writer model writer} is used to change model and the text node is merged with\n * another text node. Then, both text nodes are removed and a new text node is inserted into the model. Because of\n * this behavior, keeping references to `Text` is not recommended. Instead, consider creating\n * {@link module:engine/model/liveposition~LivePosition live position} placed before the text node.\n *\n * @extends module:engine/model/node~Node\n */\nexport default class Text extends Node {\n\t/**\n\t * Creates a text node.\n\t *\n\t * **Note:** Constructor of this class shouldn't be used directly in the code.\n\t * Use the {@link module:engine/model/writer~Writer#createText} method instead.\n\t *\n\t * @protected\n\t * @param {String} data Node's text.\n\t * @param {Object} [attrs] Node's attributes. See {@link module:utils/tomap~toMap} for a list of accepted values.\n\t */\n\tconstructor( data, attrs ) {\n\t\tsuper( attrs );\n\n\t\t/**\n\t\t * Text data contained in this text node.\n\t\t *\n\t\t * @protected\n\t\t * @type {String}\n\t\t */\n\t\tthis._data = data || '';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget offsetSize() {\n\t\treturn this.data.length;\n\t}\n\n\t/**\n\t * Returns a text data contained in the node.\n\t *\n\t * @readonly\n\t * @type {String}\n\t */\n\tget data() {\n\t\treturn this._data;\n\t}\n\n\t/**\n\t * Checks whether this object is of the given.\n\t *\n\t *\t\ttext.is( '$text' ); // -> true\n\t *\t\ttext.is( 'node' ); // -> true\n\t *\t\ttext.is( 'model:$text' ); // -> true\n\t *\t\ttext.is( 'model:node' ); // -> true\n\t *\n\t *\t\ttext.is( 'view:$text' ); // -> false\n\t *\t\ttext.is( 'documentSelection' ); // -> false\n\t *\n\t * {@link module:engine/model/node~Node#is Check the entire list of model objects} which implement the `is()` method.\n\t *\n\t * **Note:** Until version 20.0.0 this method wasn't accepting `'$text'` type. The legacy `'text'` type is still\n\t * accepted for backward compatibility.\n\t *\n\t * @param {String} type Type to check.\n\t * @returns {Boolean}\n\t */\n\tis( type ) {\n\t\treturn type === '$text' || type === 'model:$text' ||\n\t\t\t// This are legacy values kept for backward compatibility.\n\t\t\ttype === 'text' || type === 'model:text' ||\n\t\t\t// From super.is(). This is highly utilised method and cannot call super. See ckeditor/ckeditor5#6529.\n\t\t\ttype === 'node' || type === 'model:node';\n\t}\n\n\t/**\n\t * Converts `Text` instance to plain object and returns it.\n\t *\n\t * @returns {Object} `Text` instance converted to plain object.\n\t */\n\ttoJSON() {\n\t\tconst json = super.toJSON();\n\n\t\tjson.data = this.data;\n\n\t\treturn json;\n\t}\n\n\t/**\n\t * Creates a copy of this text node and returns it. Created text node has same text data and attributes as original text node.\n\t *\n\t * @protected\n\t * @returns {module:engine/model/text~Text} `Text` instance created using given plain object.\n\t */\n\t_clone() {\n\t\treturn new Text( this.data, this.getAttributes() );\n\t}\n\n\t/**\n\t * Creates a `Text` instance from given plain object (i.e. parsed JSON string).\n\t *\n\t * @param {Object} json Plain object to be converted to `Text`.\n\t * @returns {module:engine/model/text~Text} `Text` instance created using given plain object.\n\t */\n\tstatic fromJSON( json ) {\n\t\treturn new Text( json.data, json.attributes );\n\t}\n\n\t// @if CK_DEBUG_ENGINE // toString() {\n\t// @if CK_DEBUG_ENGINE // \treturn `#${ this.data }`;\n\t// @if CK_DEBUG_ENGINE // }\n\n\t// @if CK_DEBUG_ENGINE // logExtended() {\n\t// @if CK_DEBUG_ENGINE // \tconsole.log( `ModelText: ${ this }, attrs: ${ convertMapToStringifiedObject( this.getAttributes() ) }` );\n\t// @if CK_DEBUG_ENGINE // }\n\n\t// @if CK_DEBUG_ENGINE // log() {\n\t// @if CK_DEBUG_ENGINE // \tconsole.log( 'ModelText: ' + this );\n\t// @if CK_DEBUG_ENGINE // }\n}\n"]}]}