{"remainingRequest":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/babel-loader/lib/index.js!/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-dev-webpack-plugin/lib/translatesourceloader.js?{}!/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-widget/src/widgettypearound/widgettypearound.js","dependencies":[{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-widget/src/widgettypearound/widgettypearound.js","mtime":499162500000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-dev-webpack-plugin/lib/translatesourceloader.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-widget/src/widgettypearound/widgettypearound.js"],"names":["Plugin","Template","Enter","Delete","isForwardArrowKeyCode","keyCodes","isTypeAroundWidget","getClosestTypeAroundDomButton","getTypeAroundButtonPosition","getClosestWidgetViewElement","getTypeAroundFakeCaretPosition","TYPE_AROUND_SELECTION_ATTRIBUTE","isNonTypingKeystroke","isWidget","returnIcon","POSSIBLE_INSERTION_POSITIONS","RETURN_ARROW_ICON_ELEMENT","DOMParser","parseFromString","firstChild","PLUGIN_DISABLED_EDITING_ROOT_CLASS","WidgetTypeAround","editor","_currentFakeCaretModelElement","editingView","editing","view","on","evt","data","isEnabled","change","writer","document","roots","root","removeClass","addClass","model","removeSelectionAttribute","_enableTypeAroundUIInjection","_enableInsertingParagraphsOnButtonClick","_enableInsertingParagraphsOnEnterKeypress","_enableInsertingParagraphsOnTypingKeystroke","_enableTypeAroundFakeCaretActivationUsingKeyboardArrows","_enableDeleteIntegration","_enableInsertContentIntegration","widgetModelElement","position","execute","createPositionAt","focus","scrollToTheSelection","emitter","event","callback","options","listenTo","modelSelection","selection","typeAroundFakeCaretPosition","selectedModelElement","getSelectedElement","_insertParagraph","schema","t","locale","buttonTitles","before","after","downcastDispatcher","conversionApi","viewElement","mapper","toViewElement","item","injectUIIntoWidget","priority","_listenToIfEnabled","domEventData","_handleArrowKeyPress","context","directChange","selectedViewElement","map","positionToWidgetCssClass","ui","focusTracker","name","isFocused","keyCode","isForward","contentLanguageDirection","toModelElement","shouldStopAndPreventDefault","_handleArrowKeyPressOnSelectedWidget","isCollapsed","_handleArrowKeyPressWhenSelectionNextToAWidget","preventDefault","stop","isLeavingWidget","setSelectionAttribute","widgetPlugin","plugins","get","modelElementNextToSelection","_getObjectElementNextToSelection","viewElementNextToSelection","_setSelectionOverElement","button","domTarget","buttonPosition","widgetViewElement","domConverter","eventPhase","wasHandled","_insertParagraphAccordingToFakeCaretPosition","isSoft","keyCodesHandledSomewhereElse","enter","delete","backspace","includes","direction","selectedModelWidget","isFakeCaretBefore","isDeleteForward","shouldDeleteEntireWidget","createSelection","range","getNearestSelectionRange","setSelection","probe","start","modifySelection","isEqual","deepestEmptyRangeAncestor","getDeepestEmptyElementAncestor","parent","deleteContent","doNotAutoparagraph","documentSelection","content","selectable","is","selectedElement","result","insertContent","viewWriter","typeAroundWrapper","createUIElement","class","domDocument","wrapperDomElement","toDomElement","injectButtons","injectFakeCaret","insert","buttonTemplate","tag","attributes","title","children","ownerDocument","importNode","appendChild","render","caretTemplate","element","deepestEmptyAncestor","getAncestors","parentFirst","ancestor","childCount","isLimit"],"mappings":";;;;;;;;;;AAAA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AAEA,OAAOA,MAAP,MAAmB,qCAAnB;AACA,OAAOC,QAAP,MAAqB,qCAArB;AACA,OAAOC,KAAP,MAAkB,qCAAlB;AACA,OAAOC,MAAP,MAAmB,uCAAnB;AACA,SACCC,qBADD,EAECC,QAFD,QAGO,wCAHP;AAKA,SACCC,kBADD,EAECC,6BAFD,EAGCC,2BAHD,EAICC,2BAJD,EAKCC,8BALD,EAMCC,+BAND,QAOO,SAPP;AASA,SACCC,oBADD,QAEO,qEAFP;AAIA,SAASC,QAAT,QAAyB,UAAzB;AAEA,OAAOC,UAAP,MAAuB,oCAAvB;AACA,OAAO,kCAAP;AAEA,IAAMC,4BAA4B,GAAG,CAAE,QAAF,EAAY,OAAZ,CAArC,C,CAEA;;AACA,IAAMC,yBAAyB,GAAG,IAAIC,SAAJ,GAAgBC,eAAhB,CAAiCJ,UAAjC,EAA6C,eAA7C,EAA+DK,UAAjG;AAEA,IAAMC,kCAAkC,GAAG,iCAA3C;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IACqBC,gB;;;;;AAepB;AACD;AACA;AACC,4BAAaC,MAAb,EAAsB;AAAA;;AAAA;;AACrB,8BAAOA,MAAP;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,UAAKC,6BAAL,GAAqC,IAArC;AAXqB;AAYrB;AAED;AACD;AACA;;;;;WACC,gBAAO;AACN,UAAMD,MAAM,GAAG,KAAKA,MAApB;AACA,UAAME,WAAW,GAAGF,MAAM,CAACG,OAAP,CAAeC,IAAnC,CAFM,CAIN;AACA;;AACA,WAAKC,EAAL,CAAS,kBAAT,EAA6B,UAAEC,GAAF,EAAOC,IAAP,EAAaC,SAAb,EAA4B;AACxDN,QAAAA,WAAW,CAACO,MAAZ,CAAoB,UAAAC,MAAM,EAAI;AAAA,qDACTR,WAAW,CAACS,QAAZ,CAAqBC,KADZ;AAAA;;AAAA;AAC7B,gEAAiD;AAAA,kBAArCC,IAAqC;;AAChD,kBAAKL,SAAL,EAAiB;AAChBE,gBAAAA,MAAM,CAACI,WAAP,CAAoBhB,kCAApB,EAAwDe,IAAxD;AACA,eAFD,MAEO;AACNH,gBAAAA,MAAM,CAACK,QAAP,CAAiBjB,kCAAjB,EAAqDe,IAArD;AACA;AACD;AAP4B;AAAA;AAAA;AAAA;AAAA;AAQ7B,SARD;;AAUA,YAAK,CAACL,SAAN,EAAkB;AACjBR,UAAAA,MAAM,CAACgB,KAAP,CAAaP,MAAb,CAAqB,UAAAC,MAAM,EAAI;AAC9BA,YAAAA,MAAM,CAACO,wBAAP,CAAiC5B,+BAAjC;AACA,WAFD;AAGA;AACD,OAhBD;;AAkBA,WAAK6B,4BAAL;;AACA,WAAKC,uCAAL;;AACA,WAAKC,yCAAL;;AACA,WAAKC,2CAAL;;AACA,WAAKC,uDAAL;;AACA,WAAKC,wBAAL;;AACA,WAAKC,+BAAL;AACA;AAED;AACD;AACA;;;;WACC,mBAAU;AACT,WAAKvB,6BAAL,GAAqC,IAArC;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACC,0BAAkBwB,kBAAlB,EAAsCC,QAAtC,EAAiD;AAChD,UAAM1B,MAAM,GAAG,KAAKA,MAApB;AACA,UAAME,WAAW,GAAGF,MAAM,CAACG,OAAP,CAAeC,IAAnC;AAEAJ,MAAAA,MAAM,CAAC2B,OAAP,CAAgB,iBAAhB,EAAmC;AAClCD,QAAAA,QAAQ,EAAE1B,MAAM,CAACgB,KAAP,CAAaY,gBAAb,CAA+BH,kBAA/B,EAAmDC,QAAnD;AADwB,OAAnC;AAIAxB,MAAAA,WAAW,CAAC2B,KAAZ;AACA3B,MAAAA,WAAW,CAAC4B,oBAAZ;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACC,4BAAoBC,OAApB,EAA6BC,KAA7B,EAAoCC,QAApC,EAA8CC,OAA9C,EAAwD;AAAA;;AACvD,WAAKC,QAAL,CAAeJ,OAAf,EAAwBC,KAAxB,EAA+B,YAAe;AAC7C;AACA,YAAK,MAAI,CAACxB,SAAV,EAAsB;AACrByB,UAAAA,QAAQ,MAAR;AACA;AACD,OALD,EAKGC,OALH;AAMA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACC,wDAA+C;AAC9C,UAAMlC,MAAM,GAAG,KAAKA,MAApB;AACA,UAAMgB,KAAK,GAAGhB,MAAM,CAACgB,KAArB;AACA,UAAMoB,cAAc,GAAGpB,KAAK,CAACL,QAAN,CAAe0B,SAAtC;AACA,UAAMC,2BAA2B,GAAGlD,8BAA8B,CAAEgD,cAAF,CAAlE;;AAEA,UAAK,CAACE,2BAAN,EAAoC;AACnC,eAAO,KAAP;AACA;;AAED,UAAMC,oBAAoB,GAAGH,cAAc,CAACI,kBAAf,EAA7B;;AAEA,WAAKC,gBAAL,CAAuBF,oBAAvB,EAA6CD,2BAA7C;;AAEA,aAAO,IAAP;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACC,wCAA+B;AAC9B,UAAMtC,MAAM,GAAG,KAAKA,MAApB;AACA,UAAM0C,MAAM,GAAG1C,MAAM,CAACgB,KAAP,CAAa0B,MAA5B;AACA,UAAMC,CAAC,GAAG3C,MAAM,CAAC4C,MAAP,CAAcD,CAAxB;AACA,UAAME,YAAY,GAAG;AACpBC,QAAAA,MAAM,EAAEH,CAAC,CAAE,+BAAF,CADW;AAEpBI,QAAAA,KAAK,EAAEJ,CAAC,CAAE,8BAAF;AAFY,OAArB;AAKA3C,MAAAA,MAAM,CAACG,OAAP,CAAe6C,kBAAf,CAAkC3C,EAAlC,CAAsC,QAAtC,EAAgD,UAAEC,GAAF,EAAOC,IAAP,EAAa0C,aAAb,EAAgC;AAC/E,YAAMC,WAAW,GAAGD,aAAa,CAACE,MAAd,CAAqBC,aAArB,CAAoC7C,IAAI,CAAC8C,IAAzC,CAApB,CAD+E,CAG/E;;AACA,YAAKrE,kBAAkB,CAAEkE,WAAF,EAAe3C,IAAI,CAAC8C,IAApB,EAA0BX,MAA1B,CAAvB,EAA4D;AAC3DY,UAAAA,kBAAkB,CAAEL,aAAa,CAACvC,MAAhB,EAAwBmC,YAAxB,EAAsCK,WAAtC,CAAlB;AACA;AACD,OAPD,EAOG;AAAEK,QAAAA,QAAQ,EAAE;AAAZ,OAPH;AAQA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACC,mEAA0D;AAAA;;AACzD,UAAMvD,MAAM,GAAG,KAAKA,MAApB;AACA,UAAMgB,KAAK,GAAGhB,MAAM,CAACgB,KAArB;AACA,UAAMoB,cAAc,GAAGpB,KAAK,CAACL,QAAN,CAAe0B,SAAtC;AACA,UAAMK,MAAM,GAAG1B,KAAK,CAAC0B,MAArB;AACA,UAAMxC,WAAW,GAAGF,MAAM,CAACG,OAAP,CAAeC,IAAnC,CALyD,CAOzD;AACA;;AACA,WAAKoD,kBAAL,CAAyBtD,WAAW,CAACS,QAArC,EAA+C,UAA/C,EAA2D,UAAEL,GAAF,EAAOmD,YAAP,EAAyB;AACnF,QAAA,MAAI,CAACC,oBAAL,CAA2BpD,GAA3B,EAAgCmD,YAAhC;AACA,OAFD,EAEG;AAAEE,QAAAA,OAAO,EAAE,CAAEpE,QAAF,EAAY,OAAZ,CAAX;AAAkCgE,QAAAA,QAAQ,EAAE;AAA5C,OAFH,EATyD,CAazD;AACA;AACA;AACA;;;AACA,WAAKC,kBAAL,CAAyBpB,cAAzB,EAAyC,cAAzC,EAAyD,UAAE9B,GAAF,EAAOC,IAAP,EAAiB;AACzE;AACA,YAAK,CAACA,IAAI,CAACqD,YAAX,EAA0B;AACzB;AACA,SAJwE,CAMzE;AACA;;;AACA5D,QAAAA,MAAM,CAACgB,KAAP,CAAaP,MAAb,CAAqB,UAAAC,MAAM,EAAI;AAC9BA,UAAAA,MAAM,CAACO,wBAAP,CAAiC5B,+BAAjC;AACA,SAFD;AAGA,OAXD,EAjByD,CA8BzD;AACA;;;AACA,WAAKmE,kBAAL,CAAyBxC,KAAK,CAACL,QAA/B,EAAyC,aAAzC,EAAwD,YAAM;AAC7D,YAAM4B,oBAAoB,GAAGH,cAAc,CAACI,kBAAf,EAA7B;;AAEA,YAAKD,oBAAL,EAA4B;AAC3B,cAAMsB,mBAAmB,GAAG7D,MAAM,CAACG,OAAP,CAAegD,MAAf,CAAsBC,aAAtB,CAAqCb,oBAArC,CAA5B;;AAEA,cAAKvD,kBAAkB,CAAE6E,mBAAF,EAAuBtB,oBAAvB,EAA6CG,MAA7C,CAAvB,EAA+E;AAC9E;AACA;AACD;;AAED1C,QAAAA,MAAM,CAACgB,KAAP,CAAaP,MAAb,CAAqB,UAAAC,MAAM,EAAI;AAC9BA,UAAAA,MAAM,CAACO,wBAAP,CAAiC5B,+BAAjC;AACA,SAFD;AAGA,OAdD,EAhCyD,CAgDzD;AACA;AACA;;;AACA,WAAKmE,kBAAL,CAAyBxD,MAAM,CAACG,OAAP,CAAe6C,kBAAxC,EAA4D,WAA5D,EAAyE,UAAE1C,GAAF,EAAOC,IAAP,EAAa0C,aAAb,EAAgC;AACxG,YAAMvC,MAAM,GAAGuC,aAAa,CAACvC,MAA7B;;AAEA,YAAK,MAAI,CAACT,6BAAV,EAA0C;AACzC,cAAM4D,oBAAmB,GAAGZ,aAAa,CAACE,MAAd,CAAqBC,aAArB,CAAoC,MAAI,CAACnD,6BAAzC,CAA5B;;AAEA,cAAK4D,oBAAL,EAA2B;AAC1B;AACAnD,YAAAA,MAAM,CAACI,WAAP,CAAoBrB,4BAA4B,CAACqE,GAA7B,CAAkCC,wBAAlC,CAApB,EAAkFF,oBAAlF;AAEA,YAAA,MAAI,CAAC5D,6BAAL,GAAqC,IAArC;AACA;AACD;;AAED,YAAMsC,oBAAoB,GAAGhC,IAAI,CAAC8B,SAAL,CAAeG,kBAAf,EAA7B;;AAEA,YAAK,CAACD,oBAAN,EAA6B;AAC5B;AACA;;AAED,YAAMsB,mBAAmB,GAAGZ,aAAa,CAACE,MAAd,CAAqBC,aAArB,CAAoCb,oBAApC,CAA5B;;AAEA,YAAK,CAACvD,kBAAkB,CAAE6E,mBAAF,EAAuBtB,oBAAvB,EAA6CG,MAA7C,CAAxB,EAAgF;AAC/E;AACA;;AAED,YAAMJ,2BAA2B,GAAGlD,8BAA8B,CAAEmB,IAAI,CAAC8B,SAAP,CAAlE;;AAEA,YAAK,CAACC,2BAAN,EAAoC;AACnC;AACA;;AAED5B,QAAAA,MAAM,CAACK,QAAP,CAAiBgD,wBAAwB,CAAEzB,2BAAF,CAAzC,EAA0EuB,mBAA1E,EAhCwG,CAkCxG;AACA;;AACA,QAAA,MAAI,CAAC5D,6BAAL,GAAqCsC,oBAArC;AACA,OArCD;;AAuCA,WAAKiB,kBAAL,CAAyBxD,MAAM,CAACgE,EAAP,CAAUC,YAAnC,EAAiD,kBAAjD,EAAqE,UAAE3D,GAAF,EAAO4D,IAAP,EAAaC,SAAb,EAA4B;AAChG,YAAK,CAACA,SAAN,EAAkB;AACjBnE,UAAAA,MAAM,CAACgB,KAAP,CAAaP,MAAb,CAAqB,UAAAC,MAAM,EAAI;AAC9BA,YAAAA,MAAM,CAACO,wBAAP,CAAiC5B,+BAAjC;AACA,WAFD;AAGA;AACD,OAND;;AAQA,eAAS0E,wBAAT,CAAmCrC,QAAnC,EAA8C;AAC7C,+DAAiDA,QAAjD;AACA;AACD;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACC,8BAAsBpB,GAAtB,EAA2BmD,YAA3B,EAA0C;AACzC,UAAMzD,MAAM,GAAG,KAAKA,MAApB;AACA,UAAMgB,KAAK,GAAGhB,MAAM,CAACgB,KAArB;AACA,UAAMoB,cAAc,GAAGpB,KAAK,CAACL,QAAN,CAAe0B,SAAtC;AACA,UAAMK,MAAM,GAAG1B,KAAK,CAAC0B,MAArB;AACA,UAAMxC,WAAW,GAAGF,MAAM,CAACG,OAAP,CAAeC,IAAnC;AAEA,UAAMgE,OAAO,GAAGX,YAAY,CAACW,OAA7B;AACA,UAAMC,SAAS,GAAGvF,qBAAqB,CAAEsF,OAAF,EAAWpE,MAAM,CAAC4C,MAAP,CAAc0B,wBAAzB,CAAvC;AACA,UAAMT,mBAAmB,GAAG3D,WAAW,CAACS,QAAZ,CAAqB0B,SAArB,CAA+BG,kBAA/B,EAA5B;AACA,UAAMD,oBAAoB,GAAGvC,MAAM,CAACG,OAAP,CAAegD,MAAf,CAAsBoB,cAAtB,CAAsCV,mBAAtC,CAA7B;AACA,UAAIW,2BAAJ,CAXyC,CAazC;;AACA,UAAKxF,kBAAkB,CAAE6E,mBAAF,EAAuBtB,oBAAvB,EAA6CG,MAA7C,CAAvB,EAA+E;AAC9E8B,QAAAA,2BAA2B,GAAG,KAAKC,oCAAL,CAA2CJ,SAA3C,CAA9B;AACA,OAFD,CAGA;AACA;AAJA,WAKK,IAAKjC,cAAc,CAACsC,WAApB,EAAkC;AACtCF,UAAAA,2BAA2B,GAAG,KAAKG,8CAAL,CAAqDN,SAArD,CAA9B;AACA;;AAED,UAAKG,2BAAL,EAAmC;AAClCf,QAAAA,YAAY,CAACmB,cAAb;AACAtE,QAAAA,GAAG,CAACuE,IAAJ;AACA;AACD;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACC,8CAAsCR,SAAtC,EAAkD;AACjD,UAAMrE,MAAM,GAAG,KAAKA,MAApB;AACA,UAAMgB,KAAK,GAAGhB,MAAM,CAACgB,KAArB;AACA,UAAMoB,cAAc,GAAGpB,KAAK,CAACL,QAAN,CAAe0B,SAAtC;AACA,UAAMC,2BAA2B,GAAGlD,8BAA8B,CAAEgD,cAAF,CAAlE;AAEA,aAAOpB,KAAK,CAACP,MAAN,CAAc,UAAAC,MAAM,EAAI;AAC9B;AACA,YAAK4B,2BAAL,EAAmC;AAClC,cAAMwC,eAAe,GAAGxC,2BAA2B,MAAO+B,SAAS,GAAG,OAAH,GAAa,QAA7B,CAAnD,CADkC,CAGlC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,cAAK,CAACS,eAAN,EAAwB;AACvBpE,YAAAA,MAAM,CAACO,wBAAP,CAAiC5B,+BAAjC;AAEA,mBAAO,IAAP;AACA;AACD,SAhBD,CAiBA;AACA;AAlBA,aAmBK;AACJqB,YAAAA,MAAM,CAACqE,qBAAP,CAA8B1F,+BAA9B,EAA+DgF,SAAS,GAAG,OAAH,GAAa,QAArF;AAEA,mBAAO,IAAP;AACA;;AAED,eAAO,KAAP;AACA,OA5BM,CAAP;AA6BA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACC,wDAAgDA,SAAhD,EAA4D;AAC3D,UAAMrE,MAAM,GAAG,KAAKA,MAApB;AACA,UAAMgB,KAAK,GAAGhB,MAAM,CAACgB,KAArB;AACA,UAAM0B,MAAM,GAAG1B,KAAK,CAAC0B,MAArB;AACA,UAAMsC,YAAY,GAAGhF,MAAM,CAACiF,OAAP,CAAeC,GAAf,CAAoB,QAApB,CAArB,CAJ2D,CAM3D;;AACA,UAAMC,2BAA2B,GAAGH,YAAY,CAACI,gCAAb,CAA+Cf,SAA/C,CAApC;;AACA,UAAMgB,0BAA0B,GAAGrF,MAAM,CAACG,OAAP,CAAegD,MAAf,CAAsBC,aAAtB,CAAqC+B,2BAArC,CAAnC;;AAEA,UAAKnG,kBAAkB,CAAEqG,0BAAF,EAA8BF,2BAA9B,EAA2DzC,MAA3D,CAAvB,EAA6F;AAC5F1B,QAAAA,KAAK,CAACP,MAAN,CAAc,UAAAC,MAAM,EAAI;AACvBsE,UAAAA,YAAY,CAACM,wBAAb,CAAuCH,2BAAvC;;AACAzE,UAAAA,MAAM,CAACqE,qBAAP,CAA8B1F,+BAA9B,EAA+DgF,SAAS,GAAG,QAAH,GAAc,OAAtF;AACA,SAHD,EAD4F,CAM5F;AACA;;AACA,eAAO,IAAP;AACA;;AAED,aAAO,KAAP;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;;;;WACC,mDAA0C;AAAA;;AACzC,UAAMrE,MAAM,GAAG,KAAKA,MAApB;AACA,UAAME,WAAW,GAAGF,MAAM,CAACG,OAAP,CAAeC,IAAnC;;AAEA,WAAKoD,kBAAL,CAAyBtD,WAAW,CAACS,QAArC,EAA+C,WAA/C,EAA4D,UAAEL,GAAF,EAAOmD,YAAP,EAAyB;AACpF,YAAM8B,MAAM,GAAGtG,6BAA6B,CAAEwE,YAAY,CAAC+B,SAAf,CAA5C;;AAEA,YAAK,CAACD,MAAN,EAAe;AACd;AACA;;AAED,YAAME,cAAc,GAAGvG,2BAA2B,CAAEqG,MAAF,CAAlD;AACA,YAAMG,iBAAiB,GAAGvG,2BAA2B,CAAEoG,MAAF,EAAUrF,WAAW,CAACyF,YAAtB,CAArD;AACA,YAAMlE,kBAAkB,GAAGzB,MAAM,CAACG,OAAP,CAAegD,MAAf,CAAsBoB,cAAtB,CAAsCmB,iBAAtC,CAA3B;;AAEA,QAAA,MAAI,CAACjD,gBAAL,CAAuBhB,kBAAvB,EAA2CgE,cAA3C;;AAEAhC,QAAAA,YAAY,CAACmB,cAAb;AACAtE,QAAAA,GAAG,CAACuE,IAAJ;AACA,OAfD;AAgBA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACC,qDAA4C;AAAA;;AAC3C,UAAM7E,MAAM,GAAG,KAAKA,MAApB;AACA,UAAMqC,SAAS,GAAGrC,MAAM,CAACgB,KAAP,CAAaL,QAAb,CAAsB0B,SAAxC;AACA,UAAMnC,WAAW,GAAGF,MAAM,CAACG,OAAP,CAAeC,IAAnC;;AAEA,WAAKoD,kBAAL,CAAyBtD,WAAW,CAACS,QAArC,EAA+C,OAA/C,EAAwD,UAAEL,GAAF,EAAOmD,YAAP,EAAyB;AAChF;AACA;AACA,YAAKnD,GAAG,CAACsF,UAAJ,IAAkB,UAAvB,EAAoC;AACnC;AACA;;AAED,YAAMrD,oBAAoB,GAAGF,SAAS,CAACG,kBAAV,EAA7B;AACA,YAAMqB,mBAAmB,GAAG7D,MAAM,CAACG,OAAP,CAAegD,MAAf,CAAsBC,aAAtB,CAAqCb,oBAArC,CAA5B;AAEA,YAAMG,MAAM,GAAG1C,MAAM,CAACgB,KAAP,CAAa0B,MAA5B;AACA,YAAImD,UAAJ,CAXgF,CAahF;AACA;;AACA,YAAK,MAAI,CAACC,4CAAL,EAAL,EAA2D;AAC1DD,UAAAA,UAAU,GAAG,IAAb;AACA,SAFD,CAGA;AACA;AAJA,aAKK,IAAK7G,kBAAkB,CAAE6E,mBAAF,EAAuBtB,oBAAvB,EAA6CG,MAA7C,CAAvB,EAA+E;AACnF,YAAA,MAAI,CAACD,gBAAL,CAAuBF,oBAAvB,EAA6CkB,YAAY,CAACsC,MAAb,GAAsB,QAAtB,GAAiC,OAA9E;;AAEAF,YAAAA,UAAU,GAAG,IAAb;AACA;;AAED,YAAKA,UAAL,EAAkB;AACjBpC,UAAAA,YAAY,CAACmB,cAAb;AACAtE,UAAAA,GAAG,CAACuE,IAAJ;AACA;AACD,OA9BD,EA8BG;AAAElB,QAAAA,OAAO,EAAEpE;AAAX,OA9BH;AA+BA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACC,uDAA8C;AAAA;;AAC7C,UAAMS,MAAM,GAAG,KAAKA,MAApB;AACA,UAAME,WAAW,GAAGF,MAAM,CAACG,OAAP,CAAeC,IAAnC;AACA,UAAM4F,4BAA4B,GAAG,CACpCjH,QAAQ,CAACkH,KAD2B,EAEpClH,QAAQ,CAACmH,MAF2B,EAGpCnH,QAAQ,CAACoH,SAH2B,CAArC,CAH6C,CAS7C;;AACA,WAAK3C,kBAAL,CAAyBtD,WAAW,CAACS,QAArC,EAA+C,SAA/C,EAA0D,UAAEL,GAAF,EAAOmD,YAAP,EAAyB;AAClF;AACA,YAAK,CAACuC,4BAA4B,CAACI,QAA7B,CAAuC3C,YAAY,CAACW,OAApD,CAAD,IAAkE,CAAC9E,oBAAoB,CAAEmE,YAAF,CAA5F,EAA+G;AAC9G,UAAA,MAAI,CAACqC,4CAAL;AACA;AACD,OALD,EAKG;AAAEvC,QAAAA,QAAQ,EAAE;AAAZ,OALH;AAMA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACC,oCAA2B;AAC1B,UAAMvD,MAAM,GAAG,KAAKA,MAApB;AACA,UAAME,WAAW,GAAGF,MAAM,CAACG,OAAP,CAAeC,IAAnC;AACA,UAAMY,KAAK,GAAGhB,MAAM,CAACgB,KAArB;AACA,UAAM0B,MAAM,GAAG1B,KAAK,CAAC0B,MAArB;;AAEA,WAAKc,kBAAL,CAAyBtD,WAAW,CAACS,QAArC,EAA+C,QAA/C,EAAyD,UAAEL,GAAF,EAAOmD,YAAP,EAAyB;AACjF;AACA;AACA,YAAKnD,GAAG,CAACsF,UAAJ,IAAkB,UAAvB,EAAoC;AACnC;AACA;;AAED,YAAMtD,2BAA2B,GAAGlD,8BAA8B,CAAE4B,KAAK,CAACL,QAAN,CAAe0B,SAAjB,CAAlE,CAPiF,CASjF;;AACA,YAAK,CAACC,2BAAN,EAAoC;AACnC;AACA;;AAED,YAAM+D,SAAS,GAAG5C,YAAY,CAAC4C,SAA/B;AACA,YAAMC,mBAAmB,GAAGtF,KAAK,CAACL,QAAN,CAAe0B,SAAf,CAAyBG,kBAAzB,EAA5B;AAEA,YAAM+D,iBAAiB,GAAGjE,2BAA2B,KAAK,QAA1D;AACA,YAAMkE,eAAe,GAAGH,SAAS,IAAI,SAArC;AACA,YAAMI,wBAAwB,GAAGF,iBAAiB,KAAKC,eAAvD;;AAEA,YAAKC,wBAAL,EAAgC;AAC/BzG,UAAAA,MAAM,CAAC2B,OAAP,CAAgB,QAAhB,EAA0B;AACzBU,YAAAA,SAAS,EAAErB,KAAK,CAAC0F,eAAN,CAAuBJ,mBAAvB,EAA4C,IAA5C;AADc,WAA1B;AAGA,SAJD,MAIO;AACN,cAAMK,KAAK,GAAGjE,MAAM,CAACkE,wBAAP,CACb5F,KAAK,CAACY,gBAAN,CAAwB0E,mBAAxB,EAA6ChE,2BAA7C,CADa,EAEb+D,SAFa,CAAd,CADM,CAMN;;AACA,cAAKM,KAAL,EAAa;AACZ;AACA,gBAAK,CAACA,KAAK,CAACjC,WAAZ,EAA0B;AACzB1D,cAAAA,KAAK,CAACP,MAAN,CAAc,UAAAC,MAAM,EAAI;AACvBA,gBAAAA,MAAM,CAACmG,YAAP,CAAqBF,KAArB;AACA3G,gBAAAA,MAAM,CAAC2B,OAAP,CAAgB6E,eAAe,GAAG,eAAH,GAAqB,QAApD;AACA,eAHD;AAIA,aALD,MAKO;AACN,kBAAMM,KAAK,GAAG9F,KAAK,CAAC0F,eAAN,CAAuBC,KAAK,CAACI,KAA7B,CAAd;AACA/F,cAAAA,KAAK,CAACgG,eAAN,CAAuBF,KAAvB,EAA8B;AAAET,gBAAAA,SAAS,EAATA;AAAF,eAA9B,EAFM,CAIN;AACA;;AACA,kBAAK,CAACS,KAAK,CAACjF,KAAN,CAAYoF,OAAZ,CAAqBN,KAAK,CAACI,KAA3B,CAAN,EAA2C;AAC1C/F,gBAAAA,KAAK,CAACP,MAAN,CAAc,UAAAC,MAAM,EAAI;AACvBA,kBAAAA,MAAM,CAACmG,YAAP,CAAqBF,KAArB;AACA3G,kBAAAA,MAAM,CAAC2B,OAAP,CAAgB6E,eAAe,GAAG,eAAH,GAAqB,QAApD;AACA,iBAHD;AAIA,eALD,CAMA;AACA;AACA;AARA,mBASK;AACJ,sBAAMU,yBAAyB,GAAGC,8BAA8B,CAAEzE,MAAF,EAAUiE,KAAK,CAACI,KAAN,CAAYK,MAAtB,CAAhE;AAEApG,kBAAAA,KAAK,CAACqG,aAAN,CAAqBrG,KAAK,CAAC0F,eAAN,CAAuBQ,yBAAvB,EAAkD,IAAlD,CAArB,EAA+E;AAC9EI,oBAAAA,kBAAkB,EAAE;AAD0D,mBAA/E;AAGA;AACD;AACD;AACD,SA/DgF,CAiEjF;AACA;;;AACA7D,QAAAA,YAAY,CAACmB,cAAb;AACAtE,QAAAA,GAAG,CAACuE,IAAJ;AACA,OArED,EAqEG;AAAElB,QAAAA,OAAO,EAAEpE;AAAX,OArEH;AAsEA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACC,2CAAkC;AACjC,UAAMS,MAAM,GAAG,KAAKA,MAApB;AACA,UAAMgB,KAAK,GAAG,KAAKhB,MAAL,CAAYgB,KAA1B;AACA,UAAMuG,iBAAiB,GAAGvG,KAAK,CAACL,QAAN,CAAe0B,SAAzC;;AAEA,WAAKmB,kBAAL,CAAyBxD,MAAM,CAACgB,KAAhC,EAAuC,eAAvC,EAAwD,UAAEV,GAAF,QAAoC;AAAA;AAAA,YAA3BkH,OAA2B;AAAA,YAAlBC,UAAkB;;AAC3F,YAAKA,UAAU,IAAI,CAACA,UAAU,CAACC,EAAX,CAAe,mBAAf,CAApB,EAA2D;AAC1D;AACA;;AAED,YAAMpF,2BAA2B,GAAGlD,8BAA8B,CAAEmI,iBAAF,CAAlE;;AAEA,YAAK,CAACjF,2BAAN,EAAoC;AACnC;AACA;;AAEDhC,QAAAA,GAAG,CAACuE,IAAJ;AAEA,eAAO7D,KAAK,CAACP,MAAN,CAAc,UAAAC,MAAM,EAAI;AAC9B,cAAMiH,eAAe,GAAGJ,iBAAiB,CAAC/E,kBAAlB,EAAxB;AACA,cAAMd,QAAQ,GAAGV,KAAK,CAACY,gBAAN,CAAwB+F,eAAxB,EAAyCrF,2BAAzC,CAAjB;AACA,cAAMD,SAAS,GAAG3B,MAAM,CAACgG,eAAP,CAAwBhF,QAAxB,CAAlB;AAEA,cAAMkG,MAAM,GAAG5G,KAAK,CAAC6G,aAAN,CAAqBL,OAArB,EAA8BnF,SAA9B,CAAf;AAEA3B,UAAAA,MAAM,CAACmG,YAAP,CAAqBxE,SAArB;AAEA,iBAAOuF,MAAP;AACA,SAVM,CAAP;AAWA,OAxBD,EAwBG;AAAErE,QAAAA,QAAQ,EAAE;AAAZ,OAxBH;AAyBA;;;;AAxqBD;AACD;AACA;AACC,mBAAwB;AACvB,aAAO,kBAAP;AACA;AAED;AACD;AACA;;;;SACC,eAAsB;AACrB,aAAO,CAAE3E,KAAF,EAASC,MAAT,CAAP;AACA;;;;EAb4CH,M,GA4qB9C;AACA;AACA;AACA;AACA;;;SAhrBqBqB,gB;;AAirBrB,SAASuD,kBAAT,CAA6BwE,UAA7B,EAAyCjF,YAAzC,EAAuD6C,iBAAvD,EAA2E;AAC1E,MAAMqC,iBAAiB,GAAGD,UAAU,CAACE,eAAX,CAA4B,KAA5B,EAAmC;AAC5DC,IAAAA,KAAK,EAAE;AADqD,GAAnC,EAEvB,UAAUC,WAAV,EAAwB;AAC1B,QAAMC,iBAAiB,GAAG,KAAKC,YAAL,CAAmBF,WAAnB,CAA1B;AAEAG,IAAAA,aAAa,CAAEF,iBAAF,EAAqBtF,YAArB,CAAb;AACAyF,IAAAA,eAAe,CAAEH,iBAAF,CAAf;AAEA,WAAOA,iBAAP;AACA,GATyB,CAA1B,CAD0E,CAY1E;;AACAL,EAAAA,UAAU,CAACS,MAAX,CAAmBT,UAAU,CAAClG,gBAAX,CAA6B8D,iBAA7B,EAAgD,KAAhD,CAAnB,EAA4EqC,iBAA5E;AACA,C,CAED;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASM,aAAT,CAAwBF,iBAAxB,EAA2CtF,YAA3C,EAA0D;AAAA,8CACjCpD,4BADiC;AAAA;;AAAA;AACzD,2DAAuD;AAAA,UAA3CiC,QAA2C;AACtD,UAAM8G,cAAc,GAAG,IAAI7J,QAAJ,CAAc;AACpC8J,QAAAA,GAAG,EAAE,KAD+B;AAEpCC,QAAAA,UAAU,EAAE;AACXT,UAAAA,KAAK,EAAE,CACN,IADM,EAEN,gCAFM,2CAG6BvG,QAH7B,EADI;AAMXiH,UAAAA,KAAK,EAAE9F,YAAY,CAAEnB,QAAF;AANR,SAFwB;AAUpCkH,QAAAA,QAAQ,EAAE,CACTT,iBAAiB,CAACU,aAAlB,CAAgCC,UAAhC,CAA4CpJ,yBAA5C,EAAuE,IAAvE,CADS;AAV0B,OAAd,CAAvB;AAeAyI,MAAAA,iBAAiB,CAACY,WAAlB,CAA+BP,cAAc,CAACQ,MAAf,EAA/B;AACA;AAlBwD;AAAA;AAAA;AAAA;AAAA;AAmBzD,C,CAED;;;AACA,SAASV,eAAT,CAA0BH,iBAA1B,EAA8C;AAC7C,MAAMc,aAAa,GAAG,IAAItK,QAAJ,CAAc;AACnC8J,IAAAA,GAAG,EAAE,KAD8B;AAEnCC,IAAAA,UAAU,EAAE;AACXT,MAAAA,KAAK,EAAE,CACN,IADM,EAEN,oCAFM;AADI;AAFuB,GAAd,CAAtB;AAUAE,EAAAA,iBAAiB,CAACY,WAAlB,CAA+BE,aAAa,CAACD,MAAd,EAA/B;AACA,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS7B,8BAAT,CAAyCzE,MAAzC,EAAiDwG,OAAjD,EAA2D;AAC1D,MAAIC,oBAAoB,GAAGD,OAA3B;;AAD0D,8CAGlCA,OAAO,CAACE,YAAR,CAAsB;AAAEC,IAAAA,WAAW,EAAE;AAAf,GAAtB,CAHkC;AAAA;;AAAA;AAG1D,2DAAwE;AAAA,UAA5DC,QAA4D;;AACvE,UAAKA,QAAQ,CAACC,UAAT,GAAsB,CAAtB,IAA2B7G,MAAM,CAAC8G,OAAP,CAAgBF,QAAhB,CAAhC,EAA6D;AAC5D;AACA;;AAEDH,MAAAA,oBAAoB,GAAGG,QAAvB;AACA;AATyD;AAAA;AAAA;AAAA;AAAA;;AAW1D,SAAOH,oBAAP;AACA","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/* global DOMParser */\n\n/**\n * @module widget/widgettypearound\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport Template from '@ckeditor/ckeditor5-ui/src/template';\nimport Enter from '@ckeditor/ckeditor5-enter/src/enter';\nimport Delete from '@ckeditor/ckeditor5-typing/src/delete';\nimport {\n\tisForwardArrowKeyCode,\n\tkeyCodes\n} from '@ckeditor/ckeditor5-utils/src/keyboard';\n\nimport {\n\tisTypeAroundWidget,\n\tgetClosestTypeAroundDomButton,\n\tgetTypeAroundButtonPosition,\n\tgetClosestWidgetViewElement,\n\tgetTypeAroundFakeCaretPosition,\n\tTYPE_AROUND_SELECTION_ATTRIBUTE\n} from './utils';\n\nimport {\n\tisNonTypingKeystroke\n} from '@ckeditor/ckeditor5-typing/src/utils/injectunsafekeystrokeshandling';\n\nimport { isWidget } from '../utils';\n\nimport returnIcon from '../../theme/icons/return-arrow.svg';\nimport '../../theme/widgettypearound.css';\n\nconst POSSIBLE_INSERTION_POSITIONS = [ 'before', 'after' ];\n\n// Do the SVG parsing once and then clone the result <svg> DOM element for each new button.\nconst RETURN_ARROW_ICON_ELEMENT = new DOMParser().parseFromString( returnIcon, 'image/svg+xml' ).firstChild;\n\nconst PLUGIN_DISABLED_EDITING_ROOT_CLASS = 'ck-widget__type-around_disabled';\n\n/**\n * A plugin that allows users to type around widgets where normally it is impossible to place the caret due\n * to limitations of web browsers. These \"tight spots\" occur, for instance, before (or after) a widget being\n * the first (or last) child of its parent or between two block widgets.\n *\n * This plugin extends the {@link module:widget/widget~Widget `Widget`} plugin and injects the user interface\n * with two buttons into each widget instance in the editor. Each of the buttons can be clicked by the\n * user if the widget is next to the \"tight spot\". Once clicked, a paragraph is created with the selection anchored\n * in it so that users can type (or insert content, paste, etc.) straight away.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class WidgetTypeAround extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'WidgetTypeAround';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ Enter, Delete ];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( editor ) {\n\t\tsuper( editor );\n\n\t\t/**\n\t\t * A reference to the model widget element that has the fake caret active\n\t\t * on either side of it. It is later used to remove CSS classes associated with the fake caret\n\t\t * when the widget no longer needs it.\n\t\t *\n\t\t * @private\n\t\t * @member {module:engine/model/element~Element|null}\n\t\t */\n\t\tthis._currentFakeCaretModelElement = null;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\t\tconst editingView = editor.editing.view;\n\n\t\t// Set a CSS class on the view editing root when the plugin is disabled so all the buttons\n\t\t// and lines visually disappear. All the interactions are disabled in individual plugin methods.\n\t\tthis.on( 'change:isEnabled', ( evt, data, isEnabled ) => {\n\t\t\teditingView.change( writer => {\n\t\t\t\tfor ( const root of editingView.document.roots ) {\n\t\t\t\t\tif ( isEnabled ) {\n\t\t\t\t\t\twriter.removeClass( PLUGIN_DISABLED_EDITING_ROOT_CLASS, root );\n\t\t\t\t\t} else {\n\t\t\t\t\t\twriter.addClass( PLUGIN_DISABLED_EDITING_ROOT_CLASS, root );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\tif ( !isEnabled ) {\n\t\t\t\teditor.model.change( writer => {\n\t\t\t\t\twriter.removeSelectionAttribute( TYPE_AROUND_SELECTION_ATTRIBUTE );\n\t\t\t\t} );\n\t\t\t}\n\t\t} );\n\n\t\tthis._enableTypeAroundUIInjection();\n\t\tthis._enableInsertingParagraphsOnButtonClick();\n\t\tthis._enableInsertingParagraphsOnEnterKeypress();\n\t\tthis._enableInsertingParagraphsOnTypingKeystroke();\n\t\tthis._enableTypeAroundFakeCaretActivationUsingKeyboardArrows();\n\t\tthis._enableDeleteIntegration();\n\t\tthis._enableInsertContentIntegration();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdestroy() {\n\t\tthis._currentFakeCaretModelElement = null;\n\t}\n\n\t/**\n\t * Inserts a new paragraph next to a widget element with the selection anchored in it.\n\t *\n\t * **Note**: This method is heavily user-oriented and will both focus the editing view and scroll\n\t * the viewport to the selection in the inserted paragraph.\n\t *\n\t * @protected\n\t * @param {module:engine/model/element~Element} widgetModelElement The model widget element next to which a paragraph is inserted.\n\t * @param {'before'|'after'} position The position where the paragraph is inserted. Either `'before'` or `'after'` the widget.\n\t */\n\t_insertParagraph( widgetModelElement, position ) {\n\t\tconst editor = this.editor;\n\t\tconst editingView = editor.editing.view;\n\n\t\teditor.execute( 'insertParagraph', {\n\t\t\tposition: editor.model.createPositionAt( widgetModelElement, position )\n\t\t} );\n\n\t\teditingView.focus();\n\t\teditingView.scrollToTheSelection();\n\t}\n\n\t/**\n\t * A wrapper for the {@link module:utils/emittermixin~EmitterMixin#listenTo} method that executes the callbacks only\n\t * when the plugin {@link #isEnabled is enabled}.\n\t *\n\t * @private\n\t * @param {module:utils/emittermixin~Emitter} emitter The object that fires the event.\n\t * @param {String} event The name of the event.\n\t * @param {Function} callback The function to be called on event.\n\t * @param {Object} [options={}] Additional options.\n\t * @param {module:utils/priorities~PriorityString|Number} [options.priority='normal'] The priority of this event callback. The higher\n\t * the priority value the sooner the callback will be fired. Events having the same priority are called in the\n\t * order they were added.\n\t */\n\t_listenToIfEnabled( emitter, event, callback, options ) {\n\t\tthis.listenTo( emitter, event, ( ...args ) => {\n\t\t\t// Do not respond if the plugin is disabled.\n\t\t\tif ( this.isEnabled ) {\n\t\t\t\tcallback( ...args );\n\t\t\t}\n\t\t}, options );\n\t}\n\n\t/**\n\t * Similar to {@link #_insertParagraph}, this method inserts a paragraph except that it\n\t * does not expect a position. Instead, it performs the insertion next to a selected widget\n\t * according to the `widget-type-around` model selection attribute value (fake caret position).\n\t *\n\t * Because this method requires the `widget-type-around` attribute to be set,\n\t * the insertion can only happen when the widget's fake caret is active (e.g. activated\n\t * using the keyboard).\n\t *\n\t * @private\n\t * @returns {Boolean} Returns `true` when the paragraph was inserted (the attribute was present) and `false` otherwise.\n\t */\n\t_insertParagraphAccordingToFakeCaretPosition() {\n\t\tconst editor = this.editor;\n\t\tconst model = editor.model;\n\t\tconst modelSelection = model.document.selection;\n\t\tconst typeAroundFakeCaretPosition = getTypeAroundFakeCaretPosition( modelSelection );\n\n\t\tif ( !typeAroundFakeCaretPosition ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst selectedModelElement = modelSelection.getSelectedElement();\n\n\t\tthis._insertParagraph( selectedModelElement, typeAroundFakeCaretPosition );\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Creates a listener in the editing conversion pipeline that injects the widget type around\n\t * UI into every single widget instance created in the editor.\n\t *\n\t * The UI is delivered as a {@link module:engine/view/uielement~UIElement}\n\t * wrapper which renders DOM buttons that users can use to insert paragraphs.\n\t *\n\t * @private\n\t */\n\t_enableTypeAroundUIInjection() {\n\t\tconst editor = this.editor;\n\t\tconst schema = editor.model.schema;\n\t\tconst t = editor.locale.t;\n\t\tconst buttonTitles = {\n\t\t\tbefore: t( 'Insert paragraph before block' ),\n\t\t\tafter: t( 'Insert paragraph after block' )\n\t\t};\n\n\t\teditor.editing.downcastDispatcher.on( 'insert', ( evt, data, conversionApi ) => {\n\t\t\tconst viewElement = conversionApi.mapper.toViewElement( data.item );\n\n\t\t\t// Filter out non-widgets and inline widgets.\n\t\t\tif ( isTypeAroundWidget( viewElement, data.item, schema ) ) {\n\t\t\t\tinjectUIIntoWidget( conversionApi.writer, buttonTitles, viewElement );\n\t\t\t}\n\t\t}, { priority: 'low' } );\n\t}\n\n\t/**\n\t * Brings support for the fake caret that appears when either:\n\t *\n\t * * the selection moves to a widget from a position next to it using arrow keys,\n\t * * the arrow key is pressed when the widget is already selected.\n\t *\n\t * The fake caret lets the user know that they can start typing or just press\n\t * <kbd>Enter</kbd> to insert a paragraph at the position next to a widget as suggested by the fake caret.\n\t *\n\t * The fake caret disappears when the user changes the selection or the editor\n\t * gets blurred.\n\t *\n\t * The whole idea is as follows:\n\t *\n\t * 1. A user does one of the 2 scenarios described at the beginning.\n\t * 2. The \"keydown\" listener is executed and the decision is made whether to show or hide the fake caret.\n\t * 3. If it should show up, the `widget-type-around` model selection attribute is set indicating\n\t *    on which side of the widget it should appear.\n\t * 4. The selection dispatcher reacts to the selection attribute and sets CSS classes responsible for the\n\t *    fake caret on the view widget.\n\t * 5. If the fake caret should disappear, the selection attribute is removed and the dispatcher\n\t *    does the CSS class clean-up in the view.\n\t * 6. Additionally, `change:range` and `FocusTracker#isFocused` listeners also remove the selection\n\t *    attribute (the former also removes widget CSS classes).\n\t *\n\t * @private\n\t */\n\t_enableTypeAroundFakeCaretActivationUsingKeyboardArrows() {\n\t\tconst editor = this.editor;\n\t\tconst model = editor.model;\n\t\tconst modelSelection = model.document.selection;\n\t\tconst schema = model.schema;\n\t\tconst editingView = editor.editing.view;\n\n\t\t// This is the main listener responsible for the fake caret.\n\t\t// Note: The priority must precede the default Widget class keydown handler (\"high\").\n\t\tthis._listenToIfEnabled( editingView.document, 'arrowKey', ( evt, domEventData ) => {\n\t\t\tthis._handleArrowKeyPress( evt, domEventData );\n\t\t}, { context: [ isWidget, '$text' ], priority: 'high' } );\n\n\t\t// This listener makes sure the widget type around selection attribute will be gone from the model\n\t\t// selection as soon as the model range changes. This attribute only makes sense when a widget is selected\n\t\t// (and the \"fake horizontal caret\" is visible) so whenever the range changes (e.g. selection moved somewhere else),\n\t\t// let's get rid of the attribute so that the selection downcast dispatcher isn't even bothered.\n\t\tthis._listenToIfEnabled( modelSelection, 'change:range', ( evt, data ) => {\n\t\t\t// Do not reset the selection attribute when the change was indirect.\n\t\t\tif ( !data.directChange ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Get rid of the widget type around attribute of the selection on every change:range.\n\t\t\t// If the range changes, it means for sure, the user is no longer in the active (\"fake horizontal caret\") mode.\n\t\t\teditor.model.change( writer => {\n\t\t\t\twriter.removeSelectionAttribute( TYPE_AROUND_SELECTION_ATTRIBUTE );\n\t\t\t} );\n\t\t} );\n\n\t\t// Get rid of the widget type around attribute of the selection on every document change\n\t\t// that makes widget not selected any more (i.e. widget was removed).\n\t\tthis._listenToIfEnabled( model.document, 'change:data', () => {\n\t\t\tconst selectedModelElement = modelSelection.getSelectedElement();\n\n\t\t\tif ( selectedModelElement ) {\n\t\t\t\tconst selectedViewElement = editor.editing.mapper.toViewElement( selectedModelElement );\n\n\t\t\t\tif ( isTypeAroundWidget( selectedViewElement, selectedModelElement, schema ) ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\teditor.model.change( writer => {\n\t\t\t\twriter.removeSelectionAttribute( TYPE_AROUND_SELECTION_ATTRIBUTE );\n\t\t\t} );\n\t\t} );\n\n\t\t// React to changes of the model selection attribute made by the arrow keys listener.\n\t\t// If the block widget is selected and the attribute changes, downcast the attribute to special\n\t\t// CSS classes associated with the active (\"fake horizontal caret\") mode of the widget.\n\t\tthis._listenToIfEnabled( editor.editing.downcastDispatcher, 'selection', ( evt, data, conversionApi ) => {\n\t\t\tconst writer = conversionApi.writer;\n\n\t\t\tif ( this._currentFakeCaretModelElement ) {\n\t\t\t\tconst selectedViewElement = conversionApi.mapper.toViewElement( this._currentFakeCaretModelElement );\n\n\t\t\t\tif ( selectedViewElement ) {\n\t\t\t\t\t// Get rid of CSS classes associated with the active (\"fake horizontal caret\") mode from the view widget.\n\t\t\t\t\twriter.removeClass( POSSIBLE_INSERTION_POSITIONS.map( positionToWidgetCssClass ), selectedViewElement );\n\n\t\t\t\t\tthis._currentFakeCaretModelElement = null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst selectedModelElement = data.selection.getSelectedElement();\n\n\t\t\tif ( !selectedModelElement ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst selectedViewElement = conversionApi.mapper.toViewElement( selectedModelElement );\n\n\t\t\tif ( !isTypeAroundWidget( selectedViewElement, selectedModelElement, schema ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst typeAroundFakeCaretPosition = getTypeAroundFakeCaretPosition( data.selection );\n\n\t\t\tif ( !typeAroundFakeCaretPosition ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\twriter.addClass( positionToWidgetCssClass( typeAroundFakeCaretPosition ), selectedViewElement );\n\n\t\t\t// Remember the view widget that got the \"fake-caret\" CSS class. This class should be removed ASAP when the\n\t\t\t// selection changes\n\t\t\tthis._currentFakeCaretModelElement = selectedModelElement;\n\t\t} );\n\n\t\tthis._listenToIfEnabled( editor.ui.focusTracker, 'change:isFocused', ( evt, name, isFocused ) => {\n\t\t\tif ( !isFocused ) {\n\t\t\t\teditor.model.change( writer => {\n\t\t\t\t\twriter.removeSelectionAttribute( TYPE_AROUND_SELECTION_ATTRIBUTE );\n\t\t\t\t} );\n\t\t\t}\n\t\t} );\n\n\t\tfunction positionToWidgetCssClass( position ) {\n\t\t\treturn `ck-widget_type-around_show-fake-caret_${ position }`;\n\t\t}\n\t}\n\n\t/**\n\t * A listener executed on each \"keydown\" in the view document, a part of\n\t * {@link #_enableTypeAroundFakeCaretActivationUsingKeyboardArrows}.\n\t *\n\t * It decides whether the arrow keypress should activate the fake caret or not (also whether it should\n\t * be deactivated).\n\t *\n\t * The fake caret activation is done by setting the `widget-type-around` model selection attribute\n\t * in this listener, and stopping and preventing the event that would normally be handled by the widget\n\t * plugin that is responsible for the regular keyboard navigation near/across all widgets (that\n\t * includes inline widgets, which are ignored by the widget type around plugin).\n\t *\n\t * @private\n\t */\n\t_handleArrowKeyPress( evt, domEventData ) {\n\t\tconst editor = this.editor;\n\t\tconst model = editor.model;\n\t\tconst modelSelection = model.document.selection;\n\t\tconst schema = model.schema;\n\t\tconst editingView = editor.editing.view;\n\n\t\tconst keyCode = domEventData.keyCode;\n\t\tconst isForward = isForwardArrowKeyCode( keyCode, editor.locale.contentLanguageDirection );\n\t\tconst selectedViewElement = editingView.document.selection.getSelectedElement();\n\t\tconst selectedModelElement = editor.editing.mapper.toModelElement( selectedViewElement );\n\t\tlet shouldStopAndPreventDefault;\n\n\t\t// Handle keyboard navigation when a type-around-compatible widget is currently selected.\n\t\tif ( isTypeAroundWidget( selectedViewElement, selectedModelElement, schema ) ) {\n\t\t\tshouldStopAndPreventDefault = this._handleArrowKeyPressOnSelectedWidget( isForward );\n\t\t}\n\t\t// Handle keyboard arrow navigation when the selection is next to a type-around-compatible widget\n\t\t// and the widget is about to be selected.\n\t\telse if ( modelSelection.isCollapsed ) {\n\t\t\tshouldStopAndPreventDefault = this._handleArrowKeyPressWhenSelectionNextToAWidget( isForward );\n\t\t}\n\n\t\tif ( shouldStopAndPreventDefault ) {\n\t\t\tdomEventData.preventDefault();\n\t\t\tevt.stop();\n\t\t}\n\t}\n\n\t/**\n\t * Handles the keyboard navigation on \"keydown\" when a widget is currently selected and activates or deactivates\n\t * the fake caret for that widget, depending on the current value of the `widget-type-around` model\n\t * selection attribute and the direction of the pressed arrow key.\n\t *\n\t * @private\n\t * @param {Boolean} isForward `true` when the pressed arrow key was responsible for the forward model selection movement\n\t * as in {@link module:utils/keyboard~isForwardArrowKeyCode}.\n\t * @returns {Boolean} Returns `true` when the keypress was handled and no other keydown listener of the editor should\n\t * process the event any further. Returns `false` otherwise.\n\t */\n\t_handleArrowKeyPressOnSelectedWidget( isForward ) {\n\t\tconst editor = this.editor;\n\t\tconst model = editor.model;\n\t\tconst modelSelection = model.document.selection;\n\t\tconst typeAroundFakeCaretPosition = getTypeAroundFakeCaretPosition( modelSelection );\n\n\t\treturn model.change( writer => {\n\t\t\t// If the fake caret is displayed...\n\t\t\tif ( typeAroundFakeCaretPosition ) {\n\t\t\t\tconst isLeavingWidget = typeAroundFakeCaretPosition === ( isForward ? 'after' : 'before' );\n\n\t\t\t\t// If the keyboard arrow works against the value of the selection attribute...\n\t\t\t\t// then remove the selection attribute but prevent default DOM actions\n\t\t\t\t// and do not let the Widget plugin listener move the selection. This brings\n\t\t\t\t// the widget back to the state, for instance, like if was selected using the mouse.\n\t\t\t\t//\n\t\t\t\t// **Note**: If leaving the widget when the fake caret is active, then the default\n\t\t\t\t// Widget handler will change the selection and, in turn, this will automatically discard\n\t\t\t\t// the selection attribute.\n\t\t\t\tif ( !isLeavingWidget ) {\n\t\t\t\t\twriter.removeSelectionAttribute( TYPE_AROUND_SELECTION_ATTRIBUTE );\n\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// If the fake caret wasn't displayed, let's set it now according to the direction of the arrow\n\t\t\t// key press. This also means we cannot let the Widget plugin listener move the selection.\n\t\t\telse {\n\t\t\t\twriter.setSelectionAttribute( TYPE_AROUND_SELECTION_ATTRIBUTE, isForward ? 'after' : 'before' );\n\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\treturn false;\n\t\t} );\n\t}\n\n\t/**\n\t * Handles the keyboard navigation on \"keydown\" when **no** widget is selected but the selection is **directly** next\n\t * to one and upon the fake caret should become active for this widget upon arrow keypress\n\t * (AKA entering/selecting the widget).\n\t *\n\t * **Note**: This code mirrors the implementation from the widget plugin but also adds the selection attribute.\n\t * Unfortunately, there is no safe way to let the widget plugin do the selection part first and then just set the\n\t * selection attribute here in the widget type around plugin. This is why this code must duplicate some from the widget plugin.\n\t *\n\t * @private\n\t * @param {Boolean} isForward `true` when the pressed arrow key was responsible for the forward model selection movement\n\t * as in {@link module:utils/keyboard~isForwardArrowKeyCode}.\n\t * @returns {Boolean} Returns `true` when the keypress was handled and no other keydown listener of the editor should\n\t * process the event any further. Returns `false` otherwise.\n\t */\n\t_handleArrowKeyPressWhenSelectionNextToAWidget( isForward ) {\n\t\tconst editor = this.editor;\n\t\tconst model = editor.model;\n\t\tconst schema = model.schema;\n\t\tconst widgetPlugin = editor.plugins.get( 'Widget' );\n\n\t\t// This is the widget the selection is about to be set on.\n\t\tconst modelElementNextToSelection = widgetPlugin._getObjectElementNextToSelection( isForward );\n\t\tconst viewElementNextToSelection = editor.editing.mapper.toViewElement( modelElementNextToSelection );\n\n\t\tif ( isTypeAroundWidget( viewElementNextToSelection, modelElementNextToSelection, schema ) ) {\n\t\t\tmodel.change( writer => {\n\t\t\t\twidgetPlugin._setSelectionOverElement( modelElementNextToSelection );\n\t\t\t\twriter.setSelectionAttribute( TYPE_AROUND_SELECTION_ATTRIBUTE, isForward ? 'before' : 'after' );\n\t\t\t} );\n\n\t\t\t// The change() block above does the same job as the Widget plugin. The event can\n\t\t\t// be safely canceled.\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Registers a `mousedown` listener for the view document which intercepts events\n\t * coming from the widget type around UI, which happens when a user clicks one of the buttons\n\t * that insert a paragraph next to a widget.\n\t *\n\t * @private\n\t */\n\t_enableInsertingParagraphsOnButtonClick() {\n\t\tconst editor = this.editor;\n\t\tconst editingView = editor.editing.view;\n\n\t\tthis._listenToIfEnabled( editingView.document, 'mousedown', ( evt, domEventData ) => {\n\t\t\tconst button = getClosestTypeAroundDomButton( domEventData.domTarget );\n\n\t\t\tif ( !button ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst buttonPosition = getTypeAroundButtonPosition( button );\n\t\t\tconst widgetViewElement = getClosestWidgetViewElement( button, editingView.domConverter );\n\t\t\tconst widgetModelElement = editor.editing.mapper.toModelElement( widgetViewElement );\n\n\t\t\tthis._insertParagraph( widgetModelElement, buttonPosition );\n\n\t\t\tdomEventData.preventDefault();\n\t\t\tevt.stop();\n\t\t} );\n\t}\n\n\t/**\n\t * Creates the <kbd>Enter</kbd> key listener on the view document that allows the user to insert a paragraph\n\t * near the widget when either:\n\t *\n\t * * The fake caret was first activated using the arrow keys,\n\t * * The entire widget is selected in the model.\n\t *\n\t * In the first case, the new paragraph is inserted according to the `widget-type-around` selection\n\t * attribute (see {@link #_handleArrowKeyPress}).\n\t *\n\t * In the second case, the new paragraph is inserted based on whether a soft (<kbd>Shift</kbd>+<kbd>Enter</kbd>) keystroke\n\t * was pressed or not.\n\t *\n\t * @private\n\t */\n\t_enableInsertingParagraphsOnEnterKeypress() {\n\t\tconst editor = this.editor;\n\t\tconst selection = editor.model.document.selection;\n\t\tconst editingView = editor.editing.view;\n\n\t\tthis._listenToIfEnabled( editingView.document, 'enter', ( evt, domEventData ) => {\n\t\t\t// This event could be triggered from inside the widget but we are interested\n\t\t\t// only when the widget is selected itself.\n\t\t\tif ( evt.eventPhase != 'atTarget' ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst selectedModelElement = selection.getSelectedElement();\n\t\t\tconst selectedViewElement = editor.editing.mapper.toViewElement( selectedModelElement );\n\n\t\t\tconst schema = editor.model.schema;\n\t\t\tlet wasHandled;\n\n\t\t\t// First check if the widget is selected and there's a type around selection attribute associated\n\t\t\t// with the fake caret that would tell where to insert a new paragraph.\n\t\t\tif ( this._insertParagraphAccordingToFakeCaretPosition() ) {\n\t\t\t\twasHandled = true;\n\t\t\t}\n\t\t\t// Then, if there is no selection attribute associated with the fake caret, check if the widget\n\t\t\t// simply is selected and create a new paragraph according to the keystroke (Shift+)Enter.\n\t\t\telse if ( isTypeAroundWidget( selectedViewElement, selectedModelElement, schema ) ) {\n\t\t\t\tthis._insertParagraph( selectedModelElement, domEventData.isSoft ? 'before' : 'after' );\n\n\t\t\t\twasHandled = true;\n\t\t\t}\n\n\t\t\tif ( wasHandled ) {\n\t\t\t\tdomEventData.preventDefault();\n\t\t\t\tevt.stop();\n\t\t\t}\n\t\t}, { context: isWidget } );\n\t}\n\n\t/**\n\t * Similar to the {@link #_enableInsertingParagraphsOnEnterKeypress}, it allows the user\n\t * to insert a paragraph next to a widget when the fake caret was activated using arrow\n\t * keys but it responds to typing keystrokes instead of <kbd>Enter</kbd>.\n\t *\n\t * \"Typing keystrokes\" are keystrokes that insert new content into the document,\n\t * for instance, letters (\"a\") or numbers (\"4\"). The \"keydown\" listener enabled by this method\n\t * will insert a new paragraph according to the `widget-type-around` model selection attribute\n\t * as the user simply starts typing, which creates the impression that the fake caret\n\t * behaves like a real one rendered by the browser (AKA your text appears where the caret was).\n\t *\n\t * **Note**: At the moment this listener creates 2 undo steps: one for the `insertParagraph` command\n\t * and another one for actual typing. It is not a disaster but this may need to be fixed\n\t * sooner or later.\n\t *\n\t * Learn more in {@link module:typing/utils/injectunsafekeystrokeshandling}.\n\t *\n\t * @private\n\t */\n\t_enableInsertingParagraphsOnTypingKeystroke() {\n\t\tconst editor = this.editor;\n\t\tconst editingView = editor.editing.view;\n\t\tconst keyCodesHandledSomewhereElse = [\n\t\t\tkeyCodes.enter,\n\t\t\tkeyCodes.delete,\n\t\t\tkeyCodes.backspace\n\t\t];\n\n\t\t// Note: The priority must precede the default observers.\n\t\tthis._listenToIfEnabled( editingView.document, 'keydown', ( evt, domEventData ) => {\n\t\t\t// Don't handle enter/backspace/delete here. They are handled in dedicated listeners.\n\t\t\tif ( !keyCodesHandledSomewhereElse.includes( domEventData.keyCode ) && !isNonTypingKeystroke( domEventData ) ) {\n\t\t\t\tthis._insertParagraphAccordingToFakeCaretPosition();\n\t\t\t}\n\t\t}, { priority: 'high' } );\n\t}\n\n\t/**\n\t * It creates a \"delete\" event listener on the view document to handle cases when the <kbd>Delete</kbd> or <kbd>Backspace</kbd>\n\t * is pressed and the fake caret is currently active.\n\t *\n\t * The fake caret should create an illusion of a real browser caret so that when it appears before or after\n\t * a widget, pressing <kbd>Delete</kbd> or <kbd>Backspace</kbd> should remove a widget or delete the content\n\t * before or after a widget (depending on the content surrounding the widget).\n\t *\n\t * @private\n\t */\n\t_enableDeleteIntegration() {\n\t\tconst editor = this.editor;\n\t\tconst editingView = editor.editing.view;\n\t\tconst model = editor.model;\n\t\tconst schema = model.schema;\n\n\t\tthis._listenToIfEnabled( editingView.document, 'delete', ( evt, domEventData ) => {\n\t\t\t// This event could be triggered from inside the widget but we are interested\n\t\t\t// only when the widget is selected itself.\n\t\t\tif ( evt.eventPhase != 'atTarget' ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst typeAroundFakeCaretPosition = getTypeAroundFakeCaretPosition( model.document.selection );\n\n\t\t\t// This listener handles only these cases when the fake caret is active.\n\t\t\tif ( !typeAroundFakeCaretPosition ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst direction = domEventData.direction;\n\t\t\tconst selectedModelWidget = model.document.selection.getSelectedElement();\n\n\t\t\tconst isFakeCaretBefore = typeAroundFakeCaretPosition === 'before';\n\t\t\tconst isDeleteForward = direction == 'forward';\n\t\t\tconst shouldDeleteEntireWidget = isFakeCaretBefore === isDeleteForward;\n\n\t\t\tif ( shouldDeleteEntireWidget ) {\n\t\t\t\teditor.execute( 'delete', {\n\t\t\t\t\tselection: model.createSelection( selectedModelWidget, 'on' )\n\t\t\t\t} );\n\t\t\t} else {\n\t\t\t\tconst range = schema.getNearestSelectionRange(\n\t\t\t\t\tmodel.createPositionAt( selectedModelWidget, typeAroundFakeCaretPosition ),\n\t\t\t\t\tdirection\n\t\t\t\t);\n\n\t\t\t\t// If there is somewhere to move selection to, then there will be something to delete.\n\t\t\t\tif ( range ) {\n\t\t\t\t\t// If the range is NOT collapsed, then we know that the range contains an object (see getNearestSelectionRange() docs).\n\t\t\t\t\tif ( !range.isCollapsed ) {\n\t\t\t\t\t\tmodel.change( writer => {\n\t\t\t\t\t\t\twriter.setSelection( range );\n\t\t\t\t\t\t\teditor.execute( isDeleteForward ? 'deleteForward' : 'delete' );\n\t\t\t\t\t\t} );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst probe = model.createSelection( range.start );\n\t\t\t\t\t\tmodel.modifySelection( probe, { direction } );\n\n\t\t\t\t\t\t// If the range is collapsed, let's see if a non-collapsed range exists that can could be deleted.\n\t\t\t\t\t\t// If such range exists, use the editor command because it it safe for collaboration (it merges where it can).\n\t\t\t\t\t\tif ( !probe.focus.isEqual( range.start ) ) {\n\t\t\t\t\t\t\tmodel.change( writer => {\n\t\t\t\t\t\t\t\twriter.setSelection( range );\n\t\t\t\t\t\t\t\teditor.execute( isDeleteForward ? 'deleteForward' : 'delete' );\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// If there is no non-collapsed range to be deleted then we are sure that there is an empty element\n\t\t\t\t\t\t// next to a widget that should be removed. \"delete\" and \"deleteForward\" commands cannot get rid of it\n\t\t\t\t\t\t// so calling Model#deleteContent here manually.\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tconst deepestEmptyRangeAncestor = getDeepestEmptyElementAncestor( schema, range.start.parent );\n\n\t\t\t\t\t\t\tmodel.deleteContent( model.createSelection( deepestEmptyRangeAncestor, 'on' ), {\n\t\t\t\t\t\t\t\tdoNotAutoparagraph: true\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// If some content was deleted, don't let the handler from the Widget plugin kick in.\n\t\t\t// If nothing was deleted, then the default handler will have nothing to do anyway.\n\t\t\tdomEventData.preventDefault();\n\t\t\tevt.stop();\n\t\t}, { context: isWidget } );\n\t}\n\n\t/**\n\t * Attaches the {@link module:engine/model/model~Model#event:insertContent} event listener that, for instance, allows the user to paste\n\t * content near a widget when the fake caret is first activated using the arrow keys.\n\t *\n\t * The content is inserted according to the `widget-type-around` selection attribute (see {@link #_handleArrowKeyPress}).\n\t *\n\t * @private\n\t */\n\t_enableInsertContentIntegration() {\n\t\tconst editor = this.editor;\n\t\tconst model = this.editor.model;\n\t\tconst documentSelection = model.document.selection;\n\n\t\tthis._listenToIfEnabled( editor.model, 'insertContent', ( evt, [ content, selectable ] ) => {\n\t\t\tif ( selectable && !selectable.is( 'documentSelection' ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst typeAroundFakeCaretPosition = getTypeAroundFakeCaretPosition( documentSelection );\n\n\t\t\tif ( !typeAroundFakeCaretPosition ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tevt.stop();\n\n\t\t\treturn model.change( writer => {\n\t\t\t\tconst selectedElement = documentSelection.getSelectedElement();\n\t\t\t\tconst position = model.createPositionAt( selectedElement, typeAroundFakeCaretPosition );\n\t\t\t\tconst selection = writer.createSelection( position );\n\n\t\t\t\tconst result = model.insertContent( content, selection );\n\n\t\t\t\twriter.setSelection( selection );\n\n\t\t\t\treturn result;\n\t\t\t} );\n\t\t}, { priority: 'high' } );\n\t}\n}\n\n// Injects the type around UI into a view widget instance.\n//\n// @param {module:engine/view/downcastwriter~DowncastWriter} viewWriter\n// @param {Object.<String,String>} buttonTitles\n// @param {module:engine/view/element~Element} widgetViewElement\nfunction injectUIIntoWidget( viewWriter, buttonTitles, widgetViewElement ) {\n\tconst typeAroundWrapper = viewWriter.createUIElement( 'div', {\n\t\tclass: 'ck ck-reset_all ck-widget__type-around'\n\t}, function( domDocument ) {\n\t\tconst wrapperDomElement = this.toDomElement( domDocument );\n\n\t\tinjectButtons( wrapperDomElement, buttonTitles );\n\t\tinjectFakeCaret( wrapperDomElement );\n\n\t\treturn wrapperDomElement;\n\t} );\n\n\t// Inject the type around wrapper into the widget's wrapper.\n\tviewWriter.insert( viewWriter.createPositionAt( widgetViewElement, 'end' ), typeAroundWrapper );\n}\n\n// FYI: Not using the IconView class because each instance would need to be destroyed to avoid memory leaks\n// and it's pretty hard to figure out when a view (widget) is gone for good so it's cheaper to use raw\n// <svg> here.\n//\n// @param {HTMLElement} wrapperDomElement\n// @param {Object.<String,String>} buttonTitles\nfunction injectButtons( wrapperDomElement, buttonTitles ) {\n\tfor ( const position of POSSIBLE_INSERTION_POSITIONS ) {\n\t\tconst buttonTemplate = new Template( {\n\t\t\ttag: 'div',\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-widget__type-around__button',\n\t\t\t\t\t`ck-widget__type-around__button_${ position }`\n\t\t\t\t],\n\t\t\t\ttitle: buttonTitles[ position ]\n\t\t\t},\n\t\t\tchildren: [\n\t\t\t\twrapperDomElement.ownerDocument.importNode( RETURN_ARROW_ICON_ELEMENT, true )\n\t\t\t]\n\t\t} );\n\n\t\twrapperDomElement.appendChild( buttonTemplate.render() );\n\t}\n}\n\n// @param {HTMLElement} wrapperDomElement\nfunction injectFakeCaret( wrapperDomElement ) {\n\tconst caretTemplate = new Template( {\n\t\ttag: 'div',\n\t\tattributes: {\n\t\t\tclass: [\n\t\t\t\t'ck',\n\t\t\t\t'ck-widget__type-around__fake-caret'\n\t\t\t]\n\t\t}\n\t} );\n\n\twrapperDomElement.appendChild( caretTemplate.render() );\n}\n\n// Returns the ancestor of an element closest to the root which is empty. For instance,\n// for `<baz>`:\n//\n//\t\t<foo>abc<bar><baz></baz></bar></foo>\n//\n// it returns `<bar>`.\n//\n// @param {module:engine/model/schema~Schema} schema\n// @param {module:engine/model/element~Element} element\n// @returns {module:engine/model/element~Element|null}\nfunction getDeepestEmptyElementAncestor( schema, element ) {\n\tlet deepestEmptyAncestor = element;\n\n\tfor ( const ancestor of element.getAncestors( { parentFirst: true } ) ) {\n\t\tif ( ancestor.childCount > 1 || schema.isLimit( ancestor ) ) {\n\t\t\tbreak;\n\t\t}\n\n\t\tdeepestEmptyAncestor = ancestor;\n\t}\n\n\treturn deepestEmptyAncestor;\n}\n"]}]}