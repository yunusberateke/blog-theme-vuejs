{"remainingRequest":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/babel-loader/lib/index.js!/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-dev-webpack-plugin/lib/translatesourceloader.js?{}!/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-engine/src/model/operation/splitoperation.js","dependencies":[{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-engine/src/model/operation/splitoperation.js","mtime":499162500000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-dev-webpack-plugin/lib/translatesourceloader.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-engine/src/model/operation/splitoperation.js"],"names":["Operation","MergeOperation","Position","Range","_insert","_move","CKEditorError","SplitOperation","splitPosition","howMany","insertionPosition","graveyardPosition","baseVersion","clone","stickiness","path","slice","push","root","end","getShiftedBy","Number","POSITIVE_INFINITY","constructor","graveyard","document","moveTargetPosition","element","parent","offset","maxOffset","nodeAfter","splitElement","_createFromPositionAndShift","newElement","_clone","sourceRange","_createAt","json","toJSON","length","fromJSON"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/operation/splitoperation\n */\n\nimport Operation from './operation';\nimport MergeOperation from './mergeoperation';\nimport Position from '../position';\nimport Range from '../range';\nimport { _insert, _move } from './utils';\n\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * Operation to split {@link module:engine/model/element~Element an element} at given\n * {@link module:engine/model/operation/splitoperation~SplitOperation#splitPosition split position} into two elements,\n * both containing a part of the element's original content.\n *\n * @extends module:engine/model/operation/operation~Operation\n */\nexport default class SplitOperation extends Operation {\n\t/**\n\t * Creates a split operation.\n\t *\n\t * @param {module:engine/model/position~Position} splitPosition Position at which an element should be split.\n\t * @param {Number} howMany Total offset size of elements that are in the split element after `position`.\n\t * @param {module:engine/model/position~Position} insertionPosition Position at which the clone of split element\n\t * (or element from graveyard) will be inserted.\n\t * @param {module:engine/model/position~Position|null} graveyardPosition Position in the graveyard root before the element which\n\t * should be used as a parent of the nodes after `position`. If it is not set, a copy of the the `position` parent will be used.\n\t * @param {Number|null} baseVersion Document {@link module:engine/model/document~Document#version} on which operation\n\t * can be applied or `null` if the operation operates on detached (non-document) tree.\n\t */\n\tconstructor( splitPosition, howMany, insertionPosition, graveyardPosition, baseVersion ) {\n\t\tsuper( baseVersion );\n\n\t\t/**\n\t\t * Position at which an element should be split.\n\t\t *\n\t\t * @member {module:engine/model/position~Position} module:engine/model/operation/splitoperation~SplitOperation#splitPosition\n\t\t */\n\t\tthis.splitPosition = splitPosition.clone();\n\t\t// Keep position sticking to the next node. This way any new content added at the place where the element is split\n\t\t// will be left in the original element.\n\t\tthis.splitPosition.stickiness = 'toNext';\n\n\t\t/**\n\t\t * Total offset size of elements that are in the split element after `position`.\n\t\t *\n\t\t * @member {Number} module:engine/model/operation/splitoperation~SplitOperation#howMany\n\t\t */\n\t\tthis.howMany = howMany;\n\n\t\t/**\n\t\t * Position at which the clone of split element (or element from graveyard) will be inserted.\n\t\t *\n\t\t * @member {module:engine/model/position~Position} module:engine/model/operation/splitoperation~SplitOperation#insertionPosition\n\t\t */\n\t\tthis.insertionPosition = insertionPosition;\n\n\t\t/**\n\t\t * Position in the graveyard root before the element which should be used as a parent of the nodes after `position`.\n\t\t * If it is not set, a copy of the the `position` parent will be used.\n\t\t *\n\t\t * The default behavior is to clone the split element. Element from graveyard is used during undo.\n\t\t *\n\t\t * @member {module:engine/model/position~Position|null} #graveyardPosition\n\t\t */\n\t\tthis.graveyardPosition = graveyardPosition ? graveyardPosition.clone() : null;\n\n\t\tif ( this.graveyardPosition ) {\n\t\t\tthis.graveyardPosition.stickiness = 'toNext';\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget type() {\n\t\treturn 'split';\n\t}\n\n\t/**\n\t * Position inside the new clone of a split element.\n\t *\n\t * This is a position where nodes that are after the split position will be moved to.\n\t *\n\t * @readonly\n\t * @type {module:engine/model/position~Position}\n\t */\n\tget moveTargetPosition() {\n\t\tconst path = this.insertionPosition.path.slice();\n\t\tpath.push( 0 );\n\n\t\treturn new Position( this.insertionPosition.root, path );\n\t}\n\n\t/**\n\t * Artificial range that contains all the nodes from the split element that will be moved to the new element.\n\t * The range starts at {@link ~#splitPosition} and ends in the same parent, at `POSITIVE_INFINITY` offset.\n\t *\n\t * @readonly\n\t * @type {module:engine/model/range~Range}\n\t */\n\tget movedRange() {\n\t\tconst end = this.splitPosition.getShiftedBy( Number.POSITIVE_INFINITY );\n\n\t\treturn new Range( this.splitPosition, end );\n\t}\n\n\t/**\n\t * Creates and returns an operation that has the same parameters as this operation.\n\t *\n\t * @returns {module:engine/model/operation/splitoperation~SplitOperation} Clone of this operation.\n\t */\n\tclone() {\n\t\treturn new this.constructor( this.splitPosition, this.howMany, this.insertionPosition, this.graveyardPosition, this.baseVersion );\n\t}\n\n\t/**\n\t * See {@link module:engine/model/operation/operation~Operation#getReversed `Operation#getReversed()`}.\n\t *\n\t * @returns {module:engine/model/operation/mergeoperation~MergeOperation}\n\t */\n\tgetReversed() {\n\t\tconst graveyard = this.splitPosition.root.document.graveyard;\n\t\tconst graveyardPosition = new Position( graveyard, [ 0 ] );\n\n\t\treturn new MergeOperation( this.moveTargetPosition, this.howMany, this.splitPosition, graveyardPosition, this.baseVersion + 1 );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\t_validate() {\n\t\tconst element = this.splitPosition.parent;\n\t\tconst offset = this.splitPosition.offset;\n\n\t\t// Validate whether split operation has correct parameters.\n\t\tif ( !element || element.maxOffset < offset ) {\n\t\t\t/**\n\t\t\t * Split position is invalid.\n\t\t\t *\n\t\t\t * @error split-operation-position-invalid\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'split-operation-position-invalid', this );\n\t\t} else if ( !element.parent ) {\n\t\t\t/**\n\t\t\t * Cannot split root element.\n\t\t\t *\n\t\t\t * @error split-operation-split-in-root\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'split-operation-split-in-root', this );\n\t\t} else if ( this.howMany != element.maxOffset - this.splitPosition.offset ) {\n\t\t\t/**\n\t\t\t * Split operation specifies wrong number of nodes to move.\n\t\t\t *\n\t\t\t * @error split-operation-how-many-invalid\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'split-operation-how-many-invalid', this );\n\t\t} else if ( this.graveyardPosition && !this.graveyardPosition.nodeAfter ) {\n\t\t\t/**\n\t\t\t * Graveyard position invalid.\n\t\t\t *\n\t\t\t * @error split-operation-graveyard-position-invalid\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'split-operation-graveyard-position-invalid', this );\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\t_execute() {\n\t\tconst splitElement = this.splitPosition.parent;\n\n\t\tif ( this.graveyardPosition ) {\n\t\t\t_move( Range._createFromPositionAndShift( this.graveyardPosition, 1 ), this.insertionPosition );\n\t\t} else {\n\t\t\tconst newElement = splitElement._clone();\n\n\t\t\t_insert( this.insertionPosition, newElement );\n\t\t}\n\n\t\tconst sourceRange = new Range(\n\t\t\tPosition._createAt( splitElement, this.splitPosition.offset ),\n\t\t\tPosition._createAt( splitElement, splitElement.maxOffset )\n\t\t);\n\n\t\t_move( sourceRange, this.moveTargetPosition );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\ttoJSON() {\n\t\tconst json = super.toJSON();\n\n\t\tjson.splitPosition = this.splitPosition.toJSON();\n\t\tjson.insertionPosition = this.insertionPosition.toJSON();\n\n\t\tif ( this.graveyardPosition ) {\n\t\t\tjson.graveyardPosition = this.graveyardPosition.toJSON();\n\t\t}\n\n\t\treturn json;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get className() {\n\t\treturn 'SplitOperation';\n\t}\n\n\t/**\n\t * Helper function that returns a default insertion position basing on given `splitPosition`. The default insertion\n\t * position is after the split element.\n\t *\n\t * @param {module:engine/model/position~Position} splitPosition\n\t * @returns {module:engine/model/position~Position}\n\t */\n\tstatic getInsertionPosition( splitPosition ) {\n\t\tconst path = splitPosition.path.slice( 0, -1 );\n\t\tpath[ path.length - 1 ]++;\n\n\t\treturn new Position( splitPosition.root, path, 'toPrevious' );\n\t}\n\n\t/**\n\t * Creates `SplitOperation` object from deserilized object, i.e. from parsed JSON string.\n\t *\n\t * @param {Object} json Deserialized JSON object.\n\t * @param {module:engine/model/document~Document} document Document on which this operation will be applied.\n\t * @returns {module:engine/model/operation/splitoperation~SplitOperation}\n\t */\n\tstatic fromJSON( json, document ) {\n\t\tconst splitPosition = Position.fromJSON( json.splitPosition, document );\n\t\tconst insertionPosition = Position.fromJSON( json.insertionPosition, document );\n\t\tconst graveyardPosition = json.graveyardPosition ? Position.fromJSON( json.graveyardPosition, document ) : null;\n\n\t\treturn new this( splitPosition, json.howMany, insertionPosition, graveyardPosition, json.baseVersion );\n\t}\n\n\t// @if CK_DEBUG_ENGINE // toString() {\n\t// @if CK_DEBUG_ENGINE // \treturn `SplitOperation( ${ this.baseVersion } ): ${ this.splitPosition } ` +\n\t// @if CK_DEBUG_ENGINE //\t\t`( ${ this.howMany } ) -> ${ this.insertionPosition }` +\n\t// @if CK_DEBUG_ENGINE //\t\t`${ this.graveyardPosition ? ' with ' + this.graveyardPosition : '' }`;\n\t// @if CK_DEBUG_ENGINE // }\n}\n"]}]}