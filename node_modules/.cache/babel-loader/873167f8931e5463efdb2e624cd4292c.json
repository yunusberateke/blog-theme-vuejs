{"remainingRequest":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/babel-loader/lib/index.js!/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-dev-webpack-plugin/lib/translatesourceloader.js?{}!/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-engine/src/dataprocessor/htmldataprocessor.js","dependencies":[{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-engine/src/dataprocessor/htmldataprocessor.js","mtime":499162500000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-dev-webpack-plugin/lib/translatesourceloader.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tICIvaG9tZS9la2ViZXJhdC9ZYW5kZXguRGlzay9Qcm9qZWxlcmltL0JlbmltUHJvamVsZXJpbS93ZWJzaXRlbS93ZWJzaXRlbS13ZWIvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NsYXNzQ2FsbENoZWNrIjsKaW1wb3J0IF9jcmVhdGVDbGFzcyBmcm9tICIvaG9tZS9la2ViZXJhdC9ZYW5kZXguRGlzay9Qcm9qZWxlcmltL0JlbmltUHJvamVsZXJpbS93ZWJzaXRlbS93ZWJzaXRlbS13ZWIvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZUNsYXNzIjsKCi8qKgogKiBAbGljZW5zZSBDb3B5cmlnaHQgKGMpIDIwMDMtMjAyMSwgQ0tTb3VyY2UgLSBGcmVkZXJpY28gS25hYmJlbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KICogRm9yIGxpY2Vuc2luZywgc2VlIExJQ0VOU0UubWQgb3IgaHR0cHM6Ly9ja2VkaXRvci5jb20vbGVnYWwvY2tlZGl0b3Itb3NzLWxpY2Vuc2UKICovCgovKioKICogQG1vZHVsZSBlbmdpbmUvZGF0YXByb2Nlc3Nvci9odG1sZGF0YXByb2Nlc3NvcgogKi8KCi8qIGdsb2JhbHMgZG9jdW1lbnQsIERPTVBhcnNlciAqLwppbXBvcnQgQmFzaWNIdG1sV3JpdGVyIGZyb20gJy4vYmFzaWNodG1sd3JpdGVyJzsKaW1wb3J0IERvbUNvbnZlcnRlciBmcm9tICcuLi92aWV3L2RvbWNvbnZlcnRlcic7Ci8qKgogKiBUaGUgSFRNTCBkYXRhIHByb2Nlc3NvciBjbGFzcy4KICogVGhpcyBkYXRhIHByb2Nlc3NvciBpbXBsZW1lbnRhdGlvbiB1c2VzIEhUTUwgYXMgaW5wdXQgYW5kIG91dHB1dCBkYXRhLgogKgogKiBAaW1wbGVtZW50cyBtb2R1bGU6ZW5naW5lL2RhdGFwcm9jZXNzb3IvZGF0YXByb2Nlc3Nvcn5EYXRhUHJvY2Vzc29yCiAqLwoKdmFyIEh0bWxEYXRhUHJvY2Vzc29yID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHsKICAvKioKICAgKiBDcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIHRoZSBIVE1MIGRhdGEgcHJvY2Vzc29yIGNsYXNzLgogICAqCiAgICogQHBhcmFtIHttb2R1bGU6ZW5naW5lL3ZpZXcvZG9jdW1lbnR+RG9jdW1lbnR9IGRvY3VtZW50IFRoZSB2aWV3IGRvY3VtZW50IGluc3RhbmNlLgogICAqLwogIGZ1bmN0aW9uIEh0bWxEYXRhUHJvY2Vzc29yKGRvY3VtZW50KSB7CiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgSHRtbERhdGFQcm9jZXNzb3IpOwoKICAgIC8qKgogICAgICogQSBET00gcGFyc2VyIGluc3RhbmNlIHVzZWQgdG8gcGFyc2UgYW4gSFRNTCBzdHJpbmcgdG8gYW4gSFRNTCBkb2N1bWVudC4KICAgICAqCiAgICAgKiBAcHJpdmF0ZQogICAgICogQG1lbWJlciB7RE9NUGFyc2VyfQogICAgICovCiAgICB0aGlzLl9kb21QYXJzZXIgPSBuZXcgRE9NUGFyc2VyKCk7CiAgICAvKioKICAgICAqIEEgRE9NIGNvbnZlcnRlciB1c2VkIHRvIGNvbnZlcnQgRE9NIGVsZW1lbnRzIHRvIHZpZXcgZWxlbWVudHMuCiAgICAgKgogICAgICogQHByaXZhdGUKICAgICAqIEBtZW1iZXIge21vZHVsZTplbmdpbmUvdmlldy9kb21jb252ZXJ0ZXJ+RG9tQ29udmVydGVyfQogICAgICovCgogICAgdGhpcy5fZG9tQ29udmVydGVyID0gbmV3IERvbUNvbnZlcnRlcihkb2N1bWVudCwgewogICAgICBibG9ja0ZpbGxlck1vZGU6ICduYnNwJwogICAgfSk7CiAgICAvKioKICAgICAqIEEgYmFzaWMgSFRNTCB3cml0ZXIgaW5zdGFuY2UgdXNlZCB0byBjb252ZXJ0IERPTSBlbGVtZW50cyB0byBhbiBIVE1MIHN0cmluZy4KICAgICAqCiAgICAgKiBAcHJpdmF0ZQogICAgICogQG1lbWJlciB7bW9kdWxlOmVuZ2luZS9kYXRhcHJvY2Vzc29yL2Jhc2ljaHRtbHdyaXRlcn5CYXNpY0h0bWxXcml0ZXJ9CiAgICAgKi8KCiAgICB0aGlzLl9odG1sV3JpdGVyID0gbmV3IEJhc2ljSHRtbFdyaXRlcigpOwogIH0KICAvKioKICAgKiBDb252ZXJ0cyBhIHByb3ZpZGVkIHtAbGluayBtb2R1bGU6ZW5naW5lL3ZpZXcvZG9jdW1lbnRmcmFnbWVudH5Eb2N1bWVudEZyYWdtZW50IGRvY3VtZW50IGZyYWdtZW50fQogICAqIHRvIGRhdGEgZm9ybWF0ICZtZGFzaDsgaW4gdGhpcyBjYXNlIHRvIGFuIEhUTUwgc3RyaW5nLgogICAqCiAgICogQHBhcmFtIHttb2R1bGU6ZW5naW5lL3ZpZXcvZG9jdW1lbnRmcmFnbWVudH5Eb2N1bWVudEZyYWdtZW50fSB2aWV3RnJhZ21lbnQKICAgKiBAcmV0dXJucyB7U3RyaW5nfSBIVE1MIHN0cmluZy4KICAgKi8KCgogIF9jcmVhdGVDbGFzcyhIdG1sRGF0YVByb2Nlc3NvciwgW3sKICAgIGtleTogInRvRGF0YSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gdG9EYXRhKHZpZXdGcmFnbWVudCkgewogICAgICAvLyBDb252ZXJ0IHZpZXcgRG9jdW1lbnRGcmFnbWVudCB0byBET00gRG9jdW1lbnRGcmFnbWVudC4KICAgICAgdmFyIGRvbUZyYWdtZW50ID0gdGhpcy5fZG9tQ29udmVydGVyLnZpZXdUb0RvbSh2aWV3RnJhZ21lbnQsIGRvY3VtZW50KTsgLy8gQ29udmVydCBET00gRG9jdW1lbnRGcmFnbWVudCB0byBIVE1MIG91dHB1dC4KCgogICAgICByZXR1cm4gdGhpcy5faHRtbFdyaXRlci5nZXRIdG1sKGRvbUZyYWdtZW50KTsKICAgIH0KICAgIC8qKgogICAgICogQ29udmVydHMgdGhlIHByb3ZpZGVkIEhUTUwgc3RyaW5nIHRvIGEgdmlldyB0cmVlLgogICAgICoKICAgICAqIEBwYXJhbSB7U3RyaW5nfSBkYXRhIEFuIEhUTUwgc3RyaW5nLgogICAgICogQHJldHVybnMge21vZHVsZTplbmdpbmUvdmlldy9ub2Rlfk5vZGV8bW9kdWxlOmVuZ2luZS92aWV3L2RvY3VtZW50ZnJhZ21lbnR+RG9jdW1lbnRGcmFnbWVudHxudWxsfSBBIGNvbnZlcnRlZCB2aWV3IGVsZW1lbnQuCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAidG9WaWV3IiwKICAgIHZhbHVlOiBmdW5jdGlvbiB0b1ZpZXcoZGF0YSkgewogICAgICAvLyBDb252ZXJ0IGlucHV0IEhUTUwgZGF0YSB0byBET00gRG9jdW1lbnRGcmFnbWVudC4KICAgICAgdmFyIGRvbUZyYWdtZW50ID0gdGhpcy5fdG9Eb20oZGF0YSk7IC8vIENvbnZlcnQgRE9NIERvY3VtZW50RnJhZ21lbnQgdG8gdmlldyBEb2N1bWVudEZyYWdtZW50LgoKCiAgICAgIHJldHVybiB0aGlzLl9kb21Db252ZXJ0ZXIuZG9tVG9WaWV3KGRvbUZyYWdtZW50KTsKICAgIH0KICAgIC8qKgogICAgICogUmVnaXN0ZXJzIGEge0BsaW5rIG1vZHVsZTplbmdpbmUvdmlldy9tYXRjaGVyfk1hdGNoZXJQYXR0ZXJufSBmb3IgdmlldyBlbGVtZW50cyB3aG9zZSBjb250ZW50IHNob3VsZCBiZSB0cmVhdGVkIGFzIHJhdyBkYXRhCiAgICAgKiBhbmQgbm90IHByb2Nlc3NlZCBkdXJpbmcgdGhlIGNvbnZlcnNpb24gZnJvbSB0aGUgRE9NIHRvIHRoZSB2aWV3IGVsZW1lbnRzLgogICAgICoKICAgICAqIFRoZSByYXcgZGF0YSBjYW4gYmUgbGF0ZXIgYWNjZXNzZWQgYnkgYQogICAgICoge0BsaW5rIG1vZHVsZTplbmdpbmUvdmlldy9lbGVtZW50fkVsZW1lbnQjZ2V0Q3VzdG9tUHJvcGVydHkgY3VzdG9tIHByb3BlcnR5IG9mIGEgdmlldyBlbGVtZW50fSBjYWxsZWQgYCIkcmF3Q29udGVudCJgLgogICAgICoKICAgICAqIEBwYXJhbSB7bW9kdWxlOmVuZ2luZS92aWV3L21hdGNoZXJ+TWF0Y2hlclBhdHRlcm59IHBhdHRlcm4gUGF0dGVybiBtYXRjaGluZyBhbGwgdmlldyBlbGVtZW50cyB3aG9zZSBjb250ZW50IHNob3VsZAogICAgICogYmUgdHJlYXRlZCBhcyByYXcgZGF0YS4KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJyZWdpc3RlclJhd0NvbnRlbnRNYXRjaGVyIiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZWdpc3RlclJhd0NvbnRlbnRNYXRjaGVyKHBhdHRlcm4pIHsKICAgICAgdGhpcy5fZG9tQ29udmVydGVyLnJlZ2lzdGVyUmF3Q29udGVudE1hdGNoZXIocGF0dGVybik7CiAgICB9CiAgICAvKioKICAgICAqIElmIHRoZSBwcm9jZXNzb3IgaXMgc2V0IHRvIHVzZSBtYXJrZWQgZmlsbGVycywgaXQgd2lsbCBpbnNlcnQgbmJzcCBmaWxsZXJzIHdyYXBwZWQgaW4gc3BhbnMKICAgICAqIChgPHNwYW4gZGF0YS1ja2UtZmlsbGVyPSJ0cnVlIj4mbmJzcDs8L3NwYW4+YCksIGluc3RlYWQgb2YgcmVndWxhciBuYnNwIGNoYXJhY3RlcnMgKGAmbmJzcDtgKS4KICAgICAqCiAgICAgKiBUaGlzIG1vZGUgYWxsb3dzIGZvciBtb3JlIHByZWNpc2UgaGFuZGxpbmcgb2YgYmxvY2sgZmlsbGVycyAoc28gdGhleSBkb24ndCBsZWFrIGludG8gZWRpdG9yIGNvbnRlbnQpIGJ1dCBibG9hdHMgdGhlIGVkaXRvcgogICAgICogZGF0YSB3aXRoIGFkZGl0aW9uYWwgbWFya3VwLgogICAgICoKICAgICAqIFRoaXMgbW9kZSBtYXkgYmUgcmVxdWlyZWQgYnkgc29tZSBmZWF0dXJlcyBhbmQgd2lsbCBiZSB0dXJuZWQgb24gYnkgdGhlbSBhdXRvbWF0aWNhbGx5LgogICAgICoKICAgICAqIEBwYXJhbSB7J2RlZmF1bHQnfCdtYXJrZWQnfSB0eXBlIFdoZXRoZXIgdG8gdXNlIGRlZmF1bHQgb3IgbWFya2VkIG5ic3AgYmxvY2sgZmlsbGVycy4KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJ1c2VGaWxsZXJUeXBlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiB1c2VGaWxsZXJUeXBlKHR5cGUpIHsKICAgICAgdGhpcy5fZG9tQ29udmVydGVyLmJsb2NrRmlsbGVyTW9kZSA9IHR5cGUgPT0gJ21hcmtlZCcgPyAnbWFya2VkTmJzcCcgOiAnbmJzcCc7CiAgICB9CiAgICAvKioKICAgICAqIENvbnZlcnRzIGFuIEhUTUwgc3RyaW5nIHRvIGl0cyBET00gcmVwcmVzZW50YXRpb24uIFJldHVybnMgYSBkb2N1bWVudCBmcmFnbWVudCBjb250YWluaW5nIG5vZGVzIHBhcnNlZCBmcm9tCiAgICAgKiB0aGUgcHJvdmlkZWQgZGF0YS4KICAgICAqCiAgICAgKiBAcHJpdmF0ZQogICAgICogQHBhcmFtIHtTdHJpbmd9IGRhdGEKICAgICAqIEByZXR1cm5zIHtEb2N1bWVudEZyYWdtZW50fQogICAgICovCgogIH0sIHsKICAgIGtleTogIl90b0RvbSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gX3RvRG9tKGRhdGEpIHsKICAgICAgdmFyIGRvY3VtZW50ID0gdGhpcy5fZG9tUGFyc2VyLnBhcnNlRnJvbVN0cmluZyhkYXRhLCAndGV4dC9odG1sJyk7CgogICAgICB2YXIgZnJhZ21lbnQgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7CiAgICAgIHZhciBub2RlcyA9IGRvY3VtZW50LmJvZHkuY2hpbGROb2RlczsKCiAgICAgIHdoaWxlIChub2Rlcy5sZW5ndGggPiAwKSB7CiAgICAgICAgZnJhZ21lbnQuYXBwZW5kQ2hpbGQobm9kZXNbMF0pOwogICAgICB9CgogICAgICByZXR1cm4gZnJhZ21lbnQ7CiAgICB9CiAgfV0pOwoKICByZXR1cm4gSHRtbERhdGFQcm9jZXNzb3I7Cn0oKTsKCmV4cG9ydCB7IEh0bWxEYXRhUHJvY2Vzc29yIGFzIGRlZmF1bHQgfTs="},{"version":3,"sources":["/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-engine/src/dataprocessor/htmldataprocessor.js"],"names":["BasicHtmlWriter","DomConverter","HtmlDataProcessor","document","_domParser","DOMParser","_domConverter","blockFillerMode","_htmlWriter","viewFragment","domFragment","viewToDom","getHtml","data","_toDom","domToView","pattern","registerRawContentMatcher","type","parseFromString","fragment","createDocumentFragment","nodes","body","childNodes","length","appendChild"],"mappings":";;;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AAEA,OAAOA,eAAP,MAA4B,mBAA5B;AACA,OAAOC,YAAP,MAAyB,sBAAzB;AAEA;AACA;AACA;AACA;AACA;AACA;;IACqBC,iB;AACpB;AACD;AACA;AACA;AACA;AACC,6BAAaC,QAAb,EAAwB;AAAA;;AACvB;AACF;AACA;AACA;AACA;AACA;AACE,SAAKC,UAAL,GAAkB,IAAIC,SAAJ,EAAlB;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,SAAKC,aAAL,GAAqB,IAAIL,YAAJ,CAAkBE,QAAlB,EAA4B;AAAEI,MAAAA,eAAe,EAAE;AAAnB,KAA5B,CAArB;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,SAAKC,WAAL,GAAmB,IAAIR,eAAJ,EAAnB;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;;;;;WACC,gBAAQS,YAAR,EAAuB;AACtB;AACA,UAAMC,WAAW,GAAG,KAAKJ,aAAL,CAAmBK,SAAnB,CAA8BF,YAA9B,EAA4CN,QAA5C,CAApB,CAFsB,CAItB;;;AACA,aAAO,KAAKK,WAAL,CAAiBI,OAAjB,CAA0BF,WAA1B,CAAP;AACA;AAED;AACD;AACA;AACA;AACA;AACA;;;;WACC,gBAAQG,IAAR,EAAe;AACd;AACA,UAAMH,WAAW,GAAG,KAAKI,MAAL,CAAaD,IAAb,CAApB,CAFc,CAId;;;AACA,aAAO,KAAKP,aAAL,CAAmBS,SAAnB,CAA8BL,WAA9B,CAAP;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACC,mCAA2BM,OAA3B,EAAqC;AACpC,WAAKV,aAAL,CAAmBW,yBAAnB,CAA8CD,OAA9C;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACC,uBAAeE,IAAf,EAAsB;AACrB,WAAKZ,aAAL,CAAmBC,eAAnB,GAAqCW,IAAI,IAAI,QAAR,GAAmB,YAAnB,GAAkC,MAAvE;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACC,gBAAQL,IAAR,EAAe;AACd,UAAMV,QAAQ,GAAG,KAAKC,UAAL,CAAgBe,eAAhB,CAAiCN,IAAjC,EAAuC,WAAvC,CAAjB;;AACA,UAAMO,QAAQ,GAAGjB,QAAQ,CAACkB,sBAAT,EAAjB;AACA,UAAMC,KAAK,GAAGnB,QAAQ,CAACoB,IAAT,CAAcC,UAA5B;;AAEA,aAAQF,KAAK,CAACG,MAAN,GAAe,CAAvB,EAA2B;AAC1BL,QAAAA,QAAQ,CAACM,WAAT,CAAsBJ,KAAK,CAAE,CAAF,CAA3B;AACA;;AAED,aAAOF,QAAP;AACA;;;;;;SA5GmBlB,iB","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/dataprocessor/htmldataprocessor\n */\n\n/* globals document, DOMParser */\n\nimport BasicHtmlWriter from './basichtmlwriter';\nimport DomConverter from '../view/domconverter';\n\n/**\n * The HTML data processor class.\n * This data processor implementation uses HTML as input and output data.\n *\n * @implements module:engine/dataprocessor/dataprocessor~DataProcessor\n */\nexport default class HtmlDataProcessor {\n\t/**\n\t * Creates a new instance of the HTML data processor class.\n\t *\n\t * @param {module:engine/view/document~Document} document The view document instance.\n\t */\n\tconstructor( document ) {\n\t\t/**\n\t\t * A DOM parser instance used to parse an HTML string to an HTML document.\n\t\t *\n\t\t * @private\n\t\t * @member {DOMParser}\n\t\t */\n\t\tthis._domParser = new DOMParser();\n\n\t\t/**\n\t\t * A DOM converter used to convert DOM elements to view elements.\n\t\t *\n\t\t * @private\n\t\t * @member {module:engine/view/domconverter~DomConverter}\n\t\t */\n\t\tthis._domConverter = new DomConverter( document, { blockFillerMode: 'nbsp' } );\n\n\t\t/**\n\t\t * A basic HTML writer instance used to convert DOM elements to an HTML string.\n\t\t *\n\t\t * @private\n\t\t * @member {module:engine/dataprocessor/basichtmlwriter~BasicHtmlWriter}\n\t\t */\n\t\tthis._htmlWriter = new BasicHtmlWriter();\n\t}\n\n\t/**\n\t * Converts a provided {@link module:engine/view/documentfragment~DocumentFragment document fragment}\n\t * to data format &mdash; in this case to an HTML string.\n\t *\n\t * @param {module:engine/view/documentfragment~DocumentFragment} viewFragment\n\t * @returns {String} HTML string.\n\t */\n\ttoData( viewFragment ) {\n\t\t// Convert view DocumentFragment to DOM DocumentFragment.\n\t\tconst domFragment = this._domConverter.viewToDom( viewFragment, document );\n\n\t\t// Convert DOM DocumentFragment to HTML output.\n\t\treturn this._htmlWriter.getHtml( domFragment );\n\t}\n\n\t/**\n\t * Converts the provided HTML string to a view tree.\n\t *\n\t * @param {String} data An HTML string.\n\t * @returns {module:engine/view/node~Node|module:engine/view/documentfragment~DocumentFragment|null} A converted view element.\n\t */\n\ttoView( data ) {\n\t\t// Convert input HTML data to DOM DocumentFragment.\n\t\tconst domFragment = this._toDom( data );\n\n\t\t// Convert DOM DocumentFragment to view DocumentFragment.\n\t\treturn this._domConverter.domToView( domFragment );\n\t}\n\n\t/**\n\t * Registers a {@link module:engine/view/matcher~MatcherPattern} for view elements whose content should be treated as raw data\n\t * and not processed during the conversion from the DOM to the view elements.\n\t *\n\t * The raw data can be later accessed by a\n\t * {@link module:engine/view/element~Element#getCustomProperty custom property of a view element} called `\"$rawContent\"`.\n\t *\n\t * @param {module:engine/view/matcher~MatcherPattern} pattern Pattern matching all view elements whose content should\n\t * be treated as raw data.\n\t */\n\tregisterRawContentMatcher( pattern ) {\n\t\tthis._domConverter.registerRawContentMatcher( pattern );\n\t}\n\n\t/**\n\t * If the processor is set to use marked fillers, it will insert nbsp fillers wrapped in spans\n\t * (`<span data-cke-filler=\"true\">&nbsp;</span>`), instead of regular nbsp characters (`&nbsp;`).\n\t *\n\t * This mode allows for more precise handling of block fillers (so they don't leak into editor content) but bloats the editor\n\t * data with additional markup.\n\t *\n\t * This mode may be required by some features and will be turned on by them automatically.\n\t *\n\t * @param {'default'|'marked'} type Whether to use default or marked nbsp block fillers.\n\t */\n\tuseFillerType( type ) {\n\t\tthis._domConverter.blockFillerMode = type == 'marked' ? 'markedNbsp' : 'nbsp';\n\t}\n\n\t/**\n\t * Converts an HTML string to its DOM representation. Returns a document fragment containing nodes parsed from\n\t * the provided data.\n\t *\n\t * @private\n\t * @param {String} data\n\t * @returns {DocumentFragment}\n\t */\n\t_toDom( data ) {\n\t\tconst document = this._domParser.parseFromString( data, 'text/html' );\n\t\tconst fragment = document.createDocumentFragment();\n\t\tconst nodes = document.body.childNodes;\n\n\t\twhile ( nodes.length > 0 ) {\n\t\t\tfragment.appendChild( nodes[ 0 ] );\n\t\t}\n\n\t\treturn fragment;\n\t}\n}\n"]}]}