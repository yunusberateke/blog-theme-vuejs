{"remainingRequest":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/babel-loader/lib/index.js!/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-dev-webpack-plugin/lib/translatesourceloader.js?{}!/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-ui/src/template.js","dependencies":[{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-ui/src/template.js","mtime":499162500000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-dev-webpack-plugin/lib/translatesourceloader.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-ui/src/template.js"],"names":["CKEditorError","mix","EmitterMixin","View","ViewCollection","isNode","isObject","cloneDeepWith","toArray","xhtmlNs","Template","def","Object","assign","normalize","clone","_isRendered","_revertData","node","_renderNode","intoFragment","getEmptyRevertData","isApplying","revertData","_revertTemplateFromNode","search","children","child","isView","isTemplate","data","isInvalid","tag","text","_renderText","_renderElement","document","createElementNS","ns","_renderAttributes","_renderElementChildren","_setUpListeners","textContent","createTextNode","hasTemplateBinding","_bindToObservable","schema","updater","getTextUpdater","join","attrName","attrValue","domAttrValue","attrNs","attributes","getAttribute","valueToBind","value","shouldExtend","unshift","getAttributeUpdater","_renderStyleAttribute","map","val","reduce","prev","next","concat","arrayValueReducer","isFalsy","setAttributeNS","styles","styleName","styleValue","getStyleUpdater","style","container","createDocumentFragment","childIndex","isViewCollection","setParent","view","appendChild","element","isRendered","render","childRevertData","push","childNodes","eventListeners","key","revertBindings","schemaItem","split","domEvtName","domSelector","activateDomEventListener","bindings","syncValueSchemaValue","filter","item","observable","templateBinding","activateAttributeListener","binding","revertBinding","removeAttribute","setAttribute","i","length","emitter","to","eventNameOrFunctionOrAttribute","callback","TemplateToBinding","eventNameOrFunction","attribute","if","valueIfTrue","TemplateIfBinding","template","extendTemplate","TemplateBinding","listenTo","stopListening","evt","domEvt","target","matches","fire","Array","isArray","some","getValueSchemaValue","getValue","remove","set","el","removeAttributeNS","normalizePlainTextDefinition","normalizeTextDefinition","on","normalizeListeners","normalizeAttributes","a","arrayify","listeners","l","obj","cur","extendObjectValueArray","ext","childDef"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AAEA,OAAOA,aAAP,MAA0B,6CAA1B;AACA,OAAOC,GAAP,MAAgB,mCAAhB;AACA,OAAOC,YAAP,MAAyB,4CAAzB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,MAAP,MAAmB,0CAAnB;AACA,SAASC,QAAT,EAAmBC,aAAnB,QAAwC,WAAxC;AACA,OAAOC,OAAP,MAAoB,uCAApB;AAEA,IAAMC,OAAO,GAAG,8BAAhB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IACqBC,Q;AACpB;AACD;AACA;AACA;AACA;AACC,oBAAaC,GAAb,EAAmB;AAAA;;AAClBC,IAAAA,MAAM,CAACC,MAAP,CAAe,IAAf,EAAqBC,SAAS,CAAEC,KAAK,CAAEJ,GAAF,CAAP,CAA9B;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,SAAKK,WAAL,GAAmB,KAAnB;AAEA;AACF;AACA;AACA;AACA;AACA;;AAEE;AACF;AACA;AACA;AACA;;AAEE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;AAEE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEE;AACF;AACA;AACA;AACA;;AAEE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,SAAKC,WAAL,GAAmB,IAAnB;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;WACC,kBAAS;AACR,UAAMC,IAAI,GAAG,KAAKC,WAAL,CAAkB;AAC9BC,QAAAA,YAAY,EAAE;AADgB,OAAlB,CAAb;;AAIA,WAAKJ,WAAL,GAAmB,IAAnB;AAEA,aAAOE,IAAP;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AA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ACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/template\n */\n\n/* global document */\n\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\nimport View from './view';\nimport ViewCollection from './viewcollection';\nimport isNode from '@ckeditor/ckeditor5-utils/src/dom/isnode';\nimport { isObject, cloneDeepWith } from 'lodash-es';\nimport toArray from '@ckeditor/ckeditor5-utils/src/toarray';\n\nconst xhtmlNs = 'http://www.w3.org/1999/xhtml';\n\n/**\n * A basic Template class. It renders a DOM HTML element or text from a\n * {@link module:ui/template~TemplateDefinition definition} and supports element attributes, children,\n * bindings to {@link module:utils/observablemixin~Observable observables} and DOM event propagation.\n *\n * A simple template can look like this:\n *\n *\t\tconst bind = Template.bind( observable, emitter );\n *\n *\t\tnew Template( {\n *\t\t\ttag: 'p',\n *\t\t\tattributes: {\n *\t\t\t\tclass: 'foo',\n *\t\t\t\tstyle: {\n *\t\t\t\t\tbackgroundColor: 'yellow'\n *\t\t\t\t}\n *\t\t\t},\n *\t\t\ton: {\n *\t\t\t\tclick: bind.to( 'clicked' )\n *\t\t\t},\n *\t\t\tchildren: [\n *\t\t\t\t'A paragraph.'\n *\t\t\t]\n *\t\t} ).render();\n *\n * and it will render the following HTML element:\n *\n *\t\t<p class=\"foo\" style=\"background-color: yellow;\">A paragraph.</p>\n *\n * Additionally, the `observable` will always fire `clicked` upon clicking `<p>` in the DOM.\n *\n * See {@link module:ui/template~TemplateDefinition} to know more about templates and complex\n * template definitions.\n *\n* @mixes module:utils/emittermixin~EmitterMixin\n */\nexport default class Template {\n\t/**\n\t * Creates an instance of the {@link ~Template} class.\n\t *\n\t * @param {module:ui/template~TemplateDefinition} def The definition of the template.\n\t */\n\tconstructor( def ) {\n\t\tObject.assign( this, normalize( clone( def ) ) );\n\n\t\t/**\n\t\t * Indicates whether this particular Template instance has been\n\t\t * {@link #render rendered}.\n\t\t *\n\t\t * @readonly\n\t\t * @protected\n\t\t * @member {Boolean}\n\t\t */\n\t\tthis._isRendered = false;\n\n\t\t/**\n\t\t * The tag (`tagName`) of this template, e.g. `div`. It also indicates that the template\n\t\t * renders to an HTML element.\n\t\t *\n\t\t * @member {String} #tag\n\t\t */\n\n\t\t/**\n\t\t * The text of the template. It also indicates that the template renders to a DOM text node.\n\t\t *\n\t\t * @member {Array.<String|module:ui/template~TemplateValueSchema>} #text\n\t\t */\n\n\t\t/**\n\t\t * The attributes of the template, e.g. `{ id: [ 'ck-id' ] }`, corresponding with\n\t\t * the attributes of an HTML element.\n\t\t *\n\t\t * **Note**: This property only makes sense when {@link #tag} is defined.\n\t\t *\n\t\t * @member {Object} #attributes\n\t\t */\n\n\t\t/**\n\t\t * The children of the template. They can be either:\n\t\t * * independent instances of {@link ~Template} (sub–templates),\n\t\t * * native DOM Nodes.\n\t\t *\n\t\t * **Note**: This property only makes sense when {@link #tag} is defined.\n\t\t *\n\t\t * @member {Array.<module:ui/template~Template|Node>} #children\n\t\t */\n\n\t\t/**\n\t\t * The DOM event listeners of the template.\n\t\t *\n\t\t * @member {Object} #eventListeners\n\t\t */\n\n\t\t/**\n\t\t * The data used by the {@link #revert} method to restore a node to its original state.\n\t\t *\n\t\t * See: {@link #apply}.\n\t\t *\n\t\t * @readonly\n\t\t * @protected\n\t\t * @member {module:ui/template~RenderData}\n\t\t */\n\t\tthis._revertData = null;\n\t}\n\n\t/**\n\t * Renders a DOM Node (an HTML element or text) out of the template.\n\t *\n\t *\t\tconst domNode = new Template( { ... } ).render();\n\t *\n\t * See: {@link #apply}.\n\t *\n\t * @returns {HTMLElement|Text}\n\t */\n\trender() {\n\t\tconst node = this._renderNode( {\n\t\t\tintoFragment: true\n\t\t} );\n\n\t\tthis._isRendered = true;\n\n\t\treturn node;\n\t}\n\n\t/**\n\t * Applies the template to an existing DOM Node, either HTML element or text.\n\t *\n\t * **Note:** No new DOM nodes will be created. Applying extends:\n\t *\n\t * {@link module:ui/template~TemplateDefinition attributes},\n\t * {@link module:ui/template~TemplateDefinition event listeners}, and\n\t * `textContent` of {@link module:ui/template~TemplateDefinition children} only.\n\t *\n\t * **Note:** Existing `class` and `style` attributes are extended when a template\n\t * is applied to an HTML element, while other attributes and `textContent` are overridden.\n\t *\n\t * **Note:** The process of applying a template can be easily reverted using the\n\t * {@link module:ui/template~Template#revert} method.\n\t *\n\t *\t\tconst element = document.createElement( 'div' );\n\t *\t\tconst observable = new Model( { divClass: 'my-div' } );\n\t *\t\tconst emitter = Object.create( EmitterMixin );\n\t *\t\tconst bind = Template.bind( observable, emitter );\n\t *\n\t *\t\tnew Template( {\n\t *\t\t\tattributes: {\n\t *\t\t\t\tid: 'first-div',\n\t *\t\t\t\tclass: bind.to( 'divClass' )\n\t *\t\t\t},\n\t *\t\t\ton: {\n\t *\t\t\t\tclick: bind( 'elementClicked' ) // Will be fired by the observable.\n\t *\t\t\t},\n\t *\t\t\tchildren: [\n\t *\t\t\t\t'Div text.'\n\t *\t\t\t]\n\t *\t\t} ).apply( element );\n\t *\n\t *\t\tconsole.log( element.outerHTML ); // -> '<div id=\"first-div\" class=\"my-div\"></div>'\n\t *\n\t * @see module:ui/template~Template#render\n\t * @see module:ui/template~Template#revert\n\t * @param {Node} node Root node for the template to apply.\n\t */\n\tapply( node ) {\n\t\tthis._revertData = getEmptyRevertData();\n\n\t\tthis._renderNode( {\n\t\t\tnode,\n\t\t\tisApplying: true,\n\t\t\trevertData: this._revertData\n\t\t} );\n\n\t\treturn node;\n\t}\n\n\t/**\n\t * Reverts a template {@link module:ui/template~Template#apply applied} to a DOM node.\n\t *\n\t * @param {Node} node The root node for the template to revert. In most of the cases, it is the\n\t * same node used by {@link module:ui/template~Template#apply}.\n\t */\n\trevert( node ) {\n\t\tif ( !this._revertData ) {\n\t\t\t/**\n\t\t\t * Attempting to revert a template which has not been applied yet.\n\t\t\t *\n\t\t\t * @error ui-template-revert-not-applied\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'ui-template-revert-not-applied',\n\t\t\t\t[ this, node ]\n\t\t\t);\n\t\t}\n\n\t\tthis._revertTemplateFromNode( node, this._revertData );\n\t}\n\n\t/**\n\t * Returns an iterator which traverses the template in search of {@link module:ui/view~View}\n\t * instances and returns them one by one.\n\t *\n\t *\t\tconst viewFoo = new View();\n\t *\t\tconst viewBar = new View();\n\t *\t\tconst viewBaz = new View();\n\t *\t\tconst template = new Template( {\n\t *\t\t\ttag: 'div',\n\t *\t\t\tchildren: [\n\t *\t\t\t\tviewFoo,\n\t *\t\t\t\t{\n\t *\t\t\t\t\ttag: 'div',\n\t *\t\t\t\t\tchildren: [\n\t *\t\t\t\t\t\tviewBar\n\t *\t\t\t\t\t]\n\t *\t\t\t\t},\n\t *\t\t\t\tviewBaz\n\t *\t\t\t]\n\t *\t\t} );\n\t *\n\t *\t\t// Logs: viewFoo, viewBar, viewBaz\n\t *\t\tfor ( const view of template.getViews() ) {\n\t *\t\t\tconsole.log( view );\n\t *\t\t}\n\t *\n\t * @returns {Iterable.<module:ui/view~View>}\n\t */\n\t* getViews() {\n\t\tfunction* search( def ) {\n\t\t\tif ( def.children ) {\n\t\t\t\tfor ( const child of def.children ) {\n\t\t\t\t\tif ( isView( child ) ) {\n\t\t\t\t\t\tyield child;\n\t\t\t\t\t} else if ( isTemplate( child ) ) {\n\t\t\t\t\t\tyield* search( child );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tyield* search( this );\n\t}\n\n\t/**\n\t * An entry point to the interface which binds DOM nodes to\n\t * {@link module:utils/observablemixin~Observable observables}.\n\t * There are two types of bindings:\n\t *\n\t * * HTML element attributes or text `textContent` synchronized with attributes of an\n\t * {@link module:utils/observablemixin~Observable}. Learn more about {@link module:ui/template~BindChain#to}\n\t * and {@link module:ui/template~BindChain#if}.\n\t *\n\t *\t\tconst bind = Template.bind( observable, emitter );\n\t *\n\t *\t\tnew Template( {\n\t *\t\t\tattributes: {\n\t *\t\t\t\t// Binds the element \"class\" attribute to observable#classAttribute.\n\t *\t\t\t\tclass: bind.to( 'classAttribute' )\n\t *\t\t\t}\n\t *\t\t} ).render();\n\t *\n\t * * DOM events fired on HTML element propagated through\n\t * {@link module:utils/observablemixin~Observable}. Learn more about {@link module:ui/template~BindChain#to}.\n\t *\n\t *\t\tconst bind = Template.bind( observable, emitter );\n\t *\n\t *\t\tnew Template( {\n\t *\t\t\ton: {\n\t *\t\t\t\t// Will be fired by the observable.\n\t *\t\t\t\tclick: bind( 'elementClicked' )\n\t *\t\t\t}\n\t *\t\t} ).render();\n\t *\n\t * Also see {@link module:ui/view~View#bindTemplate}.\n\t *\n\t * @param {module:utils/observablemixin~Observable} observable An observable which provides boundable attributes.\n\t * @param {module:utils/emittermixin~Emitter} emitter An emitter that listens to observable attribute\n\t * changes or DOM Events (depending on the kind of the binding). Usually, a {@link module:ui/view~View} instance.\n\t * @returns {module:ui/template~BindChain}\n\t */\n\tstatic bind( observable, emitter ) {\n\t\treturn {\n\t\t\tto( eventNameOrFunctionOrAttribute, callback ) {\n\t\t\t\treturn new TemplateToBinding( {\n\t\t\t\t\teventNameOrFunction: eventNameOrFunctionOrAttribute,\n\t\t\t\t\tattribute: eventNameOrFunctionOrAttribute,\n\t\t\t\t\tobservable, emitter, callback\n\t\t\t\t} );\n\t\t\t},\n\n\t\t\tif( attribute, valueIfTrue, callback ) {\n\t\t\t\treturn new TemplateIfBinding( {\n\t\t\t\t\tobservable, emitter, attribute, valueIfTrue, callback\n\t\t\t\t} );\n\t\t\t}\n\t\t};\n\t}\n\n\t/**\n\t * Extends an existing {@link module:ui/template~Template} instance with some additional content\n\t * from another {@link module:ui/template~TemplateDefinition}.\n\t *\n\t *\t\tconst bind = Template.bind( observable, emitter );\n\t *\n\t *\t\tconst template = new Template( {\n\t *\t\t\ttag: 'p',\n\t *\t\t\tattributes: {\n\t *\t\t\t\tclass: 'a',\n\t *\t\t\t\tdata-x: bind.to( 'foo' )\n\t *\t\t\t},\n\t *\t\t\tchildren: [\n\t *\t\t\t\t{\n\t *\t\t\t\t\ttag: 'span',\n\t *\t\t\t\t\tattributes: {\n\t *\t\t\t\t\t\tclass: 'b'\n\t *\t\t\t\t\t},\n\t *\t\t\t\t\tchildren: [\n\t *\t\t\t\t\t\t'Span'\n\t *\t\t\t\t\t]\n\t *\t\t\t\t}\n\t *\t\t\t]\n\t *\t\t } );\n\t *\n\t *\t\t// Instance-level extension.\n\t *\t\tTemplate.extend( template, {\n\t *\t\t\tattributes: {\n\t *\t\t\t\tclass: 'b',\n\t *\t\t\t\tdata-x: bind.to( 'bar' )\n\t *\t\t\t},\n\t *\t\t\tchildren: [\n\t *\t\t\t\t{\n\t *\t\t\t\t\tattributes: {\n\t *\t\t\t\t\t\tclass: 'c'\n\t *\t\t\t\t\t}\n\t *\t\t\t\t}\n\t *\t\t\t]\n\t *\t\t} );\n\t *\n\t *\t\t// Child extension.\n\t *\t\tTemplate.extend( template.children[ 0 ], {\n\t *\t\t\tattributes: {\n\t *\t\t\t\tclass: 'd'\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t * the `outerHTML` of `template.render()` is:\n\t *\n\t *\t\t<p class=\"a b\" data-x=\"{ observable.foo } { observable.bar }\">\n\t *\t\t\t<span class=\"b c d\">Span</span>\n\t *\t\t</p>\n\t *\n\t * @param {module:ui/template~Template} template An existing template instance to be extended.\n\t * @param {module:ui/template~TemplateDefinition} def Additional definition to be applied to a template.\n\t */\n\tstatic extend( template, def ) {\n\t\tif ( template._isRendered ) {\n\t\t\t/**\n\t\t\t * Extending a template after rendering may not work as expected. To make sure\n\t\t\t * the {@link module:ui/template~Template.extend extending} works for an element,\n\t\t\t * make sure it happens before {@link #render} is called.\n\t\t\t *\n\t\t\t * @error template-extend-render\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'template-extend-render',\n\t\t\t\t[ this, template ]\n\t\t\t);\n\t\t}\n\n\t\textendTemplate( template, normalize( clone( def ) ) );\n\t}\n\n\t/**\n\t * Renders a DOM Node (either an HTML element or text) out of the template.\n\t *\n\t * @protected\n\t * @param {module:ui/template~RenderData} data Rendering data.\n\t */\n\t_renderNode( data ) {\n\t\tlet isInvalid;\n\n\t\tif ( data.node ) {\n\t\t\t// When applying, a definition cannot have \"tag\" and \"text\" at the same time.\n\t\t\tisInvalid = this.tag && this.text;\n\t\t} else {\n\t\t\t// When rendering, a definition must have either \"tag\" or \"text\": XOR( this.tag, this.text ).\n\t\t\tisInvalid = this.tag ? this.text : !this.text;\n\t\t}\n\n\t\tif ( isInvalid ) {\n\t\t\t/**\n\t\t\t * Node definition cannot have the \"tag\" and \"text\" properties at the same time.\n\t\t\t * Node definition must have either \"tag\" or \"text\" when rendering a new Node.\n\t\t\t *\n\t\t\t * @error ui-template-wrong-syntax\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'ui-template-wrong-syntax',\n\t\t\t\tthis\n\t\t\t);\n\t\t}\n\n\t\tif ( this.text ) {\n\t\t\treturn this._renderText( data );\n\t\t} else {\n\t\t\treturn this._renderElement( data );\n\t\t}\n\t}\n\n\t/**\n\t * Renders an HTML element out of the template.\n\t *\n\t * @protected\n\t * @param {module:ui/template~RenderData} data Rendering data.\n\t */\n\t_renderElement( data ) {\n\t\tlet node = data.node;\n\n\t\tif ( !node ) {\n\t\t\tnode = data.node = document.createElementNS( this.ns || xhtmlNs, this.tag );\n\t\t}\n\n\t\tthis._renderAttributes( data );\n\t\tthis._renderElementChildren( data );\n\t\tthis._setUpListeners( data );\n\n\t\treturn node;\n\t}\n\n\t/**\n\t * Renders a text node out of {@link module:ui/template~Template#text}.\n\t *\n\t * @protected\n\t * @param {module:ui/template~RenderData} data Rendering data.\n\t */\n\t_renderText( data ) {\n\t\tlet node = data.node;\n\n\t\t// Save the original textContent to revert it in #revert().\n\t\tif ( node ) {\n\t\t\tdata.revertData.text = node.textContent;\n\t\t} else {\n\t\t\tnode = data.node = document.createTextNode( '' );\n\t\t}\n\n\t\t// Check if this Text Node is bound to Observable. Cases:\n\t\t//\n\t\t//\t\ttext: [ Template.bind( ... ).to( ... ) ]\n\t\t//\n\t\t//\t\ttext: [\n\t\t//\t\t\t'foo',\n\t\t//\t\t\tTemplate.bind( ... ).to( ... ),\n\t\t//\t\t\t...\n\t\t//\t\t]\n\t\t//\n\t\tif ( hasTemplateBinding( this.text ) ) {\n\t\t\tthis._bindToObservable( {\n\t\t\t\tschema: this.text,\n\t\t\t\tupdater: getTextUpdater( node ),\n\t\t\t\tdata\n\t\t\t} );\n\t\t}\n\t\t// Simply set text. Cases:\n\t\t//\n\t\t//\t\ttext: [ 'all', 'are', 'static' ]\n\t\t//\n\t\t//\t\ttext: [ 'foo' ]\n\t\t//\n\t\telse {\n\t\t\tnode.textContent = this.text.join( '' );\n\t\t}\n\n\t\treturn node;\n\t}\n\n\t/**\n\t * Renders HTML element attributes out of {@link module:ui/template~Template#attributes}.\n\t *\n\t * @protected\n\t * @param {module:ui/template~RenderData} data Rendering data.\n\t */\n\t_renderAttributes( data ) {\n\t\tlet attrName, attrValue, domAttrValue, attrNs;\n\n\t\tif ( !this.attributes ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst node = data.node;\n\t\tconst revertData = data.revertData;\n\n\t\tfor ( attrName in this.attributes ) {\n\t\t\t// Current attribute value in DOM.\n\t\t\tdomAttrValue = node.getAttribute( attrName );\n\n\t\t\t// The value to be set.\n\t\t\tattrValue = this.attributes[ attrName ];\n\n\t\t\t// Save revert data.\n\t\t\tif ( revertData ) {\n\t\t\t\trevertData.attributes[ attrName ] = domAttrValue;\n\t\t\t}\n\n\t\t\t// Detect custom namespace:\n\t\t\t//\n\t\t\t//\t\tclass: {\n\t\t\t//\t\t\tns: 'abc',\n\t\t\t//\t\t\tvalue: Template.bind( ... ).to( ... )\n\t\t\t//\t\t}\n\t\t\t//\n\t\t\tattrNs = ( isObject( attrValue[ 0 ] ) && attrValue[ 0 ].ns ) ? attrValue[ 0 ].ns : null;\n\n\t\t\t// Activate binding if one is found. Cases:\n\t\t\t//\n\t\t\t//\t\tclass: [\n\t\t\t//\t\t\tTemplate.bind( ... ).to( ... )\n\t\t\t//\t\t]\n\t\t\t//\n\t\t\t//\t\tclass: [\n\t\t\t//\t\t\t'bar',\n\t\t\t//\t\t\tTemplate.bind( ... ).to( ... ),\n\t\t\t//\t\t\t'baz'\n\t\t\t//\t\t]\n\t\t\t//\n\t\t\t//\t\tclass: {\n\t\t\t//\t\t\tns: 'abc',\n\t\t\t//\t\t\tvalue: Template.bind( ... ).to( ... )\n\t\t\t//\t\t}\n\t\t\t//\n\t\t\tif ( hasTemplateBinding( attrValue ) ) {\n\t\t\t\t// Normalize attributes with additional data like namespace:\n\t\t\t\t//\n\t\t\t\t//\t\tclass: {\n\t\t\t\t//\t\t\tns: 'abc',\n\t\t\t\t//\t\t\tvalue: [ ... ]\n\t\t\t\t//\t\t}\n\t\t\t\t//\n\t\t\t\tconst valueToBind = attrNs ? attrValue[ 0 ].value : attrValue;\n\n\t\t\t\t// Extend the original value of attributes like \"style\" and \"class\",\n\t\t\t\t// don't override them.\n\t\t\t\tif ( revertData && shouldExtend( attrName ) ) {\n\t\t\t\t\tvalueToBind.unshift( domAttrValue );\n\t\t\t\t}\n\n\t\t\t\tthis._bindToObservable( {\n\t\t\t\t\tschema: valueToBind,\n\t\t\t\t\tupdater: getAttributeUpdater( node, attrName, attrNs ),\n\t\t\t\t\tdata\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\t// Style attribute could be an Object so it needs to be parsed in a specific way.\n\t\t\t//\n\t\t\t//\t\tstyle: {\n\t\t\t//\t\t\twidth: '100px',\n\t\t\t//\t\t\theight: Template.bind( ... ).to( ... )\n\t\t\t//\t\t}\n\t\t\t//\n\t\t\telse if ( attrName == 'style' && typeof attrValue[ 0 ] !== 'string' ) {\n\t\t\t\tthis._renderStyleAttribute( attrValue[ 0 ], data );\n\t\t\t}\n\n\t\t\t// Otherwise simply set the static attribute:\n\t\t\t//\n\t\t\t//\t\tclass: [ 'foo' ]\n\t\t\t//\n\t\t\t//\t\tclass: [ 'all', 'are', 'static' ]\n\t\t\t//\n\t\t\t//\t\tclass: [\n\t\t\t//\t\t\t{\n\t\t\t//\t\t\t\tns: 'abc',\n\t\t\t//\t\t\t\tvalue: [ 'foo' ]\n\t\t\t//\t\t\t}\n\t\t\t//\t\t]\n\t\t\t//\n\t\t\telse {\n\t\t\t\t// Extend the original value of attributes like \"style\" and \"class\",\n\t\t\t\t// don't override them.\n\t\t\t\tif ( revertData && domAttrValue && shouldExtend( attrName ) ) {\n\t\t\t\t\tattrValue.unshift( domAttrValue );\n\t\t\t\t}\n\n\t\t\t\tattrValue = attrValue\n\t\t\t\t\t// Retrieve \"values\" from:\n\t\t\t\t\t//\n\t\t\t\t\t//\t\tclass: [\n\t\t\t\t\t//\t\t\t{\n\t\t\t\t\t//\t\t\t\tns: 'abc',\n\t\t\t\t\t//\t\t\t\tvalue: [ ... ]\n\t\t\t\t\t//\t\t\t}\n\t\t\t\t\t//\t\t]\n\t\t\t\t\t//\n\t\t\t\t\t.map( val => val ? ( val.value || val ) : val )\n\t\t\t\t\t// Flatten the array.\n\t\t\t\t\t.reduce( ( prev, next ) => prev.concat( next ), [] )\n\t\t\t\t\t// Convert into string.\n\t\t\t\t\t.reduce( arrayValueReducer, '' );\n\n\t\t\t\tif ( !isFalsy( attrValue ) ) {\n\t\t\t\t\tnode.setAttributeNS( attrNs, attrName, attrValue );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Renders the `style` attribute of an HTML element based on\n\t * {@link module:ui/template~Template#attributes}.\n\t *\n\t * A style attribute is an {Object} with static values:\n\t *\n\t *\t\tattributes: {\n\t *\t\t\tstyle: {\n\t *\t\t\t\tcolor: 'red'\n\t *\t\t\t}\n\t *\t\t}\n\t *\n\t * or values bound to {@link module:ui/model~Model} properties:\n\t *\n\t *\t\tattributes: {\n\t *\t\t\tstyle: {\n\t *\t\t\t\tcolor: bind.to( ... )\n\t *\t\t\t}\n\t *\t\t}\n\t *\n\t * Note: The `style` attribute is rendered without setting the namespace. It does not seem to be\n\t * needed.\n\t *\n\t * @private\n\t * @param {Object} styles Styles located in `attributes.style` of {@link module:ui/template~TemplateDefinition}.\n\t * @param {module:ui/template~RenderData} data Rendering data.\n\t */\n\t_renderStyleAttribute( styles, data ) {\n\t\tconst node = data.node;\n\n\t\tfor ( const styleName in styles ) {\n\t\t\tconst styleValue = styles[ styleName ];\n\n\t\t\t// Cases:\n\t\t\t//\n\t\t\t//\t\tstyle: {\n\t\t\t//\t\t\tcolor: bind.to( 'attribute' )\n\t\t\t//\t\t}\n\t\t\t//\n\t\t\tif ( hasTemplateBinding( styleValue ) ) {\n\t\t\t\tthis._bindToObservable( {\n\t\t\t\t\tschema: [ styleValue ],\n\t\t\t\t\tupdater: getStyleUpdater( node, styleName ),\n\t\t\t\t\tdata\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\t// Cases:\n\t\t\t//\n\t\t\t//\t\tstyle: {\n\t\t\t//\t\t\tcolor: 'red'\n\t\t\t//\t\t}\n\t\t\t//\n\t\t\telse {\n\t\t\t\tnode.style[ styleName ] = styleValue;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Recursively renders HTML element's children from {@link module:ui/template~Template#children}.\n\t *\n\t * @protected\n\t * @param {module:ui/template~RenderData} data Rendering data.\n\t */\n\t_renderElementChildren( data ) {\n\t\tconst node = data.node;\n\t\tconst container = data.intoFragment ? document.createDocumentFragment() : node;\n\t\tconst isApplying = data.isApplying;\n\t\tlet childIndex = 0;\n\n\t\tfor ( const child of this.children ) {\n\t\t\tif ( isViewCollection( child ) ) {\n\t\t\t\tif ( !isApplying ) {\n\t\t\t\t\tchild.setParent( node );\n\n\t\t\t\t\t// Note: ViewCollection renders its children.\n\t\t\t\t\tfor ( const view of child ) {\n\t\t\t\t\t\tcontainer.appendChild( view.element );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if ( isView( child ) ) {\n\t\t\t\tif ( !isApplying ) {\n\t\t\t\t\tif ( !child.isRendered ) {\n\t\t\t\t\t\tchild.render();\n\t\t\t\t\t}\n\n\t\t\t\t\tcontainer.appendChild( child.element );\n\t\t\t\t}\n\t\t\t} else if ( isNode( child ) ) {\n\t\t\t\tcontainer.appendChild( child );\n\t\t\t} else {\n\t\t\t\tif ( isApplying ) {\n\t\t\t\t\tconst revertData = data.revertData;\n\t\t\t\t\tconst childRevertData = getEmptyRevertData();\n\n\t\t\t\t\trevertData.children.push( childRevertData );\n\n\t\t\t\t\tchild._renderNode( {\n\t\t\t\t\t\tnode: container.childNodes[ childIndex++ ],\n\t\t\t\t\t\tisApplying: true,\n\t\t\t\t\t\trevertData: childRevertData\n\t\t\t\t\t} );\n\t\t\t\t} else {\n\t\t\t\t\tcontainer.appendChild( child.render() );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif ( data.intoFragment ) {\n\t\t\tnode.appendChild( container );\n\t\t}\n\t}\n\n\t/**\n\t * Activates `on` event listeners from the {@link module:ui/template~TemplateDefinition}\n\t * on an HTML element.\n\t *\n\t * @protected\n\t * @param {module:ui/template~RenderData} data Rendering data.\n\t */\n\t_setUpListeners( data ) {\n\t\tif ( !this.eventListeners ) {\n\t\t\treturn;\n\t\t}\n\n\t\tfor ( const key in this.eventListeners ) {\n\t\t\tconst revertBindings = this.eventListeners[ key ].map( schemaItem => {\n\t\t\t\tconst [ domEvtName, domSelector ] = key.split( '@' );\n\n\t\t\t\treturn schemaItem.activateDomEventListener( domEvtName, domSelector, data );\n\t\t\t} );\n\n\t\t\tif ( data.revertData ) {\n\t\t\t\tdata.revertData.bindings.push( revertBindings );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * For a given {@link module:ui/template~TemplateValueSchema} containing {@link module:ui/template~TemplateBinding}\n\t * activates the binding and sets its initial value.\n\t *\n\t * Note: {@link module:ui/template~TemplateValueSchema} can be for HTML element attributes or\n\t * text node `textContent`.\n\t *\n\t * @protected\n\t * @param {Object} options Binding options.\n\t * @param {module:ui/template~TemplateValueSchema} options.schema\n\t * @param {Function} options.updater A function which updates the DOM (like attribute or text).\n\t * @param {module:ui/template~RenderData} options.data Rendering data.\n\t */\n\t_bindToObservable( { schema, updater, data } ) {\n\t\tconst revertData = data.revertData;\n\n\t\t// Set initial values.\n\t\tsyncValueSchemaValue( schema, updater, data );\n\n\t\tconst revertBindings = schema\n\t\t\t// Filter \"falsy\" (false, undefined, null, '') value schema components out.\n\t\t\t.filter( item => !isFalsy( item ) )\n\t\t\t// Filter inactive bindings from schema, like static strings ('foo'), numbers (42), etc.\n\t\t\t.filter( item => item.observable )\n\t\t\t// Once only the actual binding are left, let the emitter listen to observable change:attribute event.\n\t\t\t// TODO: Reduce the number of listeners attached as many bindings may listen\n\t\t\t// to the same observable attribute.\n\t\t\t.map( templateBinding => templateBinding.activateAttributeListener( schema, updater, data ) );\n\n\t\tif ( revertData ) {\n\t\t\trevertData.bindings.push( revertBindings );\n\t\t}\n\t}\n\n\t/**\n\t * Reverts {@link module:ui/template~RenderData#revertData template data} from a node to\n\t * return it to the original state.\n\t *\n\t * @protected\n\t * @param {HTMLElement|Text} node A node to be reverted.\n\t * @param {Object} revertData An object that stores information about what changes have been made by\n\t * {@link #apply} to the node. See {@link module:ui/template~RenderData#revertData} for more information.\n\t */\n\t_revertTemplateFromNode( node, revertData ) {\n\t\tfor ( const binding of revertData.bindings ) {\n\t\t\t// Each binding may consist of several observable+observable#attribute.\n\t\t\t// like the following has 2:\n\t\t\t//\n\t\t\t//\t\tclass: [\n\t\t\t//\t\t\t'x',\n\t\t\t//\t\t\tbind.to( 'foo' ),\n\t\t\t//\t\t\t'y',\n\t\t\t//\t\t\tbind.to( 'bar' )\n\t\t\t//\t\t]\n\t\t\t//\n\t\t\tfor ( const revertBinding of binding ) {\n\t\t\t\trevertBinding();\n\t\t\t}\n\t\t}\n\n\t\tif ( revertData.text ) {\n\t\t\tnode.textContent = revertData.text;\n\n\t\t\treturn;\n\t\t}\n\n\t\tfor ( const attrName in revertData.attributes ) {\n\t\t\tconst attrValue = revertData.attributes[ attrName ];\n\n\t\t\t// When the attribute has **not** been set before #apply().\n\t\t\tif ( attrValue === null ) {\n\t\t\t\tnode.removeAttribute( attrName );\n\t\t\t} else {\n\t\t\t\tnode.setAttribute( attrName, attrValue );\n\t\t\t}\n\t\t}\n\n\t\tfor ( let i = 0; i < revertData.children.length; ++i ) {\n\t\t\tthis._revertTemplateFromNode( node.childNodes[ i ], revertData.children[ i ] );\n\t\t}\n\t}\n}\n\nmix( Template, EmitterMixin );\n\n/**\n * Describes a binding created by the {@link module:ui/template~Template.bind} interface.\n *\n * @protected\n */\nexport class TemplateBinding {\n\t/**\n\t * Creates an instance of the {@link module:ui/template~TemplateBinding} class.\n\t *\n\t * @param {module:ui/template~TemplateDefinition} def The definition of the binding.\n\t */\n\tconstructor( def ) {\n\t\tObject.assign( this, def );\n\n\t\t/**\n\t\t * An observable instance of the binding. It either:\n\t\t *\n\t\t * * provides the attribute with the value,\n\t\t * * or passes the event when a corresponding DOM event is fired.\n\t\t *\n\t\t * @member {module:utils/observablemixin~ObservableMixin} module:ui/template~TemplateBinding#observable\n\t\t */\n\n\t\t/**\n\t\t * An {@link module:utils/emittermixin~Emitter} used by the binding to:\n\t\t *\n\t\t * * listen to the attribute change in the {@link module:ui/template~TemplateBinding#observable},\n\t\t * * or listen to the event in the DOM.\n\t\t *\n\t\t * @member {module:utils/emittermixin~EmitterMixin} module:ui/template~TemplateBinding#emitter\n\t\t */\n\n\t\t/**\n\t\t * The name of the {@link module:ui/template~TemplateBinding#observable observed attribute}.\n\t\t *\n\t\t * @member {String} module:ui/template~TemplateBinding#attribute\n\t\t */\n\n\t\t/**\n\t\t * A custom function to process the value of the {@link module:ui/template~TemplateBinding#attribute}.\n\t\t *\n\t\t * @member {Function} [module:ui/template~TemplateBinding#callback]\n\t\t */\n\t}\n\n\t/**\n\t * Returns the value of the binding. It is the value of the {@link module:ui/template~TemplateBinding#attribute} in\n\t * {@link module:ui/template~TemplateBinding#observable}. The value may be processed by the\n\t * {@link module:ui/template~TemplateBinding#callback}, if such has been passed to the binding.\n\t *\n\t * @param {Node} [node] A native DOM node, passed to the custom {@link module:ui/template~TemplateBinding#callback}.\n\t * @returns {*} The value of {@link module:ui/template~TemplateBinding#attribute} in\n\t * {@link module:ui/template~TemplateBinding#observable}.\n\t */\n\tgetValue( node ) {\n\t\tconst value = this.observable[ this.attribute ];\n\n\t\treturn this.callback ? this.callback( value, node ) : value;\n\t}\n\n\t/**\n\t * Activates the listener which waits for changes of the {@link module:ui/template~TemplateBinding#attribute} in\n\t * {@link module:ui/template~TemplateBinding#observable}, then updates the DOM with the aggregated\n\t * value of {@link module:ui/template~TemplateValueSchema}.\n\t *\n\t * @param {module:ui/template~TemplateValueSchema} schema A full schema to generate an attribute or text in the DOM.\n\t * @param {Function} updater A DOM updater function used to update the native DOM attribute or text.\n\t * @param {module:ui/template~RenderData} data Rendering data.\n\t * @returns {Function} A function to sever the listener binding.\n\t */\n\tactivateAttributeListener( schema, updater, data ) {\n\t\tconst callback = () => syncValueSchemaValue( schema, updater, data );\n\n\t\tthis.emitter.listenTo( this.observable, 'change:' + this.attribute, callback );\n\n\t\t// Allows revert of the listener.\n\t\treturn () => {\n\t\t\tthis.emitter.stopListening( this.observable, 'change:' + this.attribute, callback );\n\t\t};\n\t}\n}\n\n/**\n * Describes either:\n *\n * * a binding to an {@link module:utils/observablemixin~Observable},\n * * or a native DOM event binding.\n *\n * It is created by the {@link module:ui/template~BindChain#to} method.\n *\n * @protected\n */\nexport class TemplateToBinding extends TemplateBinding {\n\t/**\n\t * Activates the listener for the native DOM event, which when fired, is propagated by\n\t * the {@link module:ui/template~TemplateBinding#emitter}.\n\t *\n\t * @param {String} domEvtName The name of the native DOM event.\n\t * @param {String} domSelector The selector in the DOM to filter delegated events.\n\t * @param {module:ui/template~RenderData} data Rendering data.\n\t * @returns {Function} A function to sever the listener binding.\n\t */\n\tactivateDomEventListener( domEvtName, domSelector, data ) {\n\t\tconst callback = ( evt, domEvt ) => {\n\t\t\tif ( !domSelector || domEvt.target.matches( domSelector ) ) {\n\t\t\t\tif ( typeof this.eventNameOrFunction == 'function' ) {\n\t\t\t\t\tthis.eventNameOrFunction( domEvt );\n\t\t\t\t} else {\n\t\t\t\t\tthis.observable.fire( this.eventNameOrFunction, domEvt );\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tthis.emitter.listenTo( data.node, domEvtName, callback );\n\n\t\t// Allows revert of the listener.\n\t\treturn () => {\n\t\t\tthis.emitter.stopListening( data.node, domEvtName, callback );\n\t\t};\n\t}\n}\n\n/**\n * Describes a binding to {@link module:utils/observablemixin~ObservableMixin} created by the {@link module:ui/template~BindChain#if}\n * method.\n *\n * @protected\n */\nexport class TemplateIfBinding extends TemplateBinding {\n\t/**\n\t * @inheritDoc\n\t */\n\tgetValue( node ) {\n\t\tconst value = super.getValue( node );\n\n\t\treturn isFalsy( value ) ? false : ( this.valueIfTrue || true );\n\t}\n\n\t/**\n\t * The value of the DOM attribute or text to be set if the {@link module:ui/template~TemplateBinding#attribute} in\n\t * {@link module:ui/template~TemplateBinding#observable} is `true`.\n\t *\n\t * @member {String} [module:ui/template~TemplateIfBinding#valueIfTrue]\n\t */\n}\n\n// Checks whether given {@link module:ui/template~TemplateValueSchema} contains a\n// {@link module:ui/template~TemplateBinding}.\n//\n// @param {module:ui/template~TemplateValueSchema} schema\n// @returns {Boolean}\nfunction hasTemplateBinding( schema ) {\n\tif ( !schema ) {\n\t\treturn false;\n\t}\n\n\t// Normalize attributes with additional data like namespace:\n\t//\n\t//\t\tclass: {\n\t//\t\t\tns: 'abc',\n\t//\t\t\tvalue: [ ... ]\n\t//\t\t}\n\t//\n\tif ( schema.value ) {\n\t\tschema = schema.value;\n\t}\n\n\tif ( Array.isArray( schema ) ) {\n\t\treturn schema.some( hasTemplateBinding );\n\t} else if ( schema instanceof TemplateBinding ) {\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n\n// Assembles the value using {@link module:ui/template~TemplateValueSchema} and stores it in a form of\n// an Array. Each entry of the Array corresponds to one of {@link module:ui/template~TemplateValueSchema}\n// items.\n//\n// @param {module:ui/template~TemplateValueSchema} schema\n// @param {Node} node DOM Node updated when {@link module:utils/observablemixin~ObservableMixin} changes.\n// @returns {Array}\nfunction getValueSchemaValue( schema, node ) {\n\treturn schema.map( schemaItem => {\n\t\t// Process {@link module:ui/template~TemplateBinding} bindings.\n\t\tif ( schemaItem instanceof TemplateBinding ) {\n\t\t\treturn schemaItem.getValue( node );\n\t\t}\n\n\t\t// All static values like strings, numbers, and \"falsy\" values (false, null, undefined, '', etc.) just pass.\n\t\treturn schemaItem;\n\t} );\n}\n\n// A function executed each time the bound Observable attribute changes, which updates the DOM with a value\n// constructed from {@link module:ui/template~TemplateValueSchema}.\n//\n// @param {module:ui/template~TemplateValueSchema} schema\n// @param {Function} updater A function which updates the DOM (like attribute or text).\n// @param {Node} node DOM Node updated when {@link module:utils/observablemixin~ObservableMixin} changes.\nfunction syncValueSchemaValue( schema, updater, { node } ) {\n\tlet value = getValueSchemaValue( schema, node );\n\n\t// Check if schema is a single Template.bind.if, like:\n\t//\n\t//\t\tclass: Template.bind.if( 'foo' )\n\t//\n\tif ( schema.length == 1 && schema[ 0 ] instanceof TemplateIfBinding ) {\n\t\tvalue = value[ 0 ];\n\t} else {\n\t\tvalue = value.reduce( arrayValueReducer, '' );\n\t}\n\n\tif ( isFalsy( value ) ) {\n\t\tupdater.remove();\n\t} else {\n\t\tupdater.set( value );\n\t}\n}\n\n// Returns an object consisting of `set` and `remove` functions, which\n// can be used in the context of DOM Node to set or reset `textContent`.\n// @see module:ui/view~View#_bindToObservable\n//\n// @param {Node} node DOM Node to be modified.\n// @returns {Object}\nfunction getTextUpdater( node ) {\n\treturn {\n\t\tset( value ) {\n\t\t\tnode.textContent = value;\n\t\t},\n\n\t\tremove() {\n\t\t\tnode.textContent = '';\n\t\t}\n\t};\n}\n\n// Returns an object consisting of `set` and `remove` functions, which\n// can be used in the context of DOM Node to set or reset an attribute.\n// @see module:ui/view~View#_bindToObservable\n//\n// @param {Node} node DOM Node to be modified.\n// @param {String} attrName Name of the attribute to be modified.\n// @param {String} [ns=null] Namespace to use.\n// @returns {Object}\nfunction getAttributeUpdater( el, attrName, ns ) {\n\treturn {\n\t\tset( value ) {\n\t\t\tel.setAttributeNS( ns, attrName, value );\n\t\t},\n\n\t\tremove() {\n\t\t\tel.removeAttributeNS( ns, attrName );\n\t\t}\n\t};\n}\n\n// Returns an object consisting of `set` and `remove` functions, which\n// can be used in the context of CSSStyleDeclaration to set or remove a style.\n// @see module:ui/view~View#_bindToObservable\n//\n// @param {Node} node DOM Node to be modified.\n// @param {String} styleName Name of the style to be modified.\n// @returns {Object}\nfunction getStyleUpdater( el, styleName ) {\n\treturn {\n\t\tset( value ) {\n\t\t\tel.style[ styleName ] = value;\n\t\t},\n\n\t\tremove() {\n\t\t\tel.style[ styleName ] = null;\n\t\t}\n\t};\n}\n\n// Clones definition of the template.\n//\n// @param {module:ui/template~TemplateDefinition} def\n// @returns {module:ui/template~TemplateDefinition}\nfunction clone( def ) {\n\tconst clone = cloneDeepWith( def, value => {\n\t\t// Don't clone the `Template.bind`* bindings because of the references to Observable\n\t\t// and DomEmitterMixin instances inside, which would also be traversed and cloned by greedy\n\t\t// cloneDeepWith algorithm. There's no point in cloning Observable/DomEmitterMixins\n\t\t// along with the definition.\n\t\t//\n\t\t// Don't clone Template instances if provided as a child. They're simply #render()ed\n\t\t// and nothing should interfere.\n\t\t//\n\t\t// Also don't clone View instances if provided as a child of the Template. The template\n\t\t// instance will be extracted from the View during the normalization and there's no need\n\t\t// to clone it.\n\t\tif ( value && ( value instanceof TemplateBinding || isTemplate( value ) || isView( value ) || isViewCollection( value ) ) ) {\n\t\t\treturn value;\n\t\t}\n\t} );\n\n\treturn clone;\n}\n\n// Normalizes given {@link module:ui/template~TemplateDefinition}.\n//\n// See:\n//  * {@link normalizeAttributes}\n//  * {@link normalizeListeners}\n//  * {@link normalizePlainTextDefinition}\n//  * {@link normalizeTextDefinition}\n//\n// @param {module:ui/template~TemplateDefinition} def\n// @returns {module:ui/template~TemplateDefinition} Normalized definition.\nfunction normalize( def ) {\n\tif ( typeof def == 'string' ) {\n\t\tdef = normalizePlainTextDefinition( def );\n\t} else if ( def.text ) {\n\t\tnormalizeTextDefinition( def );\n\t}\n\n\tif ( def.on ) {\n\t\tdef.eventListeners = normalizeListeners( def.on );\n\n\t\t// Template mixes EmitterMixin, so delete #on to avoid collision.\n\t\tdelete def.on;\n\t}\n\n\tif ( !def.text ) {\n\t\tif ( def.attributes ) {\n\t\t\tnormalizeAttributes( def.attributes );\n\t\t}\n\n\t\tconst children = [];\n\n\t\tif ( def.children ) {\n\t\t\tif ( isViewCollection( def.children ) ) {\n\t\t\t\tchildren.push( def.children );\n\t\t\t} else {\n\t\t\t\tfor ( const child of def.children ) {\n\t\t\t\t\tif ( isTemplate( child ) || isView( child ) || isNode( child ) ) {\n\t\t\t\t\t\tchildren.push( child );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tchildren.push( new Template( child ) );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tdef.children = children;\n\t}\n\n\treturn def;\n}\n\n// Normalizes \"attributes\" section of {@link module:ui/template~TemplateDefinition}.\n//\n//\t\tattributes: {\n//\t\t\ta: 'bar',\n//\t\t\tb: {@link module:ui/template~TemplateBinding},\n//\t\t\tc: {\n//\t\t\t\tvalue: 'bar'\n//\t\t\t}\n//\t\t}\n//\n// becomes\n//\n//\t\tattributes: {\n//\t\t\ta: [ 'bar' ],\n//\t\t\tb: [ {@link module:ui/template~TemplateBinding} ],\n//\t\t\tc: {\n//\t\t\t\tvalue: [ 'bar' ]\n//\t\t\t}\n//\t\t}\n//\n// @param {Object} attributes\nfunction normalizeAttributes( attributes ) {\n\tfor ( const a in attributes ) {\n\t\tif ( attributes[ a ].value ) {\n\t\t\tattributes[ a ].value = toArray( attributes[ a ].value );\n\t\t}\n\n\t\tarrayify( attributes, a );\n\t}\n}\n\n// Normalizes \"on\" section of {@link module:ui/template~TemplateDefinition}.\n//\n//\t\ton: {\n//\t\t\ta: 'bar',\n//\t\t\tb: {@link module:ui/template~TemplateBinding},\n//\t\t\tc: [ {@link module:ui/template~TemplateBinding}, () => { ... } ]\n//\t\t}\n//\n// becomes\n//\n//\t\ton: {\n//\t\t\ta: [ 'bar' ],\n//\t\t\tb: [ {@link module:ui/template~TemplateBinding} ],\n//\t\t\tc: [ {@link module:ui/template~TemplateBinding}, () => { ... } ]\n//\t\t}\n//\n// @param {Object} listeners\n// @returns {Object} Object containing normalized listeners.\nfunction normalizeListeners( listeners ) {\n\tfor ( const l in listeners ) {\n\t\tarrayify( listeners, l );\n\t}\n\n\treturn listeners;\n}\n\n// Normalizes \"string\" {@link module:ui/template~TemplateDefinition}.\n//\n//\t\t\"foo\"\n//\n// becomes\n//\n//\t\t{ text: [ 'foo' ] },\n//\n// @param {String} def\n// @returns {module:ui/template~TemplateDefinition} Normalized template definition.\nfunction normalizePlainTextDefinition( def ) {\n\treturn {\n\t\ttext: [ def ]\n\t};\n}\n\n// Normalizes text {@link module:ui/template~TemplateDefinition}.\n//\n//\t\tchildren: [\n//\t\t\t{ text: 'def' },\n//\t\t\t{ text: {@link module:ui/template~TemplateBinding} }\n//\t\t]\n//\n// becomes\n//\n//\t\tchildren: [\n//\t\t\t{ text: [ 'def' ] },\n//\t\t\t{ text: [ {@link module:ui/template~TemplateBinding} ] }\n//\t\t]\n//\n// @param {module:ui/template~TemplateDefinition} def\nfunction normalizeTextDefinition( def ) {\n\tdef.text = toArray( def.text );\n}\n\n// Wraps an entry in Object in an Array, if not already one.\n//\n//\t\t{\n//\t\t\tx: 'y',\n//\t\t\ta: [ 'b' ]\n//\t\t}\n//\n// becomes\n//\n//\t\t{\n//\t\t\tx: [ 'y' ],\n//\t\t\ta: [ 'b' ]\n//\t\t}\n//\n// @param {Object} obj\n// @param {String} key\nfunction arrayify( obj, key ) {\n\tobj[ key ] = toArray( obj[ key ] );\n}\n\n// A helper which concatenates the value avoiding unwanted\n// leading white spaces.\n//\n// @param {String} prev\n// @param {String} cur\n// @returns {String}\nfunction arrayValueReducer( prev, cur ) {\n\tif ( isFalsy( cur ) ) {\n\t\treturn prev;\n\t} else if ( isFalsy( prev ) ) {\n\t\treturn cur;\n\t} else {\n\t\treturn `${ prev } ${ cur }`;\n\t}\n}\n\n// Extends one object defined in the following format:\n//\n//\t\t{\n//\t\t\tkey1: [Array1],\n//\t\t\tkey2: [Array2],\n//\t\t\t...\n//\t\t\tkeyN: [ArrayN]\n//\t\t}\n//\n// with another object of the same data format.\n//\n// @param {Object} obj Base object.\n// @param {Object} ext Object extending base.\n// @returns {String}\nfunction extendObjectValueArray( obj, ext ) {\n\tfor ( const a in ext ) {\n\t\tif ( obj[ a ] ) {\n\t\t\tobj[ a ].push( ...ext[ a ] );\n\t\t} else {\n\t\t\tobj[ a ] = ext[ a ];\n\t\t}\n\t}\n}\n\n// A helper for {@link module:ui/template~Template#extend}. Recursively extends {@link module:ui/template~Template} instance\n// with content from {@link module:ui/template~TemplateDefinition}. See {@link module:ui/template~Template#extend} to learn more.\n//\n// @param {module:ui/template~Template} def A template instance to be extended.\n// @param {module:ui/template~TemplateDefinition} def A definition which is to extend the template instance.\n// @param {Object} Error context.\nfunction extendTemplate( template, def ) {\n\tif ( def.attributes ) {\n\t\tif ( !template.attributes ) {\n\t\t\ttemplate.attributes = {};\n\t\t}\n\n\t\textendObjectValueArray( template.attributes, def.attributes );\n\t}\n\n\tif ( def.eventListeners ) {\n\t\tif ( !template.eventListeners ) {\n\t\t\ttemplate.eventListeners = {};\n\t\t}\n\n\t\textendObjectValueArray( template.eventListeners, def.eventListeners );\n\t}\n\n\tif ( def.text ) {\n\t\ttemplate.text.push( ...def.text );\n\t}\n\n\tif ( def.children && def.children.length ) {\n\t\tif ( template.children.length != def.children.length ) {\n\t\t\t/**\n\t\t\t * The number of children in extended definition does not match.\n\t\t\t *\n\t\t\t * @error ui-template-extend-children-mismatch\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'ui-template-extend-children-mismatch',\n\t\t\t\ttemplate\n\t\t\t);\n\t\t}\n\n\t\tlet childIndex = 0;\n\n\t\tfor ( const childDef of def.children ) {\n\t\t\textendTemplate( template.children[ childIndex++ ], childDef );\n\t\t}\n\t}\n}\n\n// Checks if value is \"falsy\".\n// Note: 0 (Number) is not \"falsy\" in this context.\n//\n// @private\n// @param {*} value Value to be checked.\nfunction isFalsy( value ) {\n\treturn !value && value !== 0;\n}\n\n// Checks if the item is an instance of {@link module:ui/view~View}\n//\n// @private\n// @param {*} value Value to be checked.\nfunction isView( item ) {\n\treturn item instanceof View;\n}\n\n// Checks if the item is an instance of {@link module:ui/template~Template}\n//\n// @private\n// @param {*} value Value to be checked.\nfunction isTemplate( item ) {\n\treturn item instanceof Template;\n}\n\n// Checks if the item is an instance of {@link module:ui/viewcollection~ViewCollection}\n//\n// @private\n// @param {*} value Value to be checked.\nfunction isViewCollection( item ) {\n\treturn item instanceof ViewCollection;\n}\n\n// Creates an empty skeleton for {@link module:ui/template~Template#revert}\n// data.\n//\n// @private\nfunction getEmptyRevertData() {\n\treturn {\n\t\tchildren: [],\n\t\tbindings: [],\n\t\tattributes: {}\n\t};\n}\n\n// Checks whether an attribute should be extended when\n// {@link module:ui/template~Template#apply} is called.\n//\n// @private\n// @param {String} attrName Attribute name to check.\nfunction shouldExtend( attrName ) {\n\treturn attrName == 'class' || attrName == 'style';\n}\n\n/**\n * A definition of the {@link module:ui/template~Template}. It describes what kind of\n * node a template will render (HTML element or text), attributes of an element, DOM event\n * listeners and children.\n *\n * Also see:\n * * {@link module:ui/template~TemplateValueSchema} to learn about HTML element attributes,\n * * {@link module:ui/template~TemplateListenerSchema} to learn about DOM event listeners.\n *\n * A sample definition on an HTML element can look like this:\n *\n *\t\tnew Template( {\n *\t\t\ttag: 'p',\n *\t\t\tchildren: [\n *\t\t\t\t{\n *\t\t\t\t\ttag: 'span',\n *\t\t\t\t\tattributes: { ... },\n *\t\t\t\t\tchildren: [ ... ],\n *\t\t\t\t},\n *\t\t\t\t{\n *\t\t\t\t\ttext: 'static–text'\n *\t\t\t\t},\n *\t\t\t\t'also-static–text',\n *\t\t\t],\n *\t\t\tattributes: {\n *\t\t\t\tclass: {@link module:ui/template~TemplateValueSchema},\n *\t\t\t\tid: {@link module:ui/template~TemplateValueSchema},\n *\t\t\t\tstyle: {@link module:ui/template~TemplateValueSchema}\n *\n *\t\t\t\t// ...\n *\t\t\t},\n *\t\t\ton: {\n *\t\t\t\t'click': {@link module:ui/template~TemplateListenerSchema}\n *\n *\t\t\t\t// Document.querySelector format is also accepted.\n *\t\t\t\t'keyup@a.some-class': {@link module:ui/template~TemplateListenerSchema}\n *\n *\t\t\t\t// ...\n *\t\t\t}\n *\t\t} );\n *\n * A {@link module:ui/view~View}, another {@link module:ui/template~Template} or a native DOM node\n * can also become a child of a template. When a view is passed, its {@link module:ui/view~View#element} is used:\n *\n *\t\tconst view = new SomeView();\n *\t\tconst childTemplate = new Template( { ... } );\n *\t\tconst childNode = document.createElement( 'b' );\n *\n *\t\tnew Template( {\n *\t\t\ttag: 'p',\n *\n *\t\t\tchildren: [\n *\t\t\t\t// view#element will be added as a child of this <p>.\n *\t\t\t\tview,\n *\n * \t\t\t\t// The output of childTemplate.render() will be added here.\n *\t\t\t\tchildTemplate,\n *\n *\t\t\t\t// Native DOM nodes are included directly in the rendered output.\n *\t\t\t\tchildNode\n *\t\t\t]\n *\t\t} );\n *\n * An entire {@link module:ui/viewcollection~ViewCollection} can be used as a child in the definition:\n *\n *\t\tconst collection = new ViewCollection();\n *\t\tcollection.add( someView );\n *\n *\t\tnew Template( {\n *\t\t\ttag: 'p',\n *\n *\t\t\tchildren: collection\n *\t\t} );\n *\n * @typedef module:ui/template~TemplateDefinition\n * @type Object\n *\n * @property {String} tag See the template {@link module:ui/template~Template#tag} property.\n *\n * @property {Array.<module:ui/template~TemplateDefinition>} [children]\n * See the template {@link module:ui/template~Template#children} property.\n *\n * @property {Object.<String, module:ui/template~TemplateValueSchema>} [attributes]\n * See the template {@link module:ui/template~Template#attributes} property.\n *\n * @property {String|module:ui/template~TemplateValueSchema|Array.<String|module:ui/template~TemplateValueSchema>} [text]\n * See the template {@link module:ui/template~Template#text} property.\n *\n * @property {Object.<String, module:ui/template~TemplateListenerSchema>} [on]\n * See the template {@link module:ui/template~Template#eventListeners} property.\n */\n\n/**\n * Describes a value of an HTML element attribute or `textContent`. It allows combining multiple\n * data sources like static values and {@link module:utils/observablemixin~Observable} attributes.\n *\n * Also see:\n * * {@link module:ui/template~TemplateDefinition} to learn where to use it,\n * * {@link module:ui/template~Template.bind} to learn how to configure\n * {@link module:utils/observablemixin~Observable} attribute bindings,\n * * {@link module:ui/template~Template#render} to learn how to render a template,\n * * {@link module:ui/template~BindChain#to `to()`} and {@link module:ui/template~BindChain#if `if()`}\n * methods to learn more about bindings.\n *\n * Attribute values can be described in many different ways:\n *\n *\t\t// Bind helper will create bindings to attributes of the observable.\n *\t\tconst bind = Template.bind( observable, emitter );\n *\n *\t\tnew Template( {\n *\t\t\ttag: 'p',\n *\t\t\tattributes: {\n *\t\t\t\t// A plain string schema.\n *\t\t\t\t'class': 'static-text',\n *\n *\t\t\t\t// An object schema, binds to the \"foo\" attribute of the\n *\t\t\t\t// observable and follows its value.\n *\t\t\t\t'class': bind.to( 'foo' ),\n *\n *\t\t\t\t// An array schema, combines the above.\n *\t\t\t\t'class': [\n *\t\t\t\t\t'static-text',\n *\t\t\t\t\tbind.to( 'bar', () => { ... } ),\n *\n * \t\t\t\t\t// Bindings can also be conditional.\n *\t\t\t\t\tbind.if( 'baz', 'class-when-baz-is-true' )\n *\t\t\t\t],\n *\n *\t\t\t\t// An array schema, with a custom namespace, e.g. useful for creating SVGs.\n *\t\t\t\t'class': {\n *\t\t\t\t\tns: 'http://ns.url',\n *\t\t\t\t\tvalue: [\n *\t\t\t\t\t\tbind.if( 'baz', 'value-when-true' ),\n *\t\t\t\t\t\t'static-text'\n *\t\t\t\t\t]\n *\t\t\t\t},\n *\n *\t\t\t\t// An object schema, specific for styles.\n *\t\t\t\tstyle: {\n *\t\t\t\t\tcolor: 'red',\n *\t\t\t\t\tbackgroundColor: bind.to( 'qux', () => { ... } )\n *\t\t\t\t}\n *\t\t\t}\n *\t\t} );\n *\n * Text nodes can also have complex values:\n *\n *\t\tconst bind = Template.bind( observable, emitter );\n *\n *\t\t// Will render a \"foo\" text node.\n *\t\tnew Template( {\n *\t\t\ttext: 'foo'\n *\t\t} );\n *\n *\t\t// Will render a \"static text: {observable.foo}\" text node.\n *\t\t// The text of the node will be updated as the \"foo\" attribute changes.\n *\t\tnew Template( {\n *\t\t\ttext: [\n *\t\t\t\t'static text: ',\n *\t\t\t\tbind.to( 'foo', () => { ... } )\n *\t\t\t]\n *\t\t} );\n *\n * @typedef module:ui/template~TemplateValueSchema\n * @type {Object|String|Array}\n */\n\n/**\n * Describes an event listener attached to an HTML element. Such listener can propagate DOM events\n * through an {@link module:utils/observablemixin~Observable} instance, execute custom callbacks\n * or both, if necessary.\n *\n * Also see:\n * * {@link module:ui/template~TemplateDefinition} to learn more about template definitions,\n * * {@link module:ui/template~BindChain#to `to()`} method to learn more about bindings.\n *\n * Check out different ways of attaching event listeners below:\n *\n *\t\t// Bind helper will propagate events through the observable.\n *\t\tconst bind = Template.bind( observable, emitter );\n *\n *\t\tnew Template( {\n *\t\t\ttag: 'p',\n *\t\t\ton: {\n *\t\t\t\t// An object schema. The observable will fire the \"clicked\" event upon DOM \"click\".\n *\t\t\t\tclick: bind.to( 'clicked' )\n *\n *\t\t\t\t// An object schema. It will work for \"click\" event on \"a.foo\" children only.\n *\t\t\t\t'click@a.foo': bind.to( 'clicked' )\n *\n *\t\t\t\t// An array schema, makes the observable propagate multiple events.\n *\t\t\t\tclick: [\n *\t\t\t\t\tbind.to( 'clicked' ),\n *\t\t\t\t\tbind.to( 'executed' )\n *\t\t\t\t],\n *\n *\t\t\t\t// An array schema with a custom callback.\n *\t\t\t\t'click@a.foo': {\n *\t\t\t\t\tbind.to( 'clicked' ),\n *\t\t\t\t\tbind.to( evt => {\n *\t\t\t\t\t\tconsole.log( `${ evt.target } has been clicked!` );\n *\t\t\t\t\t} }\n *\t\t\t\t}\n *\t\t\t}\n *\t\t} );\n *\n * @typedef module:ui/template~TemplateListenerSchema\n * @type {Object|String|Array}\n */\n\n/**\n * The return value of {@link ~Template.bind `Template.bind()`}. It provides `to()` and `if()`\n * methods to create the {@link module:utils/observablemixin~Observable observable} attribute and event bindings.\n *\n * @interface module:ui/template~BindChain\n */\n\n/**\n * Binds an {@link module:utils/observablemixin~Observable observable} to either:\n *\n * * an HTML element attribute or a text node `textContent`, so it remains in sync with the observable\n * attribute as it changes,\n * * or an HTML element DOM event, so the DOM events are propagated through an observable.\n *\n * Some common use cases of `to()` bindings are presented below:\n *\n *\t\tconst bind = Template.bind( observable, emitter );\n *\n *\t\tnew Template( {\n *\t\t\ttag: 'p',\n *\t\t\tattributes: {\n *\t\t\t\t// class=\"...\" attribute gets bound to `observable#a`\n *\t\t\t\tclass: bind.to( 'a' )\n *\t\t\t},\n *\t\t\tchildren: [\n *\t\t\t\t// <p>...</p> gets bound to observable#b; always `toUpperCase()`.\n *\t\t\t\t{\n *\t\t\t\t\ttext: bind.to( 'b', ( value, node ) => value.toUpperCase() )\n *\t\t\t\t}\n *\t\t\t],\n *\t\t\ton: {\n *\t\t\t\tclick: [\n *\t\t\t\t\t// An observable will fire \"clicked\" upon \"click\" in the DOM.\n *\t\t\t\t\tbind.to( 'clicked' ),\n *\n *\t\t\t\t\t// A custom callback will be executed upon \"click\" in the DOM.\n *\t\t\t\t\tbind.to( () => {\n *\t\t\t\t\t\t...\n *\t\t\t\t\t} )\n *\t\t\t\t]\n *\t\t\t}\n *\t\t} ).render();\n *\n * Learn more about using `to()` in the {@link module:ui/template~TemplateValueSchema} and\n * {@link module:ui/template~TemplateListenerSchema}.\n *\n * @method #to\n * @param {String|Function} eventNameOrFunctionOrAttribute An attribute name of\n * {@link module:utils/observablemixin~Observable} or a DOM event name or an event callback.\n * @param {Function} [callback] Allows for processing of the value. Accepts `Node` and `value` as arguments.\n * @returns {module:ui/template~TemplateBinding}\n */\n\n/**\n * Binds an {@link module:utils/observablemixin~Observable observable} to an HTML element attribute or a text\n * node `textContent` so it remains in sync with the observable attribute as it changes.\n *\n * Unlike {@link module:ui/template~BindChain#to}, it controls the presence of the attribute or `textContent`\n * depending on the \"falseness\" of an {@link module:utils/observablemixin~Observable} attribute.\n *\n *\t\tconst bind = Template.bind( observable, emitter );\n *\n *\t\tnew Template( {\n *\t\t\ttag: 'input',\n *\t\t\tattributes: {\n *\t\t\t\t// <input checked> when `observable#a` is not undefined/null/false/''\n *\t\t\t\t// <input> when `observable#a` is undefined/null/false\n *\t\t\t\tchecked: bind.if( 'a' )\n *\t\t\t},\n *\t\t\tchildren: [\n *\t\t\t\t{\n *\t\t\t\t\t// <input>\"b-is-not-set\"</input> when `observable#b` is undefined/null/false/''\n *\t\t\t\t\t// <input></input> when `observable#b` is not \"falsy\"\n *\t\t\t\t\ttext: bind.if( 'b', 'b-is-not-set', ( value, node ) => !value )\n *\t\t\t\t}\n *\t\t\t]\n *\t\t} ).render();\n *\n * Learn more about using `if()` in the {@link module:ui/template~TemplateValueSchema}.\n *\n * @method #if\n * @param {String} attribute An attribute name of {@link module:utils/observablemixin~Observable} used in the binding.\n * @param {String} [valueIfTrue] Value set when the {@link module:utils/observablemixin~Observable} attribute is not\n * undefined/null/false/'' (empty string).\n * @param {Function} [callback] Allows for processing of the value. Accepts `Node` and `value` as arguments.\n * @returns {module:ui/template~TemplateBinding}\n */\n\n/**\n * The {@link module:ui/template~Template#_renderNode} configuration.\n *\n * @private\n * @interface module:ui/template~RenderData\n */\n\n/**\n * Tells {@link module:ui/template~Template#_renderNode} to render\n * children into `DocumentFragment` first and then append the fragment\n * to the parent element. It is a speed optimization.\n *\n * @member {Boolean} #intoFragment\n */\n\n/**\n * A node which is being rendered.\n *\n * @member {HTMLElement|Text} #node\n */\n\n/**\n * Indicates whether the {@module:ui/template~RenderNodeOptions#node} has\n * been provided by {@module:ui/template~Template#apply}.\n *\n * @member {Boolean} #isApplying\n */\n\n/**\n * An object storing the data that helps {@module:ui/template~Template#revert}\n * bringing back an element to its initial state, i.e. before\n * {@module:ui/template~Template#apply} was called.\n *\n * @member {Object} #revertData\n */\n"]}]}