{"remainingRequest":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/babel-loader/lib/index.js!/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-dev-webpack-plugin/lib/translatesourceloader.js?{}!/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-typing/src/inputcommand.js","dependencies":[{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-typing/src/inputcommand.js","mtime":499162500000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-dev-webpack-plugin/lib/translatesourceloader.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tICIvaG9tZS9la2ViZXJhdC9ZYW5kZXguRGlzay9Qcm9qZWxlcmltL0JlbmltUHJvamVsZXJpbS93ZWJzaXRlbS93ZWJzaXRlbS13ZWIvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NsYXNzQ2FsbENoZWNrIjsKaW1wb3J0IF9jcmVhdGVDbGFzcyBmcm9tICIvaG9tZS9la2ViZXJhdC9ZYW5kZXguRGlzay9Qcm9qZWxlcmltL0JlbmltUHJvamVsZXJpbS93ZWJzaXRlbS93ZWJzaXRlbS13ZWIvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZUNsYXNzIjsKaW1wb3J0IF9nZXQgZnJvbSAiL2hvbWUvZWtlYmVyYXQvWWFuZGV4LkRpc2svUHJvamVsZXJpbS9CZW5pbVByb2plbGVyaW0vd2Vic2l0ZW0vd2Vic2l0ZW0td2ViL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9nZXQiOwppbXBvcnQgX2dldFByb3RvdHlwZU9mIGZyb20gIi9ob21lL2VrZWJlcmF0L1lhbmRleC5EaXNrL1Byb2plbGVyaW0vQmVuaW1Qcm9qZWxlcmltL3dlYnNpdGVtL3dlYnNpdGVtLXdlYi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZ2V0UHJvdG90eXBlT2YiOwppbXBvcnQgX2luaGVyaXRzIGZyb20gIi9ob21lL2VrZWJlcmF0L1lhbmRleC5EaXNrL1Byb2plbGVyaW0vQmVuaW1Qcm9qZWxlcmltL3dlYnNpdGVtL3dlYnNpdGVtLXdlYi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHMiOwppbXBvcnQgX2NyZWF0ZVN1cGVyIGZyb20gIi9ob21lL2VrZWJlcmF0L1lhbmRleC5EaXNrL1Byb2plbGVyaW0vQmVuaW1Qcm9qZWxlcmltL3dlYnNpdGVtL3dlYnNpdGVtLXdlYi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY3JlYXRlU3VwZXIiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudG8tc3RyaW5nLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLml0ZXJhdG9yLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMud2Vhay1zZXQuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy93ZWIuZG9tLWNvbGxlY3Rpb25zLml0ZXJhdG9yLmpzIjsKCi8qKgogKiBAbGljZW5zZSBDb3B5cmlnaHQgKGMpIDIwMDMtMjAyMSwgQ0tTb3VyY2UgLSBGcmVkZXJpY28gS25hYmJlbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KICogRm9yIGxpY2Vuc2luZywgc2VlIExJQ0VOU0UubWQgb3IgaHR0cHM6Ly9ja2VkaXRvci5jb20vbGVnYWwvY2tlZGl0b3Itb3NzLWxpY2Vuc2UKICovCgovKioKICogQG1vZHVsZSB0eXBpbmcvaW5wdXRjb21tYW5kCiAqLwppbXBvcnQgQ29tbWFuZCBmcm9tICdAY2tlZGl0b3IvY2tlZGl0b3I1LWNvcmUvc3JjL2NvbW1hbmQnOwppbXBvcnQgQ2hhbmdlQnVmZmVyIGZyb20gJy4vdXRpbHMvY2hhbmdlYnVmZmVyJzsKLyoqCiAqIFRoZSBpbnB1dCBjb21tYW5kLiBVc2VkIGJ5IHRoZSB7QGxpbmsgbW9kdWxlOnR5cGluZy9pbnB1dH5JbnB1dCBpbnB1dCBmZWF0dXJlfSB0byBoYW5kbGUgdHlwaW5nLgogKgogKiBAZXh0ZW5kcyBtb2R1bGU6Y29yZS9jb21tYW5kfkNvbW1hbmQKICovCgp2YXIgSW5wdXRDb21tYW5kID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQ29tbWFuZCkgewogIF9pbmhlcml0cyhJbnB1dENvbW1hbmQsIF9Db21tYW5kKTsKCiAgdmFyIF9zdXBlciA9IF9jcmVhdGVTdXBlcihJbnB1dENvbW1hbmQpOwoKICAvKioKICAgKiBDcmVhdGVzIGFuIGluc3RhbmNlIG9mIHRoZSBjb21tYW5kLgogICAqCiAgICogQHBhcmFtIHttb2R1bGU6Y29yZS9lZGl0b3IvZWRpdG9yfkVkaXRvcn0gZWRpdG9yCiAgICogQHBhcmFtIHtOdW1iZXJ9IHVuZG9TdGVwU2l6ZSBUaGUgbWF4aW11bSBudW1iZXIgb2YgYXRvbWljIGNoYW5nZXMKICAgKiB3aGljaCBjYW4gYmUgY29udGFpbmVkIGluIG9uZSBiYXRjaCBpbiB0aGUgY29tbWFuZCBidWZmZXIuCiAgICovCiAgZnVuY3Rpb24gSW5wdXRDb21tYW5kKGVkaXRvciwgdW5kb1N0ZXBTaXplKSB7CiAgICB2YXIgX3RoaXM7CgogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIElucHV0Q29tbWFuZCk7CgogICAgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBlZGl0b3IpOwogICAgLyoqCiAgICAgKiBUeXBpbmcncyBjaGFuZ2UgYnVmZmVyIHVzZWQgdG8gZ3JvdXAgc3Vic2VxdWVudCBjaGFuZ2VzIGludG8gYmF0Y2hlcy4KICAgICAqCiAgICAgKiBAcmVhZG9ubHkKICAgICAqIEBwcml2YXRlCiAgICAgKiBAbWVtYmVyIHttb2R1bGU6dHlwaW5nL3V0aWxzL2NoYW5nZWJ1ZmZlcn5DaGFuZ2VCdWZmZXJ9ICNfYnVmZmVyCiAgICAgKi8KCiAgICBfdGhpcy5fYnVmZmVyID0gbmV3IENoYW5nZUJ1ZmZlcihlZGl0b3IubW9kZWwsIHVuZG9TdGVwU2l6ZSk7CiAgICAvKioKICAgICAqIFN0b3JlcyBiYXRjaGVzIGNyZWF0ZWQgYnkgdGhlIGlucHV0IGNvbW1hbmQuIFRoZSBiYXRjaGVzIGFyZSB1c2VkIHRvIGRpZmZlcmVudGlhdGUgaW5wdXQgYmF0Y2hlcyBmcm9tIG90aGVyIGJhdGNoZXMgdXNpbmcKICAgICAqIHtAbGluayBtb2R1bGU6dHlwaW5nL2lucHV0fklucHV0I2lzSW5wdXR9IG1ldGhvZC4KICAgICAqCiAgICAgKiBAdHlwZSB7V2Vha1NldDxtb2R1bGU6ZW5naW5lL21vZGVsL2JhdGNofkJhdGNoPn0KICAgICAqIEBwcm90ZWN0ZWQKICAgICAqLwoKICAgIF90aGlzLl9iYXRjaGVzID0gbmV3IFdlYWtTZXQoKTsKICAgIHJldHVybiBfdGhpczsKICB9CiAgLyoqCiAgICogVGhlIGN1cnJlbnQgY2hhbmdlIGJ1ZmZlci4KICAgKgogICAqIEB0eXBlIHttb2R1bGU6dHlwaW5nL3V0aWxzL2NoYW5nZWJ1ZmZlcn5DaGFuZ2VCdWZmZXJ9CiAgICovCgoKICBfY3JlYXRlQ2xhc3MoSW5wdXRDb21tYW5kLCBbewogICAga2V5OiAiYnVmZmVyIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gdGhpcy5fYnVmZmVyOwogICAgfQogICAgLyoqCiAgICAgKiBAaW5oZXJpdERvYwogICAgICovCgogIH0sIHsKICAgIGtleTogImRlc3Ryb3kiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7CiAgICAgIF9nZXQoX2dldFByb3RvdHlwZU9mKElucHV0Q29tbWFuZC5wcm90b3R5cGUpLCAiZGVzdHJveSIsIHRoaXMpLmNhbGwodGhpcyk7CgogICAgICB0aGlzLl9idWZmZXIuZGVzdHJveSgpOwogICAgfQogICAgLyoqCiAgICAgKiBFeGVjdXRlcyB0aGUgaW5wdXQgY29tbWFuZC4gSXQgcmVwbGFjZXMgdGhlIGNvbnRlbnQgd2l0aGluIHRoZSBnaXZlbiByYW5nZSB3aXRoIHRoZSBnaXZlbiB0ZXh0LgogICAgICogUmVwbGFjaW5nIGlzIGEgdHdvIHN0ZXAgcHJvY2VzcywgZmlyc3QgdGhlIGNvbnRlbnQgd2l0aGluIHRoZSByYW5nZSBpcyByZW1vdmVkIGFuZCB0aGVuIHRoZSBuZXcgdGV4dCBpcyBpbnNlcnRlZAogICAgICogYXQgdGhlIGJlZ2lubmluZyBvZiB0aGUgcmFuZ2UgKHdoaWNoIGFmdGVyIHRoZSByZW1vdmFsIGlzIGEgY29sbGFwc2VkIHJhbmdlKS4KICAgICAqCiAgICAgKiBAZmlyZXMgZXhlY3V0ZQogICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSBUaGUgY29tbWFuZCBvcHRpb25zLgogICAgICogQHBhcmFtIHtTdHJpbmd9IFtvcHRpb25zLnRleHQ9JyddIFRoZSB0ZXh0IHRvIGJlIGluc2VydGVkLgogICAgICogQHBhcmFtIHttb2R1bGU6ZW5naW5lL21vZGVsL3JhbmdlflJhbmdlfSBbb3B0aW9ucy5yYW5nZV0gVGhlIHJhbmdlIGluIHdoaWNoIHRoZSB0ZXh0IGlzIGluc2VydGVkLiBEZWZhdWx0cwogICAgICogdG8gdGhlIGZpcnN0IHJhbmdlIGluIHRoZSBjdXJyZW50IHNlbGVjdGlvbi4KICAgICAqIEBwYXJhbSB7bW9kdWxlOmVuZ2luZS9tb2RlbC9yYW5nZX5SYW5nZX0gW29wdGlvbnMucmVzdWx0UmFuZ2VdIFRoZSByYW5nZSB3aGVyZSB0aGUgc2VsZWN0aW9uCiAgICAgKiBzaG91bGQgYmUgcGxhY2VkIGFmdGVyIHRoZSBpbnNlcnRpb24uIElmIG5vdCBzcGVjaWZpZWQsIHRoZSBzZWxlY3Rpb24gd2lsbCBiZSBwbGFjZWQgcmlnaHQgYWZ0ZXIKICAgICAqIHRoZSBpbnNlcnRlZCB0ZXh0LgogICAgICovCgogIH0sIHsKICAgIGtleTogImV4ZWN1dGUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGV4ZWN1dGUoKSB7CiAgICAgIHZhciBfdGhpczIgPSB0aGlzOwoKICAgICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9OwogICAgICB2YXIgbW9kZWwgPSB0aGlzLmVkaXRvci5tb2RlbDsKICAgICAgdmFyIGRvYyA9IG1vZGVsLmRvY3VtZW50OwogICAgICB2YXIgdGV4dCA9IG9wdGlvbnMudGV4dCB8fCAnJzsKICAgICAgdmFyIHRleHRJbnNlcnRpb25zID0gdGV4dC5sZW5ndGg7CiAgICAgIHZhciBzZWxlY3Rpb24gPSBvcHRpb25zLnJhbmdlID8gbW9kZWwuY3JlYXRlU2VsZWN0aW9uKG9wdGlvbnMucmFuZ2UpIDogZG9jLnNlbGVjdGlvbjsKICAgICAgdmFyIHJlc3VsdFJhbmdlID0gb3B0aW9ucy5yZXN1bHRSYW5nZTsKICAgICAgbW9kZWwuZW5xdWV1ZUNoYW5nZSh0aGlzLl9idWZmZXIuYmF0Y2gsIGZ1bmN0aW9uICh3cml0ZXIpIHsKICAgICAgICBfdGhpczIuX2J1ZmZlci5sb2NrKCk7IC8vIFN0b3JlIHRoZSBiYXRjaCBhcyBhbiAnaW5wdXQnIGJhdGNoIGZvciB0aGUgSW5wdXQuaXNJbnB1dCggYmF0Y2ggKSBjaGVjay4KCgogICAgICAgIF90aGlzMi5fYmF0Y2hlcy5hZGQoX3RoaXMyLl9idWZmZXIuYmF0Y2gpOwoKICAgICAgICBtb2RlbC5kZWxldGVDb250ZW50KHNlbGVjdGlvbik7CgogICAgICAgIGlmICh0ZXh0KSB7CiAgICAgICAgICBtb2RlbC5pbnNlcnRDb250ZW50KHdyaXRlci5jcmVhdGVUZXh0KHRleHQsIGRvYy5zZWxlY3Rpb24uZ2V0QXR0cmlidXRlcygpKSwgc2VsZWN0aW9uKTsKICAgICAgICB9CgogICAgICAgIGlmIChyZXN1bHRSYW5nZSkgewogICAgICAgICAgd3JpdGVyLnNldFNlbGVjdGlvbihyZXN1bHRSYW5nZSk7CiAgICAgICAgfSBlbHNlIGlmICghc2VsZWN0aW9uLmlzKCdkb2N1bWVudFNlbGVjdGlvbicpKSB7CiAgICAgICAgICB3cml0ZXIuc2V0U2VsZWN0aW9uKHNlbGVjdGlvbik7CiAgICAgICAgfQoKICAgICAgICBfdGhpczIuX2J1ZmZlci51bmxvY2soKTsKCiAgICAgICAgX3RoaXMyLl9idWZmZXIuaW5wdXQodGV4dEluc2VydGlvbnMpOwogICAgICB9KTsKICAgIH0KICB9XSk7CgogIHJldHVybiBJbnB1dENvbW1hbmQ7Cn0oQ29tbWFuZCk7CgpleHBvcnQgeyBJbnB1dENvbW1hbmQgYXMgZGVmYXVsdCB9Ow=="},{"version":3,"sources":["/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-typing/src/inputcommand.js"],"names":["Command","ChangeBuffer","InputCommand","editor","undoStepSize","_buffer","model","_batches","WeakSet","destroy","options","doc","document","text","textInsertions","length","selection","range","createSelection","resultRange","enqueueChange","batch","writer","lock","add","deleteContent","insertContent","createText","getAttributes","setSelection","is","unlock","input"],"mappings":";;;;;;;;;;;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA,OAAOA,OAAP,MAAoB,sCAApB;AAEA,OAAOC,YAAP,MAAyB,sBAAzB;AAEA;AACA;AACA;AACA;AACA;;IACqBC,Y;;;;;AACpB;AACD;AACA;AACA;AACA;AACA;AACA;AACC,wBAAaC,MAAb,EAAqBC,YAArB,EAAoC;AAAA;;AAAA;;AACnC,8BAAOD,MAAP;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;;AACE,UAAKE,OAAL,GAAe,IAAIJ,YAAJ,CAAkBE,MAAM,CAACG,KAAzB,EAAgCF,YAAhC,CAAf;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;;AACE,UAAKG,QAAL,GAAgB,IAAIC,OAAJ,EAAhB;AAnBmC;AAoBnC;AAED;AACD;AACA;AACA;AACA;;;;;SACC,eAAa;AACZ,aAAO,KAAKH,OAAZ;AACA;AAED;AACD;AACA;;;;WACC,mBAAU;AACT;;AAEA,WAAKA,OAAL,CAAaI,OAAb;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACC,mBAAwB;AAAA;;AAAA,UAAfC,OAAe,uEAAL,EAAK;AACvB,UAAMJ,KAAK,GAAG,KAAKH,MAAL,CAAYG,KAA1B;AACA,UAAMK,GAAG,GAAGL,KAAK,CAACM,QAAlB;AACA,UAAMC,IAAI,GAAGH,OAAO,CAACG,IAAR,IAAgB,EAA7B;AACA,UAAMC,cAAc,GAAGD,IAAI,CAACE,MAA5B;AACA,UAAMC,SAAS,GAAGN,OAAO,CAACO,KAAR,GAAgBX,KAAK,CAACY,eAAN,CAAuBR,OAAO,CAACO,KAA/B,CAAhB,GAAyDN,GAAG,CAACK,SAA/E;AACA,UAAMG,WAAW,GAAGT,OAAO,CAACS,WAA5B;AAEAb,MAAAA,KAAK,CAACc,aAAN,CAAqB,KAAKf,OAAL,CAAagB,KAAlC,EAAyC,UAAAC,MAAM,EAAI;AAClD,QAAA,MAAI,CAACjB,OAAL,CAAakB,IAAb,GADkD,CAGlD;;;AACA,QAAA,MAAI,CAAChB,QAAL,CAAciB,GAAd,CAAmB,MAAI,CAACnB,OAAL,CAAagB,KAAhC;;AAEAf,QAAAA,KAAK,CAACmB,aAAN,CAAqBT,SAArB;;AAEA,YAAKH,IAAL,EAAY;AACXP,UAAAA,KAAK,CAACoB,aAAN,CAAqBJ,MAAM,CAACK,UAAP,CAAmBd,IAAnB,EAAyBF,GAAG,CAACK,SAAJ,CAAcY,aAAd,EAAzB,CAArB,EAA+EZ,SAA/E;AACA;;AAED,YAAKG,WAAL,EAAmB;AAClBG,UAAAA,MAAM,CAACO,YAAP,CAAqBV,WAArB;AACA,SAFD,MAEO,IAAK,CAACH,SAAS,CAACc,EAAV,CAAc,mBAAd,CAAN,EAA4C;AAClDR,UAAAA,MAAM,CAACO,YAAP,CAAqBb,SAArB;AACA;;AAED,QAAA,MAAI,CAACX,OAAL,CAAa0B,MAAb;;AAEA,QAAA,MAAI,CAAC1B,OAAL,CAAa2B,KAAb,CAAoBlB,cAApB;AACA,OArBD;AAsBA;;;;EA5FwCd,O;;SAArBE,Y","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module typing/inputcommand\n */\n\nimport Command from '@ckeditor/ckeditor5-core/src/command';\n\nimport ChangeBuffer from './utils/changebuffer';\n\n/**\n * The input command. Used by the {@link module:typing/input~Input input feature} to handle typing.\n *\n * @extends module:core/command~Command\n */\nexport default class InputCommand extends Command {\n\t/**\n\t * Creates an instance of the command.\n\t *\n\t * @param {module:core/editor/editor~Editor} editor\n\t * @param {Number} undoStepSize The maximum number of atomic changes\n\t * which can be contained in one batch in the command buffer.\n\t */\n\tconstructor( editor, undoStepSize ) {\n\t\tsuper( editor );\n\n\t\t/**\n\t\t * Typing's change buffer used to group subsequent changes into batches.\n\t\t *\n\t\t * @readonly\n\t\t * @private\n\t\t * @member {module:typing/utils/changebuffer~ChangeBuffer} #_buffer\n\t\t */\n\t\tthis._buffer = new ChangeBuffer( editor.model, undoStepSize );\n\n\t\t/**\n\t\t * Stores batches created by the input command. The batches are used to differentiate input batches from other batches using\n\t\t * {@link module:typing/input~Input#isInput} method.\n\t\t *\n\t\t * @type {WeakSet<module:engine/model/batch~Batch>}\n\t\t * @protected\n\t\t */\n\t\tthis._batches = new WeakSet();\n\t}\n\n\t/**\n\t * The current change buffer.\n\t *\n\t * @type {module:typing/utils/changebuffer~ChangeBuffer}\n\t */\n\tget buffer() {\n\t\treturn this._buffer;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdestroy() {\n\t\tsuper.destroy();\n\n\t\tthis._buffer.destroy();\n\t}\n\n\t/**\n\t * Executes the input command. It replaces the content within the given range with the given text.\n\t * Replacing is a two step process, first the content within the range is removed and then the new text is inserted\n\t * at the beginning of the range (which after the removal is a collapsed range).\n\t *\n\t * @fires execute\n\t * @param {Object} [options] The command options.\n\t * @param {String} [options.text=''] The text to be inserted.\n\t * @param {module:engine/model/range~Range} [options.range] The range in which the text is inserted. Defaults\n\t * to the first range in the current selection.\n\t * @param {module:engine/model/range~Range} [options.resultRange] The range where the selection\n\t * should be placed after the insertion. If not specified, the selection will be placed right after\n\t * the inserted text.\n\t */\n\texecute( options = {} ) {\n\t\tconst model = this.editor.model;\n\t\tconst doc = model.document;\n\t\tconst text = options.text || '';\n\t\tconst textInsertions = text.length;\n\t\tconst selection = options.range ? model.createSelection( options.range ) : doc.selection;\n\t\tconst resultRange = options.resultRange;\n\n\t\tmodel.enqueueChange( this._buffer.batch, writer => {\n\t\t\tthis._buffer.lock();\n\n\t\t\t// Store the batch as an 'input' batch for the Input.isInput( batch ) check.\n\t\t\tthis._batches.add( this._buffer.batch );\n\n\t\t\tmodel.deleteContent( selection );\n\n\t\t\tif ( text ) {\n\t\t\t\tmodel.insertContent( writer.createText( text, doc.selection.getAttributes() ), selection );\n\t\t\t}\n\n\t\t\tif ( resultRange ) {\n\t\t\t\twriter.setSelection( resultRange );\n\t\t\t} else if ( !selection.is( 'documentSelection' ) ) {\n\t\t\t\twriter.setSelection( selection );\n\t\t\t}\n\n\t\t\tthis._buffer.unlock();\n\n\t\t\tthis._buffer.input( textInsertions );\n\t\t} );\n\t}\n}\n"]}]}