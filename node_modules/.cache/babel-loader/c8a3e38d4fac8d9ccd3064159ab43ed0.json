{"remainingRequest":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/babel-loader/lib/index.js!/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-dev-webpack-plugin/lib/translatesourceloader.js?{}!/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-engine/src/conversion/downcasthelpers.js","dependencies":[{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-engine/src/conversion/downcasthelpers.js","mtime":499162500000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-dev-webpack-plugin/lib/translatesourceloader.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-engine/src/conversion/downcasthelpers.js"],"names":["ModelRange","ModelSelection","ModelElement","ViewAttributeElement","DocumentSelection","ConversionHelpers","cloneDeep","CKEditorError","toArray","DowncastHelpers","config","add","downcastElementToElement","downcastAttributeToElement","downcastAttributeToAttribute","downcastMarkerToElement","downcastMarkerToHighlight","downcastMarkerToData","insertText","evt","data","conversionApi","consumable","consume","item","viewWriter","writer","viewPosition","mapper","toViewPosition","range","start","viewText","createText","insert","remove","viewStart","position","modelEnd","getShiftedBy","length","viewEnd","isPhantom","viewRange","createRange","removed","getTrimmed","createRangeIn","getItems","child","unbindViewElement","createViewElementFromHighlightDescriptor","descriptor","viewElement","createAttributeElement","attributes","classes","_addClass","priority","_priority","_id","id","convertRangeSelection","selection","isCollapsed","viewRanges","getRanges","toViewRange","push","setSelection","backward","isBackward","convertCollapsedSelection","modelPosition","getFirstPosition","brokenPosition","breakAttributes","clearAttributes","viewSelection","document","end","parent","isAttached","mergeAttributes","wrap","elementCreator","oldViewElement","attributeOldValue","newViewElement","attributeNewValue","name","getFirstRange","unwrap","insertElement","bindElements","insertUIElement","isOpening","viewStartElement","viewEndElement","markerRange","value","bindElementToMarker","markerName","stop","removeUIElement","elements","markerNameToElements","element","unbindElementFromMarkerName","clear","createRangeOn","clearClonedElementsGroup","insertMarkerData","viewCreator","viewMarkerData","handleMarkerBoundary","isStart","canInsertElement","schema","checkChild","insertMarkerAsElement","modelElement","isBefore","nodeAfter","nodeBefore","toViewElement","insertMarkerAsAttribute","attributeName","group","markerNames","hasAttribute","getAttribute","split","unshift","setAttribute","join","viewElementName","attrs","createUIElement","removeMarkerData","viewData","is","removeMarkerFromAttribute","Set","delete","size","removeAttribute","Array","from","changeAttribute","attributeCreator","oldAttribute","newAttribute","key","className","removeClass","keys","Object","removeStyle","addClass","setStyle","highlightText","highlightDescriptor","prepareDescriptor","rangeAfterWrap","isSimilar","highlightElement","test","getCustomProperty","_createIn","removeHighlight","viewHighlightElement","view","normalizeToElementConfig","dispatcher","on","model","converterPriority","triggerBy","attributeKey","_mapReconversionTriggerEvent","children","childName","modelKey","eventName","values","modelValue","getFromAttributeCreator","normalizeToAttributeConfig","substr","viewElementType","modelData","createViewElementFromDefinition","viewElementDefinition","assign","createContainerElement","options","DEFAULT_PRIORITY","styles","modelAttributeValue"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAEA,OAAOA,UAAP,MAAuB,gBAAvB;AACA,OAAOC,cAAP,MAA2B,oBAA3B;AACA,OAAOC,YAAP,MAAyB,kBAAzB;AAEA,OAAOC,oBAAP,MAAiC,0BAAjC;AACA,OAAOC,iBAAP,MAA8B,4BAA9B;AACA,OAAOC,iBAAP,MAA8B,qBAA9B;AAEA,SAASC,SAAT,QAA0B,WAA1B;AACA,OAAOC,aAAP,MAA0B,6CAA1B;AACA,OAAOC,OAAP,MAAoB,uCAApB;AAEA;AACA;AACA;AACA;AACA;;IACqBC,e;;;;;;;;;;;;;;AACpB;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,8BAAkBC,MAAlB,EAA2B;AAC1B,aAAO,KAAKC,GAAL,CAAUC,wBAAwB,CAAEF,MAAF,CAAlC,CAAP;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACC,4BAAoBA,MAApB,EAA6B;AAC5B,aAAO,KAAKC,GAAL,CAAUE,0BAA0B,CAAEH,MAAF,CAApC,CAAP;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACC,8BAAsBA,MAAtB,EAA+B;AAC9B,aAAO,KAAKC,GAAL,CAAUG,4BAA4B,CAAEJ,MAAF,CAAtC,CAAP;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACC,yBAAiBA,MAAjB,EAA0B;AACzB,aAAO,KAAKC,GAAL,CAAUI,uBAAuB,CAAEL,MAAF,CAAjC,CAAP;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA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","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * Contains downcast (model-to-view) converters for {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher}.\n *\n * @module engine/conversion/downcasthelpers\n */\n\nimport ModelRange from '../model/range';\nimport ModelSelection from '../model/selection';\nimport ModelElement from '../model/element';\n\nimport ViewAttributeElement from '../view/attributeelement';\nimport DocumentSelection from '../model/documentselection';\nimport ConversionHelpers from './conversionhelpers';\n\nimport { cloneDeep } from 'lodash-es';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport toArray from '@ckeditor/ckeditor5-utils/src/toarray';\n\n/**\n * Downcast conversion helper functions.\n *\n * @extends module:engine/conversion/conversionhelpers~ConversionHelpers\n */\nexport default class DowncastHelpers extends ConversionHelpers {\n\t/**\n\t * Model element to view element conversion helper.\n\t *\n\t * This conversion results in creating a view element. For example, model `<paragraph>Foo</paragraph>` becomes `<p>Foo</p>` in the view.\n\t *\n\t *\t\teditor.conversion.for( 'downcast' ).elementToElement( {\n\t *\t\t\tmodel: 'paragraph',\n\t *\t\t\tview: 'p'\n\t *\t\t} );\n\t *\n\t *\t\teditor.conversion.for( 'downcast' ).elementToElement( {\n\t *\t\t\tmodel: 'paragraph',\n\t *\t\t\tview: 'div',\n\t *\t\t\tconverterPriority: 'high'\n\t *\t\t} );\n\t *\n\t *\t\teditor.conversion.for( 'downcast' ).elementToElement( {\n\t *\t\t\tmodel: 'fancyParagraph',\n\t *\t\t\tview: {\n\t *\t\t\t\tname: 'p',\n\t *\t\t\t\tclasses: 'fancy'\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t *\t\teditor.conversion.for( 'downcast' ).elementToElement( {\n\t *\t\t\tmodel: 'heading',\n\t *\t\t\tview: ( modelElement, conversionApi ) => {\n\t *\t\t\t\tconst { writer } = conversionApi;\n\t *\n\t *\t\t\t\treturn writer.createContainerElement( 'h' + modelElement.getAttribute( 'level' ) );\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t * The element-to-element conversion supports the reconversion mechanism. This is helpful in the conversion to complex view structures\n\t * where multiple atomic element-to-element and attribute-to-attribute or attribute-to-element could be used. By specifying\n\t * `triggerBy()` events you can trigger reconverting the model to full view tree structures at once.\n\t *\n\t *\t\teditor.conversion.for( 'downcast' ).elementToElement( {\n\t *\t\t\tmodel: 'complex',\n\t *\t\t\tview: ( modelElement, conversionApi ) => createComplexViewFromModel( modelElement, conversionApi ),\n\t *\t\t\ttriggerBy: {\n\t *\t\t\t\tattributes: [ 'foo', 'bar' ],\n\t *\t\t\t\tchildren: [ 'slot' ]\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t * See {@link module:engine/conversion/conversion~Conversion#for `conversion.for()`} to learn how to add a converter\n\t * to the conversion process.\n\t *\n\t * You can read more about element-to-element conversion in the\n\t * {@glink framework/guides/deep-dive/conversion/custom-element-conversion Custom element conversion} guide.\n\t *\n\t * @method #elementToElement\n\t * @param {Object} config Conversion configuration.\n\t * @param {String} config.model The name of the model element to convert.\n\t * @param {module:engine/view/elementdefinition~ElementDefinition|Function} config.view A view element definition or a function\n\t * that takes the model element and {@link module:engine/conversion/downcastdispatcher~DowncastConversionApi downcast conversion API}\n\t * as parameters and returns a view container element.\n\t * @param {Object} [config.triggerBy] Reconversion triggers. At least one trigger must be defined.\n\t * @param {Array.<String>} config.triggerBy.attributes The name of the element's attributes whose change will trigger element\n\t * reconversion.\n\t * @param {Array.<String>} config.triggerBy.children The name of direct children whose adding or removing will trigger element\n\t * reconversion.\n\t * @returns {module:engine/conversion/downcasthelpers~DowncastHelpers}\n\t */\n\telementToElement( config ) {\n\t\treturn this.add( downcastElementToElement( config ) );\n\t}\n\n\t/**\n\t * Model attribute to view element conversion helper.\n\t *\n\t * This conversion results in wrapping view nodes with a view attribute element. For example, a model text node with\n\t * `\"Foo\"` as data and the `bold` attribute becomes `<strong>Foo</strong>` in the view.\n\t *\n\t *\t\teditor.conversion.for( 'downcast' ).attributeToElement( {\n\t *\t\t\tmodel: 'bold',\n\t *\t\t\tview: 'strong'\n\t *\t\t} );\n\t *\n\t *\t\teditor.conversion.for( 'downcast' ).attributeToElement( {\n\t *\t\t\tmodel: 'bold',\n\t *\t\t\tview: 'b',\n\t *\t\t\tconverterPriority: 'high'\n\t *\t\t} );\n\t *\n\t *\t\teditor.conversion.for( 'downcast' ).attributeToElement( {\n\t *\t\t\tmodel: 'invert',\n\t *\t\t\tview: {\n\t *\t\t\t\tname: 'span',\n\t *\t\t\t\tclasses: [ 'font-light', 'bg-dark' ]\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t *\t\teditor.conversion.for( 'downcast' ).attributeToElement( {\n\t *\t\t\tmodel: {\n\t *\t\t\t\tkey: 'fontSize',\n\t *\t\t\t\tvalues: [ 'big', 'small' ]\n\t *\t\t\t},\n\t *\t\t\tview: {\n\t *\t\t\t\tbig: {\n\t *\t\t\t\t\tname: 'span',\n\t *\t\t\t\t\tstyles: {\n\t *\t\t\t\t\t\t'font-size': '1.2em'\n\t *\t\t\t\t\t}\n\t *\t\t\t\t},\n\t *\t\t\t\tsmall: {\n\t *\t\t\t\t\tname: 'span',\n\t *\t\t\t\t\tstyles: {\n\t *\t\t\t\t\t\t'font-size': '0.8em'\n\t *\t\t\t\t\t}\n\t *\t\t\t\t}\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t *\t\teditor.conversion.for( 'downcast' ).attributeToElement( {\n\t *\t\t\tmodel: 'bold',\n\t *\t\t\tview: ( modelAttributeValue, conversionApi ) => {\n\t *\t\t\t\tconst { writer } = conversionApi;\n\t *\n\t *\t\t\t\treturn writer.createAttributeElement( 'span', {\n\t *\t\t\t\t\tstyle: 'font-weight:' + modelAttributeValue\n\t *\t\t\t\t} );\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t *\t\teditor.conversion.for( 'downcast' ).attributeToElement( {\n\t *\t\t\tmodel: {\n\t *\t\t\t\tkey: 'color',\n\t *\t\t\t\tname: '$text'\n\t *\t\t\t},\n\t *\t\t\tview: ( modelAttributeValue, conversionApi ) => {\n\t *\t\t\t\tconst { writer } = conversionApi;\n\t *\n\t *\t\t\t\treturn writer.createAttributeElement( 'span', {\n\t *\t\t\t\t\tstyle: 'color:' + modelAttributeValue\n\t *\t\t\t\t} );\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t * See {@link module:engine/conversion/conversion~Conversion#for `conversion.for()`} to learn how to add a converter\n\t * to the conversion process.\n\t *\n\t * @method #attributeToElement\n\t * @param {Object} config Conversion configuration.\n\t * @param {String|Object} config.model The key of the attribute to convert from or a `{ key, values }` object. `values` is an array\n\t * of `String`s with possible values if the model attribute is an enumerable.\n\t * @param {module:engine/view/elementdefinition~ElementDefinition|Function|Object} config.view A view element definition or a function\n\t * that takes the model attribute value and\n\t * {@link module:engine/conversion/downcastdispatcher~DowncastConversionApi downcast conversion API} as parameters and returns a view\n\t * attribute element. If `config.model.values` is given, `config.view` should be an object assigning values from `config.model.values`\n\t * to view element definitions or functions.\n\t * @param {module:utils/priorities~PriorityString} [config.converterPriority='normal'] Converter priority.\n\t * @returns {module:engine/conversion/downcasthelpers~DowncastHelpers}\n\t */\n\tattributeToElement( config ) {\n\t\treturn this.add( downcastAttributeToElement( config ) );\n\t}\n\n\t/**\n\t * Model attribute to view attribute conversion helper.\n\t *\n\t * This conversion results in adding an attribute to a view node, basing on an attribute from a model node. For example,\n\t * `<image src='foo.jpg'></image>` is converted to `<img src='foo.jpg'></img>`.\n\t *\n\t *\t\teditor.conversion.for( 'downcast' ).attributeToAttribute( {\n\t *\t\t\tmodel: 'source',\n\t *\t\t\tview: 'src'\n\t *\t\t} );\n\t *\n\t *\t\teditor.conversion.for( 'downcast' ).attributeToAttribute( {\n\t *\t\t\tmodel: 'source',\n\t *\t\t\tview: 'href',\n\t *\t\t\tconverterPriority: 'high'\n\t *\t\t} );\n\t *\n\t *\t\teditor.conversion.for( 'downcast' ).attributeToAttribute( {\n\t *\t\t\tmodel: {\n\t *\t\t\t\tname: 'image',\n\t *\t\t\t\tkey: 'source'\n\t *\t\t\t},\n\t *\t\t\tview: 'src'\n\t *\t\t} );\n\t *\n\t *\t\teditor.conversion.for( 'downcast' ).attributeToAttribute( {\n\t *\t\t\tmodel: {\n\t *\t\t\t\tname: 'styled',\n\t *\t\t\t\tvalues: [ 'dark', 'light' ]\n\t *\t\t\t},\n\t *\t\t\tview: {\n\t *\t\t\t\tdark: {\n\t *\t\t\t\t\tkey: 'class',\n\t *\t\t\t\t\tvalue: [ 'styled', 'styled-dark' ]\n\t *\t\t\t\t},\n\t *\t\t\t\tlight: {\n\t *\t\t\t\t\tkey: 'class',\n\t *\t\t\t\t\tvalue: [ 'styled', 'styled-light' ]\n\t *\t\t\t\t}\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t *\t\teditor.conversion.for( 'downcast' ).attributeToAttribute( {\n\t *\t\t\tmodel: 'styled',\n\t *\t\t\tview: modelAttributeValue => ( {\n\t *\t\t\t\tkey: 'class',\n\t *\t\t\t\tvalue: 'styled-' + modelAttributeValue\n\t *\t\t\t} )\n\t *\t\t} );\n\t *\n\t * **Note**: Downcasting to a style property requires providing `value` as an object:\n\t *\n\t *\t\teditor.conversion.for( 'downcast' ).attributeToAttribute( {\n\t *\t\t\tmodel: 'lineHeight',\n\t *\t\t\tview: modelAttributeValue => ( {\n\t *\t\t\t\tkey: 'style',\n\t *\t\t\t\tvalue: {\n\t *\t\t\t\t\t'line-height': modelAttributeValue,\n\t *\t\t\t\t\t'border-bottom': '1px dotted #ba2'\n\t *\t\t\t\t}\n\t *\t\t\t} )\n\t *\t\t} );\n\t *\n\t * See {@link module:engine/conversion/conversion~Conversion#for `conversion.for()`} to learn how to add a converter\n\t * to the conversion process.\n\t *\n\t * @method #attributeToAttribute\n\t * @param {Object} config Conversion configuration.\n\t * @param {String|Object} config.model The key of the attribute to convert from or a `{ key, values, [ name ] }` object describing\n\t * the attribute key, possible values and, optionally, an element name to convert from.\n\t * @param {String|Object|Function} config.view A view attribute key, or a `{ key, value }` object or a function that takes\n\t * the model attribute value and {@link module:engine/conversion/downcastdispatcher~DowncastConversionApi downcast conversion API}\n\t * as parameters and returns a `{ key, value }` object. If `key` is `'class'`, `value` can be a `String` or an\n\t * array of `String`s. If `key` is `'style'`, `value` is an object with key-value pairs. In other cases, `value` is a `String`.\n\t * If `config.model.values` is set, `config.view` should be an object assigning values from `config.model.values` to\n\t * `{ key, value }` objects or a functions.\n\t * @param {module:utils/priorities~PriorityString} [config.converterPriority='normal'] Converter priority.\n\t * @returns {module:engine/conversion/downcasthelpers~DowncastHelpers}\n\t */\n\tattributeToAttribute( config ) {\n\t\treturn this.add( downcastAttributeToAttribute( config ) );\n\t}\n\n\t/**\n\t * Model marker to view element conversion helper.\n\t *\n\t * **Note**: This method should be used only for editing downcast. For data downcast, use\n\t * {@link #markerToData `#markerToData()`} that produces valid HTML data.\n\t *\n\t * This conversion results in creating a view element on the boundaries of the converted marker. If the converted marker\n\t * is collapsed, only one element is created. For example, model marker set like this: `<paragraph>F[oo b]ar</paragraph>`\n\t * becomes `<p>F<span data-marker=\"search\"></span>oo b<span data-marker=\"search\"></span>ar</p>` in the view.\n\t *\n\t *\t\teditor.conversion.for( 'editingDowncast' ).markerToElement( {\n\t *\t\t\tmodel: 'search',\n\t *\t\t\tview: 'marker-search'\n\t *\t\t} );\n\t *\n\t *\t\teditor.conversion.for( 'editingDowncast' ).markerToElement( {\n\t *\t\t\tmodel: 'search',\n\t *\t\t\tview: 'search-result',\n\t *\t\t\tconverterPriority: 'high'\n\t *\t\t} );\n\t *\n\t *\t\teditor.conversion.for( 'editingDowncast' ).markerToElement( {\n\t *\t\t\tmodel: 'search',\n\t *\t\t\tview: {\n\t *\t\t\t\tname: 'span',\n\t *\t\t\t\tattributes: {\n\t *\t\t\t\t\t'data-marker': 'search'\n\t *\t\t\t\t}\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t *\t\teditor.conversion.for( 'editingDowncast' ).markerToElement( {\n\t *\t\t\tmodel: 'search',\n\t *\t\t\tview: ( markerData, conversionApi ) => {\n\t *\t\t\t\tconst { writer } = conversionApi;\n\t *\n\t *\t\t\t\treturn writer.createUIElement( 'span', {\n\t *\t\t\t\t\t'data-marker': 'search',\n\t *\t\t\t\t\t'data-start': markerData.isOpening\n\t *\t\t\t\t} );\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t * If a function is passed as the `config.view` parameter, it will be used to generate both boundary elements. The function\n\t * receives the `data` object and {@link module:engine/conversion/downcastdispatcher~DowncastConversionApi downcast conversion API}\n\t * as a parameters and should return an instance of the\n\t * {@link module:engine/view/uielement~UIElement view UI element}. The `data` object and\n\t * {@link module:engine/conversion/downcastdispatcher~DowncastConversionApi `conversionApi`} are passed from\n\t * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:addMarker}. Additionally,\n\t * the `data.isOpening` parameter is passed, which is set to `true` for the marker start boundary element, and `false` to\n\t * the marker end boundary element.\n\t *\n\t * See {@link module:engine/conversion/conversion~Conversion#for `conversion.for()`} to learn how to add a converter\n\t * to the conversion process.\n\t *\n\t * @method #markerToElement\n\t * @param {Object} config Conversion configuration.\n\t * @param {String} config.model The name of the model marker (or model marker group) to convert.\n\t * @param {module:engine/view/elementdefinition~ElementDefinition|Function} config.view A view element definition or a function that\n\t * takes the model marker data and {@link module:engine/conversion/downcastdispatcher~DowncastConversionApi downcast conversion API}\n\t * as a parameters and returns a view UI element.\n\t * @param {module:utils/priorities~PriorityString} [config.converterPriority='normal'] Converter priority.\n\t * @returns {module:engine/conversion/downcasthelpers~DowncastHelpers}\n\t */\n\tmarkerToElement( config ) {\n\t\treturn this.add( downcastMarkerToElement( config ) );\n\t}\n\n\t/**\n\t * Model marker to highlight conversion helper.\n\t *\n\t * This conversion results in creating a highlight on view nodes. For this kind of conversion,\n\t * {@link module:engine/conversion/downcasthelpers~HighlightDescriptor} should be provided.\n\t *\n\t * For text nodes, a `<span>` {@link module:engine/view/attributeelement~AttributeElement} is created and it wraps all text nodes\n\t * in the converted marker range. For example, a model marker set like this: `<paragraph>F[oo b]ar</paragraph>` becomes\n\t * `<p>F<span class=\"comment\">oo b</span>ar</p>` in the view.\n\t *\n\t * {@link module:engine/view/containerelement~ContainerElement} may provide a custom way of handling highlight. Most often,\n\t * the element itself is given classes and attributes described in the highlight descriptor (instead of being wrapped in `<span>`).\n\t * For example, a model marker set like this: `[<image src=\"foo.jpg\"></image>]` becomes `<img src=\"foo.jpg\" class=\"comment\"></img>`\n\t * in the view.\n\t *\n\t * For container elements, the conversion is two-step. While the converter processes the highlight descriptor and passes it\n\t * to a container element, it is the container element instance itself that applies values from the highlight descriptor.\n\t * So, in a sense, the converter takes care of stating what should be applied on what, while the element decides how to apply that.\n\t *\n\t *\t\teditor.conversion.for( 'downcast' ).markerToHighlight( { model: 'comment', view: { classes: 'comment' } } );\n\t *\n\t *\t\teditor.conversion.for( 'downcast' ).markerToHighlight( {\n\t *\t\t\tmodel: 'comment',\n\t *\t\t\tview: { classes: 'comment' },\n\t *\t\t\tconverterPriority: 'high'\n\t *\t\t} );\n\t *\n\t *\t\teditor.conversion.for( 'downcast' ).markerToHighlight( {\n\t *\t\t\tmodel: 'comment',\n\t *\t\t\tview: ( data, conversionApi ) => {\n\t *\t\t\t\t// Assuming that the marker name is in a form of comment:commentType:commentId.\n\t *\t\t\t\tconst [ , commentType, commentId ] = data.markerName.split( ':' );\n\t *\n\t *\t\t\t\treturn {\n\t *\t\t\t\t\tclasses: [ 'comment', 'comment-' + commentType ],\n\t *\t\t\t\t\tattributes: { 'data-comment-id': commentId }\n\t *\t\t\t\t};\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t * If a function is passed as the `config.view` parameter, it will be used to generate the highlight descriptor. The function\n\t * receives the `data` object and {@link module:engine/conversion/downcastdispatcher~DowncastConversionApi downcast conversion API}\n\t * as a parameters and should return a\n\t * {@link module:engine/conversion/downcasthelpers~HighlightDescriptor highlight descriptor}.\n\t * The `data` object properties are passed from {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:addMarker}.\n\t *\n\t * See {@link module:engine/conversion/conversion~Conversion#for `conversion.for()`} to learn how to add a converter\n\t * to the conversion process.\n\t *\n\t * @method #markerToHighlight\n\t * @param {Object} config Conversion configuration.\n\t * @param {String} config.model The name of the model marker (or model marker group) to convert.\n\t * @param {module:engine/conversion/downcasthelpers~HighlightDescriptor|Function} config.view A highlight descriptor\n\t * that will be used for highlighting or a function that takes the model marker data and\n\t * {@link module:engine/conversion/downcastdispatcher~DowncastConversionApi downcast conversion API} as a parameters\n\t * and returns a highlight descriptor.\n\t * @param {module:utils/priorities~PriorityString} [config.converterPriority='normal'] Converter priority.\n\t * @returns {module:engine/conversion/downcasthelpers~DowncastHelpers}\n\t */\n\tmarkerToHighlight( config ) {\n\t\treturn this.add( downcastMarkerToHighlight( config ) );\n\t}\n\n\t/**\n\t * Model marker converter for data downcast.\n\t *\n\t * This conversion creates a representation for model marker boundaries in the view:\n\t *\n\t * * If the marker boundary is at a position where text nodes are allowed, then a view element with the specified tag name\n\t * and `name` attribute is added at this position.\n\t * * In other cases, a specified attribute is set on a view element that is before or after the marker boundary.\n\t *\n\t * Typically, marker names use the `group:uniqueId:otherData` convention. For example: `comment:e34zfk9k2n459df53sjl34:zx32c`.\n\t * The default configuration for this conversion is that the first part is the `group` part and the rest of\n\t * the marker name becomes the `name` part.\n\t *\n\t * Tag and attribute names and values are generated from the marker name:\n\t *\n\t * * Templates for attributes are `data-[group]-start-before=\"[name]\"`, `data-[group]-start-after=\"[name]\"`,\n\t * `data-[group]-end-before=\"[name]\"` and `data-[group]-end-after=\"[name]\"`.\n\t * * Templates for view elements are `<[group]-start name=\"[name]\">` and `<[group]-end name=\"[name]\">`.\n\t *\n\t * Attributes mark whether the given marker's start or end boundary is before or after the given element.\n\t * Attributes `data-[group]-start-before` and `data-[group]-end-after` are favored.\n\t * The other two are used when the former two cannot be used.\n\t *\n\t * The conversion configuration can take a function that will generate different group and name parts.\n\t * If such function is set as the `config.view` parameter, it is passed a marker name and it is expected to return an object with two\n\t * properties: `group` and `name`. If the function returns a falsy value, the conversion will not take place.\n\t *\n\t * Basic usage:\n\t *\n\t *\t\t// Using the default conversion.\n\t *\t\t// In this case, all markers whose name starts with 'comment:' will be converted.\n\t *\t\t// The `group` parameter will be set to `comment`.\n\t *\t\t// The `name` parameter will be the rest of the marker name (without `:`).\n\t *\t\teditor.conversion.for( 'dataDowncast' ).markerToData( {\n\t *\t\t\tmodel: 'comment'\n\t *\t\t} );\n\t *\n\t * An example of a view that may be generated by this conversion (assuming a marker with the name `comment:commentId:uid` marked\n\t * by `[]`):\n\t *\n\t *\t\t// Model:\n\t *\t\t<paragraph>Foo[bar</paragraph>\n\t *\t\t<image src=\"abc.jpg\"></image>]\n\t *\n\t *\t\t// View:\n\t *\t\t<p>Foo<comment-start name=\"commentId:uid\"></comment-start>bar</p>\n\t *\t\t<figure data-comment-end-after=\"commentId:uid\" class=\"image\"><img src=\"abc.jpg\" /></figure>\n\t *\n\t * In the example above, the comment starts before \"bar\" and ends after the image.\n\t *\n\t * If the `name` part is empty, the following view may be generated:\n\t *\n\t *\t\t<p>Foo <myMarker-start></myMarker-start>bar</p>\n\t *\t\t<figure data-myMarker-end-after=\"\" class=\"image\"><img src=\"abc.jpg\" /></figure>\n\t *\n\t * **Note:** A situation where some markers have the `name` part and some do not have it is incorrect and should be avoided.\n\t *\n\t * Examples where `data-group-start-after` and `data-group-end-before` are used:\n\t *\n\t *\t\t// Model:\n\t *\t\t<blockQuote>[]<paragraph>Foo</paragraph></blockQuote>\n\t *\n\t * \t\t// View:\n\t *\t\t<blockquote><p data-group-end-before=\"name\" data-group-start-before=\"name\">Foo</p></blockquote>\n\t *\n\t * Similarly, when a marker is collapsed after the last element:\n\t *\n\t *\t\t// Model:\n\t *\t\t<blockQuote><paragraph>Foo</paragraph>[]</blockQuote>\n\t *\n\t *\t\t// View:\n\t *\t\t<blockquote><p data-group-end-after=\"name\" data-group-start-after=\"name\">Foo</p></blockquote>\n\t *\n\t * When there are multiple markers from the same group stored in the same attribute of the same element, their\n\t * name parts are put together in the attribute value, for example: `data-group-start-before=\"name1,name2,name3\"`.\n\t *\n\t * Other examples of usage:\n\t *\n\t *\t\t// Using a custom function which is the same as the default conversion:\n\t *\t\teditor.conversion.for( 'dataDowncast' ).markerToData( {\n\t *\t\t\tmodel: 'comment'\n\t *\t\t\tview: markerName => ( {\n\t *\t\t\t\tgroup: 'comment',\n\t *\t\t\t\tname: markerName.substr( 8 ) // Removes 'comment:' part.\n\t *\t\t\t} )\n\t *\t\t} );\n\t *\n\t *\t\t// Using the converter priority:\n\t *\t\teditor.conversion.for( 'dataDowncast' ).markerToData( {\n\t *\t\t\tmodel: 'comment'\n\t *\t\t\tview: markerName => ( {\n\t *\t\t\t\tgroup: 'comment',\n\t *\t\t\t\tname: markerName.substr( 8 ) // Removes 'comment:' part.\n\t *\t\t\t} ),\n\t *\t\t\tconverterPriority: 'high'\n\t *\t\t} );\n\t *\n\t * This kind of conversion is useful for saving data into the database, so it should be used in the data conversion pipeline.\n\t *\n\t * See {@link module:engine/conversion/conversion~Conversion#for `conversion.for()`} to learn how to add a converter\n\t * to the conversion process.\n\t *\n\t * @method #markerToData\n\t * @param {Object} config Conversion configuration.\n\t * @param {String} config.model The name of the model marker (or model marker group) to convert.\n\t * @param {Function} [config.view] A function that takes the model marker name and\n\t * {@link module:engine/conversion/downcastdispatcher~DowncastConversionApi downcast conversion API} as a parameters\n\t * and returns an object with the `group` and `name` properties.\n\t * @param {module:utils/priorities~PriorityString} [config.converterPriority='normal'] Converter priority.\n\t * @returns {module:engine/conversion/downcasthelpers~DowncastHelpers}\n\t */\n\tmarkerToData( config ) {\n\t\treturn this.add( downcastMarkerToData( config ) );\n\t}\n}\n\n/**\n * Function factory that creates a default downcast converter for text insertion changes.\n *\n * The converter automatically consumes the corresponding value from the consumables list and stops the event (see\n * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher}).\n *\n *\t\tmodelDispatcher.on( 'insert:$text', insertText() );\n *\n * @returns {Function} Insert text event converter.\n */\nexport function insertText() {\n\treturn ( evt, data, conversionApi ) => {\n\t\tif ( !conversionApi.consumable.consume( data.item, 'insert' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst viewWriter = conversionApi.writer;\n\t\tconst viewPosition = conversionApi.mapper.toViewPosition( data.range.start );\n\t\tconst viewText = viewWriter.createText( data.item.data );\n\n\t\tviewWriter.insert( viewPosition, viewText );\n\t};\n}\n\n/**\n * Function factory that creates a default downcast converter for node remove changes.\n *\n *\t\tmodelDispatcher.on( 'remove', remove() );\n *\n * @returns {Function} Remove event converter.\n */\nexport function remove() {\n\treturn ( evt, data, conversionApi ) => {\n\t\t// Find view range start position by mapping model position at which the remove happened.\n\t\tconst viewStart = conversionApi.mapper.toViewPosition( data.position );\n\n\t\tconst modelEnd = data.position.getShiftedBy( data.length );\n\t\tconst viewEnd = conversionApi.mapper.toViewPosition( modelEnd, { isPhantom: true } );\n\n\t\tconst viewRange = conversionApi.writer.createRange( viewStart, viewEnd );\n\n\t\t// Trim the range to remove in case some UI elements are on the view range boundaries.\n\t\tconst removed = conversionApi.writer.remove( viewRange.getTrimmed() );\n\n\t\t// After the range is removed, unbind all view elements from the model.\n\t\t// Range inside view document fragment is used to unbind deeply.\n\t\tfor ( const child of conversionApi.writer.createRangeIn( removed ).getItems() ) {\n\t\t\tconversionApi.mapper.unbindViewElement( child );\n\t\t}\n\t};\n}\n\n/**\n * Creates a `<span>` {@link module:engine/view/attributeelement~AttributeElement view attribute element} from the information\n * provided by the {@link module:engine/conversion/downcasthelpers~HighlightDescriptor highlight descriptor} object. If a priority\n * is not provided in the descriptor, the default priority will be used.\n *\n * @param {module:engine/view/downcastwriter~DowncastWriter} writer\n * @param {module:engine/conversion/downcasthelpers~HighlightDescriptor} descriptor\n * @returns {module:engine/view/attributeelement~AttributeElement}\n */\nexport function createViewElementFromHighlightDescriptor( writer, descriptor ) {\n\tconst viewElement = writer.createAttributeElement( 'span', descriptor.attributes );\n\n\tif ( descriptor.classes ) {\n\t\tviewElement._addClass( descriptor.classes );\n\t}\n\n\tif ( descriptor.priority ) {\n\t\tviewElement._priority = descriptor.priority;\n\t}\n\n\tviewElement._id = descriptor.id;\n\n\treturn viewElement;\n}\n\n/**\n * Function factory that creates a converter which converts a non-collapsed {@link module:engine/model/selection~Selection model selection}\n * to a {@link module:engine/view/documentselection~DocumentSelection view selection}. The converter consumes appropriate\n * value from the `consumable` object and maps model positions from the selection to view positions.\n *\n *\t\tmodelDispatcher.on( 'selection', convertRangeSelection() );\n *\n * @returns {Function} Selection converter.\n */\nexport function convertRangeSelection() {\n\treturn ( evt, data, conversionApi ) => {\n\t\tconst selection = data.selection;\n\n\t\tif ( selection.isCollapsed ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( !conversionApi.consumable.consume( selection, 'selection' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst viewRanges = [];\n\n\t\tfor ( const range of selection.getRanges() ) {\n\t\t\tconst viewRange = conversionApi.mapper.toViewRange( range );\n\t\t\tviewRanges.push( viewRange );\n\t\t}\n\n\t\tconversionApi.writer.setSelection( viewRanges, { backward: selection.isBackward } );\n\t};\n}\n\n/**\n * Function factory that creates a converter which converts a collapsed {@link module:engine/model/selection~Selection model selection} to\n * a {@link module:engine/view/documentselection~DocumentSelection view selection}. The converter consumes appropriate\n * value from the `consumable` object, maps the model selection position to the view position and breaks\n * {@link module:engine/view/attributeelement~AttributeElement attribute elements} at the selection position.\n *\n *\t\tmodelDispatcher.on( 'selection', convertCollapsedSelection() );\n *\n * An example of the view state before and after converting the collapsed selection:\n *\n *\t\t   <p><strong>f^oo<strong>bar</p>\n *\t\t-> <p><strong>f</strong>^<strong>oo</strong>bar</p>\n *\n * By breaking attribute elements like `<strong>`, the selection is in a correct element. Then, when the selection attribute is\n * converted, broken attributes might be merged again, or the position where the selection is may be wrapped\n * with different, appropriate attribute elements.\n *\n * See also {@link module:engine/conversion/downcasthelpers~clearAttributes} which does a clean-up\n * by merging attributes.\n *\n * @returns {Function} Selection converter.\n */\nexport function convertCollapsedSelection() {\n\treturn ( evt, data, conversionApi ) => {\n\t\tconst selection = data.selection;\n\n\t\tif ( !selection.isCollapsed ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( !conversionApi.consumable.consume( selection, 'selection' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst viewWriter = conversionApi.writer;\n\t\tconst modelPosition = selection.getFirstPosition();\n\t\tconst viewPosition = conversionApi.mapper.toViewPosition( modelPosition );\n\t\tconst brokenPosition = viewWriter.breakAttributes( viewPosition );\n\n\t\tviewWriter.setSelection( brokenPosition );\n\t};\n}\n\n/**\n * Function factory that creates a converter which clears artifacts after the previous\n * {@link module:engine/model/selection~Selection model selection} conversion. It removes all empty\n * {@link module:engine/view/attributeelement~AttributeElement view attribute elements} and merges sibling attributes at all start and end\n * positions of all ranges.\n *\n *\t\t   <p><strong>^</strong></p>\n *\t\t-> <p>^</p>\n *\n *\t\t   <p><strong>foo</strong>^<strong>bar</strong>bar</p>\n *\t\t-> <p><strong>foo^bar<strong>bar</p>\n *\n *\t\t   <p><strong>foo</strong><em>^</em><strong>bar</strong>bar</p>\n *\t\t-> <p><strong>foo^bar<strong>bar</p>\n *\n * This listener should be assigned before any converter for the new selection:\n *\n *\t\tmodelDispatcher.on( 'selection', clearAttributes() );\n *\n * See {@link module:engine/conversion/downcasthelpers~convertCollapsedSelection}\n * which does the opposite by breaking attributes in the selection position.\n *\n * @returns {Function} Selection converter.\n */\nexport function clearAttributes() {\n\treturn ( evt, data, conversionApi ) => {\n\t\tconst viewWriter = conversionApi.writer;\n\t\tconst viewSelection = viewWriter.document.selection;\n\n\t\tfor ( const range of viewSelection.getRanges() ) {\n\t\t\t// Not collapsed selection should not have artifacts.\n\t\t\tif ( range.isCollapsed ) {\n\t\t\t\t// Position might be in the node removed by the view writer.\n\t\t\t\tif ( range.end.parent.isAttached() ) {\n\t\t\t\t\tconversionApi.writer.mergeAttributes( range.start );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tviewWriter.setSelection( null );\n\t};\n}\n\n/**\n * Function factory that creates a converter which converts set/change/remove attribute changes from the model to the view.\n * It can also be used to convert selection attributes. In that case, an empty attribute element will be created and the\n * selection will be put inside it.\n *\n * Attributes from the model are converted to a view element that will be wrapping these view nodes that are bound to\n * model elements having the given attribute. This is useful for attributes like `bold` that may be set on text nodes in the model\n * but are represented as an element in the view:\n *\n *\t\t[paragraph]              MODEL ====> VIEW        <p>\n *\t\t\t|- a {bold: true}                             |- <b>\n *\t\t\t|- b {bold: true}                             |   |- ab\n *\t\t\t|- c                                          |- c\n *\n * Passed `Function` will be provided with the attribute value and then all the parameters of the\n * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:attribute `attribute` event}.\n * It is expected that the function returns an {@link module:engine/view/element~Element}.\n * The result of the function will be the wrapping element.\n * When the provided `Function` does not return any element, no conversion will take place.\n *\n * The converter automatically consumes the corresponding value from the consumables list and stops the event (see\n * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher}).\n *\n *\t\tmodelDispatcher.on( 'attribute:bold', wrap( ( modelAttributeValue, { writer } ) => {\n *\t\t\treturn writer.createAttributeElement( 'strong' );\n *\t\t} );\n *\n * @protected\n * @param {Function} elementCreator Function returning a view element that will be used for wrapping.\n * @returns {Function} Set/change attribute converter.\n */\nexport function wrap( elementCreator ) {\n\treturn ( evt, data, conversionApi ) => {\n\t\t// Recreate current wrapping node. It will be used to unwrap view range if the attribute value has changed\n\t\t// or the attribute was removed.\n\t\tconst oldViewElement = elementCreator( data.attributeOldValue, conversionApi );\n\n\t\t// Create node to wrap with.\n\t\tconst newViewElement = elementCreator( data.attributeNewValue, conversionApi );\n\n\t\tif ( !oldViewElement && !newViewElement ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( !conversionApi.consumable.consume( data.item, evt.name ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst viewWriter = conversionApi.writer;\n\t\tconst viewSelection = viewWriter.document.selection;\n\n\t\tif ( data.item instanceof ModelSelection || data.item instanceof DocumentSelection ) {\n\t\t\t// Selection attribute conversion.\n\t\t\tviewWriter.wrap( viewSelection.getFirstRange(), newViewElement );\n\t\t} else {\n\t\t\t// Node attribute conversion.\n\t\t\tlet viewRange = conversionApi.mapper.toViewRange( data.range );\n\n\t\t\t// First, unwrap the range from current wrapper.\n\t\t\tif ( data.attributeOldValue !== null && oldViewElement ) {\n\t\t\t\tviewRange = viewWriter.unwrap( viewRange, oldViewElement );\n\t\t\t}\n\n\t\t\tif ( data.attributeNewValue !== null && newViewElement ) {\n\t\t\t\tviewWriter.wrap( viewRange, newViewElement );\n\t\t\t}\n\t\t}\n\t};\n}\n\n/**\n * Function factory that creates a converter which converts node insertion changes from the model to the view.\n * The function passed will be provided with all the parameters of the dispatcher's\n * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:insert `insert` event}.\n * It is expected that the function returns an {@link module:engine/view/element~Element}.\n * The result of the function will be inserted into the view.\n *\n * The converter automatically consumes the corresponding value from the consumables list, stops the event (see\n * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher}) and binds the model and view elements.\n *\n *\t\tdowncastDispatcher.on(\n *\t\t\t'insert:myElem',\n *\t\t\tinsertElement( ( modelItem, { writer } ) => {\n *\t\t\t\tconst text = writer.createText( 'myText' );\n *\t\t\t\tconst myElem = writer.createElement( 'myElem', { myAttr: 'my-' + modelItem.getAttribute( 'myAttr' ) }, text );\n *\n *\t\t\t\t// Do something fancy with `myElem` using `modelItem` or other parameters.\n *\n *\t\t\t\treturn myElem;\n *\t\t\t}\n *\t\t) );\n *\n * @protected\n * @param {Function} elementCreator Function returning a view element, which will be inserted.\n * @returns {Function} Insert element event converter.\n */\nexport function insertElement( elementCreator ) {\n\treturn ( evt, data, conversionApi ) => {\n\t\tconst viewElement = elementCreator( data.item, conversionApi );\n\n\t\tif ( !viewElement ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( !conversionApi.consumable.consume( data.item, 'insert' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst viewPosition = conversionApi.mapper.toViewPosition( data.range.start );\n\n\t\tconversionApi.mapper.bindElements( data.item, viewElement );\n\t\tconversionApi.writer.insert( viewPosition, viewElement );\n\t};\n}\n\n/**\n * Function factory that creates a converter which converts marker adding change to the\n * {@link module:engine/view/uielement~UIElement view UI element}.\n *\n * The view UI element that will be added to the view depends on the passed parameter. See {@link ~insertElement}.\n * In case of a non-collapsed range, the UI element will not wrap nodes but separate elements will be placed at the beginning\n * and at the end of the range.\n *\n * This converter binds created UI elements with the marker name using {@link module:engine/conversion/mapper~Mapper#bindElementToMarker}.\n *\n * @protected\n * @param {module:engine/view/uielement~UIElement|Function} elementCreator A view UI element or a function returning the view element\n * that will be inserted.\n * @returns {Function} Insert element event converter.\n */\nexport function insertUIElement( elementCreator ) {\n\treturn ( evt, data, conversionApi ) => {\n\t\t// Create two view elements. One will be inserted at the beginning of marker, one at the end.\n\t\t// If marker is collapsed, only \"opening\" element will be inserted.\n\t\tdata.isOpening = true;\n\t\tconst viewStartElement = elementCreator( data, conversionApi );\n\n\t\tdata.isOpening = false;\n\t\tconst viewEndElement = elementCreator( data, conversionApi );\n\n\t\tif ( !viewStartElement || !viewEndElement ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst markerRange = data.markerRange;\n\n\t\t// Marker that is collapsed has consumable build differently that non-collapsed one.\n\t\t// For more information see `addMarker` event description.\n\t\t// If marker's range is collapsed - check if it can be consumed.\n\t\tif ( markerRange.isCollapsed && !conversionApi.consumable.consume( markerRange, evt.name ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// If marker's range is not collapsed - consume all items inside.\n\t\tfor ( const value of markerRange ) {\n\t\t\tif ( !conversionApi.consumable.consume( value.item, evt.name ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tconst mapper = conversionApi.mapper;\n\t\tconst viewWriter = conversionApi.writer;\n\n\t\t// Add \"opening\" element.\n\t\tviewWriter.insert( mapper.toViewPosition( markerRange.start ), viewStartElement );\n\t\tconversionApi.mapper.bindElementToMarker( viewStartElement, data.markerName );\n\n\t\t// Add \"closing\" element only if range is not collapsed.\n\t\tif ( !markerRange.isCollapsed ) {\n\t\t\tviewWriter.insert( mapper.toViewPosition( markerRange.end ), viewEndElement );\n\t\t\tconversionApi.mapper.bindElementToMarker( viewEndElement, data.markerName );\n\t\t}\n\n\t\tevt.stop();\n\t};\n}\n\n// Function factory that returns a default downcast converter for removing a {@link module:engine/view/uielement~UIElement UI element}\n// based on marker remove change.\n//\n// This converter unbinds elements from the marker name.\n//\n// @returns {Function} Removed UI element converter.\nfunction removeUIElement() {\n\treturn ( evt, data, conversionApi ) => {\n\t\tconst elements = conversionApi.mapper.markerNameToElements( data.markerName );\n\n\t\tif ( !elements ) {\n\t\t\treturn;\n\t\t}\n\n\t\tfor ( const element of elements ) {\n\t\t\tconversionApi.mapper.unbindElementFromMarkerName( element, data.markerName );\n\t\t\tconversionApi.writer.clear( conversionApi.writer.createRangeOn( element ), element );\n\t\t}\n\n\t\tconversionApi.writer.clearClonedElementsGroup( data.markerName );\n\n\t\tevt.stop();\n\t};\n}\n\n// Function factory that creates a default converter for model markers.\n//\n// See {@link DowncastHelpers#markerToData} for more information what type of view is generated.\n//\n// This converter binds created UI elements and affected view elements with the marker name\n// using {@link module:engine/conversion/mapper~Mapper#bindElementToMarker}.\n//\n// @returns {Function} Add marker converter.\nfunction insertMarkerData( viewCreator ) {\n\treturn ( evt, data, conversionApi ) => {\n\t\tconst viewMarkerData = viewCreator( data.markerName, conversionApi );\n\n\t\tif ( !viewMarkerData ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst markerRange = data.markerRange;\n\n\t\tif ( !conversionApi.consumable.consume( markerRange, evt.name ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Adding closing data first to keep the proper order in the view.\n\t\thandleMarkerBoundary( markerRange, false, conversionApi, data, viewMarkerData );\n\t\thandleMarkerBoundary( markerRange, true, conversionApi, data, viewMarkerData );\n\n\t\tevt.stop();\n\t};\n}\n\n// Helper function for `insertMarkerData()` that marks a marker boundary at the beginning or end of given `range`.\nfunction handleMarkerBoundary( range, isStart, conversionApi, data, viewMarkerData ) {\n\tconst modelPosition = isStart ? range.start : range.end;\n\tconst canInsertElement = conversionApi.schema.checkChild( modelPosition, '$text' );\n\n\tif ( canInsertElement ) {\n\t\tconst viewPosition = conversionApi.mapper.toViewPosition( modelPosition );\n\n\t\tinsertMarkerAsElement( viewPosition, isStart, conversionApi, data, viewMarkerData );\n\t} else {\n\t\tlet modelElement;\n\t\tlet isBefore;\n\n\t\t// If possible, we want to add `data-group-start-before` and `data-group-end-after` attributes.\n\t\t// Below `if` is constructed in a way that will favor adding these attributes.\n\t\t//\n\t\t// Also, I assume that there will be always an element either after or before the position.\n\t\t// If not, then it is a case when we are not in a position where text is allowed and also there are no elements around...\n\t\tif ( isStart && modelPosition.nodeAfter || !isStart && !modelPosition.nodeBefore ) {\n\t\t\tmodelElement = modelPosition.nodeAfter;\n\t\t\tisBefore = true;\n\t\t} else {\n\t\t\tmodelElement = modelPosition.nodeBefore;\n\t\t\tisBefore = false;\n\t\t}\n\n\t\tconst viewElement = conversionApi.mapper.toViewElement( modelElement );\n\n\t\tinsertMarkerAsAttribute( viewElement, isStart, isBefore, conversionApi, data, viewMarkerData );\n\t}\n}\n\n// Helper function for `insertMarkerData()` that marks a marker boundary in the view as an attribute on a view element.\nfunction insertMarkerAsAttribute( viewElement, isStart, isBefore, conversionApi, data, viewMarkerData ) {\n\tconst attributeName = `data-${ viewMarkerData.group }-${ isStart ? 'start' : 'end' }-${ isBefore ? 'before' : 'after' }`;\n\n\tconst markerNames = viewElement.hasAttribute( attributeName ) ? viewElement.getAttribute( attributeName ).split( ',' ) : [];\n\n\t// Adding marker name at the beginning to have the same order in the attribute as there is with marker elements.\n\tmarkerNames.unshift( viewMarkerData.name );\n\n\tconversionApi.writer.setAttribute( attributeName, markerNames.join( ',' ), viewElement );\n\tconversionApi.mapper.bindElementToMarker( viewElement, data.markerName );\n}\n\n// Helper function for `insertMarkerData()` that marks a marker boundary in the view as a separate view ui element.\nfunction insertMarkerAsElement( position, isStart, conversionApi, data, viewMarkerData ) {\n\tconst viewElementName = `${ viewMarkerData.group }-${ isStart ? 'start' : 'end' }`;\n\n\tconst attrs = viewMarkerData.name ? { 'name': viewMarkerData.name } : null;\n\tconst viewElement = conversionApi.writer.createUIElement( viewElementName, attrs );\n\n\tconversionApi.writer.insert( position, viewElement );\n\tconversionApi.mapper.bindElementToMarker( viewElement, data.markerName );\n}\n\n// Function factory that creates a converter for removing a model marker data added by the {@link #insertMarkerData} converter.\n//\n// @returns {Function} Remove marker converter.\nfunction removeMarkerData( viewCreator ) {\n\treturn ( evt, data, conversionApi ) => {\n\t\tconst viewData = viewCreator( data.markerName, conversionApi );\n\n\t\tif ( !viewData ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst elements = conversionApi.mapper.markerNameToElements( data.markerName );\n\n\t\tif ( !elements ) {\n\t\t\treturn;\n\t\t}\n\n\t\tfor ( const element of elements ) {\n\t\t\tconversionApi.mapper.unbindElementFromMarkerName( element, data.markerName );\n\n\t\t\tif ( element.is( 'containerElement' ) ) {\n\t\t\t\tremoveMarkerFromAttribute( `data-${ viewData.group }-start-before`, element );\n\t\t\t\tremoveMarkerFromAttribute( `data-${ viewData.group }-start-after`, element );\n\t\t\t\tremoveMarkerFromAttribute( `data-${ viewData.group }-end-before`, element );\n\t\t\t\tremoveMarkerFromAttribute( `data-${ viewData.group }-end-after`, element );\n\t\t\t} else {\n\t\t\t\tconversionApi.writer.clear( conversionApi.writer.createRangeOn( element ), element );\n\t\t\t}\n\t\t}\n\n\t\tconversionApi.writer.clearClonedElementsGroup( data.markerName );\n\n\t\tevt.stop();\n\n\t\tfunction removeMarkerFromAttribute( attributeName, element ) {\n\t\t\tif ( element.hasAttribute( attributeName ) ) {\n\t\t\t\tconst markerNames = new Set( element.getAttribute( attributeName ).split( ',' ) );\n\t\t\t\tmarkerNames.delete( viewData.name );\n\n\t\t\t\tif ( markerNames.size == 0 ) {\n\t\t\t\t\tconversionApi.writer.removeAttribute( attributeName, element );\n\t\t\t\t} else {\n\t\t\t\t\tconversionApi.writer.setAttribute( attributeName, Array.from( markerNames ).join( ',' ), element );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n}\n\n// Function factory that creates a converter which converts set/change/remove attribute changes from the model to the view.\n//\n// Attributes from the model are converted to the view element attributes in the view. You may provide a custom function to generate\n// a key-value attribute pair to add/change/remove. If not provided, model attributes will be converted to view element\n// attributes on a one-to-one basis.\n//\n// *Note:** The provided attribute creator should always return the same `key` for a given attribute from the model.\n//\n// The converter automatically consumes the corresponding value from the consumables list and stops the event (see\n// {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher}).\n//\n//\t\tmodelDispatcher.on( 'attribute:customAttr:myElem', changeAttribute( ( value, data ) => {\n//\t\t\t// Change attribute key from `customAttr` to `class` in the view.\n//\t\t\tconst key = 'class';\n//\t\t\tlet value = data.attributeNewValue;\n//\n//\t\t\t// Force attribute value to 'empty' if the model element is empty.\n//\t\t\tif ( data.item.childCount === 0 ) {\n//\t\t\t\tvalue = 'empty';\n//\t\t\t}\n//\n//\t\t\t// Return the key-value pair.\n//\t\t\treturn { key, value };\n//\t\t} ) );\n//\n// @param {Function} [attributeCreator] Function returning an object with two properties: `key` and `value`, which\n// represent the attribute key and attribute value to be set on a {@link module:engine/view/element~Element view element}.\n// The function is passed the model attribute value as the first parameter and additional data about the change as the second parameter.\n// @returns {Function} Set/change attribute converter.\nfunction changeAttribute( attributeCreator ) {\n\treturn ( evt, data, conversionApi ) => {\n\t\tconst oldAttribute = attributeCreator( data.attributeOldValue, conversionApi );\n\t\tconst newAttribute = attributeCreator( data.attributeNewValue, conversionApi );\n\n\t\tif ( !oldAttribute && !newAttribute ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( !conversionApi.consumable.consume( data.item, evt.name ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst viewElement = conversionApi.mapper.toViewElement( data.item );\n\t\tconst viewWriter = conversionApi.writer;\n\n\t\t// If model item cannot be mapped to a view element, it means item is not an `Element` instance but a `TextProxy` node.\n\t\t// Only elements can have attributes in a view so do not proceed for anything else (#1587).\n\t\tif ( !viewElement ) {\n\t\t\t/**\n\t\t\t * This error occurs when a {@link module:engine/model/textproxy~TextProxy text node's} attribute is to be downcasted\n\t\t\t * by {@link module:engine/conversion/conversion~Conversion#attributeToAttribute `Attribute to Attribute converter`}.\n\t\t\t * In most cases it is caused by converters misconfiguration when only \"generic\" converter is defined:\n\t\t\t *\n\t\t\t *\t\teditor.conversion.for( 'downcast' ).attributeToAttribute( {\n\t\t\t *\t\t\tmodel: 'attribute-name',\n\t\t\t *\t\t\tview: 'attribute-name'\n\t\t\t *\t\t} ) );\n\t\t\t *\n\t\t\t * and given attribute is used on text node, for example:\n\t\t\t *\n\t\t\t *\t\tmodel.change( writer => {\n\t\t\t *\t\t\twriter.insertText( 'Foo', { 'attribute-name': 'bar' }, parent, 0 );\n\t\t\t *\t\t} );\n\t\t\t *\n\t\t\t * In such cases, to convert the same attribute for both {@link module:engine/model/element~Element}\n\t\t\t * and {@link module:engine/model/textproxy~TextProxy `Text`} nodes, text specific\n\t\t\t * {@link module:engine/conversion/conversion~Conversion#attributeToElement `Attribute to Element converter`}\n\t\t\t * with higher {@link module:utils/priorities~PriorityString priority} must also be defined:\n\t\t\t *\n\t\t\t *\t\teditor.conversion.for( 'downcast' ).attributeToElement( {\n\t\t\t *\t\t\tmodel: {\n\t\t\t *\t\t\t\tkey: 'attribute-name',\n\t\t\t *\t\t\t\tname: '$text'\n\t\t\t *\t\t\t},\n\t\t\t *\t\t\tview: ( value, { writer } ) => {\n\t\t\t *\t\t\t\treturn writer.createAttributeElement( 'span', { 'attribute-name': value } );\n\t\t\t *\t\t\t},\n\t\t\t *\t\t\tconverterPriority: 'high'\n\t\t\t *\t\t} ) );\n\t\t\t *\n\t\t\t * @error conversion-attribute-to-attribute-on-text\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'conversion-attribute-to-attribute-on-text',\n\t\t\t\t[ data, conversionApi ]\n\t\t\t);\n\t\t}\n\n\t\t// First remove the old attribute if there was one.\n\t\tif ( data.attributeOldValue !== null && oldAttribute ) {\n\t\t\tif ( oldAttribute.key == 'class' ) {\n\t\t\t\tconst classes = toArray( oldAttribute.value );\n\n\t\t\t\tfor ( const className of classes ) {\n\t\t\t\t\tviewWriter.removeClass( className, viewElement );\n\t\t\t\t}\n\t\t\t} else if ( oldAttribute.key == 'style' ) {\n\t\t\t\tconst keys = Object.keys( oldAttribute.value );\n\n\t\t\t\tfor ( const key of keys ) {\n\t\t\t\t\tviewWriter.removeStyle( key, viewElement );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tviewWriter.removeAttribute( oldAttribute.key, viewElement );\n\t\t\t}\n\t\t}\n\n\t\t// Then set the new attribute.\n\t\tif ( data.attributeNewValue !== null && newAttribute ) {\n\t\t\tif ( newAttribute.key == 'class' ) {\n\t\t\t\tconst classes = toArray( newAttribute.value );\n\n\t\t\t\tfor ( const className of classes ) {\n\t\t\t\t\tviewWriter.addClass( className, viewElement );\n\t\t\t\t}\n\t\t\t} else if ( newAttribute.key == 'style' ) {\n\t\t\t\tconst keys = Object.keys( newAttribute.value );\n\n\t\t\t\tfor ( const key of keys ) {\n\t\t\t\t\tviewWriter.setStyle( key, newAttribute.value[ key ], viewElement );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tviewWriter.setAttribute( newAttribute.key, newAttribute.value, viewElement );\n\t\t\t}\n\t\t}\n\t};\n}\n\n// Function factory that creates a converter which converts the text inside marker's range. The converter wraps the text with\n// {@link module:engine/view/attributeelement~AttributeElement} created from the provided descriptor.\n// See {link module:engine/conversion/downcasthelpers~createViewElementFromHighlightDescriptor}.\n//\n// It can also be used to convert the selection that is inside a marker. In that case, an empty attribute element will be\n// created and the selection will be put inside it.\n//\n// If the highlight descriptor does not provide the `priority` property, `10` will be used.\n//\n// If the highlight descriptor does not provide the `id` property, the name of the marker will be used.\n//\n// This converter binds the created {@link module:engine/view/attributeelement~AttributeElement attribute elemens} with the marker name\n// using the {@link module:engine/conversion/mapper~Mapper#bindElementToMarker} method.\n//\n// @param {module:engine/conversion/downcasthelpers~HighlightDescriptor|Function} highlightDescriptor\n// @returns {Function}\nfunction highlightText( highlightDescriptor ) {\n\treturn ( evt, data, conversionApi ) => {\n\t\tif ( !data.item ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( !( data.item instanceof ModelSelection || data.item instanceof DocumentSelection ) && !data.item.is( '$textProxy' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst descriptor = prepareDescriptor( highlightDescriptor, data, conversionApi );\n\n\t\tif ( !descriptor ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( !conversionApi.consumable.consume( data.item, evt.name ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst viewWriter = conversionApi.writer;\n\t\tconst viewElement = createViewElementFromHighlightDescriptor( viewWriter, descriptor );\n\t\tconst viewSelection = viewWriter.document.selection;\n\n\t\tif ( data.item instanceof ModelSelection || data.item instanceof DocumentSelection ) {\n\t\t\tviewWriter.wrap( viewSelection.getFirstRange(), viewElement, viewSelection );\n\t\t} else {\n\t\t\tconst viewRange = conversionApi.mapper.toViewRange( data.range );\n\t\t\tconst rangeAfterWrap = viewWriter.wrap( viewRange, viewElement );\n\n\t\t\tfor ( const element of rangeAfterWrap.getItems() ) {\n\t\t\t\tif ( element.is( 'attributeElement' ) && element.isSimilar( viewElement ) ) {\n\t\t\t\t\tconversionApi.mapper.bindElementToMarker( element, data.markerName );\n\n\t\t\t\t\t// One attribute element is enough, because all of them are bound together by the view writer.\n\t\t\t\t\t// Mapper uses this binding to get all the elements no matter how many of them are registered in the mapper.\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n}\n\n// Converter function factory. It creates a function which applies the marker's highlight to an element inside the marker's range.\n//\n// The converter checks if an element has the `addHighlight` function stored as a\n// {@link module:engine/view/element~Element#_setCustomProperty custom property} and, if so, uses it to apply the highlight.\n// In such case the converter will consume all element's children, assuming that they were handled by the element itself.\n//\n// When the `addHighlight` custom property is not present, the element is not converted in any special way.\n// This means that converters will proceed to convert the element's child nodes.\n//\n// If the highlight descriptor does not provide the `priority` property, `10` will be used.\n//\n// If the highlight descriptor does not provide the `id` property, the name of the marker will be used.\n//\n// This converter binds altered {@link module:engine/view/containerelement~ContainerElement container elements} with the marker name using\n// the {@link module:engine/conversion/mapper~Mapper#bindElementToMarker} method.\n//\n// @param {module:engine/conversion/downcasthelpers~HighlightDescriptor|Function} highlightDescriptor\n// @returns {Function}\nfunction highlightElement( highlightDescriptor ) {\n\treturn ( evt, data, conversionApi ) => {\n\t\tif ( !data.item ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( !( data.item instanceof ModelElement ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst descriptor = prepareDescriptor( highlightDescriptor, data, conversionApi );\n\n\t\tif ( !descriptor ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( !conversionApi.consumable.test( data.item, evt.name ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst viewElement = conversionApi.mapper.toViewElement( data.item );\n\n\t\tif ( viewElement && viewElement.getCustomProperty( 'addHighlight' ) ) {\n\t\t\t// Consume element itself.\n\t\t\tconversionApi.consumable.consume( data.item, evt.name );\n\n\t\t\t// Consume all children nodes.\n\t\t\tfor ( const value of ModelRange._createIn( data.item ) ) {\n\t\t\t\tconversionApi.consumable.consume( value.item, evt.name );\n\t\t\t}\n\n\t\t\tviewElement.getCustomProperty( 'addHighlight' )( viewElement, descriptor, conversionApi.writer );\n\n\t\t\tconversionApi.mapper.bindElementToMarker( viewElement, data.markerName );\n\t\t}\n\t};\n}\n\n// Function factory that creates a converter which converts the removing model marker to the view.\n//\n// Both text nodes and elements are handled by this converter but they are handled a bit differently.\n//\n// Text nodes are unwrapped using the {@link module:engine/view/attributeelement~AttributeElement attribute element} created from the\n// provided highlight descriptor. See {link module:engine/conversion/downcasthelpers~HighlightDescriptor}.\n//\n// For elements, the converter checks if an element has the `removeHighlight` function stored as a\n// {@link module:engine/view/element~Element#_setCustomProperty custom property}. If so, it uses it to remove the highlight.\n// In such case, the children of that element will not be converted.\n//\n// When `removeHighlight` is not present, the element is not converted in any special way.\n// The converter will proceed to convert the element's child nodes instead.\n//\n// If the highlight descriptor does not provide the `priority` property, `10` will be used.\n//\n// If the highlight descriptor does not provide the `id` property, the name of the marker will be used.\n//\n// This converter unbinds elements from the marker name.\n//\n// @param {module:engine/conversion/downcasthelpers~HighlightDescriptor|Function} highlightDescriptor\n// @returns {Function}\nfunction removeHighlight( highlightDescriptor ) {\n\treturn ( evt, data, conversionApi ) => {\n\t\t// This conversion makes sense only for non-collapsed range.\n\t\tif ( data.markerRange.isCollapsed ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst descriptor = prepareDescriptor( highlightDescriptor, data, conversionApi );\n\n\t\tif ( !descriptor ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// View element that will be used to unwrap `AttributeElement`s.\n\t\tconst viewHighlightElement = createViewElementFromHighlightDescriptor( conversionApi.writer, descriptor );\n\n\t\t// Get all elements bound with given marker name.\n\t\tconst elements = conversionApi.mapper.markerNameToElements( data.markerName );\n\n\t\tif ( !elements ) {\n\t\t\treturn;\n\t\t}\n\n\t\tfor ( const element of elements ) {\n\t\t\tconversionApi.mapper.unbindElementFromMarkerName( element, data.markerName );\n\n\t\t\tif ( element.is( 'attributeElement' ) ) {\n\t\t\t\tconversionApi.writer.unwrap( conversionApi.writer.createRangeOn( element ), viewHighlightElement );\n\t\t\t} else {\n\t\t\t\t// if element.is( 'containerElement' ).\n\t\t\t\telement.getCustomProperty( 'removeHighlight' )( element, descriptor.id, conversionApi.writer );\n\t\t\t}\n\t\t}\n\n\t\tconversionApi.writer.clearClonedElementsGroup( data.markerName );\n\n\t\tevt.stop();\n\t};\n}\n\n// Model element to view element conversion helper.\n//\n// See {@link ~DowncastHelpers#elementToElement `.elementToElement()` downcast helper} for examples and config params description.\n//\n// @param {Object} config Conversion configuration.\n// @param {String} config.model\n// @param {module:engine/view/elementdefinition~ElementDefinition|Function} config.view\n// @param {Object} [config.triggerBy]\n// @param {Array.<String>} [config.triggerBy.attributes]\n// @param {Array.<String>} [config.triggerBy.children]\n// @returns {Function} Conversion helper.\nfunction downcastElementToElement( config ) {\n\tconfig = cloneDeep( config );\n\n\tconfig.view = normalizeToElementConfig( config.view, 'container' );\n\n\treturn dispatcher => {\n\t\tdispatcher.on( 'insert:' + config.model, insertElement( config.view ), { priority: config.converterPriority || 'normal' } );\n\n\t\tif ( config.triggerBy ) {\n\t\t\tif ( config.triggerBy.attributes ) {\n\t\t\t\tfor ( const attributeKey of config.triggerBy.attributes ) {\n\t\t\t\t\tdispatcher._mapReconversionTriggerEvent( config.model, `attribute:${ attributeKey }:${ config.model }` );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( config.triggerBy.children ) {\n\t\t\t\tfor ( const childName of config.triggerBy.children ) {\n\t\t\t\t\tdispatcher._mapReconversionTriggerEvent( config.model, `insert:${ childName }` );\n\t\t\t\t\tdispatcher._mapReconversionTriggerEvent( config.model, `remove:${ childName }` );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n}\n\n// Model attribute to view element conversion helper.\n//\n// See {@link ~DowncastHelpers#attributeToElement `.attributeToElement()` downcast helper} for examples.\n//\n// @param {Object} config Conversion configuration.\n// @param {String|Object} config.model The key of the attribute to convert from or a `{ key, values }` object. `values` is an array\n// of `String`s with possible values if the model attribute is an enumerable.\n// @param {module:engine/view/elementdefinition~ElementDefinition|Function|Object} config.view A view element definition or a function\n// that takes the model attribute value and {@link module:engine/view/downcastwriter~DowncastWriter view downcast writer}\n// as parameters and returns a view attribute element. If `config.model.values` is\n// given, `config.view` should be an object assigning values from `config.model.values` to view element definitions or functions.\n// @param {module:utils/priorities~PriorityString} [config.converterPriority='normal'] Converter priority.\n// @returns {Function} Conversion helper.\nfunction downcastAttributeToElement( config ) {\n\tconfig = cloneDeep( config );\n\n\tconst modelKey = config.model.key ? config.model.key : config.model;\n\tlet eventName = 'attribute:' + modelKey;\n\n\tif ( config.model.name ) {\n\t\teventName += ':' + config.model.name;\n\t}\n\n\tif ( config.model.values ) {\n\t\tfor ( const modelValue of config.model.values ) {\n\t\t\tconfig.view[ modelValue ] = normalizeToElementConfig( config.view[ modelValue ], 'attribute' );\n\t\t}\n\t} else {\n\t\tconfig.view = normalizeToElementConfig( config.view, 'attribute' );\n\t}\n\n\tconst elementCreator = getFromAttributeCreator( config );\n\n\treturn dispatcher => {\n\t\tdispatcher.on( eventName, wrap( elementCreator ), { priority: config.converterPriority || 'normal' } );\n\t};\n}\n\n// Model attribute to view attribute conversion helper.\n//\n// See {@link ~DowncastHelpers#attributeToAttribute `.attributeToAttribute()` downcast helper} for examples.\n//\n// @param {Object} config Conversion configuration.\n// @param {String|Object} config.model The key of the attribute to convert from or a `{ key, values, [ name ] }` object describing\n// the attribute key, possible values and, optionally, an element name to convert from.\n// @param {String|Object|Function} config.view A view attribute key, or a `{ key, value }` object or a function that takes\n// the model attribute value and returns a `{ key, value }` object. If `key` is `'class'`, `value` can be a `String` or an\n// array of `String`s. If `key` is `'style'`, `value` is an object with key-value pairs. In other cases, `value` is a `String`.\n// If `config.model.values` is set, `config.view` should be an object assigning values from `config.model.values` to\n// `{ key, value }` objects or a functions.\n// @param {module:utils/priorities~PriorityString} [config.converterPriority='normal'] Converter priority.\n// @returns {Function} Conversion helper.\nfunction downcastAttributeToAttribute( config ) {\n\tconfig = cloneDeep( config );\n\n\tconst modelKey = config.model.key ? config.model.key : config.model;\n\tlet eventName = 'attribute:' + modelKey;\n\n\tif ( config.model.name ) {\n\t\teventName += ':' + config.model.name;\n\t}\n\n\tif ( config.model.values ) {\n\t\tfor ( const modelValue of config.model.values ) {\n\t\t\tconfig.view[ modelValue ] = normalizeToAttributeConfig( config.view[ modelValue ] );\n\t\t}\n\t} else {\n\t\tconfig.view = normalizeToAttributeConfig( config.view );\n\t}\n\n\tconst elementCreator = getFromAttributeCreator( config );\n\n\treturn dispatcher => {\n\t\tdispatcher.on( eventName, changeAttribute( elementCreator ), { priority: config.converterPriority || 'normal' } );\n\t};\n}\n\n// Model marker to view element conversion helper.\n//\n// See {@link ~DowncastHelpers#markerToElement `.markerToElement()` downcast helper} for examples.\n//\n// @param {Object} config Conversion configuration.\n// @param {String} config.model The name of the model marker (or model marker group) to convert.\n// @param {module:engine/view/elementdefinition~ElementDefinition|Function} config.view A view element definition or a function\n// that takes the model marker data as a parameter and returns a view UI element.\n// @param {module:utils/priorities~PriorityString} [config.converterPriority='normal'] Converter priority.\n// @returns {Function} Conversion helper.\nfunction downcastMarkerToElement( config ) {\n\tconfig = cloneDeep( config );\n\n\tconfig.view = normalizeToElementConfig( config.view, 'ui' );\n\n\treturn dispatcher => {\n\t\tdispatcher.on( 'addMarker:' + config.model, insertUIElement( config.view ), { priority: config.converterPriority || 'normal' } );\n\t\tdispatcher.on( 'removeMarker:' + config.model, removeUIElement( config.view ), { priority: config.converterPriority || 'normal' } );\n\t};\n}\n\n// Model marker to view data conversion helper.\n//\n// See {@link ~DowncastHelpers#markerToData `markerToData()` downcast helper} to learn more.\n//\n// @param {Object} config\n// @param {String} config.model\n// @param {Function} [config.view]\n// @param {module:utils/priorities~PriorityString} [config.converterPriority='normal']\n// @returns {Function} Conversion helper.\nfunction downcastMarkerToData( config ) {\n\tconfig = cloneDeep( config );\n\n\tconst group = config.model;\n\n\t// Default conversion.\n\tif ( !config.view ) {\n\t\tconfig.view = markerName => ( {\n\t\t\tgroup,\n\t\t\tname: markerName.substr( config.model.length + 1 )\n\t\t} );\n\t}\n\n\treturn dispatcher => {\n\t\tdispatcher.on( 'addMarker:' + group, insertMarkerData( config.view ), { priority: config.converterPriority || 'normal' } );\n\t\tdispatcher.on( 'removeMarker:' + group, removeMarkerData( config.view ), { priority: config.converterPriority || 'normal' } );\n\t};\n}\n\n// Model marker to highlight conversion helper.\n//\n// See {@link ~DowncastHelpers#markerToElement `.markerToElement()` downcast helper} for examples.\n//\n// @param {Object} config Conversion configuration.\n// @param {String} config.model The name of the model marker (or model marker group) to convert.\n// @param {module:engine/conversion/downcasthelpers~HighlightDescriptor|Function} config.view A highlight descriptor\n// that will be used for highlighting or a function that takes the model marker data as a parameter and returns a highlight descriptor.\n// @param {module:utils/priorities~PriorityString} [config.converterPriority='normal'] Converter priority.\n// @returns {Function} Conversion helper.\nfunction downcastMarkerToHighlight( config ) {\n\treturn dispatcher => {\n\t\tdispatcher.on( 'addMarker:' + config.model, highlightText( config.view ), { priority: config.converterPriority || 'normal' } );\n\t\tdispatcher.on( 'addMarker:' + config.model, highlightElement( config.view ), { priority: config.converterPriority || 'normal' } );\n\t\tdispatcher.on( 'removeMarker:' + config.model, removeHighlight( config.view ), { priority: config.converterPriority || 'normal' } );\n\t};\n}\n\n// Takes `config.view`, and if it is an {@link module:engine/view/elementdefinition~ElementDefinition}, converts it\n// to a function (because lower level converters accept only element creator functions).\n//\n// @param {module:engine/view/elementdefinition~ElementDefinition|Function} view View configuration.\n// @param {'container'|'attribute'|'ui'} viewElementType View element type to create.\n// @returns {Function} Element creator function to use in lower level converters.\nfunction normalizeToElementConfig( view, viewElementType ) {\n\tif ( typeof view == 'function' ) {\n\t\t// If `view` is already a function, don't do anything.\n\t\treturn view;\n\t}\n\n\treturn ( modelData, conversionApi ) => createViewElementFromDefinition( view, conversionApi, viewElementType );\n}\n\n// Creates a view element instance from the provided {@link module:engine/view/elementdefinition~ElementDefinition} and class.\n//\n// @param {module:engine/view/elementdefinition~ElementDefinition} viewElementDefinition\n// @param {module:engine/view/downcastwriter~DowncastWriter} viewWriter\n// @param {'container'|'attribute'|'ui'} viewElementType\n// @returns {module:engine/view/element~Element}\nfunction createViewElementFromDefinition( viewElementDefinition, conversionApi, viewElementType ) {\n\tif ( typeof viewElementDefinition == 'string' ) {\n\t\t// If `viewElementDefinition` is given as a `String`, normalize it to an object with `name` property.\n\t\tviewElementDefinition = { name: viewElementDefinition };\n\t}\n\n\tlet element;\n\tconst viewWriter = conversionApi.writer;\n\tconst attributes = Object.assign( {}, viewElementDefinition.attributes );\n\n\tif ( viewElementType == 'container' ) {\n\t\telement = viewWriter.createContainerElement( viewElementDefinition.name, attributes );\n\t} else if ( viewElementType == 'attribute' ) {\n\t\tconst options = {\n\t\t\tpriority: viewElementDefinition.priority || ViewAttributeElement.DEFAULT_PRIORITY\n\t\t};\n\n\t\telement = viewWriter.createAttributeElement( viewElementDefinition.name, attributes, options );\n\t} else {\n\t\t// 'ui'.\n\t\telement = viewWriter.createUIElement( viewElementDefinition.name, attributes );\n\t}\n\n\tif ( viewElementDefinition.styles ) {\n\t\tconst keys = Object.keys( viewElementDefinition.styles );\n\n\t\tfor ( const key of keys ) {\n\t\t\tviewWriter.setStyle( key, viewElementDefinition.styles[ key ], element );\n\t\t}\n\t}\n\n\tif ( viewElementDefinition.classes ) {\n\t\tconst classes = viewElementDefinition.classes;\n\n\t\tif ( typeof classes == 'string' ) {\n\t\t\tviewWriter.addClass( classes, element );\n\t\t} else {\n\t\t\tfor ( const className of classes ) {\n\t\t\t\tviewWriter.addClass( className, element );\n\t\t\t}\n\t\t}\n\t}\n\n\treturn element;\n}\n\nfunction getFromAttributeCreator( config ) {\n\tif ( config.model.values ) {\n\t\treturn ( modelAttributeValue, conversionApi ) => {\n\t\t\tconst view = config.view[ modelAttributeValue ];\n\n\t\t\tif ( view ) {\n\t\t\t\treturn view( modelAttributeValue, conversionApi );\n\t\t\t}\n\n\t\t\treturn null;\n\t\t};\n\t} else {\n\t\treturn config.view;\n\t}\n}\n\n// Takes the configuration, adds default parameters if they do not exist and normalizes other parameters to be used in downcast converters\n// for generating a view attribute.\n//\n// @param {Object} view View configuration.\nfunction normalizeToAttributeConfig( view ) {\n\tif ( typeof view == 'string' ) {\n\t\treturn modelAttributeValue => ( { key: view, value: modelAttributeValue } );\n\t} else if ( typeof view == 'object' ) {\n\t\t// { key, value, ... }\n\t\tif ( view.value ) {\n\t\t\treturn () => view;\n\t\t}\n\t\t// { key, ... }\n\t\telse {\n\t\t\treturn modelAttributeValue => ( { key: view.key, value: modelAttributeValue } );\n\t\t}\n\t} else {\n\t\t// function.\n\t\treturn view;\n\t}\n}\n\n// Helper function for `highlight`. Prepares the actual descriptor object using value passed to the converter.\nfunction prepareDescriptor( highlightDescriptor, data, conversionApi ) {\n\t// If passed descriptor is a creator function, call it. If not, just use passed value.\n\tconst descriptor = typeof highlightDescriptor == 'function' ?\n\t\thighlightDescriptor( data, conversionApi ) :\n\t\thighlightDescriptor;\n\n\tif ( !descriptor ) {\n\t\treturn null;\n\t}\n\n\t// Apply default descriptor priority.\n\tif ( !descriptor.priority ) {\n\t\tdescriptor.priority = 10;\n\t}\n\n\t// Default descriptor id is marker name.\n\tif ( !descriptor.id ) {\n\t\tdescriptor.id = data.markerName;\n\t}\n\n\treturn descriptor;\n}\n\n/**\n * An object describing how the marker highlight should be represented in the view.\n *\n * Each text node contained in a highlighted range will be wrapped in a `<span>`\n * {@link module:engine/view/attributeelement~AttributeElement view attribute element} with CSS class(es), attributes and a priority\n * described by this object.\n *\n * Additionally, each {@link module:engine/view/containerelement~ContainerElement container element} can handle displaying the highlight\n * separately by providing the `addHighlight` and `removeHighlight` custom properties. In this case:\n *\n *  * The `HighlightDescriptor` object is passed to the `addHighlight` function upon conversion and should be used to apply the highlight to\n *  the element.\n *  * The descriptor `id` is passed to the `removeHighlight` function upon conversion and should be used to remove the highlight with the\n *  given ID from the element.\n *\n * @typedef {Object} module:engine/conversion/downcasthelpers~HighlightDescriptor\n *\n * @property {String|Array.<String>} classes A CSS class or an array of classes to set. If the descriptor is used to\n * create an {@link module:engine/view/attributeelement~AttributeElement attribute element} over text nodes, these classes will be set\n * on that attribute element. If the descriptor is applied to an element, usually these classes will be set on that element, however,\n * this depends on how the element converts the descriptor.\n *\n * @property {String} [id] Descriptor identifier. If not provided, it defaults to the converted marker's name.\n *\n * @property {Number} [priority] Descriptor priority. If not provided, it defaults to `10`. If the descriptor is used to create\n * an {@link module:engine/view/attributeelement~AttributeElement attribute element}, it will be that element's\n * {@link module:engine/view/attributeelement~AttributeElement#priority priority}. If the descriptor is applied to an element,\n * the priority will be used to determine which descriptor is more important.\n *\n * @property {Object} [attributes] Attributes to set. If the descriptor is used to create\n * an {@link module:engine/view/attributeelement~AttributeElement attribute element} over text nodes, these attributes will be set on that\n * attribute element. If the descriptor is applied to an element, usually these attributes will be set on that element, however,\n * this depends on how the element converts the descriptor.\n */\n"]}]}