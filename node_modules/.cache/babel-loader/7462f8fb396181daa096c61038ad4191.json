{"remainingRequest":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/babel-loader/lib/index.js!/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-dev-webpack-plugin/lib/translatesourceloader.js?{}!/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-engine/src/view/position.js","dependencies":[{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-engine/src/view/position.js","mtime":499162500000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-dev-webpack-plugin/lib/translatesourceloader.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-engine/src/view/position.js"],"names":["TreeWalker","compareArrays","CKEditorError","EditableElement","Position","parent","offset","is","getChild","endOffset","data","length","childCount","root","editable","shift","shifted","_createAt","skip","options","startPosition","treeWalker","position","getAncestors","includeSelf","ancestorsA","ancestorsB","i","type","otherPosition","compareWith","isEqual","thisPath","getPath","otherPath","push","result","itemOrPosition","node","_createBefore","_createAfter","item","textNode","offsetInText","index"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/position\n */\n\nimport TreeWalker from './treewalker';\n\nimport compareArrays from '@ckeditor/ckeditor5-utils/src/comparearrays';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport EditableElement from './editableelement';\n\n// To check if component is loaded more than once.\nimport '@ckeditor/ckeditor5-utils/src/version';\n\n/**\n * Position in the view tree. Position is represented by its parent node and an offset in this parent.\n *\n * In order to create a new position instance use the `createPosition*()` factory methods available in:\n *\n * * {@link module:engine/view/view~View}\n * * {@link module:engine/view/downcastwriter~DowncastWriter}\n * * {@link module:engine/view/upcastwriter~UpcastWriter}\n */\nexport default class Position {\n\t/**\n\t * Creates a position.\n\t *\n\t * @param {module:engine/view/node~Node|module:engine/view/documentfragment~DocumentFragment} parent Position parent.\n\t * @param {Number} offset Position offset.\n\t */\n\tconstructor( parent, offset ) {\n\t\t/**\n\t\t * Position parent.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/view/node~Node|module:engine/view/documentfragment~DocumentFragment}\n\t\t * module:engine/view/position~Position#parent\n\t\t */\n\t\tthis.parent = parent;\n\n\t\t/**\n\t\t * Position offset.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Number} module:engine/view/position~Position#offset\n\t\t */\n\t\tthis.offset = offset;\n\t}\n\n\t/**\n\t * Node directly after the position. Equals `null` when there is no node after position or position is located\n\t * inside text node.\n\t *\n\t * @readonly\n\t * @type {module:engine/view/node~Node|null}\n\t */\n\tget nodeAfter() {\n\t\tif ( this.parent.is( '$text' ) ) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn this.parent.getChild( this.offset ) || null;\n\t}\n\n\t/**\n\t * Node directly before the position. Equals `null` when there is no node before position or position is located\n\t * inside text node.\n\t *\n\t * @readonly\n\t * @type {module:engine/view/node~Node|null}\n\t */\n\tget nodeBefore() {\n\t\tif ( this.parent.is( '$text' ) ) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn this.parent.getChild( this.offset - 1 ) || null;\n\t}\n\n\t/**\n\t * Is `true` if position is at the beginning of its {@link module:engine/view/position~Position#parent parent}, `false` otherwise.\n\t *\n\t * @readonly\n\t * @type {Boolean}\n\t */\n\tget isAtStart() {\n\t\treturn this.offset === 0;\n\t}\n\n\t/**\n\t * Is `true` if position is at the end of its {@link module:engine/view/position~Position#parent parent}, `false` otherwise.\n\t *\n\t * @readonly\n\t * @type {Boolean}\n\t */\n\tget isAtEnd() {\n\t\tconst endOffset = this.parent.is( '$text' ) ? this.parent.data.length : this.parent.childCount;\n\n\t\treturn this.offset === endOffset;\n\t}\n\n\t/**\n\t * Position's root, that is the root of the position's parent element.\n\t *\n\t * @readonly\n\t * @type {module:engine/view/node~Node|module:engine/view/documentfragment~DocumentFragment}\n\t */\n\tget root() {\n\t\treturn this.parent.root;\n\t}\n\n\t/**\n\t * {@link module:engine/view/editableelement~EditableElement EditableElement} instance that contains this position, or `null` if\n\t * position is not inside an editable element.\n\t *\n\t * @type {module:engine/view/editableelement~EditableElement|null}\n\t */\n\tget editableElement() {\n\t\tlet editable = this.parent;\n\n\t\twhile ( !( editable instanceof EditableElement ) ) {\n\t\t\tif ( editable.parent ) {\n\t\t\t\teditable = editable.parent;\n\t\t\t} else {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\n\t\treturn editable;\n\t}\n\n\t/**\n\t * Returns a new instance of Position with offset incremented by `shift` value.\n\t *\n\t * @param {Number} shift How position offset should get changed. Accepts negative values.\n\t * @returns {module:engine/view/position~Position} Shifted position.\n\t */\n\tgetShiftedBy( shift ) {\n\t\tconst shifted = Position._createAt( this );\n\n\t\tconst offset = shifted.offset + shift;\n\t\tshifted.offset = offset < 0 ? 0 : offset;\n\n\t\treturn shifted;\n\t}\n\n\t/**\n\t * Gets the farthest position which matches the callback using\n\t * {@link module:engine/view/treewalker~TreeWalker TreeWalker}.\n\t *\n\t * For example:\n\t *\n\t * \t\tgetLastMatchingPosition( value => value.type == 'text' ); // <p>{}foo</p> -> <p>foo[]</p>\n\t * \t\tgetLastMatchingPosition( value => value.type == 'text', { direction: 'backward' } ); // <p>foo[]</p> -> <p>{}foo</p>\n\t * \t\tgetLastMatchingPosition( value => false ); // Do not move the position.\n\t *\n\t * @param {Function} skip Callback function. Gets {@link module:engine/view/treewalker~TreeWalkerValue} and should\n\t * return `true` if the value should be skipped or `false` if not.\n\t * @param {Object} options Object with configuration options. See {@link module:engine/view/treewalker~TreeWalker}.\n\t *\n\t * @returns {module:engine/view/position~Position} The position after the last item which matches the `skip` callback test.\n\t */\n\tgetLastMatchingPosition( skip, options = {} ) {\n\t\toptions.startPosition = this;\n\n\t\tconst treeWalker = new TreeWalker( options );\n\t\ttreeWalker.skip( skip );\n\n\t\treturn treeWalker.position;\n\t}\n\n\t/**\n\t * Returns ancestors array of this position, that is this position's parent and it's ancestors.\n\t *\n\t * @returns {Array} Array with ancestors.\n\t */\n\tgetAncestors() {\n\t\tif ( this.parent.is( 'documentFragment' ) ) {\n\t\t\treturn [ this.parent ];\n\t\t} else {\n\t\t\treturn this.parent.getAncestors( { includeSelf: true } );\n\t\t}\n\t}\n\n\t/**\n\t * Returns a {@link module:engine/view/node~Node} or {@link module:engine/view/documentfragment~DocumentFragment}\n\t * which is a common ancestor of both positions.\n\t *\n\t * @param {module:engine/view/position~Position} position\n\t * @returns {module:engine/view/node~Node|module:engine/view/documentfragment~DocumentFragment|null}\n\t */\n\tgetCommonAncestor( position ) {\n\t\tconst ancestorsA = this.getAncestors();\n\t\tconst ancestorsB = position.getAncestors();\n\n\t\tlet i = 0;\n\n\t\twhile ( ancestorsA[ i ] == ancestorsB[ i ] && ancestorsA[ i ] ) {\n\t\t\ti++;\n\t\t}\n\n\t\treturn i === 0 ? null : ancestorsA[ i - 1 ];\n\t}\n\n\t/**\n\t * Checks whether this object is of the given type.\n\t *\n\t *\t\tposition.is( 'position' ); // -> true\n\t *\t\tposition.is( 'view:position' ); // -> true\n\t *\n\t *\t\tposition.is( 'model:position' ); // -> false\n\t *\t\tposition.is( 'element' ); // -> false\n\t *\t\tposition.is( 'range' ); // -> false\n\t *\n\t * {@link module:engine/view/node~Node#is Check the entire list of view objects} which implement the `is()` method.\n\t *\n\t * @param {String} type\n\t * @returns {Boolean}\n\t */\n\tis( type ) {\n\t\treturn type === 'position' || type === 'view:position';\n\t}\n\n\t/**\n\t * Checks whether this position equals given position.\n\t *\n\t * @param {module:engine/view/position~Position} otherPosition Position to compare with.\n\t * @returns {Boolean} True if positions are same.\n\t */\n\tisEqual( otherPosition ) {\n\t\treturn ( this.parent == otherPosition.parent && this.offset == otherPosition.offset );\n\t}\n\n\t/**\n\t * Checks whether this position is located before given position. When method returns `false` it does not mean that\n\t * this position is after give one. Two positions may be located inside separate roots and in that situation this\n\t * method will still return `false`.\n\t *\n\t * @see module:engine/view/position~Position#isAfter\n\t * @see module:engine/view/position~Position#compareWith\n\t * @param {module:engine/view/position~Position} otherPosition Position to compare with.\n\t * @returns {Boolean} Returns `true` if this position is before given position.\n\t */\n\tisBefore( otherPosition ) {\n\t\treturn this.compareWith( otherPosition ) == 'before';\n\t}\n\n\t/**\n\t * Checks whether this position is located after given position. When method returns `false` it does not mean that\n\t * this position is before give one. Two positions may be located inside separate roots and in that situation this\n\t * method will still return `false`.\n\t *\n\t * @see module:engine/view/position~Position#isBefore\n\t * @see module:engine/view/position~Position#compareWith\n\t * @param {module:engine/view/position~Position} otherPosition Position to compare with.\n\t * @returns {Boolean} Returns `true` if this position is after given position.\n\t */\n\tisAfter( otherPosition ) {\n\t\treturn this.compareWith( otherPosition ) == 'after';\n\t}\n\n\t/**\n\t * Checks whether this position is before, after or in same position that other position. Two positions may be also\n\t * different when they are located in separate roots.\n\t *\n\t * @param {module:engine/view/position~Position} otherPosition Position to compare with.\n\t * @returns {module:engine/view/position~PositionRelation}\n\t */\n\tcompareWith( otherPosition ) {\n\t\tif ( this.root !== otherPosition.root ) {\n\t\t\treturn 'different';\n\t\t}\n\n\t\tif ( this.isEqual( otherPosition ) ) {\n\t\t\treturn 'same';\n\t\t}\n\n\t\t// Get path from root to position's parent element.\n\t\tconst thisPath = this.parent.is( 'node' ) ? this.parent.getPath() : [];\n\t\tconst otherPath = otherPosition.parent.is( 'node' ) ? otherPosition.parent.getPath() : [];\n\n\t\t// Add the positions' offsets to the parents offsets.\n\t\tthisPath.push( this.offset );\n\t\totherPath.push( otherPosition.offset );\n\n\t\t// Compare both path arrays to find common ancestor.\n\t\tconst result = compareArrays( thisPath, otherPath );\n\n\t\tswitch ( result ) {\n\t\t\tcase 'prefix':\n\t\t\t\treturn 'before';\n\n\t\t\tcase 'extension':\n\t\t\t\treturn 'after';\n\n\t\t\tdefault:\n\t\t\t\treturn thisPath[ result ] < otherPath[ result ] ? 'before' : 'after';\n\t\t}\n\t}\n\n\t/**\n\t * Creates a {@link module:engine/view/treewalker~TreeWalker TreeWalker} instance with this positions as a start position.\n\t *\n\t * @param {Object} options Object with configuration options. See {@link module:engine/view/treewalker~TreeWalker}\n\t * @param {module:engine/view/range~Range} [options.boundaries=null] Range to define boundaries of the iterator.\n\t * @param {Boolean} [options.singleCharacters=false]\n\t * @param {Boolean} [options.shallow=false]\n\t * @param {Boolean} [options.ignoreElementEnd=false]\n\t */\n\tgetWalker( options = {} ) {\n\t\toptions.startPosition = this;\n\n\t\treturn new TreeWalker( options );\n\t}\n\n\tclone() {\n\t\treturn new Position( this.parent, this.offset );\n\t}\n\n\t/**\n\t * Creates position at the given location. The location can be specified as:\n\t *\n\t * * a {@link module:engine/view/position~Position position},\n\t * * parent element and offset (offset defaults to `0`),\n\t * * parent element and `'end'` (sets position at the end of that element),\n\t * * {@link module:engine/view/item~Item view item} and `'before'` or `'after'` (sets position before or after given view item).\n\t *\n\t * This method is a shortcut to other constructors such as:\n\t *\n\t * * {@link module:engine/view/position~Position._createBefore},\n\t * * {@link module:engine/view/position~Position._createAfter}.\n\t *\n\t * @protected\n\t * @param {module:engine/view/item~Item|module:engine/view/position~Position} itemOrPosition\n\t * @param {Number|'end'|'before'|'after'} [offset] Offset or one of the flags. Used only when\n\t * first parameter is a {@link module:engine/view/item~Item view item}.\n\t */\n\tstatic _createAt( itemOrPosition, offset ) {\n\t\tif ( itemOrPosition instanceof Position ) {\n\t\t\treturn new this( itemOrPosition.parent, itemOrPosition.offset );\n\t\t} else {\n\t\t\tconst node = itemOrPosition;\n\n\t\t\tif ( offset == 'end' ) {\n\t\t\t\toffset = node.is( '$text' ) ? node.data.length : node.childCount;\n\t\t\t} else if ( offset == 'before' ) {\n\t\t\t\treturn this._createBefore( node );\n\t\t\t} else if ( offset == 'after' ) {\n\t\t\t\treturn this._createAfter( node );\n\t\t\t} else if ( offset !== 0 && !offset ) {\n\t\t\t\t/**\n\t\t\t\t * {@link module:engine/view/view~View#createPositionAt `View#createPositionAt()`}\n\t\t\t\t * requires the offset to be specified when the first parameter is a view item.\n\t\t\t\t *\n\t\t\t\t * @error view-createpositionat-offset-required\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError( 'view-createpositionat-offset-required', node );\n\t\t\t}\n\n\t\t\treturn new Position( node, offset );\n\t\t}\n\t}\n\n\t/**\n\t * Creates a new position after given view item.\n\t *\n\t * @protected\n\t * @param {module:engine/view/item~Item} item View item after which the position should be located.\n\t * @returns {module:engine/view/position~Position}\n\t */\n\tstatic _createAfter( item ) {\n\t\t// TextProxy is not a instance of Node so we need do handle it in specific way.\n\t\tif ( item.is( '$textProxy' ) ) {\n\t\t\treturn new Position( item.textNode, item.offsetInText + item.data.length );\n\t\t}\n\n\t\tif ( !item.parent ) {\n\t\t\t/**\n\t\t\t * You can not make a position after a root.\n\t\t\t *\n\t\t\t * @error view-position-after-root\n\t\t\t * @param {module:engine/view/node~Node} root\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'view-position-after-root', item, { root: item } );\n\t\t}\n\n\t\treturn new Position( item.parent, item.index + 1 );\n\t}\n\n\t/**\n\t * Creates a new position before given view item.\n\t *\n\t * @protected\n\t * @param {module:engine/view/item~Item} item View item before which the position should be located.\n\t * @returns {module:engine/view/position~Position}\n\t */\n\tstatic _createBefore( item ) {\n\t\t// TextProxy is not a instance of Node so we need do handle it in specific way.\n\t\tif ( item.is( '$textProxy' ) ) {\n\t\t\treturn new Position( item.textNode, item.offsetInText );\n\t\t}\n\n\t\tif ( !item.parent ) {\n\t\t\t/**\n\t\t\t * You cannot make a position before a root.\n\t\t\t *\n\t\t\t * @error view-position-before-root\n\t\t\t * @param {module:engine/view/node~Node} root\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'view-position-before-root', item, { root: item } );\n\t\t}\n\n\t\treturn new Position( item.parent, item.index );\n\t}\n}\n\n/**\n * A flag indicating whether this position is `'before'` or `'after'` or `'same'` as given position.\n * If positions are in different roots `'different'` flag is returned.\n *\n * @typedef {String} module:engine/view/position~PositionRelation\n */\n"]}]}