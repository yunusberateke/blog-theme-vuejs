{"remainingRequest":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/babel-loader/lib/index.js!/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-dev-webpack-plugin/lib/translatesourceloader.js?{}!/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-typing/src/texttransformation.js","dependencies":[{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-typing/src/texttransformation.js","mtime":499162500000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-dev-webpack-plugin/lib/translatesourceloader.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-typing/src/texttransformation.js"],"names":["Plugin","TextWatcher","escapeRegExp","TRANSFORMATIONS","copyright","from","to","registeredTrademark","trademark","oneHalf","oneThird","twoThirds","oneForth","threeQuarters","lessThanOrEqual","greaterThanOrEqual","notEqual","arrowLeft","arrowRight","horizontalEllipsis","enDash","emDash","quotesPrimary","buildQuotesRegExp","quotesSecondary","quotesPrimaryEnGb","quotesSecondaryEnGb","quotesPrimaryPl","quotesSecondaryPl","TRANSFORMATION_GROUPS","symbols","mathematical","typography","quotes","DEFAULT_TRANSFORMATIONS","TextTransformation","editor","config","define","transformations","include","model","modelSelection","document","selection","on","isEnabled","anchor","parent","is","_enableTransformationWatchers","input","plugins","get","normalizedTransformations","normalizeTransformations","testCallback","text","normalizedTransformation","match","test","watcherCallback","evt","data","isInput","batch","matches","exec","replaces","slice","matchedRange","range","changeIndex","index","enqueueChange","writer","i","length","replaceWith","replacePosition","start","getShiftedBy","replaceRange","createRange","attributes","getTextAttributesAfterPosition","insertContent","createText","watcher","bind","normalizeFrom","RegExp","normalizeTo","Array","position","textNode","nodeAfter","getAttributes","quoteCharacter","extra","remove","isNotRemoved","transformation","includes","configured","concat","filter","expandGroupsAndRemoveDuplicates","map","definitions","definedTransformations","Set","transformationOrGroup","add"],"mappings":"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D;AACvD;AACA,MAAMC,sBAAsB,GAAG,IAAIC,GAAJ,EAA/B;;AAFuD,8CAIlBF,WAJkB;AAAA;;AAAA;AAIvD,2DAAmD;AAAA,UAAvCG,qBAAuC;;AAClD,UAAKnF,qBAAqB,CAAEmF,qBAAF,CAA1B,EAAsD;AAAA,oDACvBnF,qBAAqB,CAAEmF,qBAAF,CADE;AAAA;;AAAA;AACrD,iEAA+E;AAAA,gBAAnEV,cAAmE;AAC9EQ,YAAAA,sBAAsB,CAACG,GAAvB,CAA4BX,cAA5B;AACA;AAHoD;AAAA;AAAA;AAAA;AAAA;AAIrD,OAJD,MAIO;AACNQ,QAAAA,sBAAsB,CAACG,GAAvB,CAA4BD,qBAA5B;AACA;AACD;AAZsD;AAAA;AAAA;AAAA;AAAA;;AAcvD,SAAOnB,KAAK,CAACxF,IAAN,CAAYyG,sBAAZ,CAAP;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module typing/texttransformation\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport TextWatcher from './textwatcher';\nimport { escapeRegExp } from 'lodash-es';\n\n// All named transformations.\nconst TRANSFORMATIONS = {\n\t// Common symbols:\n\tcopyright: { from: '(c)', to: '©' },\n\tregisteredTrademark: { from: '(r)', to: '®' },\n\ttrademark: { from: '(tm)', to: '™' },\n\n\t// Mathematical:\n\toneHalf: { from: '1/2', to: '½' },\n\toneThird: { from: '1/3', to: '⅓' },\n\ttwoThirds: { from: '2/3', to: '⅔' },\n\toneForth: { from: '1/4', to: '¼' },\n\tthreeQuarters: { from: '3/4', to: '¾' },\n\tlessThanOrEqual: { from: '<=', to: '≤' },\n\tgreaterThanOrEqual: { from: '>=', to: '≥' },\n\tnotEqual: { from: '!=', to: '≠' },\n\tarrowLeft: { from: '<-', to: '←' },\n\tarrowRight: { from: '->', to: '→' },\n\n\t// Typography:\n\thorizontalEllipsis: { from: '...', to: '…' },\n\tenDash: { from: /(^| )(--)( )$/, to: [ null, '–', null ] },\n\temDash: { from: /(^| )(---)( )$/, to: [ null, '—', null ] },\n\t// Quotations:\n\t// English, US\n\tquotesPrimary: { from: buildQuotesRegExp( '\"' ), to: [ null, '“', null, '”' ] },\n\tquotesSecondary: { from: buildQuotesRegExp( '\\'' ), to: [ null, '‘', null, '’' ] },\n\n\t// English, UK\n\tquotesPrimaryEnGb: { from: buildQuotesRegExp( '\\'' ), to: [ null, '‘', null, '’' ] },\n\tquotesSecondaryEnGb: { from: buildQuotesRegExp( '\"' ), to: [ null, '“', null, '”' ] },\n\n\t// Polish\n\tquotesPrimaryPl: { from: buildQuotesRegExp( '\"' ), to: [ null, '„', null, '”' ] },\n\tquotesSecondaryPl: { from: buildQuotesRegExp( '\\'' ), to: [ null, '‚', null, '’' ] }\n};\n\n// Transformation groups.\nconst TRANSFORMATION_GROUPS = {\n\tsymbols: [ 'copyright', 'registeredTrademark', 'trademark' ],\n\tmathematical: [\n\t\t'oneHalf', 'oneThird', 'twoThirds', 'oneForth', 'threeQuarters',\n\t\t'lessThanOrEqual', 'greaterThanOrEqual', 'notEqual',\n\t\t'arrowLeft', 'arrowRight'\n\t],\n\ttypography: [ 'horizontalEllipsis', 'enDash', 'emDash' ],\n\tquotes: [ 'quotesPrimary', 'quotesSecondary' ]\n};\n\n// A set of default transformations provided by the feature.\nconst DEFAULT_TRANSFORMATIONS = [\n\t'symbols',\n\t'mathematical',\n\t'typography',\n\t'quotes'\n];\n\n/**\n * The text transformation plugin.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class TextTransformation extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'TextTransformation';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( editor ) {\n\t\tsuper( editor );\n\n\t\teditor.config.define( 'typing', {\n\t\t\ttransformations: {\n\t\t\t\tinclude: DEFAULT_TRANSFORMATIONS\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst model = this.editor.model;\n\t\tconst modelSelection = model.document.selection;\n\n\t\tmodelSelection.on( 'change:range', () => {\n\t\t\t// Disable plugin when selection is inside a code block.\n\t\t\tthis.isEnabled = !modelSelection.anchor.parent.is( 'element', 'codeBlock' );\n\t\t} );\n\n\t\tthis._enableTransformationWatchers();\n\t}\n\n\t/**\n\t * Create new TextWatcher listening to the editor for typing and selection events.\n\t *\n\t * @private\n\t */\n\t_enableTransformationWatchers() {\n\t\tconst editor = this.editor;\n\t\tconst model = editor.model;\n\t\tconst input = editor.plugins.get( 'Input' );\n\t\tconst normalizedTransformations = normalizeTransformations( editor.config.get( 'typing.transformations' ) );\n\n\t\tconst testCallback = text => {\n\t\t\tfor ( const normalizedTransformation of normalizedTransformations ) {\n\t\t\t\tconst from = normalizedTransformation.from;\n\t\t\t\tconst match = from.test( text );\n\n\t\t\t\tif ( match ) {\n\t\t\t\t\treturn { normalizedTransformation };\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tconst watcherCallback = ( evt, data ) => {\n\t\t\tif ( !input.isInput( data.batch ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst { from, to } = data.normalizedTransformation;\n\n\t\t\tconst matches = from.exec( data.text );\n\t\t\tconst replaces = to( matches.slice( 1 ) );\n\n\t\t\tconst matchedRange = data.range;\n\n\t\t\tlet changeIndex = matches.index;\n\n\t\t\tmodel.enqueueChange( writer => {\n\t\t\t\tfor ( let i = 1; i < matches.length; i++ ) {\n\t\t\t\t\tconst match = matches[ i ];\n\t\t\t\t\tconst replaceWith = replaces[ i - 1 ];\n\n\t\t\t\t\tif ( replaceWith == null ) {\n\t\t\t\t\t\tchangeIndex += match.length;\n\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst replacePosition = matchedRange.start.getShiftedBy( changeIndex );\n\t\t\t\t\tconst replaceRange = model.createRange( replacePosition, replacePosition.getShiftedBy( match.length ) );\n\t\t\t\t\tconst attributes = getTextAttributesAfterPosition( replacePosition );\n\n\t\t\t\t\tmodel.insertContent( writer.createText( replaceWith, attributes ), replaceRange );\n\n\t\t\t\t\tchangeIndex += replaceWith.length;\n\t\t\t\t}\n\t\t\t} );\n\t\t};\n\n\t\tconst watcher = new TextWatcher( editor.model, testCallback );\n\n\t\twatcher.on( 'matched:data', watcherCallback );\n\t\twatcher.bind( 'isEnabled' ).to( this );\n\t}\n}\n\n// Normalizes the configuration `from` parameter value.\n// The normalized value for the `from` parameter is a RegExp instance. If the passed `from` is already a RegExp instance,\n// it is returned unchanged.\n//\n// @param {String|RegExp} from\n// @returns {RegExp}\nfunction normalizeFrom( from ) {\n\tif ( typeof from == 'string' ) {\n\t\treturn new RegExp( `(${ escapeRegExp( from ) })$` );\n\t}\n\n\t// `from` is already a regular expression.\n\treturn from;\n}\n\n// Normalizes the configuration `to` parameter value.\n// The normalized value for the `to` parameter is a function that takes an array and returns an array. See more in the\n// configuration description. If the passed `to` is already a function, it is returned unchanged.\n//\n// @param {String|Array.<null|String>|Function} to\n// @returns {Function}\nfunction normalizeTo( to ) {\n\tif ( typeof to == 'string' ) {\n\t\treturn () => [ to ];\n\t} else if ( to instanceof Array ) {\n\t\treturn () => to;\n\t}\n\n\t// `to` is already a function.\n\treturn to;\n}\n\n// For given `position` returns attributes for the text that is after that position.\n// The text can be in the same text node as the position (`foo[]bar`) or in the next text node (`foo[]<$text bold=\"true\">bar</$text>`).\n//\n// @param {module:engine/model/position~Position} position\n// @returns {Iterable.<*>}\nfunction getTextAttributesAfterPosition( position ) {\n\tconst textNode = position.textNode ? position.textNode : position.nodeAfter;\n\n\treturn textNode.getAttributes();\n}\n\n// Returns a RegExp pattern string that detects a sentence inside a quote.\n//\n// @param {String} quoteCharacter The character to create a pattern for.\n// @returns {String}\nfunction buildQuotesRegExp( quoteCharacter ) {\n\treturn new RegExp( `(^|\\\\s)(${ quoteCharacter })([^${ quoteCharacter }]*)(${ quoteCharacter })$` );\n}\n\n// Reads text transformation config and returns normalized array of transformations objects.\n//\n// @param {module:typing/texttransformation~TextTransformationDescription} config\n// @returns {Array.<{from:String,to:Function}>}\nfunction normalizeTransformations( config ) {\n\tconst extra = config.extra || [];\n\tconst remove = config.remove || [];\n\tconst isNotRemoved = transformation => !remove.includes( transformation );\n\n\tconst configured = config.include.concat( extra ).filter( isNotRemoved );\n\n\treturn expandGroupsAndRemoveDuplicates( configured )\n\t\t.filter( isNotRemoved ) // Filter out 'remove' transformations as they might be set in group\n\t\t.map( transformation => TRANSFORMATIONS[ transformation ] || transformation )\n\t\t.map( transformation => ( {\n\t\t\tfrom: normalizeFrom( transformation.from ),\n\t\t\tto: normalizeTo( transformation.to )\n\t\t} ) );\n}\n\n// Reads definitions and expands named groups if needed to transformation names.\n// This method also removes duplicated named transformations if any.\n//\n// @param {Array.<String|Object>} definitions\n// @returns {Array.<String|Object>}\nfunction expandGroupsAndRemoveDuplicates( definitions ) {\n\t// Set is using to make sure that transformation names are not duplicated.\n\tconst definedTransformations = new Set();\n\n\tfor ( const transformationOrGroup of definitions ) {\n\t\tif ( TRANSFORMATION_GROUPS[ transformationOrGroup ] ) {\n\t\t\tfor ( const transformation of TRANSFORMATION_GROUPS[ transformationOrGroup ] ) {\n\t\t\t\tdefinedTransformations.add( transformation );\n\t\t\t}\n\t\t} else {\n\t\t\tdefinedTransformations.add( transformationOrGroup );\n\t\t}\n\t}\n\n\treturn Array.from( definedTransformations );\n}\n\n/**\n * The text transformation definition object. It describes what should be replaced with what.\n *\n * The input value (`from`) can be passed either as a string or as a regular expression.\n *\n * * If a string is passed, it will be simply checked if the end of the input matches it.\n * * If a regular expression is passed, its entire length must be covered with capturing groups (e.g. `/(foo)(bar)$/`).\n * Also, since it is compared against the end of the input, it has to end with  `$` to be correctly matched.\n * See examples below.\n *\n * The output value (`to`) can be passed as a string, as an array or as a function.\n *\n * * If a string is passed, it will be used as a replacement value as-is. Note that a string output value can be used only if\n * the input value is a string, too.\n * * If an array is passed, it has to have the same number of elements as there are capturing groups in the input value regular expression.\n * Each capture group will be replaced with a corresponding string from the passed array. If a given capturing group should not be replaced,\n * use `null` instead of passing a string.\n * * If a function is used, it should return an array as described above. The function is passed one parameter &mdash; an array with matches\n * by the regular expression. See the examples below.\n *\n * A simple string-to-string replacement:\n *\n *\t\t{ from: '(c)', to: '©' }\n *\n * Change quote styles using a regular expression. Note how all the parts are in separate capturing groups and the space at the beginning\n * and the text inside quotes are not replaced (`null` passed as the first and the third value in the `to` parameter):\n *\n *\t\t{\n *\t\t\tfrom: /(^|\\s)(\")([^\"]*)(\")$/,\n *\t\t\tto: [ null, '“', null, '”' ]\n *\t\t}\n *\n * Automatic uppercase after a dot using a callback:\n *\n *\t\t{\n *\t\t\tfrom: /(\\. )([a-z])$/,\n *\t\t\tto: matches => [ null, matches[ 1 ].toUpperCase() ]\n *\t\t}\n *\n * @typedef {Object} module:typing/texttransformation~TextTransformationDescription\n * @property {String|RegExp} from The string or regular expression to transform.\n * @property {String} to The text to transform compatible with `String.replace()`.\n */\n\n/**\n * The configuration of the {@link module:typing/texttransformation~TextTransformation} feature.\n *\n * Read more in {@link module:typing/texttransformation~TextTransformationConfig}.\n *\n * @member {module:typing/texttransformation~TextTransformationConfig} module:typing/typing~TypingConfig#transformations\n */\n\n/**\n * The configuration of the text transformation feature.\n *\n *\t\tClassicEditor\n *\t\t\t.create( editorElement, {\n *\t\t\t\ttyping: {\n *\t\t\t\t\ttransformations: ... // Text transformation feature options.\n *\t\t\t\t}\n *\t\t\t} )\n *\t\t\t.then( ... )\n *\t\t\t.catch( ... );\n *\n * By default, the feature comes pre-configured\n * (via {@link module:typing/texttransformation~TextTransformationConfig#include `config.typing.transformations.include`}) with the\n * following groups of transformations:\n *\n * * Typography (group name: `typography`)\n *   - `ellipsis`: transforms `...` to `…`\n *   - `enDash`: transforms ` -- ` to ` – `\n *   - `emDash`: transforms ` --- ` to ` — `\n * * Quotations (group name: `quotes`)\n *   - `quotesPrimary`: transforms `\"Foo bar\"` to `“Foo bar”`\n *   - `quotesSecondary`: transforms `'Foo bar'` to `‘Foo bar’`\n * * Symbols (group name: `symbols`)\n *   - `trademark`: transforms `(tm)` to `™`\n *   - `registeredTrademark`: transforms `(r)` to `®`\n *   - `copyright`: transforms `(c)` to `©`\n * * Mathematical (group name: `mathematical`)\n *   - `oneHalf`: transforms `1/2` to: `½`\n *   - `oneThird`: transforms `1/3` to: `⅓`\n *   - `twoThirds`: transforms `2/3` to: `⅔`\n *   - `oneForth`: transforms `1/4` to: `¼`\n *   - `threeQuarters`: transforms `3/4` to: `¾`\n *   - `lessThanOrEqual`: transforms `<=` to: `≤`\n *   - `greaterThanOrEqual`: transforms `>=` to: `≥`\n *   - `notEqual`: transforms `!=` to: `≠`\n *   - `arrowLeft`: transforms `<-` to: `←`\n *   - `arrowRight`: transforms `->` to: `→`\n * * Misc:\n *   - `quotesPrimaryEnGb`: transforms `'Foo bar'` to `‘Foo bar’`\n *   - `quotesSecondaryEnGb`: transforms `\"Foo bar\"` to `“Foo bar”`\n *   - `quotesPrimaryPl`: transforms `\"Foo bar\"` to `„Foo bar”`\n *   - `quotesSecondaryPl`:  transforms `'Foo bar'` to `‚Foo bar’`\n *\n * In order to load additional transformations, use the\n * {@link module:typing/texttransformation~TextTransformationConfig#extra `transformations.extra` option}.\n *\n * In order to narrow down the list of transformations, use the\n * {@link module:typing/texttransformation~TextTransformationConfig#remove `transformations.remove` option}.\n *\n * In order to completely override the supported transformations, use the\n * {@link module:typing/texttransformation~TextTransformationConfig#include `transformations.include` option}.\n *\n * Examples:\n *\n *\t\tconst transformationsConfig = {\n *\t\t\tinclude: [\n *\t\t\t\t// Use only the 'quotes' and 'typography' groups.\n *\t\t\t\t'quotes',\n *\t\t\t\t'typography',\n *\n *\t\t\t\t// Plus, some custom transformation.\n *\t\t\t\t{ from: 'CKE', to: 'CKEditor' }\n *\t\t\t]\n *\t\t};\n *\n *\t\tconst transformationsConfig = {\n *\t\t\t// Remove the 'ellipsis' transformation loaded by the 'typography' group.\n *\t\t\tremove: [ 'ellipsis' ]\n *\t\t}\n *\n * @interface TextTransformationConfig\n */\n\n/* eslint-disable max-len */\n/**\n * The standard list of text transformations supported by the editor. By default it comes pre-configured with a couple dozen of them\n * (see {@link module:typing/texttransformation~TextTransformationConfig} for the full list). You can override this list completely\n * by setting this option or use the other two options\n * ({@link module:typing/texttransformation~TextTransformationConfig#extra `transformations.extra`},\n * {@link module:typing/texttransformation~TextTransformationConfig#remove `transformations.remove`}) to fine-tune the default list.\n *\n * @member {Array.<module:typing/texttransformation~TextTransformationDescription>} module:typing/texttransformation~TextTransformationConfig#include\n */\n\n/**\n * Additional text transformations that are added to the transformations defined in\n * {@link module:typing/texttransformation~TextTransformationConfig#include `transformations.include`}.\n *\n *\t\tconst transformationsConfig = {\n *\t\t\textra: [\n *\t\t\t\t{ from: 'CKE', to: 'CKEditor' }\n *\t\t\t]\n *\t\t};\n *\n * @member {Array.<module:typing/texttransformation~TextTransformationDescription>} module:typing/texttransformation~TextTransformationConfig#extra\n */\n\n/**\n * The text transformation names that are removed from transformations defined in\n * {@link module:typing/texttransformation~TextTransformationConfig#include `transformations.include`} or\n * {@link module:typing/texttransformation~TextTransformationConfig#extra `transformations.extra`}.\n *\n *\t\tconst transformationsConfig = {\n *\t\t\tremove: [\n *\t\t\t\t'ellipsis',    // Remove only 'ellipsis' from the 'typography' group.\n *\t\t\t\t'mathematical' // Remove all transformations from the 'mathematical' group.\n *\t\t\t]\n *\t\t}\n *\n * @member {Array.<module:typing/texttransformation~TextTransformationDescription>} module:typing/texttransformation~TextTransformationConfig#remove\n */\n/* eslint-enable max-len */\n"]}]}