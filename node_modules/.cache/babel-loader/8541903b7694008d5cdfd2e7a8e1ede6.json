{"remainingRequest":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/babel-loader/lib/index.js!/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-dev-webpack-plugin/lib/translatesourceloader.js?{}!/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-engine/src/model/markercollection.js","dependencies":[{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-engine/src/model/markercollection.js","mtime":499162500000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-dev-webpack-plugin/lib/translatesourceloader.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-engine/src/model/markercollection.js"],"names":["LiveRange","EmitterMixin","CKEditorError","mix","MarkerCollection","_markers","Map","Symbol","iterator","values","markerName","has","get","markerOrName","range","managedUsingOperations","affectsData","Marker","name","includes","oldMarker","oldRange","getRange","hasChanged","isEqual","_attachLiveRange","fromRange","_managedUsingOperations","_affectsData","fire","liveRange","marker","set","delete","_destroyMarker","position","containsPosition","getIntersection","stopListening","prefix","startsWith","_detachLiveRange","_liveRange","start","clone","end","toRange","type","delegate","to","stopDelegating","detach"],"mappings":"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CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IACMgB,M;AACL;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,kBAAaC,IAAb,EAAmBY,SAAnB,EAA8Bf,sBAA9B,EAAsDC,WAAtD,EAAoE;AAAA;;AACnE;AACF;AACA;AACA;AACA;AACA;AACE,SAAKE,IAAL,GAAYA,IAAZ;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,SAAKwB,UAAL,GAAkB,KAAKjB,gBAAL,CAAuBK,SAAvB,CAAlB;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,SAAKH,uBAAL,GAA+BZ,sBAA/B;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;;AACE,SAAKa,YAAL,GAAoBZ,WAApB;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;;;;;SACC,eAA6B;AAC5B,UAAK,CAAC,KAAK0B,UAAX,EAAwB;AACvB,cAAM,IAAIxC,aAAJ,CAAmB,kBAAnB,EAAuC,IAAvC,CAAN;AACA;;AAED,aAAO,KAAKyB,uBAAZ;AACA;AAED;AACD;AACA;AACA;AACA;;;;SACC,eAAkB;AACjB,UAAK,CAAC,KAAKe,UAAX,EAAwB;AACvB,cAAM,IAAIxC,aAAJ,CAAmB,kBAAnB,EAAuC,IAAvC,CAAN;AACA;;AAED,aAAO,KAAK0B,YAAZ;AACA;AAED;AACD;AACA;AACA;AACA;;;;WACC,oBAAW;AACV,UAAK,CAAC,KAAKc,UAAX,EAAwB;AACvB,cAAM,IAAIxC,aAAJ,CAAmB,kBAAnB,EAAuC,IAAvC,CAAN;AACA;;AAED,aAAO,KAAKwC,UAAL,CAAgBC,KAAhB,CAAsBC,KAAtB,EAAP;AACA;AAED;AACD;AACA;AACA;AACA;;;;WACC,kBAAS;AACR,UAAK,CAAC,KAAKF,UAAX,EAAwB;AACvB,cAAM,IAAIxC,aAAJ,CAAmB,kBAAnB,EAAuC,IAAvC,CAAN;AACA;;AAED,aAAO,KAAKwC,UAAL,CAAgBG,GAAhB,CAAoBD,KAApB,EAAP;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACC,oBAAW;AACV,UAAK,CAAC,KAAKF,UAAX,EAAwB;AACvB,cAAM,IAAIxC,aAAJ,CAAmB,kBAAnB,EAAuC,IAAvC,CAAN;AACA;;AAED,aAAO,KAAKwC,UAAL,CAAgBI,OAAhB,EAAP;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACC,YAAIC,IAAJ,EAAW;AACV,aAAOA,IAAI,KAAK,QAAT,IAAqBA,IAAI,KAAK,cAArC;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;;;;WACC,0BAAkBjB,SAAlB,EAA8B;AAC7B,UAAK,KAAKY,UAAV,EAAuB;AACtB,aAAKD,gBAAL;AACA,OAH4B,CAK7B;;;AACAX,MAAAA,SAAS,CAACkB,QAAV,CAAoB,cAApB,EAAqCC,EAArC,CAAyC,IAAzC;AACAnB,MAAAA,SAAS,CAACkB,QAAV,CAAoB,gBAApB,EAAuCC,EAAvC,CAA2C,IAA3C;AAEA,WAAKP,UAAL,GAAkBZ,SAAlB;AAEA,aAAOA,SAAP;AACA;AAED;AACD;AACA;AACA;AACA;;;;WACC,4BAAmB;AAClB,WAAKY,UAAL,CAAgBQ,cAAhB,CAAgC,cAAhC,EAAgD,IAAhD;;AACA,WAAKR,UAAL,CAAgBQ,cAAhB,CAAgC,gBAAhC,EAAkD,IAAlD;;AACA,WAAKR,UAAL,CAAgBS,MAAhB;;AACA,WAAKT,UAAL,GAAkB,IAAlB;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAGAvC,GAAG,CAAEc,MAAF,EAAUhB,YAAV,CAAH;AAEA;AACA;AACA;AACA;AACA","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/markercollection\n */\n\nimport LiveRange from './liverange';\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\n\n/**\n * The collection of all {@link module:engine/model/markercollection~Marker markers} attached to the document.\n * It lets you {@link module:engine/model/markercollection~MarkerCollection#get get} markers or track them using\n * {@link module:engine/model/markercollection~MarkerCollection#event:update} event.\n *\n * To create, change or remove makers use {@link module:engine/model/writer~Writer model writers'} methods:\n * {@link module:engine/model/writer~Writer#addMarker} or {@link module:engine/model/writer~Writer#removeMarker}. Since\n * the writer is the only proper way to change the data model it is not possible to change markers directly using this\n * collection. All markers created by the writer will be automatically added to this collection.\n *\n * By default there is one marker collection available as {@link module:engine/model/model~Model#markers model property}.\n *\n * @see module:engine/model/markercollection~Marker\n */\nexport default class MarkerCollection {\n\t/**\n\t * Creates a markers collection.\n\t */\n\tconstructor() {\n\t\t/**\n\t\t * Stores {@link ~Marker markers} added to the collection.\n\t\t *\n\t\t * @private\n\t\t * @member {Map} #_markers\n\t\t */\n\t\tthis._markers = new Map();\n\t}\n\n\t/**\n\t * Iterable interface.\n\t *\n\t * Iterates over all {@link ~Marker markers} added to the collection.\n\t *\n\t * @returns {Iterable}\n\t */\n\t[ Symbol.iterator ]() {\n\t\treturn this._markers.values();\n\t}\n\n\t/**\n\t * Checks if marker with given `markerName` is in the collection.\n\t *\n\t * @param {String} markerName Marker name.\n\t * @returns {Boolean} `true` if marker with given `markerName` is in the collection, `false` otherwise.\n\t */\n\thas( markerName ) {\n\t\treturn this._markers.has( markerName );\n\t}\n\n\t/**\n\t * Returns {@link ~Marker marker} with given `markerName`.\n\t *\n\t * @param {String} markerName Name of marker to get.\n\t * @returns {module:engine/model/markercollection~Marker|null} Marker with given name or `null` if such marker was\n\t * not added to the collection.\n\t */\n\tget( markerName ) {\n\t\treturn this._markers.get( markerName ) || null;\n\t}\n\n\t/**\n\t * Creates and adds a {@link ~Marker marker} to the `MarkerCollection` with given name on given\n\t * {@link module:engine/model/range~Range range}.\n\t *\n\t * If `MarkerCollection` already had a marker with given name (or {@link ~Marker marker} was passed), the marker in\n\t * collection is updated and {@link module:engine/model/markercollection~MarkerCollection#event:update} event is fired\n\t * but only if there was a change (marker range or {@link module:engine/model/markercollection~Marker#managedUsingOperations}\n\t * flag has changed.\n\t *\n\t * @protected\n\t * @fires module:engine/model/markercollection~MarkerCollection#event:update\n\t * @param {String|module:engine/model/markercollection~Marker} markerOrName Name of marker to set or marker instance to update.\n\t * @param {module:engine/model/range~Range} range Marker range.\n\t * @param {Boolean} [managedUsingOperations=false] Specifies whether the marker is managed using operations.\n\t * @param {Boolean} [affectsData=false] Specifies whether the marker affects the data produced by the data pipeline\n\t * (is persisted in the editor's data).\n\t * @returns {module:engine/model/markercollection~Marker} `Marker` instance which was added or updated.\n\t */\n\t_set( markerOrName, range, managedUsingOperations = false, affectsData = false ) {\n\t\tconst markerName = markerOrName instanceof Marker ? markerOrName.name : markerOrName;\n\n\t\tif ( markerName.includes( ',' ) ) {\n\t\t\t/**\n\t\t\t * Marker name cannot contain the \",\" character.\n\t\t\t *\n\t\t\t * @error markercollection-incorrect-marker-name\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'markercollection-incorrect-marker-name', this );\n\t\t}\n\n\t\tconst oldMarker = this._markers.get( markerName );\n\n\t\tif ( oldMarker ) {\n\t\t\tconst oldRange = oldMarker.getRange();\n\t\t\tlet hasChanged = false;\n\n\t\t\tif ( !oldRange.isEqual( range ) ) {\n\t\t\t\toldMarker._attachLiveRange( LiveRange.fromRange( range ) );\n\t\t\t\thasChanged = true;\n\t\t\t}\n\n\t\t\tif ( managedUsingOperations != oldMarker.managedUsingOperations ) {\n\t\t\t\toldMarker._managedUsingOperations = managedUsingOperations;\n\t\t\t\thasChanged = true;\n\t\t\t}\n\n\t\t\tif ( typeof affectsData === 'boolean' && affectsData != oldMarker.affectsData ) {\n\t\t\t\toldMarker._affectsData = affectsData;\n\t\t\t\thasChanged = true;\n\t\t\t}\n\n\t\t\tif ( hasChanged ) {\n\t\t\t\tthis.fire( 'update:' + markerName, oldMarker, oldRange, range );\n\t\t\t}\n\n\t\t\treturn oldMarker;\n\t\t}\n\n\t\tconst liveRange = LiveRange.fromRange( range );\n\t\tconst marker = new Marker( markerName, liveRange, managedUsingOperations, affectsData );\n\n\t\tthis._markers.set( markerName, marker );\n\t\tthis.fire( 'update:' + markerName, marker, null, range );\n\n\t\treturn marker;\n\t}\n\n\t/**\n\t * Removes given {@link ~Marker marker} or a marker with given name from the `MarkerCollection`.\n\t *\n\t * @protected\n\t * @fires module:engine/model/markercollection~MarkerCollection#event:update\n\t * @param {String} markerOrName Marker or name of a marker to remove.\n\t * @returns {Boolean} `true` if marker was found and removed, `false` otherwise.\n\t */\n\t_remove( markerOrName ) {\n\t\tconst markerName = markerOrName instanceof Marker ? markerOrName.name : markerOrName;\n\t\tconst oldMarker = this._markers.get( markerName );\n\n\t\tif ( oldMarker ) {\n\t\t\tthis._markers.delete( markerName );\n\t\t\tthis.fire( 'update:' + markerName, oldMarker, oldMarker.getRange(), null );\n\n\t\t\tthis._destroyMarker( oldMarker );\n\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Fires an {@link module:engine/model/markercollection~MarkerCollection#event:update} event for the given {@link ~Marker marker}\n\t * but does not change the marker. Useful to force {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher downcast\n\t * conversion} for the marker.\n\t *\n\t * @protected\n\t * @fires module:engine/model/markercollection~MarkerCollection#event:update\n\t * @param {String} markerOrName Marker or name of a marker to refresh.\n\t */\n\t_refresh( markerOrName ) {\n\t\tconst markerName = markerOrName instanceof Marker ? markerOrName.name : markerOrName;\n\t\tconst marker = this._markers.get( markerName );\n\n\t\tif ( !marker ) {\n\t\t\t/**\n\t\t\t * Marker with provided name does not exists.\n\t\t\t *\n\t\t\t * @error markercollection-refresh-marker-not-exists\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'markercollection-refresh-marker-not-exists', this );\n\t\t}\n\n\t\tconst range = marker.getRange();\n\n\t\tthis.fire( 'update:' + markerName, marker, range, range, marker.managedUsingOperations, marker.affectsData );\n\t}\n\n\t/**\n\t * Returns iterator that iterates over all markers, which ranges contain given {@link module:engine/model/position~Position position}.\n\t *\n\t * @param {module:engine/model/position~Position} position\n\t * @returns {Iterable.<module:engine/model/markercollection~Marker>}\n\t */\n\t* getMarkersAtPosition( position ) {\n\t\tfor ( const marker of this ) {\n\t\t\tif ( marker.getRange().containsPosition( position ) ) {\n\t\t\t\tyield marker;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Returns iterator that iterates over all markers, which intersects with given {@link module:engine/model/range~Range range}.\n\t *\n\t * @param {module:engine/model/range~Range} range\n\t * @returns {Iterable.<module:engine/model/markercollection~Marker>}\n\t */\n\t* getMarkersIntersectingRange( range ) {\n\t\tfor ( const marker of this ) {\n\t\t\tif ( marker.getRange().getIntersection( range ) !== null ) {\n\t\t\t\tyield marker;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Destroys marker collection and all markers inside it.\n\t */\n\tdestroy() {\n\t\tfor ( const marker of this._markers.values() ) {\n\t\t\tthis._destroyMarker( marker );\n\t\t}\n\n\t\tthis._markers = null;\n\n\t\tthis.stopListening();\n\t}\n\n\t/**\n\t * Iterates over all markers that starts with given `prefix`.\n\t *\n\t *\t\tconst markerFooA = markersCollection.set( 'foo:a', rangeFooA );\n\t *\t\tconst markerFooB = markersCollection.set( 'foo:b', rangeFooB );\n\t *\t\tconst markerBarA = markersCollection.set( 'bar:a', rangeBarA );\n\t *\t\tconst markerFooBarA = markersCollection.set( 'foobar:a', rangeFooBarA );\n\t *\t\tArray.from( markersCollection.getMarkersGroup( 'foo' ) ); // [ markerFooA, markerFooB ]\n\t *\t\tArray.from( markersCollection.getMarkersGroup( 'a' ) ); // []\n\t *\n\t * @param prefix\n\t * @returns {Iterable.<module:engine/model/markercollection~Marker>}\n\t */\n\t* getMarkersGroup( prefix ) {\n\t\tfor ( const marker of this._markers.values() ) {\n\t\t\tif ( marker.name.startsWith( prefix + ':' ) ) {\n\t\t\t\tyield marker;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Destroys the marker.\n\t *\n\t * @private\n\t * @param {module:engine/model/markercollection~Marker} marker Marker to destroy.\n\t */\n\t_destroyMarker( marker ) {\n\t\tmarker.stopListening();\n\t\tmarker._detachLiveRange();\n\t}\n\n\t/**\n\t * Fired whenever marker is added, updated or removed from `MarkerCollection`.\n\t *\n\t * @event update\n\t * @param {module:engine/model/markercollection~Marker} marker Updated Marker.\n\t * @param {module:engine/model/range~Range|null} oldRange Marker range before the update. When is not defined it\n\t * means that marker is just added.\n\t * @param {module:engine/model/range~Range|null} newRange Marker range after update. When is not defined it\n\t * means that marker is just removed.\n\t */\n}\n\nmix( MarkerCollection, EmitterMixin );\n\n/**\n * `Marker` is a continuous parts of model (like a range), is named and represent some kind of information about marked\n * part of model document. In contrary to {@link module:engine/model/node~Node nodes}, which are building blocks of\n * model document tree, markers are not stored directly in document tree but in\n * {@link module:engine/model/model~Model#markers model markers' collection}. Still, they are document data, by giving\n * additional meaning to the part of a model document between marker start and marker end.\n *\n * In this sense, markers are similar to adding and converting attributes on nodes. The difference is that attribute is\n * connected with a given node (e.g. a character is bold no matter if it gets moved or content around it changes).\n * Markers on the other hand are continuous ranges and are characterized by their start and end position. This means that\n * any character in the marker is marked by the marker. For example, if a character is moved outside of marker it stops being\n * \"special\" and the marker is shrunk. Similarly, when a character is moved into the marker from other place in document\n * model, it starts being \"special\" and the marker is enlarged.\n *\n * Another upside of markers is that finding marked part of document is fast and easy. Using attributes to mark some nodes\n * and then trying to find that part of document would require traversing whole document tree. Marker gives instant access\n * to the range which it is marking at the moment.\n *\n * Markers are built from a name and a range.\n *\n * Range of the marker is updated automatically when document changes, using\n * {@link module:engine/model/liverange~LiveRange live range} mechanism.\n *\n * Name is used to group and identify markers. Names have to be unique, but markers can be grouped by\n * using common prefixes, separated with `:`, for example: `user:john` or `search:3`. That's useful in term of creating\n * namespaces for custom elements (e.g. comments, highlights). You can use this prefixes in\n * {@link module:engine/model/markercollection~MarkerCollection#event:update} listeners to listen on changes in a group of markers.\n * For instance: `model.markers.on( 'update:user', callback );` will be called whenever any `user:*` markers changes.\n *\n * There are two types of markers.\n *\n * 1. Markers managed directly, without using operations. They are added directly by {@link module:engine/model/writer~Writer}\n * to the {@link module:engine/model/markercollection~MarkerCollection} without any additional mechanism. They can be used\n * as bookmarks or visual markers. They are great for showing results of the find, or select link when the focus is in the input.\n *\n * 1. Markers managed using operations. These markers are also stored in {@link module:engine/model/markercollection~MarkerCollection}\n * but changes in these markers is managed the same way all other changes in the model structure - using operations.\n * Therefore, they are handled in the undo stack and synchronized between clients if the collaboration plugin is enabled.\n * This type of markers is useful for solutions like spell checking or comments.\n *\n * Both type of them should be added / updated by {@link module:engine/model/writer~Writer#addMarker}\n * and removed by {@link module:engine/model/writer~Writer#removeMarker} methods.\n *\n *\t\tmodel.change( ( writer ) => {\n * \t\t\tconst marker = writer.addMarker( name, { range, usingOperation: true } );\n *\n * \t\t\t// ...\n *\n * \t\t\twriter.removeMarker( marker );\n *\t\t} );\n *\n * See {@link module:engine/model/writer~Writer} to find more examples.\n *\n * Since markers need to track change in the document, for efficiency reasons, it is best to create and keep as little\n * markers as possible and remove them as soon as they are not needed anymore.\n *\n * Markers can be downcasted and upcasted.\n *\n * Markers downcast happens on {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:addMarker} and\n * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:removeMarker} events.\n * Use {@link module:engine/conversion/downcasthelpers downcast converters} or attach a custom converter to mentioned events.\n * For {@link module:engine/controller/datacontroller~DataController data pipeline}, marker should be downcasted to an element.\n * Then, it can be upcasted back to a marker. Again, use {@link module:engine/conversion/upcasthelpers upcast converters} or\n * attach a custom converter to {@link module:engine/conversion/upcastdispatcher~UpcastDispatcher#event:element}.\n *\n * `Marker` instances are created and destroyed only by {@link ~MarkerCollection MarkerCollection}.\n */\nclass Marker {\n\t/**\n\t * Creates a marker instance.\n\t *\n\t * @param {String} name Marker name.\n\t * @param {module:engine/model/liverange~LiveRange} liveRange Range marked by the marker.\n\t * @param {Boolean} managedUsingOperations Specifies whether the marker is managed using operations.\n\t * @param {Boolean} affectsData Specifies whether the marker affects the data produced by the data pipeline\n\t * (is persisted in the editor's data).\n\t */\n\tconstructor( name, liveRange, managedUsingOperations, affectsData ) {\n\t\t/**\n\t\t * Marker's name.\n\t\t *\n\t\t * @readonly\n\t\t * @type {String}\n\t\t */\n\t\tthis.name = name;\n\n\t\t/**\n\t\t * Range marked by the marker.\n\t\t *\n\t\t * @protected\n\t\t * @member {module:engine/model/liverange~LiveRange}\n\t\t */\n\t\tthis._liveRange = this._attachLiveRange( liveRange );\n\n\t\t/**\n\t\t * Flag indicates if the marker is managed using operations or not.\n\t\t *\n\t\t * @private\n\t\t * @member {Boolean}\n\t\t */\n\t\tthis._managedUsingOperations = managedUsingOperations;\n\n\t\t/**\n\t\t * Specifies whether the marker affects the data produced by the data pipeline\n\t\t * (is persisted in the editor's data).\n\t\t *\n\t\t * @private\n\t\t * @member {Boolean}\n\t\t */\n\t\tthis._affectsData = affectsData;\n\t}\n\n\t/**\n\t * A value indicating if the marker is managed using operations.\n\t * See {@link ~Marker marker class description} to learn more about marker types.\n\t * See {@link module:engine/model/writer~Writer#addMarker}.\n\t *\n\t * @returns {Boolean}\n\t */\n\tget managedUsingOperations() {\n\t\tif ( !this._liveRange ) {\n\t\t\tthrow new CKEditorError( 'marker-destroyed', this );\n\t\t}\n\n\t\treturn this._managedUsingOperations;\n\t}\n\n\t/**\n\t * A value indicating if the marker changes the data.\n\t *\n\t * @returns {Boolean}\n\t */\n\tget affectsData() {\n\t\tif ( !this._liveRange ) {\n\t\t\tthrow new CKEditorError( 'marker-destroyed', this );\n\t\t}\n\n\t\treturn this._affectsData;\n\t}\n\n\t/**\n\t * Returns current marker start position.\n\t *\n\t * @returns {module:engine/model/position~Position}\n\t */\n\tgetStart() {\n\t\tif ( !this._liveRange ) {\n\t\t\tthrow new CKEditorError( 'marker-destroyed', this );\n\t\t}\n\n\t\treturn this._liveRange.start.clone();\n\t}\n\n\t/**\n\t * Returns current marker end position.\n\t *\n\t * @returns {module:engine/model/position~Position}\n\t */\n\tgetEnd() {\n\t\tif ( !this._liveRange ) {\n\t\t\tthrow new CKEditorError( 'marker-destroyed', this );\n\t\t}\n\n\t\treturn this._liveRange.end.clone();\n\t}\n\n\t/**\n\t * Returns a range that represents the current state of the marker.\n\t *\n\t * Keep in mind that returned value is a {@link module:engine/model/range~Range Range}, not a\n\t * {@link module:engine/model/liverange~LiveRange LiveRange}. This means that it is up-to-date and relevant only\n\t * until next model document change. Do not store values returned by this method. Instead, store {@link ~Marker#name}\n\t * and get `Marker` instance from {@link module:engine/model/markercollection~MarkerCollection MarkerCollection} every\n\t * time there is a need to read marker properties. This will guarantee that the marker has not been removed and\n\t * that it's data is up-to-date.\n\t *\n\t * @returns {module:engine/model/range~Range}\n\t */\n\tgetRange() {\n\t\tif ( !this._liveRange ) {\n\t\t\tthrow new CKEditorError( 'marker-destroyed', this );\n\t\t}\n\n\t\treturn this._liveRange.toRange();\n\t}\n\n\t/**\n\t * Checks whether this object is of the given.\n\t *\n\t *\t\tmarker.is( 'marker' ); // -> true\n\t *\t\tmarker.is( 'model:marker' ); // -> true\n\t *\n\t *\t\tmarker.is( 'view:element' ); // -> false\n\t *\t\tmarker.is( 'documentSelection' ); // -> false\n\t *\n\t * {@link module:engine/model/node~Node#is Check the entire list of model objects} which implement the `is()` method.\n\t *\n\t * @param {String} type\n\t * @returns {Boolean}\n\t */\n\tis( type ) {\n\t\treturn type === 'marker' || type === 'model:marker';\n\t}\n\n\t/**\n\t * Binds new live range to the marker and detach the old one if is attached.\n\t *\n\t * @protected\n\t * @param {module:engine/model/liverange~LiveRange} liveRange Live range to attach\n\t * @returns {module:engine/model/liverange~LiveRange} Attached live range.\n\t */\n\t_attachLiveRange( liveRange ) {\n\t\tif ( this._liveRange ) {\n\t\t\tthis._detachLiveRange();\n\t\t}\n\n\t\t// Delegating does not work with namespaces. Alternatively, we could delegate all events (using `*`).\n\t\tliveRange.delegate( 'change:range' ).to( this );\n\t\tliveRange.delegate( 'change:content' ).to( this );\n\n\t\tthis._liveRange = liveRange;\n\n\t\treturn liveRange;\n\t}\n\n\t/**\n\t * Unbinds and destroys currently attached live range.\n\t *\n\t * @protected\n\t */\n\t_detachLiveRange() {\n\t\tthis._liveRange.stopDelegating( 'change:range', this );\n\t\tthis._liveRange.stopDelegating( 'change:content', this );\n\t\tthis._liveRange.detach();\n\t\tthis._liveRange = null;\n\t}\n\n\t/**\n\t * Fired whenever {@link ~Marker#_liveRange marker range} is changed due to changes on {@link module:engine/model/document~Document}.\n\t * This is a delegated {@link module:engine/model/liverange~LiveRange#event:change:range LiveRange change:range event}.\n\t *\n\t * When marker is removed from {@link module:engine/model/markercollection~MarkerCollection MarkerCollection},\n\t * all event listeners listening to it should be removed. It is best to do it on\n\t * {@link module:engine/model/markercollection~MarkerCollection#event:update MarkerCollection update event}.\n\t *\n\t * @see module:engine/model/liverange~LiveRange#event:change:range\n\t * @event change:range\n\t * @param {module:engine/model/range~Range} oldRange\n\t * @param {Object} data\n\t */\n\n\t/**\n\t * Fired whenever change on {@link module:engine/model/document~Document} is done inside {@link ~Marker#_liveRange marker range}.\n\t * This is a delegated {@link module:engine/model/liverange~LiveRange#event:change:content LiveRange change:content event}.\n\t *\n\t * When marker is removed from {@link module:engine/model/markercollection~MarkerCollection MarkerCollection},\n\t * all event listeners listening to it should be removed. It is best to do it on\n\t * {@link module:engine/model/markercollection~MarkerCollection#event:update MarkerCollection update event}.\n\t *\n\t * @see module:engine/model/liverange~LiveRange#event:change:content\n\t * @event change:content\n\t * @param {module:engine/model/range~Range} oldRange\n\t * @param {Object} data\n\t */\n}\n\nmix( Marker, EmitterMixin );\n\n/**\n * Cannot use a {@link module:engine/model/markercollection~MarkerCollection#destroy destroyed marker} instance.\n *\n * @error marker-destroyed\n */\n"]}]}