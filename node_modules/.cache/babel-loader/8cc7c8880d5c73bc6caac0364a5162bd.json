{"remainingRequest":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/babel-loader/lib/index.js!/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-dev-webpack-plugin/lib/translatesourceloader.js?{}!/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-engine/src/model/utils/insertcontent.js","dependencies":[{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-engine/src/model/utils/insertcontent.js","mtime":499162500000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-dev-webpack-plugin/lib/translatesourceloader.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-engine/src/model/utils/insertcontent.js"],"names":["Position","LivePosition","Element","Range","DocumentSelection","Selection","CKEditorError","insertContent","model","content","selectable","placeOrOffset","change","writer","selection","document","createSelection","isCollapsed","deleteContent","doNotAutoparagraph","insertion","Insertion","anchor","nodesToInsert","is","getChildren","handleNodes","newRange","getSelectionRange","setSelection","setTo","affectedRange","getAffectedRange","createRange","destroy","position","canMergeWith","Set","parent","schema","_documentFragment","createDocumentFragment","_documentFragmentPosition","createPositionAt","_firstNode","_lastNode","_lastAutoParagraph","_filterAttributesOf","_affectedStart","_affectedEnd","nodes","Array","from","node","_handleNode","_insertPartialFragment","_updateLastNodeFromAutoParagraph","_mergeOnRight","removeDisallowedAttributes","positionAfterLastNode","createPositionAfter","positionAfterNode","isAfter","isAtEnd","_setAffectedBoundaries","nodeToSelect","_createOn","getNearestSelectionRange","detach","isObject","_handleObject","isAllowed","_checkAndAutoParagraphToAllowedPosition","_checkAndSplitToAllowedPosition","_handleDisallowedNode","_appendToFragment","isEmpty","livePosition","fromPosition","getChild","insert","_mergeOnLeft","toPosition","_tryAutoparagraphing","checkChild","getShiftedBy","offsetSize","push","isBefore","_canMergeLeft","mergePosLeft","_createBefore","stickiness","isEqual","_createAt","nodeBefore","merge","_canMergeRight","mergePosRight","_createAfter","previousSibling","has","checkMerge","nextSibling","paragraph","createElement","_getAllowedIn","_appendChild","allowedIn","isLimit","isAtStart","createPositionBefore","remove","tempPos","split","add","nodeAfter","element"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/utils/insertcontent\n */\n\nimport Position from '../position';\nimport LivePosition from '../liveposition';\nimport Element from '../element';\nimport Range from '../range';\nimport DocumentSelection from '../documentselection';\nimport Selection from '../selection';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * Inserts content into the editor (specified selection) as one would expect the paste functionality to work.\n *\n * It takes care of removing the selected content, splitting elements (if needed), inserting elements and merging elements appropriately.\n *\n * Some examples:\n *\n * \t\t<p>x^</p> + <p>y</p> => <p>x</p><p>y</p> => <p>xy[]</p>\n * \t\t<p>x^y</p> + <p>z</p> => <p>x</p>^<p>y</p> + <p>z</p> => <p>x</p><p>z</p><p>y</p> => <p>xz[]y</p>\n * \t\t<p>x^y</p> + <img /> => <p>x</p>^<p>y</p> + <img /> => <p>x</p><img /><p>y</p>\n * \t\t<p>x</p><p>^</p><p>z</p> + <p>y</p> => <p>x</p><p>y[]</p><p>z</p> (no merging)\n * \t\t<p>x</p>[<img />]<p>z</p> + <p>y</p> => <p>x</p>^<p>z</p> + <p>y</p> => <p>x</p><p>y[]</p><p>z</p>\n *\n * If an instance of {@link module:engine/model/selection~Selection} is passed as `selectable` it will be modified\n * to the insertion selection (equal to a range to be selected after insertion).\n *\n * If `selectable` is not passed, the content will be inserted using the current selection of the model document.\n *\n * **Note:** Use {@link module:engine/model/model~Model#insertContent} instead of this function.\n * This function is only exposed to be reusable in algorithms which change the {@link module:engine/model/model~Model#insertContent}\n * method's behavior.\n *\n * @param {module:engine/model/model~Model} model The model in context of which the insertion\n * should be performed.\n * @param {module:engine/model/documentfragment~DocumentFragment|module:engine/model/item~Item} content The content to insert.\n * @param {module:engine/model/selection~Selectable} [selectable=model.document.selection]\n * Selection into which the content should be inserted.\n * @param {Number|'before'|'end'|'after'|'on'|'in'} [placeOrOffset] Sets place or offset of the selection.\n * @returns {module:engine/model/range~Range} Range which contains all the performed changes. This is a range that, if removed,\n * would return the model to the state before the insertion. If no changes were preformed by `insertContent`, returns a range collapsed\n * at the insertion position.\n */\nexport default function insertContent( model, content, selectable, placeOrOffset ) {\n\treturn model.change( writer => {\n\t\tlet selection;\n\n\t\tif ( !selectable ) {\n\t\t\tselection = model.document.selection;\n\t\t} else if ( selectable instanceof Selection || selectable instanceof DocumentSelection ) {\n\t\t\tselection = selectable;\n\t\t} else {\n\t\t\tselection = writer.createSelection( selectable, placeOrOffset );\n\t\t}\n\n\t\tif ( !selection.isCollapsed ) {\n\t\t\tmodel.deleteContent( selection, { doNotAutoparagraph: true } );\n\t\t}\n\n\t\tconst insertion = new Insertion( model, writer, selection.anchor );\n\n\t\tlet nodesToInsert;\n\n\t\tif ( content.is( 'documentFragment' ) ) {\n\t\t\tnodesToInsert = content.getChildren();\n\t\t} else {\n\t\t\tnodesToInsert = [ content ];\n\t\t}\n\n\t\tinsertion.handleNodes( nodesToInsert );\n\n\t\tconst newRange = insertion.getSelectionRange();\n\n\t\t/* istanbul ignore else */\n\t\tif ( newRange ) {\n\t\t\tif ( selection instanceof DocumentSelection ) {\n\t\t\t\twriter.setSelection( newRange );\n\t\t\t} else {\n\t\t\t\tselection.setTo( newRange );\n\t\t\t}\n\t\t} else {\n\t\t\t// We are not testing else because it's a safe check for unpredictable edge cases:\n\t\t\t// an insertion without proper range to select.\n\t\t\t//\n\t\t\t// @if CK_DEBUG // console.warn( 'Cannot determine a proper selection range after insertion.' );\n\t\t}\n\n\t\tconst affectedRange = insertion.getAffectedRange() || model.createRange( selection.anchor );\n\n\t\tinsertion.destroy();\n\n\t\treturn affectedRange;\n\t} );\n}\n\n/**\n * Utility class for performing content insertion.\n *\n * @private\n */\nclass Insertion {\n\tconstructor( model, writer, position ) {\n\t\t/**\n\t\t * The model in context of which the insertion should be performed.\n\t\t *\n\t\t * @member {module:engine/model~Model} #model\n\t\t */\n\t\tthis.model = model;\n\n\t\t/**\n\t\t * Batch to which operations will be added.\n\t\t *\n\t\t * @member {module:engine/controller/writer~Batch} #writer\n\t\t */\n\t\tthis.writer = writer;\n\n\t\t/**\n\t\t * The position at which (or near which) the next node will be inserted.\n\t\t *\n\t\t * @member {module:engine/model/position~Position} #position\n\t\t */\n\t\tthis.position = position;\n\n\t\t/**\n\t\t * Elements with which the inserted elements can be merged.\n\t\t *\n\t\t *\t\t<p>x^</p><p>y</p> + <p>z</p> (can merge to <p>x</p>)\n\t\t *\t\t<p>x</p><p>^y</p> + <p>z</p> (can merge to <p>y</p>)\n\t\t *\t\t<p>x^y</p> + <p>z</p> (can merge to <p>xy</p> which will be split during the action,\n\t\t *\t\t\t\t\t\t\t\tso both its pieces will be added to this set)\n\t\t *\n\t\t *\n\t\t * @member {Set} #canMergeWith\n\t\t */\n\t\tthis.canMergeWith = new Set( [ this.position.parent ] );\n\n\t\t/**\n\t\t * Schema of the model.\n\t\t *\n\t\t * @member {module:engine/model/schema~Schema} #schema\n\t\t */\n\t\tthis.schema = model.schema;\n\n\t\t/**\n\t\t * The temporary DocumentFragment used for grouping multiple nodes for single insert operation.\n\t\t *\n\t\t * @private\n\t\t * @type {module:engine/model/documentfragment~DocumentFragment}\n\t\t */\n\t\tthis._documentFragment = writer.createDocumentFragment();\n\n\t\t/**\n\t\t * The current position in the temporary DocumentFragment.\n\t\t *\n\t\t * @private\n\t\t * @type {module:engine/model/position~Position}\n\t\t */\n\t\tthis._documentFragmentPosition = writer.createPositionAt( this._documentFragment, 0 );\n\n\t\t/**\n\t\t * The reference to the first inserted node.\n\t\t *\n\t\t * @private\n\t\t * @type {module:engine/model/node~Node}\n\t\t */\n\t\tthis._firstNode = null;\n\n\t\t/**\n\t\t * The reference to the last inserted node.\n\t\t *\n\t\t * @private\n\t\t * @type {module:engine/model/node~Node}\n\t\t */\n\t\tthis._lastNode = null;\n\n\t\t/**\n\t\t * The reference to the last auto paragraph node.\n\t\t *\n\t\t * @private\n\t\t * @type {module:engine/model/node~Node}\n\t\t */\n\t\tthis._lastAutoParagraph = null;\n\n\t\t/**\n\t\t * The array of nodes that should be cleaned of not allowed attributes.\n\t\t *\n\t\t * @private\n\t\t * @type {Array.<module:engine/model/node~Node>}\n\t\t */\n\t\tthis._filterAttributesOf = [];\n\n\t\t/**\n\t\t * Beginning of the affected range. See {@link module:engine/model/utils/insertcontent~Insertion#getAffectedRange}.\n\t\t *\n\t\t * @private\n\t\t * @member {module:engine/model/liveposition~LivePosition|null} #_affectedStart\n\t\t */\n\t\tthis._affectedStart = null;\n\n\t\t/**\n\t\t * End of the affected range. See {@link module:engine/model/utils/insertcontent~Insertion#getAffectedRange}.\n\t\t *\n\t\t * @private\n\t\t * @member {module:engine/model/liveposition~LivePosition|null} #_affectedEnd\n\t\t */\n\t\tthis._affectedEnd = null;\n\t}\n\n\t/**\n\t * Handles insertion of a set of nodes.\n\t *\n\t * @param {Iterable.<module:engine/model/node~Node>} nodes Nodes to insert.\n\t */\n\thandleNodes( nodes ) {\n\t\tfor ( const node of Array.from( nodes ) ) {\n\t\t\tthis._handleNode( node );\n\t\t}\n\n\t\t// Insert nodes collected in temporary DocumentFragment.\n\t\tthis._insertPartialFragment();\n\n\t\t// If there was an auto paragraph then we might need to adjust the end of insertion.\n\t\tif ( this._lastAutoParagraph ) {\n\t\t\tthis._updateLastNodeFromAutoParagraph( this._lastAutoParagraph );\n\t\t}\n\n\t\t// After the content was inserted we may try to merge it with its next sibling if the selection was in it initially.\n\t\t// Merging with the previous sibling was performed just after inserting the first node to the document.\n\t\tthis._mergeOnRight();\n\n\t\t// TMP this will become a post-fixer.\n\t\tthis.schema.removeDisallowedAttributes( this._filterAttributesOf, this.writer );\n\t\tthis._filterAttributesOf = [];\n\t}\n\n\t/**\n\t * Updates the last node after the auto paragraphing.\n\t *\n\t * @private\n\t * @param {module:engine/model/node~Node} node The last auto paragraphing node.\n\t */\n\t_updateLastNodeFromAutoParagraph( node ) {\n\t\tconst positionAfterLastNode = this.writer.createPositionAfter( this._lastNode );\n\t\tconst positionAfterNode = this.writer.createPositionAfter( node );\n\n\t\t// If the real end was after the last auto paragraph then update relevant properties.\n\t\tif ( positionAfterNode.isAfter( positionAfterLastNode ) ) {\n\t\t\tthis._lastNode = node;\n\n\t\t\t/* istanbul ignore if */\n\t\t\tif ( this.position.parent != node || !this.position.isAtEnd ) {\n\t\t\t\t// Algorithm's correctness check. We should never end up here but it's good to know that we did.\n\t\t\t\t// At this point the insertion position should be at the end of the last auto paragraph.\n\t\t\t\t// Note: This error is documented in other place in this file.\n\t\t\t\tthrow new CKEditorError( 'insertcontent-invalid-insertion-position', this );\n\t\t\t}\n\n\t\t\tthis.position = positionAfterNode;\n\t\t\tthis._setAffectedBoundaries( this.position );\n\t\t}\n\t}\n\n\t/**\n\t * Returns range to be selected after insertion.\n\t * Returns `null` if there is no valid range to select after insertion.\n\t *\n\t * @returns {module:engine/model/range~Range|null}\n\t */\n\tgetSelectionRange() {\n\t\tif ( this.nodeToSelect ) {\n\t\t\treturn Range._createOn( this.nodeToSelect );\n\t\t}\n\n\t\treturn this.model.schema.getNearestSelectionRange( this.position );\n\t}\n\n\t/**\n\t * Returns a range which contains all the performed changes. This is a range that, if removed, would return the model to the state\n\t * before the insertion. Returns `null` if no changes were done.\n\t *\n\t * @returns {module:engine/model/range~Range|null}\n\t */\n\tgetAffectedRange() {\n\t\tif ( !this._affectedStart ) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn new Range( this._affectedStart, this._affectedEnd );\n\t}\n\n\t/**\n\t * Destroys `Insertion` instance.\n\t */\n\tdestroy() {\n\t\tif ( this._affectedStart ) {\n\t\t\tthis._affectedStart.detach();\n\t\t}\n\n\t\tif ( this._affectedEnd ) {\n\t\t\tthis._affectedEnd.detach();\n\t\t}\n\t}\n\n\t/**\n\t * Handles insertion of a single node.\n\t *\n\t * @private\n\t * @param {module:engine/model/node~Node} node\n\t */\n\t_handleNode( node ) {\n\t\t// Let's handle object in a special way.\n\t\t// * They should never be merged with other elements.\n\t\t// * If they are not allowed in any of the selection ancestors, they could be either autoparagraphed or totally removed.\n\t\tif ( this.schema.isObject( node ) ) {\n\t\t\tthis._handleObject( node );\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Try to find a place for the given node.\n\n\t\t// Check if a node can be inserted in the given position or it would be accepted if a paragraph would be inserted.\n\t\t// Inserts the auto paragraph if it would allow for insertion.\n\t\tlet isAllowed = this._checkAndAutoParagraphToAllowedPosition( node );\n\n\t\tif ( !isAllowed ) {\n\t\t\t// Split the position.parent's branch up to a point where the node can be inserted.\n\t\t\t// If it isn't allowed in the whole branch, then of course don't split anything.\n\t\t\tisAllowed = this._checkAndSplitToAllowedPosition( node );\n\n\t\t\tif ( !isAllowed ) {\n\t\t\t\tthis._handleDisallowedNode( node );\n\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\t// Add node to the current temporary DocumentFragment.\n\t\tthis._appendToFragment( node );\n\n\t\t// Store the first and last nodes for easy access for merging with sibling nodes.\n\t\tif ( !this._firstNode ) {\n\t\t\tthis._firstNode = node;\n\t\t}\n\n\t\tthis._lastNode = node;\n\t}\n\n\t/**\n\t * Inserts the temporary DocumentFragment into the model.\n\t *\n\t * @private\n\t */\n\t_insertPartialFragment() {\n\t\tif ( this._documentFragment.isEmpty ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst livePosition = LivePosition.fromPosition( this.position, 'toNext' );\n\n\t\tthis._setAffectedBoundaries( this.position );\n\n\t\t// If the very first node of the whole insertion process is inserted, insert it separately for OT reasons (undo).\n\t\t// Note: there can be multiple calls to `_insertPartialFragment()` during one insertion process.\n\t\t// Note: only the very first node can be merged so we have to do separate operation only for it.\n\t\tif ( this._documentFragment.getChild( 0 ) == this._firstNode ) {\n\t\t\tthis.writer.insert( this._firstNode, this.position );\n\n\t\t\t// We must merge the first node just after inserting it to avoid problems with OT.\n\t\t\t// (See: https://github.com/ckeditor/ckeditor5/pull/8773#issuecomment-760945652).\n\t\t\tthis._mergeOnLeft();\n\n\t\t\tthis.position = livePosition.toPosition();\n\t\t}\n\n\t\t// Insert the remaining nodes from document fragment.\n\t\tif ( !this._documentFragment.isEmpty ) {\n\t\t\tthis.writer.insert( this._documentFragment, this.position );\n\t\t}\n\n\t\tthis._documentFragmentPosition = this.writer.createPositionAt( this._documentFragment, 0 );\n\n\t\tthis.position = livePosition.toPosition();\n\t\tlivePosition.detach();\n\t}\n\n\t/**\n\t * @private\n\t * @param {module:engine/model/element~Element} node The object element.\n\t */\n\t_handleObject( node ) {\n\t\t// Try finding it a place in the tree.\n\t\tif ( this._checkAndSplitToAllowedPosition( node ) ) {\n\t\t\tthis._appendToFragment( node );\n\t\t}\n\t\t// Try autoparagraphing.\n\t\telse {\n\t\t\tthis._tryAutoparagraphing( node );\n\t\t}\n\t}\n\n\t/**\n\t * @private\n\t * @param {module:engine/model/node~Node} node The disallowed node which needs to be handled.\n\t */\n\t_handleDisallowedNode( node ) {\n\t\t// If the node is an element, try inserting its children (strip the parent).\n\t\tif ( node.is( 'element' ) ) {\n\t\t\tthis.handleNodes( node.getChildren() );\n\t\t}\n\t\t// If text is not allowed, try autoparagraphing it.\n\t\telse {\n\t\t\tthis._tryAutoparagraphing( node );\n\t\t}\n\t}\n\n\t/**\n\t * Append a node to the temporary DocumentFragment.\n\t *\n\t * @private\n\t * @param {module:engine/model/node~Node} node The node to insert.\n\t */\n\t_appendToFragment( node ) {\n\t\t/* istanbul ignore if */\n\t\tif ( !this.schema.checkChild( this.position, node ) ) {\n\t\t\t// Algorithm's correctness check. We should never end up here but it's good to know that we did.\n\t\t\t// Note that it would often be a silent issue if we insert node in a place where it's not allowed.\n\n\t\t\t/**\n\t\t\t * Given node cannot be inserted on the given position.\n\t\t\t *\n\t\t\t * @error insertcontent-wrong-position\n\t\t\t * @param {module:engine/model/node~Node} node Node to insert.\n\t\t\t * @param {module:engine/model/position~Position} position Position to insert the node at.\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'insertcontent-wrong-position',\n\t\t\t\tthis,\n\t\t\t\t{ node, position: this.position }\n\t\t\t);\n\t\t}\n\n\t\tthis.writer.insert( node, this._documentFragmentPosition );\n\t\tthis._documentFragmentPosition = this._documentFragmentPosition.getShiftedBy( node.offsetSize );\n\n\t\t// The last inserted object should be selected because we can't put a collapsed selection after it.\n\t\tif ( this.schema.isObject( node ) && !this.schema.checkChild( this.position, '$text' ) ) {\n\t\t\tthis.nodeToSelect = node;\n\t\t} else {\n\t\t\tthis.nodeToSelect = null;\n\t\t}\n\n\t\tthis._filterAttributesOf.push( node );\n\t}\n\n\t/**\n\t * Sets `_affectedStart` and `_affectedEnd` to the given `position`. Should be used before a change is done during insertion process to\n\t * mark the affected range.\n\t *\n\t * This method is used before inserting a node or splitting a parent node. `_affectedStart` and `_affectedEnd` are also changed\n\t * during merging, but the logic there is more complicated so it is left out of this function.\n\t *\n\t * @private\n\t * @param {module:engine/model/position~Position} position\n\t */\n\t_setAffectedBoundaries( position ) {\n\t\t// Set affected boundaries stickiness so that those position will \"expand\" when something is inserted in between them:\n\t\t// <paragraph>Foo][bar</paragraph> -> <paragraph>Foo]xx[bar</paragraph>\n\t\t// This is why it cannot be a range but two separate positions.\n\t\tif ( !this._affectedStart ) {\n\t\t\tthis._affectedStart = LivePosition.fromPosition( position, 'toPrevious' );\n\t\t}\n\n\t\t// If `_affectedEnd` is before the new boundary position, expand `_affectedEnd`. This can happen if first inserted node was\n\t\t// inserted into the parent but the next node is moved-out of that parent:\n\t\t// (1) <paragraph>Foo][</paragraph> -> <paragraph>Foo]xx[</paragraph>\n\t\t// (2) <paragraph>Foo]xx[</paragraph> -> <paragraph>Foo]xx</paragraph><widget></widget>[\n\t\tif ( !this._affectedEnd || this._affectedEnd.isBefore( position ) ) {\n\t\t\tif ( this._affectedEnd ) {\n\t\t\t\tthis._affectedEnd.detach();\n\t\t\t}\n\n\t\t\tthis._affectedEnd = LivePosition.fromPosition( position, 'toNext' );\n\t\t}\n\t}\n\n\t/**\n\t * Merges the previous sibling of the first node if it should be merged.\n\t *\n\t * After the content was inserted we may try to merge it with its siblings.\n\t * This should happen only if the selection was in those elements initially.\n\t *\n\t * @private\n\t */\n\t_mergeOnLeft() {\n\t\tconst node = this._firstNode;\n\n\t\tif ( !( node instanceof Element ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( !this._canMergeLeft( node ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst mergePosLeft = LivePosition._createBefore( node );\n\t\tmergePosLeft.stickiness = 'toNext';\n\n\t\tconst livePosition = LivePosition.fromPosition( this.position, 'toNext' );\n\n\t\t// If `_affectedStart` is sames as merge position, it means that the element \"marked\" by `_affectedStart` is going to be\n\t\t// removed and its contents will be moved. This won't transform `LivePosition` so `_affectedStart` needs to be moved\n\t\t// by hand to properly reflect affected range. (Due to `_affectedStart` and `_affectedEnd` stickiness, the \"range\" is\n\t\t// shown as `][`).\n\t\t//\n\t\t// Example - insert `<paragraph>Abc</paragraph><paragraph>Xyz</paragraph>` at the end of `<paragraph>Foo^</paragraph>`:\n\t\t//\n\t\t// <paragraph>Foo</paragraph><paragraph>Bar</paragraph>   -->\n\t\t// <paragraph>Foo</paragraph>]<paragraph>Abc</paragraph><paragraph>Xyz</paragraph>[<paragraph>Bar</paragraph>   -->\n\t\t// <paragraph>Foo]Abc</paragraph><paragraph>Xyz</paragraph>[<paragraph>Bar</paragraph>\n\t\t//\n\t\t// Note, that if we are here then something must have been inserted, so `_affectedStart` and `_affectedEnd` have to be set.\n\t\tif ( this._affectedStart.isEqual( mergePosLeft ) ) {\n\t\t\tthis._affectedStart.detach();\n\t\t\tthis._affectedStart = LivePosition._createAt( mergePosLeft.nodeBefore, 'end', 'toPrevious' );\n\t\t}\n\n\t\t// We need to update the references to the first and last nodes if they will be merged into the previous sibling node\n\t\t// because the reference would point to the removed node.\n\t\t//\n\t\t// <p>A^A</p> + <p>X</p>\n\t\t//\n\t\t// <p>A</p>^<p>A</p>\n\t\t// <p>A</p><p>X</p><p>A</p>\n\t\t// <p>AX</p><p>A</p>\n\t\t// <p>AXA</p>\n\t\tif ( this._firstNode === this._lastNode ) {\n\t\t\tthis._firstNode = mergePosLeft.nodeBefore;\n\t\t\tthis._lastNode = mergePosLeft.nodeBefore;\n\t\t}\n\n\t\tthis.writer.merge( mergePosLeft );\n\n\t\t// If only one element (the merged one) is in the \"affected range\", also move the affected range end appropriately.\n\t\t//\n\t\t// Example - insert `<paragraph>Abc</paragraph>` at the of `<paragraph>Foo^</paragraph>`:\n\t\t//\n\t\t// <paragraph>Foo</paragraph><paragraph>Bar</paragraph>   -->\n\t\t// <paragraph>Foo</paragraph>]<paragraph>Abc</paragraph>[<paragraph>Bar</paragraph>   -->\n\t\t// <paragraph>Foo]Abc</paragraph>[<paragraph>Bar</paragraph>   -->\n\t\t// <paragraph>Foo]Abc[</paragraph><paragraph>Bar</paragraph>\n\t\tif ( mergePosLeft.isEqual( this._affectedEnd ) && this._firstNode === this._lastNode ) {\n\t\t\tthis._affectedEnd.detach();\n\t\t\tthis._affectedEnd = LivePosition._createAt( mergePosLeft.nodeBefore, 'end', 'toNext' );\n\t\t}\n\n\t\tthis.position = livePosition.toPosition();\n\t\tlivePosition.detach();\n\n\t\t// After merge elements that were marked by _insert() to be filtered might be gone so\n\t\t// we need to mark the new container.\n\t\tthis._filterAttributesOf.push( this.position.parent );\n\n\t\tmergePosLeft.detach();\n\t}\n\n\t/**\n\t * Merges the next sibling of the last node if it should be merged.\n\t *\n\t * After the content was inserted we may try to merge it with its siblings.\n\t * This should happen only if the selection was in those elements initially.\n\t *\n\t * @private\n\t */\n\t_mergeOnRight() {\n\t\tconst node = this._lastNode;\n\n\t\tif ( !( node instanceof Element ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( !this._canMergeRight( node ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst mergePosRight = LivePosition._createAfter( node );\n\t\tmergePosRight.stickiness = 'toNext';\n\n\t\t/* istanbul ignore if */\n\t\tif ( !this.position.isEqual( mergePosRight ) ) {\n\t\t\t// Algorithm's correctness check. We should never end up here but it's good to know that we did.\n\t\t\t// At this point the insertion position should be after the node we'll merge. If it isn't,\n\t\t\t// it should need to be secured as in the left merge case.\n\t\t\t/**\n\t\t\t * An internal error occurred when merging inserted content with its siblings.\n\t\t\t * The insertion position should equal the merge position.\n\t\t\t *\n\t\t\t * If you encountered this error, report it back to the CKEditor 5 team\n\t\t\t * with as many details as possible regarding the content being inserted and the insertion position.\n\t\t\t *\n\t\t\t * @error insertcontent-invalid-insertion-position\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'insertcontent-invalid-insertion-position', this );\n\t\t}\n\n\t\t// Move the position to the previous node, so it isn't moved to the graveyard on merge.\n\t\t// <p>x</p>[]<p>y</p> => <p>x[]</p><p>y</p>\n\t\tthis.position = Position._createAt( mergePosRight.nodeBefore, 'end' );\n\n\t\t// Explanation of setting position stickiness to `'toPrevious'`:\n\t\t// OK:  <p>xx[]</p> + <p>yy</p> => <p>xx[]yy</p> (when sticks to previous)\n\t\t// NOK: <p>xx[]</p> + <p>yy</p> => <p>xxyy[]</p> (when sticks to next)\n\t\tconst livePosition = LivePosition.fromPosition( this.position, 'toPrevious' );\n\n\t\t// See comment in `_mergeOnLeft()` on moving `_affectedStart`.\n\t\tif ( this._affectedEnd.isEqual( mergePosRight ) ) {\n\t\t\tthis._affectedEnd.detach();\n\t\t\tthis._affectedEnd = LivePosition._createAt( mergePosRight.nodeBefore, 'end', 'toNext' );\n\t\t}\n\n\t\t// We need to update the references to the first and last nodes if they will be merged into the previous sibling node\n\t\t// because the reference would point to the removed node.\n\t\t//\n\t\t// <p>A^A</p> + <p>X</p>\n\t\t//\n\t\t// <p>A</p>^<p>A</p>\n\t\t// <p>A</p><p>X</p><p>A</p>\n\t\t// <p>AX</p><p>A</p>\n\t\t// <p>AXA</p>\n\t\tif ( this._firstNode === this._lastNode ) {\n\t\t\tthis._firstNode = mergePosRight.nodeBefore;\n\t\t\tthis._lastNode = mergePosRight.nodeBefore;\n\t\t}\n\n\t\tthis.writer.merge( mergePosRight );\n\n\t\t// See comment in `_mergeOnLeft()` on moving `_affectedStart`.\n\t\tif ( mergePosRight.getShiftedBy( -1 ).isEqual( this._affectedStart ) && this._firstNode === this._lastNode ) {\n\t\t\tthis._affectedStart.detach();\n\t\t\tthis._affectedStart = LivePosition._createAt( mergePosRight.nodeBefore, 0, 'toPrevious' );\n\t\t}\n\n\t\tthis.position = livePosition.toPosition();\n\t\tlivePosition.detach();\n\n\t\t// After merge elements that were marked by _insert() to be filtered might be gone so\n\t\t// we need to mark the new container.\n\t\tthis._filterAttributesOf.push( this.position.parent );\n\n\t\tmergePosRight.detach();\n\t}\n\n\t/**\n\t * Checks whether specified node can be merged with previous sibling element.\n\t *\n\t * @private\n\t * @param {module:engine/model/node~Node} node The node which could potentially be merged.\n\t * @returns {Boolean}\n\t */\n\t_canMergeLeft( node ) {\n\t\tconst previousSibling = node.previousSibling;\n\n\t\treturn ( previousSibling instanceof Element ) &&\n\t\t\tthis.canMergeWith.has( previousSibling ) &&\n\t\t\tthis.model.schema.checkMerge( previousSibling, node );\n\t}\n\n\t/**\n\t * Checks whether specified node can be merged with next sibling element.\n\t *\n\t * @private\n\t * @param {module:engine/model/node~Node} node The node which could potentially be merged.\n\t * @returns {Boolean}\n\t */\n\t_canMergeRight( node ) {\n\t\tconst nextSibling = node.nextSibling;\n\n\t\treturn ( nextSibling instanceof Element ) &&\n\t\t\tthis.canMergeWith.has( nextSibling ) &&\n\t\t\tthis.model.schema.checkMerge( node, nextSibling );\n\t}\n\n\t/**\n\t * Tries wrapping the node in a new paragraph and inserting it this way.\n\t *\n\t * @private\n\t * @param {module:engine/model/node~Node} node The node which needs to be autoparagraphed.\n\t */\n\t_tryAutoparagraphing( node ) {\n\t\tconst paragraph = this.writer.createElement( 'paragraph' );\n\n\t\t// Do not autoparagraph if the paragraph won't be allowed there,\n\t\t// cause that would lead to an infinite loop. The paragraph would be rejected in\n\t\t// the next _handleNode() call and we'd be here again.\n\t\tif ( this._getAllowedIn( paragraph, this.position.parent ) && this.schema.checkChild( paragraph, node ) ) {\n\t\t\tparagraph._appendChild( node );\n\t\t\tthis._handleNode( paragraph );\n\t\t}\n\t}\n\n\t/**\n\t * Checks if a node can be inserted in the given position or it would be accepted if a paragraph would be inserted.\n\t * It also handles inserting the paragraph.\n\t *\n\t * @private\n\t * @param {module:engine/model/node~Node} node The node.\n\t * @returns {Boolean} Whether an allowed position was found.\n\t * `false` is returned if the node isn't allowed at the current position or in auto paragraph, `true` if was.\n\t */\n\t_checkAndAutoParagraphToAllowedPosition( node ) {\n\t\tif ( this.schema.checkChild( this.position.parent, node ) ) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Do not auto paragraph if the paragraph won't be allowed there,\n\t\t// cause that would lead to an infinite loop. The paragraph would be rejected in\n\t\t// the next _handleNode() call and we'd be here again.\n\t\tif ( !this.schema.checkChild( this.position.parent, 'paragraph' ) || !this.schema.checkChild( 'paragraph', node ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Insert nodes collected in temporary DocumentFragment if the position parent needs change to process further nodes.\n\t\tthis._insertPartialFragment();\n\n\t\t// Insert a paragraph and move insertion position to it.\n\t\tconst paragraph = this.writer.createElement( 'paragraph' );\n\n\t\tthis.writer.insert( paragraph, this.position );\n\t\tthis._setAffectedBoundaries( this.position );\n\n\t\tthis._lastAutoParagraph = paragraph;\n\t\tthis.position = this.writer.createPositionAt( paragraph, 0 );\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * @private\n\t * @param {module:engine/model/node~Node} node\n\t * @returns {Boolean} Whether an allowed position was found.\n\t * `false` is returned if the node isn't allowed at any position up in the tree, `true` if was.\n\t */\n\t_checkAndSplitToAllowedPosition( node ) {\n\t\tconst allowedIn = this._getAllowedIn( node, this.position.parent );\n\n\t\tif ( !allowedIn ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Insert nodes collected in temporary DocumentFragment if the position parent needs change to process further nodes.\n\t\tif ( allowedIn != this.position.parent ) {\n\t\t\tthis._insertPartialFragment();\n\t\t}\n\n\t\twhile ( allowedIn != this.position.parent ) {\n\t\t\t// If a parent which we'd need to leave is a limit element, break.\n\t\t\tif ( this.schema.isLimit( this.position.parent ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif ( this.position.isAtStart ) {\n\t\t\t\t// If insertion position is at the beginning of the parent, move it out instead of splitting.\n\t\t\t\t// <p>^Foo</p> -> ^<p>Foo</p>\n\t\t\t\tconst parent = this.position.parent;\n\n\t\t\t\tthis.position = this.writer.createPositionBefore( parent );\n\n\t\t\t\t// Special case – parent is empty (<p>^</p>).\n\t\t\t\t//\n\t\t\t\t// 1. parent.isEmpty\n\t\t\t\t// We can remove the element after moving insertion position out of it.\n\t\t\t\t//\n\t\t\t\t// 2. parent.parent === allowedIn\n\t\t\t\t// However parent should remain in place when allowed element is above limit element in document tree.\n\t\t\t\t// For example there shouldn't be allowed to remove empty paragraph from tableCell, when is pasted\n\t\t\t\t// content allowed in $root.\n\t\t\t\tif ( parent.isEmpty && parent.parent === allowedIn ) {\n\t\t\t\t\tthis.writer.remove( parent );\n\t\t\t\t}\n\t\t\t} else if ( this.position.isAtEnd ) {\n\t\t\t\t// If insertion position is at the end of the parent, move it out instead of splitting.\n\t\t\t\t// <p>Foo^</p> -> <p>Foo</p>^\n\t\t\t\tthis.position = this.writer.createPositionAfter( this.position.parent );\n\t\t\t} else {\n\t\t\t\tconst tempPos = this.writer.createPositionAfter( this.position.parent );\n\n\t\t\t\tthis._setAffectedBoundaries( this.position );\n\t\t\t\tthis.writer.split( this.position );\n\n\t\t\t\tthis.position = tempPos;\n\n\t\t\t\tthis.canMergeWith.add( this.position.nodeAfter );\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Gets the element in which the given node is allowed. It checks the passed element and all its ancestors.\n\t *\n\t * @private\n\t * @param {module:engine/model/node~Node} node The node to check.\n\t * @param {module:engine/model/element~Element} element The element in which the node's correctness should be checked.\n\t * @returns {module:engine/model/element~Element|null}\n\t */\n\t_getAllowedIn( node, element ) {\n\t\tif ( this.schema.checkChild( element, node ) ) {\n\t\t\treturn element;\n\t\t}\n\n\t\tif ( element.parent ) {\n\t\t\treturn this._getAllowedIn( node, element.parent );\n\t\t}\n\n\t\treturn null;\n\t}\n}\n"]}]}