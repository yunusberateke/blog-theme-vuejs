{"remainingRequest":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/babel-loader/lib/index.js!/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-dev-webpack-plugin/lib/translatesourceloader.js?{}!/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-engine/src/model/operation/mergeoperation.js","dependencies":[{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-engine/src/model/operation/mergeoperation.js","mtime":499162500000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-dev-webpack-plugin/lib/translatesourceloader.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-engine/src/model/operation/mergeoperation.js"],"names":["Operation","SplitOperation","Position","Range","_move","CKEditorError","MergeOperation","sourcePosition","howMany","targetPosition","graveyardPosition","baseVersion","clone","stickiness","root","path","slice","end","getShiftedBy","Number","POSITIVE_INFINITY","constructor","_getTransformedByMergeOperation","insertionPosition","sourceElement","parent","targetElement","maxOffset","mergedElement","sourceRange","_createIn","_createOn","json","toJSON","document","fromJSON"],"mappings":";;;;;;;;;;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA,OAAOA,SAAP,MAAsB,aAAtB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,QAAP,MAAqB,aAArB;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACA,SAASC,KAAT,QAAsB,SAAtB;AAEA,OAAOC,aAAP,MAA0B,6CAA1B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IACqBC,c;;;;;AACpB;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,0BAAaC,cAAb,EAA6BC,OAA7B,EAAsCC,cAAtC,EAAsDC,iBAAtD,EAAyEC,WAAzE,EAAuF;AAAA;;AAAA;;AACtF,8BAAOA,WAAP;AAEA;AACF;AACA;AACA;AACA;;AACE,UAAKJ,cAAL,GAAsBA,cAAc,CAACK,KAAf,EAAtB,CARsF,CAStF;;AACA,UAAKL,cAAL,CAAoBM,UAApB,GAAiC,YAAjC;AAEA;AACF;AACA;AACA;AACA;;AACE,UAAKL,OAAL,GAAeA,OAAf;AAEA;AACF;AACA;AACA;AACA;;AACE,UAAKC,cAAL,GAAsBA,cAAc,CAACG,KAAf,EAAtB,CAxBsF,CAyBtF;AACA;;AACA,UAAKH,cAAL,CAAoBI,UAApB,GAAiC,QAAjC;AAEA;AACF;AACA;AACA;AACA;;AACE,UAAKH,iBAAL,GAAyBA,iBAAiB,CAACE,KAAlB,EAAzB;AAlCsF;AAmCtF;AAED;AACD;AACA;;;;;SACC,eAAW;AACV,aAAO,OAAP;AACA;AAED;AACD;AACA;AACA;AACA;AACA;;;;SACC,eAAuB;AACtB,aAAO,IAAIV,QAAJ,CAAc,KAAKK,cAAL,CAAoBO,IAAlC,EAAwC,KAAKP,cAAL,CAAoBQ,IAApB,CAAyBC,KAAzB,CAAgC,CAAhC,EAAmC,CAAC,CAApC,CAAxC,CAAP;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;;;;SACC,eAAiB;AAChB,UAAMC,GAAG,GAAG,KAAKV,cAAL,CAAoBW,YAApB,CAAkCC,MAAM,CAACC,iBAAzC,CAAZ;AAEA,aAAO,IAAIjB,KAAJ,CAAW,KAAKI,cAAhB,EAAgCU,GAAhC,CAAP;AACA;AAED;AACD;AACA;AACA;AACA;;;;WACC,iBAAQ;AACP,aAAO,IAAI,KAAKI,WAAT,CAAsB,KAAKd,cAA3B,EAA2C,KAAKC,OAAhD,EAAyD,KAAKC,cAA9D,EAA8E,KAAKC,iBAAnF,EAAsG,KAAKC,WAA3G,CAAP;AACA;AAED;AACD;AACA;AACA;AACA;;;;WACC,uBAAc;AACb;AACA;AACA;AACA,UAAMF,cAAc,GAAG,KAAKA,cAAL,CAAoBa,+BAApB,CAAqD,IAArD,CAAvB;;AAEA,UAAMP,IAAI,GAAG,KAAKR,cAAL,CAAoBQ,IAApB,CAAyBC,KAAzB,CAAgC,CAAhC,EAAmC,CAAC,CAApC,CAAb;;AACA,UAAMO,iBAAiB,GAAG,IAAIrB,QAAJ,CAAc,KAAKK,cAAL,CAAoBO,IAAlC,EAAwCC,IAAxC,EAA+CO,+BAA/C,CAAgF,IAAhF,CAA1B;;AAEA,aAAO,IAAIrB,cAAJ,CAAoBQ,cAApB,EAAoC,KAAKD,OAAzC,EAAkDe,iBAAlD,EAAqE,KAAKb,iBAA1E,EAA6F,KAAKC,WAAL,GAAmB,CAAhH,CAAP;AACA;AAED;AACD;AACA;;;;WACC,qBAAY;AACX,UAAMa,aAAa,GAAG,KAAKjB,cAAL,CAAoBkB,MAA1C;AACA,UAAMC,aAAa,GAAG,KAAKjB,cAAL,CAAoBgB,MAA1C,CAFW,CAIX;;AACA,UAAK,CAACD,aAAa,CAACC,MAApB,EAA6B;AAC5B;AACH;AACA;AACA;AACA;AACG,cAAM,IAAIpB,aAAJ,CAAmB,yCAAnB,EAA8D,IAA9D,CAAN;AACA,OAPD,MAOO,IAAK,CAACqB,aAAa,CAACD,MAApB,EAA6B;AACnC;AACH;AACA;AACA;AACA;AACG,cAAM,IAAIpB,aAAJ,CAAmB,yCAAnB,EAA8D,IAA9D,CAAN;AACA,OAPM,MAOA,IAAK,KAAKG,OAAL,IAAgBgB,aAAa,CAACG,SAAnC,EAA+C;AACrD;AACH;AACA;AACA;AACA;AACG,cAAM,IAAItB,aAAJ,CAAmB,kCAAnB,EAAuD,IAAvD,CAAN;AACA;AACD;AAED;AACD;AACA;;;;WACC,oBAAW;AACV,UAAMuB,aAAa,GAAG,KAAKrB,cAAL,CAAoBkB,MAA1C;;AACA,UAAMI,WAAW,GAAG1B,KAAK,CAAC2B,SAAN,CAAiBF,aAAjB,CAApB;;AAEAxB,MAAAA,KAAK,CAAEyB,WAAF,EAAe,KAAKpB,cAApB,CAAL;;AACAL,MAAAA,KAAK,CAAED,KAAK,CAAC4B,SAAN,CAAiBH,aAAjB,CAAF,EAAoC,KAAKlB,iBAAzC,CAAL;AACA;AAED;AACD;AACA;;;;WACC,kBAAS;AACR,UAAMsB,IAAI,6EAAV;;AAEAA,MAAAA,IAAI,CAACzB,cAAL,GAAsByB,IAAI,CAACzB,cAAL,CAAoB0B,MAApB,EAAtB;AACAD,MAAAA,IAAI,CAACvB,cAAL,GAAsBuB,IAAI,CAACvB,cAAL,CAAoBwB,MAApB,EAAtB;AACAD,MAAAA,IAAI,CAACtB,iBAAL,GAAyBsB,IAAI,CAACtB,iBAAL,CAAuBuB,MAAvB,EAAzB;AAEA,aAAOD,IAAP;AACA;AAED;AACD;AACA;;;;SACC,eAAuB;AACtB,aAAO,gBAAP;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;;;;WACC,kBAAiBA,IAAjB,EAAuBE,QAAvB,EAAkC;AACjC,UAAM3B,cAAc,GAAGL,QAAQ,CAACiC,QAAT,CAAmBH,IAAI,CAACzB,cAAxB,EAAwC2B,QAAxC,CAAvB;AACA,UAAMzB,cAAc,GAAGP,QAAQ,CAACiC,QAAT,CAAmBH,IAAI,CAACvB,cAAxB,EAAwCyB,QAAxC,CAAvB;AACA,UAAMxB,iBAAiB,GAAGR,QAAQ,CAACiC,QAAT,CAAmBH,IAAI,CAACtB,iBAAxB,EAA2CwB,QAA3C,CAA1B;AAEA,aAAO,IAAI,IAAJ,CAAU3B,cAAV,EAA0ByB,IAAI,CAACxB,OAA/B,EAAwCC,cAAxC,EAAwDC,iBAAxD,EAA2EsB,IAAI,CAACrB,WAAhF,CAAP;AACA,K,CAED;AACA;AACA;AACA;AACA;;;;;EA3L2CX,S;;SAAvBM,c","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/operation/mergeoperation\n */\n\nimport Operation from './operation';\nimport SplitOperation from './splitoperation';\nimport Position from '../position';\nimport Range from '../range';\nimport { _move } from './utils';\n\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * Operation to merge two {@link module:engine/model/element~Element elements}.\n *\n * The merged element is the parent of {@link ~MergeOperation#sourcePosition} and it is merged into the parent of\n * {@link ~MergeOperation#targetPosition}. All nodes from the merged element are moved to {@link ~MergeOperation#targetPosition}.\n *\n * The merged element is moved to the graveyard at {@link ~MergeOperation#graveyardPosition}.\n *\n * @extends module:engine/model/operation/operation~Operation\n */\nexport default class MergeOperation extends Operation {\n\t/**\n\t * Creates a merge operation.\n\t *\n\t * @param {module:engine/model/position~Position} sourcePosition Position inside the merged element. All nodes from that\n\t * element after that position will be moved to {@link ~#targetPosition}.\n\t * @param {Number} howMany Summary offset size of nodes which will be moved from the merged element to the new parent.\n\t * @param {module:engine/model/position~Position} targetPosition Position which the nodes from the merged elements will be moved to.\n\t * @param {module:engine/model/position~Position} graveyardPosition Position in graveyard to which the merged element will be moved.\n\t * @param {Number|null} baseVersion Document {@link module:engine/model/document~Document#version} on which operation\n\t * can be applied or `null` if the operation operates on detached (non-document) tree.\n\t */\n\tconstructor( sourcePosition, howMany, targetPosition, graveyardPosition, baseVersion ) {\n\t\tsuper( baseVersion );\n\n\t\t/**\n\t\t * Position inside the merged element. All nodes from that element after that position will be moved to {@link ~#targetPosition}.\n\t\t *\n\t\t * @member {module:engine/model/position~Position} module:engine/model/operation/mergeoperation~MergeOperation#sourcePosition\n\t\t */\n\t\tthis.sourcePosition = sourcePosition.clone();\n\t\t// This is, and should always remain, the first position in its parent.\n\t\tthis.sourcePosition.stickiness = 'toPrevious';\n\n\t\t/**\n\t\t * Summary offset size of nodes which will be moved from the merged element to the new parent.\n\t\t *\n\t\t * @member {Number} module:engine/model/operation/mergeoperation~MergeOperation#howMany\n\t\t */\n\t\tthis.howMany = howMany;\n\n\t\t/**\n\t\t * Position which the nodes from the merged elements will be moved to.\n\t\t *\n\t\t * @member {module:engine/model/position~Position} module:engine/model/operation/mergeoperation~MergeOperation#targetPosition\n\t\t */\n\t\tthis.targetPosition = targetPosition.clone();\n\t\t// Except of a rare scenario in `MergeOperation` x `MergeOperation` transformation,\n\t\t// this is, and should always remain, the last position in its parent.\n\t\tthis.targetPosition.stickiness = 'toNext';\n\n\t\t/**\n\t\t * Position in graveyard to which the merged element will be moved.\n\t\t *\n\t\t * @member {module:engine/model/position~Position} module:engine/model/operation/mergeoperation~MergeOperation#graveyardPosition\n\t\t */\n\t\tthis.graveyardPosition = graveyardPosition.clone();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget type() {\n\t\treturn 'merge';\n\t}\n\n\t/**\n\t * Position before the merged element (which will be deleted).\n\t *\n\t * @readonly\n\t * @type {module:engine/model/position~Position}\n\t */\n\tget deletionPosition() {\n\t\treturn new Position( this.sourcePosition.root, this.sourcePosition.path.slice( 0, -1 ) );\n\t}\n\n\t/**\n\t * Artificial range that contains all the nodes from the merged element that will be moved to {@link ~MergeOperation#sourcePosition}.\n\t * The range starts at {@link ~MergeOperation#sourcePosition} and ends in the same parent, at `POSITIVE_INFINITY` offset.\n\t *\n\t * @readonly\n\t * @type {module:engine/model/range~Range}\n\t */\n\tget movedRange() {\n\t\tconst end = this.sourcePosition.getShiftedBy( Number.POSITIVE_INFINITY );\n\n\t\treturn new Range( this.sourcePosition, end );\n\t}\n\n\t/**\n\t * Creates and returns an operation that has the same parameters as this operation.\n\t *\n\t * @returns {module:engine/model/operation/mergeoperation~MergeOperation} Clone of this operation.\n\t */\n\tclone() {\n\t\treturn new this.constructor( this.sourcePosition, this.howMany, this.targetPosition, this.graveyardPosition, this.baseVersion );\n\t}\n\n\t/**\n\t * See {@link module:engine/model/operation/operation~Operation#getReversed `Operation#getReversed()`}.\n\t *\n\t * @returns {module:engine/model/operation/splitoperation~SplitOperation}\n\t */\n\tgetReversed() {\n\t\t// Positions in this method are transformed by this merge operation because the split operation bases on\n\t\t// the context after this merge operation happened (because split operation reverses it).\n\t\t// So we need to acknowledge that the merge operation happened and those positions changed a little.\n\t\tconst targetPosition = this.targetPosition._getTransformedByMergeOperation( this );\n\n\t\tconst path = this.sourcePosition.path.slice( 0, -1 );\n\t\tconst insertionPosition = new Position( this.sourcePosition.root, path )._getTransformedByMergeOperation( this );\n\n\t\treturn new SplitOperation( targetPosition, this.howMany, insertionPosition, this.graveyardPosition, this.baseVersion + 1 );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\t_validate() {\n\t\tconst sourceElement = this.sourcePosition.parent;\n\t\tconst targetElement = this.targetPosition.parent;\n\n\t\t// Validate whether merge operation has correct parameters.\n\t\tif ( !sourceElement.parent ) {\n\t\t\t/**\n\t\t\t * Merge source position is invalid. The element to be merged must have a parent node.\n\t\t\t *\n\t\t\t * @error merge-operation-source-position-invalid\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'merge-operation-source-position-invalid', this );\n\t\t} else if ( !targetElement.parent ) {\n\t\t\t/**\n\t\t\t * Merge target position is invalid. The element to be merged must have a parent node.\n\t\t\t *\n\t\t\t * @error merge-operation-target-position-invalid\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'merge-operation-target-position-invalid', this );\n\t\t} else if ( this.howMany != sourceElement.maxOffset ) {\n\t\t\t/**\n\t\t\t * Merge operation specifies wrong number of nodes to move.\n\t\t\t *\n\t\t\t * @error merge-operation-how-many-invalid\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'merge-operation-how-many-invalid', this );\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\t_execute() {\n\t\tconst mergedElement = this.sourcePosition.parent;\n\t\tconst sourceRange = Range._createIn( mergedElement );\n\n\t\t_move( sourceRange, this.targetPosition );\n\t\t_move( Range._createOn( mergedElement ), this.graveyardPosition );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\ttoJSON() {\n\t\tconst json = super.toJSON();\n\n\t\tjson.sourcePosition = json.sourcePosition.toJSON();\n\t\tjson.targetPosition = json.targetPosition.toJSON();\n\t\tjson.graveyardPosition = json.graveyardPosition.toJSON();\n\n\t\treturn json;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get className() {\n\t\treturn 'MergeOperation';\n\t}\n\n\t/**\n\t * Creates `MergeOperation` object from deserilized object, i.e. from parsed JSON string.\n\t *\n\t * @param {Object} json Deserialized JSON object.\n\t * @param {module:engine/model/document~Document} document Document on which this operation will be applied.\n\t * @returns {module:engine/model/operation/mergeoperation~MergeOperation}\n\t */\n\tstatic fromJSON( json, document ) {\n\t\tconst sourcePosition = Position.fromJSON( json.sourcePosition, document );\n\t\tconst targetPosition = Position.fromJSON( json.targetPosition, document );\n\t\tconst graveyardPosition = Position.fromJSON( json.graveyardPosition, document );\n\n\t\treturn new this( sourcePosition, json.howMany, targetPosition, graveyardPosition, json.baseVersion );\n\t}\n\n\t// @if CK_DEBUG_ENGINE // toString() {\n\t// @if CK_DEBUG_ENGINE // \treturn `MergeOperation( ${ this.baseVersion } ): ` +\n\t// @if CK_DEBUG_ENGINE //\t\t`${ this.sourcePosition } -> ${ this.targetPosition }` +\n\t// @if CK_DEBUG_ENGINE //\t\t` ( ${ this.howMany } ), ${ this.graveyardPosition }`;\n\t// @if CK_DEBUG_ENGINE // }\n}\n"]}]}