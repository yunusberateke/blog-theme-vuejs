{"remainingRequest":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/babel-loader/lib/index.js!/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-dev-webpack-plugin/lib/translatesourceloader.js?{}!/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-core/src/plugincollection.js","dependencies":[{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-core/src/plugincollection.js","mtime":499162500000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-dev-webpack-plugin/lib/translatesourceloader.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-core/src/plugincollection.js"],"names":["CKEditorError","EmitterMixin","mix","PluginCollection","context","availablePlugins","contextPlugins","_context","_plugins","Map","_availablePlugins","PluginConstructor","pluginName","set","_contextPlugins","pluginInstance","Symbol","iterator","entry","key","plugin","get","name","has","plugins","pluginsToRemove","pluginsSubstitutions","that","findAvailablePluginConstructors","validatePlugins","pluginsToLoad","filter","isPluginRemoved","pluginConstructors","getPluginConstructors","substitutePlugins","pluginInstances","loadPlugins","initPlugins","then","isPluginConstructor","isContextPlugin","some","removedPlugin","getPluginName","processed","Set","forEach","add","requires","map","reduce","result","parentPluginConstructor","checkMissingPlugin","checkContextPlugin","checkRemovedPlugin","missingPlugin","requiredBy","_add","method","promise","bind","Promise","resolve","pluginItem","length","pluginToReplace","indexInPluginConstructors","indexOf","splice","promises","destroy","push","all","plugin1","constructor","plugin2"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module core/plugincollection\n */\n\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\n\n/**\n * Manages a list of CKEditor plugins, including loading, resolving dependencies and initialization.\n *\n * @mixes module:utils/emittermixin~EmitterMixin\n */\nexport default class PluginCollection {\n\t/**\n\t * Creates an instance of the plugin collection class.\n\t * Allows loading and initializing plugins and their dependencies.\n\t * Allows providing a list of already loaded plugins. These plugins will not be destroyed along with this collection.\n\t *\n\t * @param {module:core/editor/editor~Editor|module:core/context~Context} context\n\t * @param {Array.<Function>} [availablePlugins] Plugins (constructors) which the collection will be able to use\n\t * when {@link module:core/plugincollection~PluginCollection#init} is used with the plugin names (strings, instead of constructors).\n\t * Usually, the editor will pass its built-in plugins to the collection so they can later be\n\t * used in `config.plugins` or `config.removePlugins` by names.\n\t * @param {Iterable.<Array>} contextPlugins A list of already initialized plugins represented by a\n\t * `[ PluginConstructor, pluginInstance ]` pair.\n\t */\n\tconstructor( context, availablePlugins = [], contextPlugins = [] ) {\n\t\t/**\n\t\t * @protected\n\t\t * @type {module:core/editor/editor~Editor|module:core/context~Context}\n\t\t */\n\t\tthis._context = context;\n\n\t\t/**\n\t\t * @protected\n\t\t * @type {Map}\n\t\t */\n\t\tthis._plugins = new Map();\n\n\t\t/**\n\t\t * A map of plugin constructors that can be retrieved by their names.\n\t\t *\n\t\t * @protected\n\t\t * @type {Map.<String|Function,Function>}\n\t\t */\n\t\tthis._availablePlugins = new Map();\n\n\t\tfor ( const PluginConstructor of availablePlugins ) {\n\t\t\tif ( PluginConstructor.pluginName ) {\n\t\t\t\tthis._availablePlugins.set( PluginConstructor.pluginName, PluginConstructor );\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Map of {@link module:core/contextplugin~ContextPlugin context plugins} which can be retrieved by their constructors or instances.\n\t\t *\n\t\t * @protected\n\t\t * @type {Map<Function,Function>}\n\t\t */\n\t\tthis._contextPlugins = new Map();\n\n\t\tfor ( const [ PluginConstructor, pluginInstance ] of contextPlugins ) {\n\t\t\tthis._contextPlugins.set( PluginConstructor, pluginInstance );\n\t\t\tthis._contextPlugins.set( pluginInstance, PluginConstructor );\n\n\t\t\t// To make it possible to require a plugin by its name.\n\t\t\tif ( PluginConstructor.pluginName ) {\n\t\t\t\tthis._availablePlugins.set( PluginConstructor.pluginName, PluginConstructor );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Iterable interface.\n\t *\n\t * Returns `[ PluginConstructor, pluginInstance ]` pairs.\n\t *\n\t * @returns {Iterable.<Array>}\n\t */\n\t* [ Symbol.iterator ]() {\n\t\tfor ( const entry of this._plugins ) {\n\t\t\tif ( typeof entry[ 0 ] == 'function' ) {\n\t\t\t\tyield entry;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Gets the plugin instance by its constructor or name.\n\t *\n\t *\t\t// Check if 'Clipboard' plugin was loaded.\n\t *\t\tif ( editor.plugins.has( 'ClipboardPipeline' ) ) {\n\t *\t\t\t// Get clipboard plugin instance\n\t *\t\t\tconst clipboard = editor.plugins.get( 'ClipboardPipeline' );\n\t *\n\t *\t\t\tthis.listenTo( clipboard, 'inputTransformation', ( evt, data ) => {\n\t *\t\t\t\t// Do something on clipboard input.\n\t *\t\t\t} );\n\t *\t\t}\n\t *\n\t * **Note**: This method will throw an error if a plugin is not loaded. Use `{@link #has editor.plugins.has()}`\n\t * to check if a plugin is available.\n\t *\n\t * @param {Function|String} key The plugin constructor or {@link module:core/plugin~PluginInterface.pluginName name}.\n\t * @returns {module:core/plugin~PluginInterface}\n\t */\n\tget( key ) {\n\t\tconst plugin = this._plugins.get( key );\n\n\t\tif ( !plugin ) {\n\t\t\tlet pluginName = key;\n\n\t\t\tif ( typeof key == 'function' ) {\n\t\t\t\tpluginName = key.pluginName || key.name;\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * The plugin is not loaded and could not be obtained.\n\t\t\t *\n\t\t\t * Plugin classes (constructors) need to be provided to the editor and must be loaded before they can be obtained from\n\t\t\t * the plugin collection.\n\t\t\t * This is usually done in CKEditor 5 builds by setting the {@link module:core/editor/editor~Editor.builtinPlugins}\n\t\t\t * property.\n\t\t\t *\n\t\t\t * **Note**: You can use `{@link module:core/plugincollection~PluginCollection#has editor.plugins.has()}`\n\t\t\t * to check if a plugin was loaded.\n\t\t\t *\n\t\t\t * @error plugincollection-plugin-not-loaded\n\t\t\t * @param {String} plugin The name of the plugin which is not loaded.\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'plugincollection-plugin-not-loaded', this._context, { plugin: pluginName } );\n\t\t}\n\n\t\treturn plugin;\n\t}\n\n\t/**\n\t * Checks if a plugin is loaded.\n\t *\n\t *\t\t// Check if the 'Clipboard' plugin was loaded.\n\t *\t\tif ( editor.plugins.has( 'ClipboardPipeline' ) ) {\n\t *\t\t\t// Now use the clipboard plugin instance:\n\t *\t\t\tconst clipboard = editor.plugins.get( 'ClipboardPipeline' );\n\t *\n\t *\t\t\t// ...\n\t *\t\t}\n\t *\n\t * @param {Function|String} key The plugin constructor or {@link module:core/plugin~PluginInterface.pluginName name}.\n\t * @returns {Boolean}\n\t */\n\thas( key ) {\n\t\treturn this._plugins.has( key );\n\t}\n\n\t/**\n\t * Initializes a set of plugins and adds them to the collection.\n\t *\n\t * @param {Array.<Function|String>} plugins An array of {@link module:core/plugin~PluginInterface plugin constructors}\n\t * or {@link module:core/plugin~PluginInterface.pluginName plugin names}.\n\t * @param {Array.<String|Function>} [pluginsToRemove] Names of the plugins or plugin constructors\n\t * that should not be loaded (despite being specified in the `plugins` array).\n\t * @param {Array.<Function>} [pluginsSubstitutions] An array of {@link module:core/plugin~PluginInterface plugin constructors}\n\t * that will be used to replace plugins of the same names that were passed in `plugins` or that are in their dependency tree.\n\t * A useful option for replacing built-in plugins while creating tests (for mocking their APIs). Plugins that will be replaced\n\t * must follow these rules:\n\t *   * The new plugin must be a class.\n\t *   * The new plugin must be named.\n\t *   * Both plugins must not depend on other plugins.\n\t * @returns {Promise.<module:core/plugin~LoadedPlugins>} A promise which gets resolved once all plugins are loaded\n\t * and available in the collection.\n\t */\n\tinit( plugins, pluginsToRemove = [], pluginsSubstitutions = [] ) {\n\t\t// Plugin initialization procedure consists of 2 main steps:\n\t\t// 1) collecting all available plugin constructors,\n\t\t// 2) verification whether all required plugins can be instantiated.\n\t\t//\n\t\t// In the first step, all plugin constructors, available in the provided `plugins` array and inside\n\t\t// plugin's dependencies (from the `Plugin.requires` array), are recursively collected and added to the existing\n\t\t// `this._availablePlugins` map, but without any verification at the given moment. Performing the verification\n\t\t// at this point (during the plugin constructor searching) would cause false errors to occur, that some plugin\n\t\t// is missing but in fact it may be defined further in the array as the dependency of other plugin. After\n\t\t// traversing the entire dependency tree, it will be checked if all required \"top level\" plugins are available.\n\t\t//\n\t\t// In the second step, the list of plugins that have not been explicitly removed is traversed to get all the\n\t\t// plugin constructors to be instantiated in the correct order and to validate against some rules. Finally, if\n\t\t// no plugin is missing and no other error has been found, they all will be instantiated.\n\t\tconst that = this;\n\t\tconst context = this._context;\n\n\t\tfindAvailablePluginConstructors( plugins );\n\n\t\tvalidatePlugins( plugins );\n\n\t\tconst pluginsToLoad = plugins.filter( plugin => !isPluginRemoved( plugin, pluginsToRemove ) );\n\n\t\tconst pluginConstructors = [ ...getPluginConstructors( pluginsToLoad ) ];\n\n\t\tsubstitutePlugins( pluginConstructors, pluginsSubstitutions );\n\n\t\tconst pluginInstances = loadPlugins( pluginConstructors );\n\n\t\treturn initPlugins( pluginInstances, 'init' )\n\t\t\t.then( () => initPlugins( pluginInstances, 'afterInit' ) )\n\t\t\t.then( () => pluginInstances );\n\n\t\tfunction isPluginConstructor( plugin ) {\n\t\t\treturn typeof plugin === 'function';\n\t\t}\n\n\t\tfunction isContextPlugin( plugin ) {\n\t\t\treturn isPluginConstructor( plugin ) && plugin.isContextPlugin;\n\t\t}\n\n\t\tfunction isPluginRemoved( plugin, pluginsToRemove ) {\n\t\t\treturn pluginsToRemove.some( removedPlugin => {\n\t\t\t\tif ( removedPlugin === plugin ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\tif ( getPluginName( plugin ) === removedPlugin ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\tif ( getPluginName( removedPlugin ) === plugin ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\treturn false;\n\t\t\t} );\n\t\t}\n\n\t\tfunction getPluginName( plugin ) {\n\t\t\treturn isPluginConstructor( plugin ) ?\n\t\t\t\tplugin.pluginName || plugin.name :\n\t\t\t\tplugin;\n\t\t}\n\n\t\tfunction findAvailablePluginConstructors( plugins, processed = new Set() ) {\n\t\t\tplugins.forEach( plugin => {\n\t\t\t\tif ( !isPluginConstructor( plugin ) ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif ( processed.has( plugin ) ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tprocessed.add( plugin );\n\n\t\t\t\tif ( plugin.pluginName && !that._availablePlugins.has( plugin.pluginName ) ) {\n\t\t\t\t\tthat._availablePlugins.set( plugin.pluginName, plugin );\n\t\t\t\t}\n\n\t\t\t\tif ( plugin.requires ) {\n\t\t\t\t\tfindAvailablePluginConstructors( plugin.requires, processed );\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\n\t\tfunction getPluginConstructors( plugins, processed = new Set() ) {\n\t\t\treturn plugins\n\t\t\t\t.map( plugin => {\n\t\t\t\t\treturn isPluginConstructor( plugin ) ?\n\t\t\t\t\t\tplugin :\n\t\t\t\t\t\tthat._availablePlugins.get( plugin );\n\t\t\t\t} )\n\t\t\t\t.reduce( ( result, plugin ) => {\n\t\t\t\t\tif ( processed.has( plugin ) ) {\n\t\t\t\t\t\treturn result;\n\t\t\t\t\t}\n\n\t\t\t\t\tprocessed.add( plugin );\n\n\t\t\t\t\tif ( plugin.requires ) {\n\t\t\t\t\t\tvalidatePlugins( plugin.requires, plugin );\n\n\t\t\t\t\t\tgetPluginConstructors( plugin.requires, processed ).forEach( plugin => result.add( plugin ) );\n\t\t\t\t\t}\n\n\t\t\t\t\treturn result.add( plugin );\n\t\t\t\t}, new Set() );\n\t\t}\n\n\t\tfunction validatePlugins( plugins, parentPluginConstructor = null ) {\n\t\t\tplugins\n\t\t\t\t.map( plugin => {\n\t\t\t\t\treturn isPluginConstructor( plugin ) ?\n\t\t\t\t\t\tplugin :\n\t\t\t\t\t\tthat._availablePlugins.get( plugin ) || plugin;\n\t\t\t\t} )\n\t\t\t\t.forEach( plugin => {\n\t\t\t\t\tcheckMissingPlugin( plugin, parentPluginConstructor );\n\t\t\t\t\tcheckContextPlugin( plugin, parentPluginConstructor );\n\t\t\t\t\tcheckRemovedPlugin( plugin, parentPluginConstructor );\n\t\t\t\t} );\n\t\t}\n\n\t\tfunction checkMissingPlugin( plugin, parentPluginConstructor ) {\n\t\t\tif ( isPluginConstructor( plugin ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( parentPluginConstructor ) {\n\t\t\t\t/**\n\t\t\t\t * A required \"soft\" dependency was not found on the plugin list.\n\t\t\t\t *\n\t\t\t\t * When configuring the editor, either prior to building (via\n\t\t\t\t * {@link module:core/editor/editor~Editor.builtinPlugins `Editor.builtinPlugins`}) or when\n\t\t\t\t * creating a new instance of the editor (e.g. via\n\t\t\t\t * {@link module:core/editor/editorconfig~EditorConfig#plugins `config.plugins`}), you need to provide\n\t\t\t\t * some of the dependencies for other plugins that you used.\n\t\t\t\t *\n\t\t\t\t * This error is thrown when one of these dependencies was not provided. The name of the missing plugin\n\t\t\t\t * can be found in `missingPlugin` and the plugin that required it in `requiredBy`.\n\t\t\t\t *\n\t\t\t\t * In order to resolve it, you need to import the missing plugin and add it to the\n\t\t\t\t * current list of plugins (`Editor.builtinPlugins` or `config.plugins`/`config.extraPlugins`).\n\t\t\t\t *\n\t\t\t\t * Soft requirements were introduced in version 26.0.0. If you happen to stumble upon this error\n\t\t\t\t * when upgrading to version 26.0.0, read also the\n\t\t\t\t * {@glink builds/guides/migration/migration-to-26.0.0 Migration to 26.0.0} guide.\n\t\t\t\t *\n\t\t\t\t * @error plugincollection-soft-required\n\t\t\t\t * @param {String} missingPlugin The name of the required plugin.\n\t\t\t\t * @param {String} requiredBy The name of the plugin that requires the other plugin.\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError(\n\t\t\t\t\t'plugincollection-soft-required',\n\t\t\t\t\tcontext,\n\t\t\t\t\t{ missingPlugin: plugin, requiredBy: getPluginName( parentPluginConstructor ) }\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * A plugin is not available and could not be loaded.\n\t\t\t *\n\t\t\t * Plugin classes (constructors) need to be provided to the editor before they can be loaded by name.\n\t\t\t * This is usually done in CKEditor 5 builds by setting the {@link module:core/editor/editor~Editor.builtinPlugins}\n\t\t\t * property.\n\t\t\t *\n\t\t\t * **If you see this warning when using one of the {@glink builds/index CKEditor 5 Builds}**, it means\n\t\t\t * that you try to enable a plugin which was not included in that build. This may be due to a typo\n\t\t\t * in the plugin name or simply because that plugin is not a part of this build. In the latter scenario,\n\t\t\t * read more about {@glink builds/guides/development/custom-builds custom builds}.\n\t\t\t *\n\t\t\t * **If you see this warning when using one of the editor creators directly** (not a build), then it means\n\t\t\t * that you tried loading plugins by name. However, unlike CKEditor 4, CKEditor 5 does not implement a \"plugin loader\".\n\t\t\t * This means that CKEditor 5 does not know where to load the plugin modules from. Therefore, you need to\n\t\t\t * provide each plugin through a reference (as a constructor function). Check out the examples in\n\t\t\t * {@glink builds/guides/integration/advanced-setup#scenario-2-building-from-source \"Building from source\"}.\n\t\t\t *\n\t\t\t * @error plugincollection-plugin-not-found\n\t\t\t * @param {String} plugin The name of the plugin which could not be loaded.\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'plugincollection-plugin-not-found',\n\t\t\t\tcontext,\n\t\t\t\t{ plugin }\n\t\t\t);\n\t\t}\n\n\t\tfunction checkContextPlugin( plugin, parentPluginConstructor ) {\n\t\t\tif ( !isContextPlugin( parentPluginConstructor ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( isContextPlugin( plugin ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * If a plugin is a context plugin, all plugins it requires should also be context plugins\n\t\t\t * instead of plugins. In other words, if one plugin can be used in the context,\n\t\t\t * all its requirements should also be ready to be used in the context. Note that the context\n\t\t\t * provides only a part of the API provided by the editor. If one plugin needs a full\n\t\t\t * editor API, all plugins which require it are considered as plugins that need a full\n\t\t\t * editor API.\n\t\t\t *\n\t\t\t * @error plugincollection-context-required\n\t\t\t * @param {String} plugin The name of the required plugin.\n\t\t\t * @param {String} requiredBy The name of the parent plugin.\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'plugincollection-context-required',\n\t\t\t\tcontext,\n\t\t\t\t{ plugin: getPluginName( plugin ), requiredBy: getPluginName( parentPluginConstructor ) }\n\t\t\t);\n\t\t}\n\n\t\tfunction checkRemovedPlugin( plugin, parentPluginConstructor ) {\n\t\t\tif ( !parentPluginConstructor ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( !isPluginRemoved( plugin, pluginsToRemove ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * Cannot load a plugin because one of its dependencies is listed in the `removePlugins` option.\n\t\t\t *\n\t\t\t * @error plugincollection-required\n\t\t\t * @param {String} plugin The name of the required plugin.\n\t\t\t * @param {String} requiredBy The name of the parent plugin.\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'plugincollection-required',\n\t\t\t\tcontext,\n\t\t\t\t{ plugin: getPluginName( plugin ), requiredBy: getPluginName( parentPluginConstructor ) }\n\t\t\t);\n\t\t}\n\n\t\tfunction loadPlugins( pluginConstructors ) {\n\t\t\treturn pluginConstructors.map( PluginConstructor => {\n\t\t\t\tconst pluginInstance = that._contextPlugins.get( PluginConstructor ) || new PluginConstructor( context );\n\n\t\t\t\tthat._add( PluginConstructor, pluginInstance );\n\n\t\t\t\treturn pluginInstance;\n\t\t\t} );\n\t\t}\n\n\t\tfunction initPlugins( pluginInstances, method ) {\n\t\t\treturn pluginInstances.reduce( ( promise, plugin ) => {\n\t\t\t\tif ( !plugin[ method ] ) {\n\t\t\t\t\treturn promise;\n\t\t\t\t}\n\n\t\t\t\tif ( that._contextPlugins.has( plugin ) ) {\n\t\t\t\t\treturn promise;\n\t\t\t\t}\n\n\t\t\t\treturn promise.then( plugin[ method ].bind( plugin ) );\n\t\t\t}, Promise.resolve() );\n\t\t}\n\n\t\t// Replaces plugin constructors with the specified set of plugins.\n\t\t//\n\t\t// @param {Array.<Function>} pluginConstructors\n\t\t// @param {Array.<Function>} pluginsSubstitutions\n\t\tfunction substitutePlugins( pluginConstructors, pluginsSubstitutions ) {\n\t\t\tfor ( const pluginItem of pluginsSubstitutions ) {\n\t\t\t\tif ( typeof pluginItem != 'function' ) {\n\t\t\t\t\t/**\n\t\t\t\t\t * The plugin replacing an existing plugin must be a function.\n\t\t\t\t\t *\n\t\t\t\t\t * @error plugincollection-replace-plugin-invalid-type\n\t\t\t\t\t */\n\t\t\t\t\tthrow new CKEditorError( 'plugincollection-replace-plugin-invalid-type', null, { pluginItem } );\n\t\t\t\t}\n\t\t\t\tconst pluginName = pluginItem.pluginName;\n\n\t\t\t\tif ( !pluginName ) {\n\t\t\t\t\t/**\n\t\t\t\t\t * The plugin replacing an existing plugin must have a name.\n\t\t\t\t\t *\n\t\t\t\t\t * @error plugincollection-replace-plugin-missing-name\n\t\t\t\t\t */\n\t\t\t\t\tthrow new CKEditorError( 'plugincollection-replace-plugin-missing-name', null, { pluginItem } );\n\t\t\t\t}\n\n\t\t\t\tif ( pluginItem.requires && pluginItem.requires.length ) {\n\t\t\t\t\t/**\n\t\t\t\t\t * The plugin replacing an existing plugin cannot depend on other plugins.\n\t\t\t\t\t *\n\t\t\t\t\t * @error plugincollection-plugin-for-replacing-cannot-have-dependencies\n\t\t\t\t\t */\n\t\t\t\t\tthrow new CKEditorError( 'plugincollection-plugin-for-replacing-cannot-have-dependencies', null, { pluginName } );\n\t\t\t\t}\n\n\t\t\t\tconst pluginToReplace = that._availablePlugins.get( pluginName );\n\n\t\t\t\tif ( !pluginToReplace ) {\n\t\t\t\t\t/**\n\t\t\t\t\t * The replaced plugin does not exist in the\n\t\t\t\t\t * {@link module:core/plugincollection~PluginCollection available plugins} collection.\n\t\t\t\t\t *\n\t\t\t\t\t * @error plugincollection-plugin-for-replacing-not-exist\n\t\t\t\t\t */\n\t\t\t\t\tthrow new CKEditorError( 'plugincollection-plugin-for-replacing-not-exist', null, { pluginName } );\n\t\t\t\t}\n\n\t\t\t\tconst indexInPluginConstructors = pluginConstructors.indexOf( pluginToReplace );\n\n\t\t\t\tif ( indexInPluginConstructors === -1 ) {\n\t\t\t\t\t// The Context feature can substitute plugins as well.\n\t\t\t\t\t// It may happen that the editor will be created with the given context, where the plugin for substitute\n\t\t\t\t\t// was already replaced. In such a case, we don't want to do it again.\n\t\t\t\t\tif ( that._contextPlugins.has( pluginToReplace ) ) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t/**\n\t\t\t\t\t * The replaced plugin will not be loaded so it cannot be replaced.\n\t\t\t\t\t *\n\t\t\t\t\t * @error plugincollection-plugin-for-replacing-not-loaded\n\t\t\t\t\t */\n\t\t\t\t\tthrow new CKEditorError( 'plugincollection-plugin-for-replacing-not-loaded', null, { pluginName } );\n\t\t\t\t}\n\n\t\t\t\tif ( pluginToReplace.requires && pluginToReplace.requires.length ) {\n\t\t\t\t\t/**\n\t\t\t\t\t * The replaced plugin cannot depend on other plugins.\n\t\t\t\t\t *\n\t\t\t\t\t * @error plugincollection-replaced-plugin-cannot-have-dependencies\n\t\t\t\t\t */\n\t\t\t\t\tthrow new CKEditorError( 'plugincollection-replaced-plugin-cannot-have-dependencies', null, { pluginName } );\n\t\t\t\t}\n\n\t\t\t\tpluginConstructors.splice( indexInPluginConstructors, 1, pluginItem );\n\t\t\t\tthat._availablePlugins.set( pluginName, pluginItem );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Destroys all loaded plugins.\n\t *\n\t * @returns {Promise}\n\t */\n\tdestroy() {\n\t\tconst promises = [];\n\n\t\tfor ( const [ , pluginInstance ] of this ) {\n\t\t\tif ( typeof pluginInstance.destroy == 'function' && !this._contextPlugins.has( pluginInstance ) ) {\n\t\t\t\tpromises.push( pluginInstance.destroy() );\n\t\t\t}\n\t\t}\n\n\t\treturn Promise.all( promises );\n\t}\n\n\t/**\n\t * Adds the plugin to the collection. Exposed mainly for testing purposes.\n\t *\n\t * @protected\n\t * @param {Function} PluginConstructor The plugin constructor.\n\t * @param {module:core/plugin~PluginInterface} plugin The instance of the plugin.\n\t */\n\t_add( PluginConstructor, plugin ) {\n\t\tthis._plugins.set( PluginConstructor, plugin );\n\n\t\tconst pluginName = PluginConstructor.pluginName;\n\n\t\tif ( !pluginName ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( this._plugins.has( pluginName ) ) {\n\t\t\t/**\n\t\t\t * Two plugins with the same {@link module:core/plugin~PluginInterface.pluginName} were loaded.\n\t\t\t * This will lead to runtime conflicts between these plugins.\n\t\t\t *\n\t\t\t * In practice, this warning usually means that new plugins were added to an existing CKEditor 5 build.\n\t\t\t * Plugins should always be added to a source version of the editor (`@ckeditor/ckeditor5-editor-*`),\n\t\t\t * not to an editor imported from one of the `@ckeditor/ckeditor5-build-*` packages.\n\t\t\t *\n\t\t\t * Check your import paths and the list of plugins passed to\n\t\t\t * {@link module:core/editor/editor~Editor.create `Editor.create()`}\n\t\t\t * or specified in {@link module:core/editor/editor~Editor.builtinPlugins `Editor.builtinPlugins`}.\n\t\t\t *\n\t\t\t * The second option is that your `node_modules/` directory contains duplicated versions of the same\n\t\t\t * CKEditor 5 packages. Normally, on clean installations, npm deduplicates packages in `node_modules/`, so\n\t\t\t * it may be enough to call `rm -rf node_modules && npm i`. However, if you installed conflicting versions\n\t\t\t * of some packages, their dependencies may need to be installed in more than one version which may lead to this\n\t\t\t * warning.\n\t\t\t *\n\t\t\t * Technically speaking, this error occurs because after adding a plugin to an existing editor build\n\t\t\t * the dependencies of this plugin are being duplicated.\n\t\t\t * They are already built into that editor build and now get added for the second time as dependencies\n\t\t\t * of the plugin you are installing.\n\t\t\t *\n\t\t\t * Read more about {@glink builds/guides/integration/installing-plugins installing plugins}.\n\t\t\t *\n\t\t\t * @error plugincollection-plugin-name-conflict\n\t\t\t * @param {String} pluginName The duplicated plugin name.\n\t\t\t * @param {Function} plugin1 The first plugin constructor.\n\t\t\t * @param {Function} plugin2 The second plugin constructor.\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'plugincollection-plugin-name-conflict',\n\t\t\t\tnull,\n\t\t\t\t{ pluginName, plugin1: this._plugins.get( pluginName ).constructor, plugin2: PluginConstructor }\n\t\t\t);\n\t\t}\n\n\t\tthis._plugins.set( pluginName, plugin );\n\t}\n}\n\nmix( PluginCollection, EmitterMixin );\n"]}]}