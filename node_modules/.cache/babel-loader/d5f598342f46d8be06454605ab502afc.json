{"remainingRequest":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/babel-loader/lib/index.js!/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-dev-webpack-plugin/lib/translatesourceloader.js?{}!/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-engine/src/view/emptyelement.js","dependencies":[{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-engine/src/view/emptyelement.js","mtime":499162500000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-dev-webpack-plugin/lib/translatesourceloader.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tICIvaG9tZS9la2ViZXJhdC9ZYW5kZXguRGlzay9Qcm9qZWxlcmltL0JlbmltUHJvamVsZXJpbS93ZWJzaXRlbS93ZWJzaXRlbS13ZWIvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NsYXNzQ2FsbENoZWNrIjsKaW1wb3J0IF9jcmVhdGVDbGFzcyBmcm9tICIvaG9tZS9la2ViZXJhdC9ZYW5kZXguRGlzay9Qcm9qZWxlcmltL0JlbmltUHJvamVsZXJpbS93ZWJzaXRlbS93ZWJzaXRlbS13ZWIvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZUNsYXNzIjsKaW1wb3J0IF9pbmhlcml0cyBmcm9tICIvaG9tZS9la2ViZXJhdC9ZYW5kZXguRGlzay9Qcm9qZWxlcmltL0JlbmltUHJvamVsZXJpbS93ZWJzaXRlbS93ZWJzaXRlbS13ZWIvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzIjsKaW1wb3J0IF9jcmVhdGVTdXBlciBmcm9tICIvaG9tZS9la2ViZXJhdC9ZYW5kZXguRGlzay9Qcm9qZWxlcmltL0JlbmltUHJvamVsZXJpbS93ZWJzaXRlbS93ZWJzaXRlbS13ZWIvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZVN1cGVyIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuZnVuY3Rpb24ubmFtZS5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZyb20uanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuaXRlcmF0b3IuanMiOwoKLyoqCiAqIEBsaWNlbnNlIENvcHlyaWdodCAoYykgMjAwMy0yMDIxLCBDS1NvdXJjZSAtIEZyZWRlcmljbyBLbmFiYmVuLiBBbGwgcmlnaHRzIHJlc2VydmVkLgogKiBGb3IgbGljZW5zaW5nLCBzZWUgTElDRU5TRS5tZCBvciBodHRwczovL2NrZWRpdG9yLmNvbS9sZWdhbC9ja2VkaXRvci1vc3MtbGljZW5zZQogKi8KCi8qKgogKiBAbW9kdWxlIGVuZ2luZS92aWV3L2VtcHR5ZWxlbWVudAogKi8KaW1wb3J0IEVsZW1lbnQgZnJvbSAnLi9lbGVtZW50JzsKaW1wb3J0IENLRWRpdG9yRXJyb3IgZnJvbSAnQGNrZWRpdG9yL2NrZWRpdG9yNS11dGlscy9zcmMvY2tlZGl0b3JlcnJvcic7CmltcG9ydCBOb2RlIGZyb20gJy4vbm9kZSc7Ci8qKgogKiBFbXB0eSBlbGVtZW50IGNsYXNzLiBJdCBpcyB1c2VkIHRvIHJlcHJlc2VudCBlbGVtZW50cyB0aGF0IGNhbm5vdCBjb250YWluIGFueSBjaGlsZCBub2RlcyAoZm9yIGV4YW1wbGUgYDxpbWc+YCBlbGVtZW50cykuCiAqCiAqIFRvIGNyZWF0ZSBhIG5ldyBlbXB0eSBlbGVtZW50IHVzZSB0aGUKICoge0BsaW5rIG1vZHVsZTplbmdpbmUvdmlldy9kb3duY2FzdHdyaXRlcn5Eb3duY2FzdFdyaXRlciNjcmVhdGVFbXB0eUVsZW1lbnQgYGRvd25jYXN0V3JpdGVyI2NyZWF0ZUVtcHR5RWxlbWVudCgpYH0gbWV0aG9kLgogKgogKiBAZXh0ZW5kcyBtb2R1bGU6ZW5naW5lL3ZpZXcvZWxlbWVudH5FbGVtZW50CiAqLwoKdmFyIEVtcHR5RWxlbWVudCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0VsZW1lbnQpIHsKICBfaW5oZXJpdHMoRW1wdHlFbGVtZW50LCBfRWxlbWVudCk7CgogIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoRW1wdHlFbGVtZW50KTsKCiAgLyoqCiAgICogQ3JlYXRlcyBuZXcgaW5zdGFuY2Ugb2YgRW1wdHlFbGVtZW50LgogICAqCiAgICogVGhyb3dzIHtAbGluayBtb2R1bGU6dXRpbHMvY2tlZGl0b3JlcnJvcn5DS0VkaXRvckVycm9yIENLRWRpdG9yRXJyb3J9IGB2aWV3LWVtcHR5ZWxlbWVudC1jYW5ub3QtYWRkYCB3aGVuIHRoaXJkIHBhcmFtZXRlciBpcyBwYXNzZWQsCiAgICogdG8gaW5mb3JtIHRoYXQgdXNhZ2Ugb2YgRW1wdHlFbGVtZW50IGlzIGluY29ycmVjdCAoYWRkaW5nIGNoaWxkIG5vZGVzIHRvIEVtcHR5RWxlbWVudCBpcyBmb3JiaWRkZW4pLgogICAqCiAgICogQHNlZSBtb2R1bGU6ZW5naW5lL3ZpZXcvZG93bmNhc3R3cml0ZXJ+RG93bmNhc3RXcml0ZXIjY3JlYXRlRW1wdHlFbGVtZW50CiAgICogQHByb3RlY3RlZAogICAqIEBwYXJhbSB7bW9kdWxlOmVuZ2luZS92aWV3L2RvY3VtZW50fkRvY3VtZW50fSBkb2N1bWVudCBUaGUgZG9jdW1lbnQgaW5zdGFuY2UgdG8gd2hpY2ggdGhpcyBlbGVtZW50IGJlbG9uZ3MuCiAgICogQHBhcmFtIHtTdHJpbmd9IG5hbWUgTm9kZSBuYW1lLgogICAqIEBwYXJhbSB7T2JqZWN0fEl0ZXJhYmxlfSBbYXR0cnNdIENvbGxlY3Rpb24gb2YgYXR0cmlidXRlcy4KICAgKiBAcGFyYW0ge21vZHVsZTplbmdpbmUvdmlldy9ub2Rlfk5vZGV8SXRlcmFibGUuPG1vZHVsZTplbmdpbmUvdmlldy9ub2Rlfk5vZGU+fSBbY2hpbGRyZW5dCiAgICogQSBsaXN0IG9mIG5vZGVzIHRvIGJlIGluc2VydGVkIGludG8gY3JlYXRlZCBlbGVtZW50LgogICAqLwogIGZ1bmN0aW9uIEVtcHR5RWxlbWVudChkb2N1bWVudCwgbmFtZSwgYXR0cnMsIGNoaWxkcmVuKSB7CiAgICB2YXIgX3RoaXM7CgogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEVtcHR5RWxlbWVudCk7CgogICAgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBkb2N1bWVudCwgbmFtZSwgYXR0cnMsIGNoaWxkcmVuKTsgLy8gT3ZlcnJpZGUgdGhlIGRlZmF1bHQgb2YgdGhlIGJhc2UgY2xhc3MuCgogICAgX3RoaXMuX2lzQWxsb3dlZEluc2lkZUF0dHJpYnV0ZUVsZW1lbnQgPSB0cnVlOwogICAgLyoqCiAgICAgKiBSZXR1cm5zIGBudWxsYCBiZWNhdXNlIGZpbGxlciBpcyBub3QgbmVlZGVkIGZvciBFbXB0eUVsZW1lbnRzLgogICAgICoKICAgICAqIEBtZXRob2QgI2dldEZpbGxlck9mZnNldAogICAgICogQHJldHVybnMge251bGx9IEFsd2F5cyByZXR1cm5zIG51bGwuCiAgICAgKi8KCiAgICBfdGhpcy5nZXRGaWxsZXJPZmZzZXQgPSBnZXRGaWxsZXJPZmZzZXQ7CiAgICByZXR1cm4gX3RoaXM7CiAgfQogIC8qKgogICAqIENoZWNrcyB3aGV0aGVyIHRoaXMgb2JqZWN0IGlzIG9mIHRoZSBnaXZlbi4KICAgKgogICAqCQllbXB0eUVsZW1lbnQuaXMoICdlbXB0eUVsZW1lbnQnICk7IC8vIC0+IHRydWUKICAgKgkJZW1wdHlFbGVtZW50LmlzKCAnZWxlbWVudCcgKTsgLy8gLT4gdHJ1ZQogICAqCQllbXB0eUVsZW1lbnQuaXMoICdub2RlJyApOyAvLyAtPiB0cnVlCiAgICoJCWVtcHR5RWxlbWVudC5pcyggJ3ZpZXc6ZW1wdHlFbGVtZW50JyApOyAvLyAtPiB0cnVlCiAgICoJCWVtcHR5RWxlbWVudC5pcyggJ3ZpZXc6ZWxlbWVudCcgKTsgLy8gLT4gdHJ1ZQogICAqCQllbXB0eUVsZW1lbnQuaXMoICd2aWV3Om5vZGUnICk7IC8vIC0+IHRydWUKICAgKgogICAqCQllbXB0eUVsZW1lbnQuaXMoICdtb2RlbDplbGVtZW50JyApOyAvLyAtPiBmYWxzZQogICAqCQllbXB0eUVsZW1lbnQuaXMoICdkb2N1bWVudEZyYWdtZW50JyApOyAvLyAtPiBmYWxzZQogICAqCiAgICogQXNzdW1pbmcgdGhhdCB0aGUgb2JqZWN0IGJlaW5nIGNoZWNrZWQgaXMgYW4gZW1wdHkgZWxlbWVudCwgeW91IGNhbiBhbHNvIGNoZWNrIGl0cwogICAqIHtAbGluayBtb2R1bGU6ZW5naW5lL3ZpZXcvZW1wdHllbGVtZW50fkVtcHR5RWxlbWVudCNuYW1lIG5hbWV9OgogICAqCiAgICoJCWVtcHR5RWxlbWVudC5pcyggJ2VsZW1lbnQnLCAnaW1nJyApOyAvLyAtPiB0cnVlIGlmIHRoaXMgaXMgYSBpbWcgZWxlbWVudAogICAqCQllbXB0eUVsZW1lbnQuaXMoICdlbXB0eUVsZW1lbnQnLCAnaW1nJyApOyAvLyAtPiBzYW1lIGFzIGFib3ZlCiAgICoJCXRleHQuaXMoICdlbGVtZW50JywgJ2ltZycgKTsgLT4gZmFsc2UKICAgKgogICAqIHtAbGluayBtb2R1bGU6ZW5naW5lL3ZpZXcvbm9kZX5Ob2RlI2lzIENoZWNrIHRoZSBlbnRpcmUgbGlzdCBvZiB2aWV3IG9iamVjdHN9IHdoaWNoIGltcGxlbWVudCB0aGUgYGlzKClgIG1ldGhvZC4KICAgKgogICAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlIFR5cGUgdG8gY2hlY2suCiAgICogQHBhcmFtIHtTdHJpbmd9IFtuYW1lXSBFbGVtZW50IG5hbWUuCiAgICogQHJldHVybnMge0Jvb2xlYW59CiAgICovCgoKICBfY3JlYXRlQ2xhc3MoRW1wdHlFbGVtZW50LCBbewogICAga2V5OiAiaXMiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGlzKHR5cGUpIHsKICAgICAgdmFyIG5hbWUgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IG51bGw7CgogICAgICBpZiAoIW5hbWUpIHsKICAgICAgICByZXR1cm4gdHlwZSA9PT0gJ2VtcHR5RWxlbWVudCcgfHwgdHlwZSA9PT0gJ3ZpZXc6ZW1wdHlFbGVtZW50JyB8fCAvLyBGcm9tIHN1cGVyLmlzKCkuIFRoaXMgaXMgaGlnaGx5IHV0aWxpc2VkIG1ldGhvZCBhbmQgY2Fubm90IGNhbGwgc3VwZXIuIFNlZSBja2VkaXRvci9ja2VkaXRvcjUjNjUyOS4KICAgICAgICB0eXBlID09PSAnZWxlbWVudCcgfHwgdHlwZSA9PT0gJ3ZpZXc6ZWxlbWVudCcgfHwgdHlwZSA9PT0gJ25vZGUnIHx8IHR5cGUgPT09ICd2aWV3Om5vZGUnOwogICAgICB9IGVsc2UgewogICAgICAgIHJldHVybiBuYW1lID09PSB0aGlzLm5hbWUgJiYgKHR5cGUgPT09ICdlbXB0eUVsZW1lbnQnIHx8IHR5cGUgPT09ICd2aWV3OmVtcHR5RWxlbWVudCcgfHwgdHlwZSA9PT0gJ2VsZW1lbnQnIHx8IHR5cGUgPT09ICd2aWV3OmVsZW1lbnQnKTsKICAgICAgfQogICAgfQogICAgLyoqCiAgICAgKiBPdmVycmlkZXMge0BsaW5rIG1vZHVsZTplbmdpbmUvdmlldy9lbGVtZW50fkVsZW1lbnQjX2luc2VydENoaWxkfSBtZXRob2QuCiAgICAgKiBUaHJvd3Mge0BsaW5rIG1vZHVsZTp1dGlscy9ja2VkaXRvcmVycm9yfkNLRWRpdG9yRXJyb3IgQ0tFZGl0b3JFcnJvcn0gYHZpZXctZW1wdHllbGVtZW50LWNhbm5vdC1hZGRgIHRvIHByZXZlbnQKICAgICAqIGFkZGluZyBhbnkgY2hpbGQgbm9kZXMgdG8gRW1wdHlFbGVtZW50LgogICAgICoKICAgICAqIEBwcm90ZWN0ZWQKICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJfaW5zZXJ0Q2hpbGQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9pbnNlcnRDaGlsZChpbmRleCwgbm9kZXMpIHsKICAgICAgaWYgKG5vZGVzICYmIChub2RlcyBpbnN0YW5jZW9mIE5vZGUgfHwgQXJyYXkuZnJvbShub2RlcykubGVuZ3RoID4gMCkpIHsKICAgICAgICAvKioKICAgICAgICAgKiBDYW5ub3QgYWRkIGNoaWxkcmVuIHRvIHtAbGluayBtb2R1bGU6ZW5naW5lL3ZpZXcvZW1wdHllbGVtZW50fkVtcHR5RWxlbWVudH0uCiAgICAgICAgICoKICAgICAgICAgKiBAZXJyb3Igdmlldy1lbXB0eWVsZW1lbnQtY2Fubm90LWFkZAogICAgICAgICAqLwogICAgICAgIHRocm93IG5ldyBDS0VkaXRvckVycm9yKCd2aWV3LWVtcHR5ZWxlbWVudC1jYW5ub3QtYWRkJywgW3RoaXMsIG5vZGVzXSk7CiAgICAgIH0KICAgIH0KICB9XSk7CgogIHJldHVybiBFbXB0eUVsZW1lbnQ7Cn0oRWxlbWVudCk7IC8vIFJldHVybnMgYG51bGxgIGJlY2F1c2UgYmxvY2sgZmlsbGVyIGlzIG5vdCBuZWVkZWQgZm9yIEVtcHR5RWxlbWVudHMuCi8vCi8vIEByZXR1cm5zIHtudWxsfQoKCmV4cG9ydCB7IEVtcHR5RWxlbWVudCBhcyBkZWZhdWx0IH07CgpmdW5jdGlvbiBnZXRGaWxsZXJPZmZzZXQoKSB7CiAgcmV0dXJuIG51bGw7Cn0="},{"version":3,"sources":["/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-engine/src/view/emptyelement.js"],"names":["Element","CKEditorError","Node","EmptyElement","document","name","attrs","children","_isAllowedInsideAttributeElement","getFillerOffset","type","index","nodes","Array","from","length"],"mappings":";;;;;;;;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA,OAAOA,OAAP,MAAoB,WAApB;AACA,OAAOC,aAAP,MAA0B,6CAA1B;AACA,OAAOC,IAAP,MAAiB,QAAjB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IACqBC,Y;;;;;AACpB;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,wBAAaC,QAAb,EAAuBC,IAAvB,EAA6BC,KAA7B,EAAoCC,QAApC,EAA+C;AAAA;;AAAA;;AAC9C,8BAAOH,QAAP,EAAiBC,IAAjB,EAAuBC,KAAvB,EAA8BC,QAA9B,EAD8C,CAG9C;;AACA,UAAKC,gCAAL,GAAwC,IAAxC;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,UAAKC,eAAL,GAAuBA,eAAvB;AAZ8C;AAa9C;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;WACC,YAAIC,IAAJ,EAAwB;AAAA,UAAdL,IAAc,uEAAP,IAAO;;AACvB,UAAK,CAACA,IAAN,EAAa;AACZ,eAAOK,IAAI,KAAK,cAAT,IAA2BA,IAAI,KAAK,mBAApC,IACN;AACAA,QAAAA,IAAI,KAAK,SAFH,IAEgBA,IAAI,KAAK,cAFzB,IAGNA,IAAI,KAAK,MAHH,IAGaA,IAAI,KAAK,WAH7B;AAIA,OALD,MAKO;AACN,eAAOL,IAAI,KAAK,KAAKA,IAAd,KACNK,IAAI,KAAK,cAAT,IAA2BA,IAAI,KAAK,mBAApC,IACAA,IAAI,KAAK,SADT,IACsBA,IAAI,KAAK,cAFzB,CAAP;AAIA;AACD;AAED;AACD;AACA;AACA;AACA;AACA;AACA;;;;WACC,sBAAcC,KAAd,EAAqBC,KAArB,EAA6B;AAC5B,UAAKA,KAAK,KAAMA,KAAK,YAAYV,IAAjB,IAAyBW,KAAK,CAACC,IAAN,CAAYF,KAAZ,EAAoBG,MAApB,GAA6B,CAA5D,CAAV,EAA4E;AAC3E;AACH;AACA;AACA;AACA;AACG,cAAM,IAAId,aAAJ,CACL,8BADK,EAEL,CAAE,IAAF,EAAQW,KAAR,CAFK,CAAN;AAIA;AACD;;;;EAzFwCZ,O,GA4F1C;AACA;AACA;;;SA9FqBG,Y;;AA+FrB,SAASM,eAAT,GAA2B;AAC1B,SAAO,IAAP;AACA","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/emptyelement\n */\n\nimport Element from './element';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport Node from './node';\n\n/**\n * Empty element class. It is used to represent elements that cannot contain any child nodes (for example `<img>` elements).\n *\n * To create a new empty element use the\n * {@link module:engine/view/downcastwriter~DowncastWriter#createEmptyElement `downcastWriter#createEmptyElement()`} method.\n *\n * @extends module:engine/view/element~Element\n */\nexport default class EmptyElement extends Element {\n\t/**\n\t * Creates new instance of EmptyElement.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-emptyelement-cannot-add` when third parameter is passed,\n\t * to inform that usage of EmptyElement is incorrect (adding child nodes to EmptyElement is forbidden).\n\t *\n\t * @see module:engine/view/downcastwriter~DowncastWriter#createEmptyElement\n\t * @protected\n\t * @param {module:engine/view/document~Document} document The document instance to which this element belongs.\n\t * @param {String} name Node name.\n\t * @param {Object|Iterable} [attrs] Collection of attributes.\n\t * @param {module:engine/view/node~Node|Iterable.<module:engine/view/node~Node>} [children]\n\t * A list of nodes to be inserted into created element.\n\t */\n\tconstructor( document, name, attrs, children ) {\n\t\tsuper( document, name, attrs, children );\n\n\t\t// Override the default of the base class.\n\t\tthis._isAllowedInsideAttributeElement = true;\n\n\t\t/**\n\t\t * Returns `null` because filler is not needed for EmptyElements.\n\t\t *\n\t\t * @method #getFillerOffset\n\t\t * @returns {null} Always returns null.\n\t\t */\n\t\tthis.getFillerOffset = getFillerOffset;\n\t}\n\n\t/**\n\t * Checks whether this object is of the given.\n\t *\n\t *\t\temptyElement.is( 'emptyElement' ); // -> true\n\t *\t\temptyElement.is( 'element' ); // -> true\n\t *\t\temptyElement.is( 'node' ); // -> true\n\t *\t\temptyElement.is( 'view:emptyElement' ); // -> true\n\t *\t\temptyElement.is( 'view:element' ); // -> true\n\t *\t\temptyElement.is( 'view:node' ); // -> true\n\t *\n\t *\t\temptyElement.is( 'model:element' ); // -> false\n\t *\t\temptyElement.is( 'documentFragment' ); // -> false\n\t *\n\t * Assuming that the object being checked is an empty element, you can also check its\n\t * {@link module:engine/view/emptyelement~EmptyElement#name name}:\n\t *\n\t *\t\temptyElement.is( 'element', 'img' ); // -> true if this is a img element\n\t *\t\temptyElement.is( 'emptyElement', 'img' ); // -> same as above\n\t *\t\ttext.is( 'element', 'img' ); -> false\n\t *\n\t * {@link module:engine/view/node~Node#is Check the entire list of view objects} which implement the `is()` method.\n\t *\n\t * @param {String} type Type to check.\n\t * @param {String} [name] Element name.\n\t * @returns {Boolean}\n\t */\n\tis( type, name = null ) {\n\t\tif ( !name ) {\n\t\t\treturn type === 'emptyElement' || type === 'view:emptyElement' ||\n\t\t\t\t// From super.is(). This is highly utilised method and cannot call super. See ckeditor/ckeditor5#6529.\n\t\t\t\ttype === 'element' || type === 'view:element' ||\n\t\t\t\ttype === 'node' || type === 'view:node';\n\t\t} else {\n\t\t\treturn name === this.name && (\n\t\t\t\ttype === 'emptyElement' || type === 'view:emptyElement' ||\n\t\t\t\ttype === 'element' || type === 'view:element'\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * Overrides {@link module:engine/view/element~Element#_insertChild} method.\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-emptyelement-cannot-add` to prevent\n\t * adding any child nodes to EmptyElement.\n\t *\n\t * @protected\n\t */\n\t_insertChild( index, nodes ) {\n\t\tif ( nodes && ( nodes instanceof Node || Array.from( nodes ).length > 0 ) ) {\n\t\t\t/**\n\t\t\t * Cannot add children to {@link module:engine/view/emptyelement~EmptyElement}.\n\t\t\t *\n\t\t\t * @error view-emptyelement-cannot-add\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'view-emptyelement-cannot-add',\n\t\t\t\t[ this, nodes ]\n\t\t\t);\n\t\t}\n\t}\n}\n\n// Returns `null` because block filler is not needed for EmptyElements.\n//\n// @returns {null}\nfunction getFillerOffset() {\n\treturn null;\n}\n"]}]}