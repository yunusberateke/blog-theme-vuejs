{"remainingRequest":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/babel-loader/lib/index.js!/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-dev-webpack-plugin/lib/translatesourceloader.js?{}!/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-engine/src/conversion/downcastdispatcher.js","dependencies":[{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-engine/src/conversion/downcastdispatcher.js","mtime":499162500000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-dev-webpack-plugin/lib/translatesourceloader.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyIGZyb20gIi9ob21lL2VrZWJlcmF0L1lhbmRleC5EaXNrL1Byb2plbGVyaW0vQmVuaW1Qcm9qZWxlcmltL3dlYnNpdGVtL3dlYnNpdGVtLXdlYi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlciI7CmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSAiL2hvbWUvZWtlYmVyYXQvWWFuZGV4LkRpc2svUHJvamVsZXJpbS9CZW5pbVByb2plbGVyaW0vd2Vic2l0ZW0vd2Vic2l0ZW0td2ViL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jbGFzc0NhbGxDaGVjayI7CmltcG9ydCBfY3JlYXRlQ2xhc3MgZnJvbSAiL2hvbWUvZWtlYmVyYXQvWWFuZGV4LkRpc2svUHJvamVsZXJpbS9CZW5pbVByb2plbGVyaW0vd2Vic2l0ZW0vd2Vic2l0ZW0td2ViL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jcmVhdGVDbGFzcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm1hcC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC50by1zdHJpbmcuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuaXRlcmF0b3IuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy93ZWIuZG9tLWNvbGxlY3Rpb25zLml0ZXJhdG9yLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuZnVuY3Rpb24ubmFtZS5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5Lm1hcC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZyb20uanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zZXQuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5jb25jYXQuanMiOwoKLyoqCiAqIEBsaWNlbnNlIENvcHlyaWdodCAoYykgMjAwMy0yMDIxLCBDS1NvdXJjZSAtIEZyZWRlcmljbyBLbmFiYmVuLiBBbGwgcmlnaHRzIHJlc2VydmVkLgogKiBGb3IgbGljZW5zaW5nLCBzZWUgTElDRU5TRS5tZCBvciBodHRwczovL2NrZWRpdG9yLmNvbS9sZWdhbC9ja2VkaXRvci1vc3MtbGljZW5zZQogKi8KCi8qKgogKiBAbW9kdWxlIGVuZ2luZS9jb252ZXJzaW9uL2Rvd25jYXN0ZGlzcGF0Y2hlcgogKi8KaW1wb3J0IENvbnN1bWFibGUgZnJvbSAnLi9tb2RlbGNvbnN1bWFibGUnOwppbXBvcnQgUmFuZ2UgZnJvbSAnLi4vbW9kZWwvcmFuZ2UnOwppbXBvcnQgUG9zaXRpb24sIHsgZ2V0Tm9kZUFmdGVyUG9zaXRpb24sIGdldFRleHROb2RlQXRQb3NpdGlvbiB9IGZyb20gJy4uL21vZGVsL3Bvc2l0aW9uJzsKaW1wb3J0IEVtaXR0ZXJNaXhpbiBmcm9tICdAY2tlZGl0b3IvY2tlZGl0b3I1LXV0aWxzL3NyYy9lbWl0dGVybWl4aW4nOwppbXBvcnQgbWl4IGZyb20gJ0Bja2VkaXRvci9ja2VkaXRvcjUtdXRpbHMvc3JjL21peCc7Ci8qKgogKiBUaGUgZG93bmNhc3QgZGlzcGF0Y2hlciBpcyBhIGNlbnRyYWwgcG9pbnQgb2YgZG93bmNhc3RpbmcgKGNvbnZlcnNpb24gZnJvbSB0aGUgbW9kZWwgdG8gdGhlIHZpZXcpLCB3aGljaCBpcyBhIHByb2Nlc3Mgb2YgcmVhY3RpbmcKICogdG8gY2hhbmdlcyBpbiB0aGUgbW9kZWwgYW5kIGZpcmluZyBhIHNldCBvZiBldmVudHMuIENhbGxiYWNrcyBsaXN0ZW5pbmcgdG8gdGhlc2UgZXZlbnRzIGFyZSBjYWxsZWQgY29udmVydGVycy4gVGhlCiAqIGNvbnZlcnRlcnMnIHJvbGUgaXMgdG8gY29udmVydCB0aGUgbW9kZWwgY2hhbmdlcyB0byBjaGFuZ2VzIGluIHZpZXcgKGZvciBleGFtcGxlLCBhZGRpbmcgdmlldyBub2RlcyBvcgogKiBjaGFuZ2luZyBhdHRyaWJ1dGVzIG9uIHZpZXcgZWxlbWVudHMpLgogKgogKiBEdXJpbmcgdGhlIGNvbnZlcnNpb24gcHJvY2VzcywgZG93bmNhc3QgZGlzcGF0Y2hlciBmaXJlcyBldmVudHMgYmFzaW5nIG9uIHRoZSBzdGF0ZSBvZiB0aGUgbW9kZWwgYW5kIHByZXBhcmVzCiAqIGRhdGEgZm9yIHRoZXNlIGV2ZW50cy4gSXQgaXMgaW1wb3J0YW50IHRvIHVuZGVyc3RhbmQgdGhhdCB0aGUgZXZlbnRzIGFyZSBjb25uZWN0ZWQgd2l0aCB0aGUgY2hhbmdlcyBkb25lIG9uIHRoZSBtb2RlbCwKICogZm9yIGV4YW1wbGU6ICJhIG5vZGUgaGFzIGJlZW4gaW5zZXJ0ZWQiIG9yICJhbiBhdHRyaWJ1dGUgaGFzIGNoYW5nZWQiLiBUaGlzIGlzIGluIGNvbnRyYXJ5IHRvIHVwY2FzdGluZyAoYSB2aWV3LXRvLW1vZGVsIGNvbnZlcnNpb24pCiAqIHdoZXJlIHlvdSBjb252ZXJ0IHRoZSB2aWV3IHN0YXRlICh2aWV3IG5vZGVzKSB0byBhIG1vZGVsIHRyZWUuCiAqCiAqIFRoZSBldmVudHMgYXJlIHByZXBhcmVkIGJhc2luZyBvbiBhIGRpZmYgY3JlYXRlZCBieSB7QGxpbmsgbW9kdWxlOmVuZ2luZS9tb2RlbC9kaWZmZXJ+RGlmZmVyIERpZmZlcn0sIHdoaWNoIGJ1ZmZlcnMgdGhlbQogKiBhbmQgdGhlbiBwYXNzZXMgdG8gdGhlIGRvd25jYXN0IGRpc3BhdGNoZXIgYXMgYSBkaWZmIGJldHdlZW4gdGhlIG9sZCBtb2RlbCBzdGF0ZSBhbmQgdGhlIG5ldyBtb2RlbCBzdGF0ZS4KICoKICogTm90ZSB0aGF0IGJlY2F1c2UgdGhlIGNoYW5nZXMgYXJlIGNvbnZlcnRlZCwgdGhlcmUgaXMgYSBuZWVkIHRvIGhhdmUgYSBtYXBwaW5nIGJldHdlZW4gdGhlIG1vZGVsIHN0cnVjdHVyZSBhbmQgdGhlIHZpZXcgc3RydWN0dXJlLgogKiBUbyBtYXAgcG9zaXRpb25zIGFuZCBlbGVtZW50cyBkdXJpbmcgdGhlIGRvd25jYXN0IChhIG1vZGVsLXRvLXZpZXcgY29udmVyc2lvbiksIHVzZSB7QGxpbmsgbW9kdWxlOmVuZ2luZS9jb252ZXJzaW9uL21hcHBlcn5NYXBwZXJ9LgogKgogKiBEb3duY2FzdCBkaXNwYXRjaGVyIGZpcmVzIHRoZSBmb2xsb3dpbmcgZXZlbnRzIGZvciBtb2RlbCB0cmVlIGNoYW5nZXM6CiAqCiAqICoge0BsaW5rIG1vZHVsZTplbmdpbmUvY29udmVyc2lvbi9kb3duY2FzdGRpc3BhdGNoZXJ+RG93bmNhc3REaXNwYXRjaGVyI2V2ZW50Omluc2VydCBgaW5zZXJ0YH0gJm5kYXNoOwogKiBJZiBhIHJhbmdlIG9mIG5vZGVzIHdhcyBpbnNlcnRlZCB0byB0aGUgbW9kZWwgdHJlZS4KICogKiB7QGxpbmsgbW9kdWxlOmVuZ2luZS9jb252ZXJzaW9uL2Rvd25jYXN0ZGlzcGF0Y2hlcn5Eb3duY2FzdERpc3BhdGNoZXIjZXZlbnQ6cmVtb3ZlIGByZW1vdmVgfSAmbmRhc2g7CiAqIElmIGEgcmFuZ2Ugb2Ygbm9kZXMgd2FzIHJlbW92ZWQgZnJvbSB0aGUgbW9kZWwgdHJlZS4KICogKiB7QGxpbmsgbW9kdWxlOmVuZ2luZS9jb252ZXJzaW9uL2Rvd25jYXN0ZGlzcGF0Y2hlcn5Eb3duY2FzdERpc3BhdGNoZXIjZXZlbnQ6YXR0cmlidXRlIGBhdHRyaWJ1dGVgfSAmbmRhc2g7CiAqIElmIGFuIGF0dHJpYnV0ZSB3YXMgYWRkZWQsIGNoYW5nZWQgb3IgcmVtb3ZlZCBmcm9tIGEgbW9kZWwgbm9kZS4KICoKICogRm9yIHtAbGluayBtb2R1bGU6ZW5naW5lL2NvbnZlcnNpb24vZG93bmNhc3RkaXNwYXRjaGVyfkRvd25jYXN0RGlzcGF0Y2hlciNldmVudDppbnNlcnQgYGluc2VydGB9CiAqIGFuZCB7QGxpbmsgbW9kdWxlOmVuZ2luZS9jb252ZXJzaW9uL2Rvd25jYXN0ZGlzcGF0Y2hlcn5Eb3duY2FzdERpc3BhdGNoZXIjZXZlbnQ6YXR0cmlidXRlIGBhdHRyaWJ1dGVgfSwKICogZG93bmNhc3QgZGlzcGF0Y2hlciBnZW5lcmF0ZXMge0BsaW5rIG1vZHVsZTplbmdpbmUvY29udmVyc2lvbi9tb2RlbGNvbnN1bWFibGV+TW9kZWxDb25zdW1hYmxlIGNvbnN1bWFibGVzfS4KICogVGhlc2UgYXJlIHVzZWQgdG8gaGF2ZSBjb250cm9sIG92ZXIgd2hpY2ggY2hhbmdlcyBoYXZlIGFscmVhZHkgYmVlbiBjb25zdW1lZC4gSXQgaXMgdXNlZnVsIHdoZW4gc29tZSBjb252ZXJ0ZXJzCiAqIG92ZXJ3cml0ZSBvdGhlcnMgb3IgY29udmVydCBtdWx0aXBsZSBjaGFuZ2VzIChmb3IgZXhhbXBsZSwgaXQgY29udmVydHMgYW4gaW5zZXJ0aW9uIG9mIGFuIGVsZW1lbnQgYW5kIGFsc28gY29udmVydHMgdGhhdAogKiBlbGVtZW50J3MgYXR0cmlidXRlcyBkdXJpbmcgdGhlIGluc2VydGlvbikuCiAqCiAqIEFkZGl0aW9uYWxseSwgZG93bmNhc3QgZGlzcGF0Y2hlciBmaXJlcyBldmVudHMgZm9yIHtAbGluayBtb2R1bGU6ZW5naW5lL21vZGVsL21hcmtlcmNvbGxlY3Rpb25+TWFya2VyIG1hcmtlcn0gY2hhbmdlczoKICoKICogKiB7QGxpbmsgbW9kdWxlOmVuZ2luZS9jb252ZXJzaW9uL2Rvd25jYXN0ZGlzcGF0Y2hlcn5Eb3duY2FzdERpc3BhdGNoZXIjZXZlbnQ6YWRkTWFya2VyfSAmbmRhc2g7IElmIGEgbWFya2VyIHdhcyBhZGRlZC4KICogKiB7QGxpbmsgbW9kdWxlOmVuZ2luZS9jb252ZXJzaW9uL2Rvd25jYXN0ZGlzcGF0Y2hlcn5Eb3duY2FzdERpc3BhdGNoZXIjZXZlbnQ6cmVtb3ZlTWFya2VyfSAmbmRhc2g7IElmIGEgbWFya2VyIHdhcyByZW1vdmVkLgogKgogKiBOb3RlIHRoYXQgY2hhbmdpbmcgYSBtYXJrZXIgaXMgZG9uZSB0aHJvdWdoIHJlbW92aW5nIHRoZSBtYXJrZXIgZnJvbSB0aGUgb2xkIHJhbmdlIGFuZCBhZGRpbmcgaXQgdG8gdGhlIG5ldyByYW5nZSwKICogc28gYm90aCBldmVudHMgYXJlIGZpcmVkLgogKgogKiBGaW5hbGx5LCBkb3duY2FzdCBkaXNwYXRjaGVyIGFsc28gaGFuZGxlcyBmaXJpbmcgZXZlbnRzIGZvciB0aGUge0BsaW5rIG1vZHVsZTplbmdpbmUvbW9kZWwvc2VsZWN0aW9uIG1vZGVsIHNlbGVjdGlvbn0KICogY29udmVyc2lvbjoKICoKICogKiB7QGxpbmsgbW9kdWxlOmVuZ2luZS9jb252ZXJzaW9uL2Rvd25jYXN0ZGlzcGF0Y2hlcn5Eb3duY2FzdERpc3BhdGNoZXIjZXZlbnQ6c2VsZWN0aW9ufQogKiAmbmRhc2g7IENvbnZlcnRzIHRoZSBzZWxlY3Rpb24gZnJvbSB0aGUgbW9kZWwgdG8gdGhlIHZpZXcuCiAqICoge0BsaW5rIG1vZHVsZTplbmdpbmUvY29udmVyc2lvbi9kb3duY2FzdGRpc3BhdGNoZXJ+RG93bmNhc3REaXNwYXRjaGVyI2V2ZW50OmF0dHJpYnV0ZX0KICogJm5kYXNoOyBGaXJlZCBmb3IgZXZlcnkgc2VsZWN0aW9uIGF0dHJpYnV0ZS4KICogKiB7QGxpbmsgbW9kdWxlOmVuZ2luZS9jb252ZXJzaW9uL2Rvd25jYXN0ZGlzcGF0Y2hlcn5Eb3duY2FzdERpc3BhdGNoZXIjZXZlbnQ6YWRkTWFya2VyfQogKiAmbmRhc2g7IEZpcmVkIGZvciBldmVyeSBtYXJrZXIgdGhhdCBjb250YWlucyBhIHNlbGVjdGlvbi4KICoKICogVW5saWtlIHRoZSBtb2RlbCB0cmVlIGFuZCB0aGUgbWFya2VycywgdGhlIGV2ZW50cyBmb3Igc2VsZWN0aW9uIGFyZSBub3QgZmlyZWQgZm9yIGNoYW5nZXMgYnV0IGZvciBhIHNlbGVjdGlvbiBzdGF0ZS4KICoKICogV2hlbiBwcm92aWRpbmcgY3VzdG9tIGxpc3RlbmVycyBmb3IgYSBkb3duY2FzdCBkaXNwYXRjaGVyLCByZW1lbWJlciB0byBjaGVjayB3aGV0aGVyIGEgZ2l2ZW4gY2hhbmdlIGhhcyBub3QgYmVlbgogKiB7QGxpbmsgbW9kdWxlOmVuZ2luZS9jb252ZXJzaW9uL21vZGVsY29uc3VtYWJsZX5Nb2RlbENvbnN1bWFibGUjY29uc3VtZSBjb25zdW1lZH0geWV0LgogKgogKiBXaGVuIHByb3ZpZGluZyBjdXN0b20gbGlzdGVuZXJzIGZvciBkb3duY2FzdCBkaXNwYXRjaGVyLCBrZWVwIGluIG1pbmQgdGhhdCBhbnkgY2FsbGJhY2sgdGhhdCBoYXMKICoge0BsaW5rIG1vZHVsZTplbmdpbmUvY29udmVyc2lvbi9tb2RlbGNvbnN1bWFibGV+TW9kZWxDb25zdW1hYmxlI2NvbnN1bWUgY29uc3VtZWR9IGEgdmFsdWUgZnJvbSBhIGNvbnN1bWFibGUgYW5kCiAqIGNvbnZlcnRlZCB0aGUgY2hhbmdlIHNob3VsZCBhbHNvIHN0b3AgdGhlIGV2ZW50IChmb3IgZWZmaWNpZW5jeSBwdXJwb3NlcykuCiAqCiAqIFdoZW4gcHJvdmlkaW5nIGN1c3RvbSBsaXN0ZW5lcnMgZm9yIGRvd25jYXN0IGRpc3BhdGNoZXIsIHJlbWVtYmVyIHRvIHVzZSB0aGUgcHJvdmlkZWQKICoge0BsaW5rIG1vZHVsZTplbmdpbmUvdmlldy9kb3duY2FzdHdyaXRlcn5Eb3duY2FzdFdyaXRlciB2aWV3IGRvd25jYXN0IHdyaXRlcn0gdG8gYXBwbHkgY2hhbmdlcyB0byB0aGUgdmlldyBkb2N1bWVudC4KICoKICogWW91IGNhbiByZWFkIG1vcmUgYWJvdXQgY29udmVyc2lvbiBpbiB0aGUgZm9sbG93aW5nIGd1aWRlczoKICoKICogKiB7QGdsaW5rIGZyYW1ld29yay9ndWlkZXMvZGVlcC1kaXZlL2NvbnZlcnNpb24vY29udmVyc2lvbi1pbnRyb2R1Y3Rpb24gQWR2YW5jZWQgY29udmVyc2lvbiBjb25jZXB0cyAmbWRhc2g7IGF0dHJpYnV0ZXN9CiAqICoge0BnbGluayBmcmFtZXdvcmsvZ3VpZGVzL2RlZXAtZGl2ZS9jb252ZXJzaW9uL2NvbnZlcnNpb24tZXh0ZW5kaW5nLW91dHB1dCBFeHRlbmRpbmcgdGhlIGVkaXRvciBvdXRwdXQgfQogKiAqIHtAZ2xpbmsgZnJhbWV3b3JrL2d1aWRlcy9kZWVwLWRpdmUvY29udmVyc2lvbi9jdXN0b20tZWxlbWVudC1jb252ZXJzaW9uIEN1c3RvbSBlbGVtZW50IGNvbnZlcnNpb259CiAqCiAqIEFuIGV4YW1wbGUgb2YgYSBjdXN0b20gY29udmVydGVyIGZvciB0aGUgZG93bmNhc3QgZGlzcGF0Y2hlcjoKICoKICoJCS8vIFlvdSB3aWxsIGNvbnZlcnQgaW5zZXJ0aW5nIGEgInBhcmFncmFwaCIgbW9kZWwgZWxlbWVudCBpbnRvIHRoZSBtb2RlbC4KICoJCWRvd25jYXN0RGlzcGF0Y2hlci5vbiggJ2luc2VydDpwYXJhZ3JhcGgnLCAoIGV2dCwgZGF0YSwgY29udmVyc2lvbkFwaSApID0+IHsKICoJCQkvLyBSZW1lbWJlciB0byBjaGVjayB3aGV0aGVyIHRoZSBjaGFuZ2UgaGFzIG5vdCBiZWVuIGNvbnN1bWVkIHlldCBhbmQgY29uc3VtZSBpdC4KICoJCQlpZiAoIGNvbnZlcnNpb25BcGkuY29uc3VtYWJsZS5jb25zdW1lKCBkYXRhLml0ZW0sICdpbnNlcnQnICkgKSB7CiAqCQkJCXJldHVybjsKICoJCQl9CiAqCiAqCQkJLy8gVHJhbnNsYXRlIHRoZSBwb3NpdGlvbiBpbiB0aGUgbW9kZWwgdG8gYSBwb3NpdGlvbiBpbiB0aGUgdmlldy4KICoJCQljb25zdCB2aWV3UG9zaXRpb24gPSBjb252ZXJzaW9uQXBpLm1hcHBlci50b1ZpZXdQb3NpdGlvbiggZGF0YS5yYW5nZS5zdGFydCApOwogKgogKgkJCS8vIENyZWF0ZSBhIDxwPiBlbGVtZW50IHRoYXQgd2lsbCBiZSBpbnNlcnRlZCBpbnRvIHRoZSB2aWV3IGF0IHRoZSBgdmlld1Bvc2l0aW9uYC4KICoJCQljb25zdCB2aWV3RWxlbWVudCA9IGNvbnZlcnNpb25BcGkud3JpdGVyLmNyZWF0ZUNvbnRhaW5lckVsZW1lbnQoICdwJyApOwogKgogKgkJCS8vIEJpbmQgdGhlIG5ld2x5IGNyZWF0ZWQgdmlldyBlbGVtZW50IHRvIHRoZSBtb2RlbCBlbGVtZW50IHNvIHBvc2l0aW9ucyB3aWxsIG1hcCBhY2NvcmRpbmdseSBpbiB0aGUgZnV0dXJlLgogKgkJCWNvbnZlcnNpb25BcGkubWFwcGVyLmJpbmRFbGVtZW50cyggZGF0YS5pdGVtLCB2aWV3RWxlbWVudCApOwogKgogKgkJCS8vIEFkZCB0aGUgbmV3bHkgY3JlYXRlZCB2aWV3IGVsZW1lbnQgdG8gdGhlIHZpZXcuCiAqCQkJY29udmVyc2lvbkFwaS53cml0ZXIuaW5zZXJ0KCB2aWV3UG9zaXRpb24sIHZpZXdFbGVtZW50ICk7CiAqCiAqCQkJLy8gUmVtZW1iZXIgdG8gc3RvcCB0aGUgZXZlbnQgcHJvcGFnYXRpb24uCiAqCQkJZXZ0LnN0b3AoKTsKICoJCX0gKTsKICovCgp2YXIgRG93bmNhc3REaXNwYXRjaGVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHsKICAvKioKICAgKiBDcmVhdGVzIGEgZG93bmNhc3QgZGlzcGF0Y2hlciBpbnN0YW5jZS4KICAgKgogICAqIEBzZWUgbW9kdWxlOmVuZ2luZS9jb252ZXJzaW9uL2Rvd25jYXN0ZGlzcGF0Y2hlcn5Eb3duY2FzdENvbnZlcnNpb25BcGkKICAgKiBAcGFyYW0ge09iamVjdH0gY29udmVyc2lvbkFwaSBBZGRpdGlvbmFsIHByb3BlcnRpZXMgZm9yIGFuIGludGVyZmFjZSB0aGF0IHdpbGwgYmUgcGFzc2VkIHRvIGV2ZW50cyBmaXJlZAogICAqIGJ5IHRoZSBkb3duY2FzdCBkaXNwYXRjaGVyLgogICAqLwogIGZ1bmN0aW9uIERvd25jYXN0RGlzcGF0Y2hlcihjb252ZXJzaW9uQXBpKSB7CiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRG93bmNhc3REaXNwYXRjaGVyKTsKCiAgICAvKioKICAgICAqIEFuIGludGVyZmFjZSBwYXNzZWQgYnkgdGhlIGRpc3BhdGNoZXIgdG8gdGhlIGV2ZW50IGNhbGxiYWNrcy4KICAgICAqCiAgICAgKiBAbWVtYmVyIHttb2R1bGU6ZW5naW5lL2NvbnZlcnNpb24vZG93bmNhc3RkaXNwYXRjaGVyfkRvd25jYXN0Q29udmVyc2lvbkFwaX0KICAgICAqLwogICAgdGhpcy5jb252ZXJzaW9uQXBpID0gT2JqZWN0LmFzc2lnbih7CiAgICAgIGRpc3BhdGNoZXI6IHRoaXMKICAgIH0sIGNvbnZlcnNpb25BcGkpOwogICAgLyoqCiAgICAgKiBNYXBzIGNvbnZlcnNpb24gZXZlbnQgbmFtZXMgdGhhdCB3aWxsIHRyaWdnZXIgZWxlbWVudCByZWNvbnZlcnNpb24gZm9yIGEgZ2l2ZW4gZWxlbWVudCBuYW1lLgogICAgICoKICAgICAqIEB0eXBlIHtNYXA8U3RyaW5nLCBTdHJpbmc+fQogICAgICogQHByaXZhdGUKICAgICAqLwoKICAgIHRoaXMuX3JlY29udmVyc2lvbkV2ZW50c01hcHBpbmcgPSBuZXcgTWFwKCk7CiAgfQogIC8qKgogICAqIFRha2VzIGEge0BsaW5rIG1vZHVsZTplbmdpbmUvbW9kZWwvZGlmZmVyfkRpZmZlciBtb2RlbCBkaWZmZXJ9IG9iamVjdCB3aXRoIGJ1ZmZlcmVkIGNoYW5nZXMgYW5kIGZpcmVzIGNvbnZlcnNpb24gYmFzaW5nIG9uIGl0LgogICAqCiAgICogQHBhcmFtIHttb2R1bGU6ZW5naW5lL21vZGVsL2RpZmZlcn5EaWZmZXJ9IGRpZmZlciBUaGUgZGlmZmVyIG9iamVjdCB3aXRoIGJ1ZmZlcmVkIGNoYW5nZXMuCiAgICogQHBhcmFtIHttb2R1bGU6ZW5naW5lL21vZGVsL21hcmtlcmNvbGxlY3Rpb25+TWFya2VyQ29sbGVjdGlvbn0gbWFya2VycyBNYXJrZXJzIGNvbm5lY3RlZCB3aXRoIHRoZSBjb252ZXJ0ZWQgbW9kZWwuCiAgICogQHBhcmFtIHttb2R1bGU6ZW5naW5lL3ZpZXcvZG93bmNhc3R3cml0ZXJ+RG93bmNhc3RXcml0ZXJ9IHdyaXRlciBUaGUgdmlldyB3cml0ZXIgdGhhdCBzaG91bGQgYmUgdXNlZCB0byBtb2RpZnkgdGhlIHZpZXcgZG9jdW1lbnQuCiAgICovCgoKICBfY3JlYXRlQ2xhc3MoRG93bmNhc3REaXNwYXRjaGVyLCBbewogICAga2V5OiAiY29udmVydENoYW5nZXMiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGNvbnZlcnRDaGFuZ2VzKGRpZmZlciwgbWFya2Vycywgd3JpdGVyKSB7CiAgICAgIC8vIEJlZm9yZSB0aGUgdmlldyBpcyB1cGRhdGVkLCByZW1vdmUgbWFya2VycyB3aGljaCBoYXZlIGNoYW5nZWQuCiAgICAgIHZhciBfaXRlcmF0b3IgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihkaWZmZXIuZ2V0TWFya2Vyc1RvUmVtb3ZlKCkpLAogICAgICAgICAgX3N0ZXA7CgogICAgICB0cnkgewogICAgICAgIGZvciAoX2l0ZXJhdG9yLnMoKTsgIShfc3RlcCA9IF9pdGVyYXRvci5uKCkpLmRvbmU7KSB7CiAgICAgICAgICB2YXIgY2hhbmdlID0gX3N0ZXAudmFsdWU7CiAgICAgICAgICB0aGlzLmNvbnZlcnRNYXJrZXJSZW1vdmUoY2hhbmdlLm5hbWUsIGNoYW5nZS5yYW5nZSwgd3JpdGVyKTsKICAgICAgICB9CiAgICAgIH0gY2F0Y2ggKGVycikgewogICAgICAgIF9pdGVyYXRvci5lKGVycik7CiAgICAgIH0gZmluYWxseSB7CiAgICAgICAgX2l0ZXJhdG9yLmYoKTsKICAgICAgfQoKICAgICAgdmFyIGNoYW5nZXMgPSB0aGlzLl9tYXBDaGFuZ2VzV2l0aEF1dG9tYXRpY1JlY29udmVyc2lvbihkaWZmZXIpOyAvLyBDb252ZXJ0IGNoYW5nZXMgdGhhdCBoYXBwZW5lZCBvbiBtb2RlbCB0cmVlLgoKCiAgICAgIHZhciBfaXRlcmF0b3IyID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIoY2hhbmdlcyksCiAgICAgICAgICBfc3RlcDI7CgogICAgICB0cnkgewogICAgICAgIGZvciAoX2l0ZXJhdG9yMi5zKCk7ICEoX3N0ZXAyID0gX2l0ZXJhdG9yMi5uKCkpLmRvbmU7KSB7CiAgICAgICAgICB2YXIgZW50cnkgPSBfc3RlcDIudmFsdWU7CgogICAgICAgICAgaWYgKGVudHJ5LnR5cGUgPT09ICdpbnNlcnQnKSB7CiAgICAgICAgICAgIHRoaXMuY29udmVydEluc2VydChSYW5nZS5fY3JlYXRlRnJvbVBvc2l0aW9uQW5kU2hpZnQoZW50cnkucG9zaXRpb24sIGVudHJ5Lmxlbmd0aCksIHdyaXRlcik7CiAgICAgICAgICB9IGVsc2UgaWYgKGVudHJ5LnR5cGUgPT09ICdyZW1vdmUnKSB7CiAgICAgICAgICAgIHRoaXMuY29udmVydFJlbW92ZShlbnRyeS5wb3NpdGlvbiwgZW50cnkubGVuZ3RoLCBlbnRyeS5uYW1lLCB3cml0ZXIpOwogICAgICAgICAgfSBlbHNlIGlmIChlbnRyeS50eXBlID09PSAncmVjb252ZXJ0JykgewogICAgICAgICAgICB0aGlzLnJlY29udmVydEVsZW1lbnQoZW50cnkuZWxlbWVudCwgd3JpdGVyKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIC8vIERlZmF1bHRzIHRvICdhdHRyaWJ1dGUnIGNoYW5nZS4KICAgICAgICAgICAgdGhpcy5jb252ZXJ0QXR0cmlidXRlKGVudHJ5LnJhbmdlLCBlbnRyeS5hdHRyaWJ1dGVLZXksIGVudHJ5LmF0dHJpYnV0ZU9sZFZhbHVlLCBlbnRyeS5hdHRyaWJ1dGVOZXdWYWx1ZSwgd3JpdGVyKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0gY2F0Y2ggKGVycikgewogICAgICAgIF9pdGVyYXRvcjIuZShlcnIpOwogICAgICB9IGZpbmFsbHkgewogICAgICAgIF9pdGVyYXRvcjIuZigpOwogICAgICB9CgogICAgICB2YXIgX2l0ZXJhdG9yMyA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKHRoaXMuY29udmVyc2lvbkFwaS5tYXBwZXIuZmx1c2hVbmJvdW5kTWFya2VyTmFtZXMoKSksCiAgICAgICAgICBfc3RlcDM7CgogICAgICB0cnkgewogICAgICAgIGZvciAoX2l0ZXJhdG9yMy5zKCk7ICEoX3N0ZXAzID0gX2l0ZXJhdG9yMy5uKCkpLmRvbmU7KSB7CiAgICAgICAgICB2YXIgbWFya2VyTmFtZSA9IF9zdGVwMy52YWx1ZTsKICAgICAgICAgIHZhciBtYXJrZXJSYW5nZSA9IG1hcmtlcnMuZ2V0KG1hcmtlck5hbWUpLmdldFJhbmdlKCk7CiAgICAgICAgICB0aGlzLmNvbnZlcnRNYXJrZXJSZW1vdmUobWFya2VyTmFtZSwgbWFya2VyUmFuZ2UsIHdyaXRlcik7CiAgICAgICAgICB0aGlzLmNvbnZlcnRNYXJrZXJBZGQobWFya2VyTmFtZSwgbWFya2VyUmFuZ2UsIHdyaXRlcik7CiAgICAgICAgfSAvLyBBZnRlciB0aGUgdmlldyBpcyB1cGRhdGVkLCBjb252ZXJ0IG1hcmtlcnMgd2hpY2ggaGF2ZSBjaGFuZ2VkLgoKICAgICAgfSBjYXRjaCAoZXJyKSB7CiAgICAgICAgX2l0ZXJhdG9yMy5lKGVycik7CiAgICAgIH0gZmluYWxseSB7CiAgICAgICAgX2l0ZXJhdG9yMy5mKCk7CiAgICAgIH0KCiAgICAgIHZhciBfaXRlcmF0b3I0ID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIoZGlmZmVyLmdldE1hcmtlcnNUb0FkZCgpKSwKICAgICAgICAgIF9zdGVwNDsKCiAgICAgIHRyeSB7CiAgICAgICAgZm9yIChfaXRlcmF0b3I0LnMoKTsgIShfc3RlcDQgPSBfaXRlcmF0b3I0Lm4oKSkuZG9uZTspIHsKICAgICAgICAgIHZhciBfY2hhbmdlID0gX3N0ZXA0LnZhbHVlOwogICAgICAgICAgdGhpcy5jb252ZXJ0TWFya2VyQWRkKF9jaGFuZ2UubmFtZSwgX2NoYW5nZS5yYW5nZSwgd3JpdGVyKTsKICAgICAgICB9CiAgICAgIH0gY2F0Y2ggKGVycikgewogICAgICAgIF9pdGVyYXRvcjQuZShlcnIpOwogICAgICB9IGZpbmFsbHkgewogICAgICAgIF9pdGVyYXRvcjQuZigpOwogICAgICB9CiAgICB9CiAgICAvKioKICAgICAqIFN0YXJ0cyBhIGNvbnZlcnNpb24gb2YgYSByYW5nZSBpbnNlcnRpb24uCiAgICAgKgogICAgICogRm9yIGVhY2ggbm9kZSBpbiB0aGUgcmFuZ2UsIHtAbGluayAjZXZlbnQ6aW5zZXJ0IGBpbnNlcnRgIGV2ZW50IGlzIGZpcmVkfS4gRm9yIGVhY2ggYXR0cmlidXRlIG9uIGVhY2ggbm9kZSwKICAgICAqIHtAbGluayAjZXZlbnQ6YXR0cmlidXRlIGBhdHRyaWJ1dGVgIGV2ZW50IGlzIGZpcmVkfS4KICAgICAqCiAgICAgKiBAZmlyZXMgaW5zZXJ0CiAgICAgKiBAZmlyZXMgYXR0cmlidXRlCiAgICAgKiBAcGFyYW0ge21vZHVsZTplbmdpbmUvbW9kZWwvcmFuZ2V+UmFuZ2V9IHJhbmdlIFRoZSBpbnNlcnRlZCByYW5nZS4KICAgICAqIEBwYXJhbSB7bW9kdWxlOmVuZ2luZS92aWV3L2Rvd25jYXN0d3JpdGVyfkRvd25jYXN0V3JpdGVyfSB3cml0ZXIgVGhlIHZpZXcgd3JpdGVyIHRoYXQgc2hvdWxkIGJlIHVzZWQgdG8gbW9kaWZ5IHRoZSB2aWV3IGRvY3VtZW50LgogICAgICovCgogIH0sIHsKICAgIGtleTogImNvbnZlcnRJbnNlcnQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGNvbnZlcnRJbnNlcnQocmFuZ2UsIHdyaXRlcikgewogICAgICB0aGlzLmNvbnZlcnNpb25BcGkud3JpdGVyID0gd3JpdGVyOyAvLyBDcmVhdGUgYSBsaXN0IG9mIHRoaW5ncyB0aGF0IGNhbiBiZSBjb25zdW1lZCwgY29uc2lzdGluZyBvZiBub2RlcyBhbmQgdGhlaXIgYXR0cmlidXRlcy4KCiAgICAgIHRoaXMuY29udmVyc2lvbkFwaS5jb25zdW1hYmxlID0gdGhpcy5fY3JlYXRlSW5zZXJ0Q29uc3VtYWJsZShyYW5nZSk7IC8vIEZpcmUgYSBzZXBhcmF0ZSBpbnNlcnQgZXZlbnQgZm9yIGVhY2ggbm9kZSBhbmQgdGV4dCBmcmFnbWVudCBjb250YWluZWQgaW4gdGhlIHJhbmdlLgoKICAgICAgdmFyIF9pdGVyYXRvcjUgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihBcnJheS5mcm9tKHJhbmdlKS5tYXAod2Fsa2VyVmFsdWVUb0V2ZW50RGF0YSkpLAogICAgICAgICAgX3N0ZXA1OwoKICAgICAgdHJ5IHsKICAgICAgICBmb3IgKF9pdGVyYXRvcjUucygpOyAhKF9zdGVwNSA9IF9pdGVyYXRvcjUubigpKS5kb25lOykgewogICAgICAgICAgdmFyIGRhdGEgPSBfc3RlcDUudmFsdWU7CgogICAgICAgICAgdGhpcy5fY29udmVydEluc2VydFdpdGhBdHRyaWJ1dGVzKGRhdGEpOwogICAgICAgIH0KICAgICAgfSBjYXRjaCAoZXJyKSB7CiAgICAgICAgX2l0ZXJhdG9yNS5lKGVycik7CiAgICAgIH0gZmluYWxseSB7CiAgICAgICAgX2l0ZXJhdG9yNS5mKCk7CiAgICAgIH0KCiAgICAgIHRoaXMuX2NsZWFyQ29udmVyc2lvbkFwaSgpOwogICAgfQogICAgLyoqCiAgICAgKiBGaXJlcyBjb252ZXJzaW9uIG9mIGEgc2luZ2xlIG5vZGUgcmVtb3ZhbC4gRmlyZXMge0BsaW5rICNldmVudDpyZW1vdmUgcmVtb3ZlIGV2ZW50fSB3aXRoIHByb3ZpZGVkIGRhdGEuCiAgICAgKgogICAgICogQHBhcmFtIHttb2R1bGU6ZW5naW5lL21vZGVsL3Bvc2l0aW9uflBvc2l0aW9ufSBwb3NpdGlvbiBQb3NpdGlvbiBmcm9tIHdoaWNoIG5vZGUgd2FzIHJlbW92ZWQuCiAgICAgKiBAcGFyYW0ge051bWJlcn0gbGVuZ3RoIE9mZnNldCBzaXplIG9mIHJlbW92ZWQgbm9kZS4KICAgICAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lIE5hbWUgb2YgcmVtb3ZlZCBub2RlLgogICAgICogQHBhcmFtIHttb2R1bGU6ZW5naW5lL3ZpZXcvZG93bmNhc3R3cml0ZXJ+RG93bmNhc3RXcml0ZXJ9IHdyaXRlciBWaWV3IHdyaXRlciB0aGF0IHNob3VsZCBiZSB1c2VkIHRvIG1vZGlmeSB2aWV3IGRvY3VtZW50LgogICAgICovCgogIH0sIHsKICAgIGtleTogImNvbnZlcnRSZW1vdmUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGNvbnZlcnRSZW1vdmUocG9zaXRpb24sIGxlbmd0aCwgbmFtZSwgd3JpdGVyKSB7CiAgICAgIHRoaXMuY29udmVyc2lvbkFwaS53cml0ZXIgPSB3cml0ZXI7CiAgICAgIHRoaXMuZmlyZSgncmVtb3ZlOicgKyBuYW1lLCB7CiAgICAgICAgcG9zaXRpb246IHBvc2l0aW9uLAogICAgICAgIGxlbmd0aDogbGVuZ3RoCiAgICAgIH0sIHRoaXMuY29udmVyc2lvbkFwaSk7CgogICAgICB0aGlzLl9jbGVhckNvbnZlcnNpb25BcGkoKTsKICAgIH0KICAgIC8qKgogICAgICogU3RhcnRzIGEgY29udmVyc2lvbiBvZiBhbiBhdHRyaWJ1dGUgY2hhbmdlIG9uIGEgZ2l2ZW4gYHJhbmdlYC4KICAgICAqCiAgICAgKiBGb3IgZWFjaCBub2RlIGluIHRoZSBnaXZlbiBgcmFuZ2VgLCB7QGxpbmsgI2V2ZW50OmF0dHJpYnV0ZSBhdHRyaWJ1dGUgZXZlbnR9IGlzIGZpcmVkIHdpdGggdGhlIHBhc3NlZCBkYXRhLgogICAgICoKICAgICAqIEBmaXJlcyBhdHRyaWJ1dGUKICAgICAqIEBwYXJhbSB7bW9kdWxlOmVuZ2luZS9tb2RlbC9yYW5nZX5SYW5nZX0gcmFuZ2UgQ2hhbmdlZCByYW5nZS4KICAgICAqIEBwYXJhbSB7U3RyaW5nfSBrZXkgS2V5IG9mIHRoZSBhdHRyaWJ1dGUgdGhhdCBoYXMgY2hhbmdlZC4KICAgICAqIEBwYXJhbSB7Kn0gb2xkVmFsdWUgQXR0cmlidXRlIHZhbHVlIGJlZm9yZSB0aGUgY2hhbmdlIG9yIGBudWxsYCBpZiB0aGUgYXR0cmlidXRlIGhhcyBub3QgYmVlbiBzZXQgYmVmb3JlLgogICAgICogQHBhcmFtIHsqfSBuZXdWYWx1ZSBOZXcgYXR0cmlidXRlIHZhbHVlIG9yIGBudWxsYCBpZiB0aGUgYXR0cmlidXRlIGhhcyBiZWVuIHJlbW92ZWQuCiAgICAgKiBAcGFyYW0ge21vZHVsZTplbmdpbmUvdmlldy9kb3duY2FzdHdyaXRlcn5Eb3duY2FzdFdyaXRlcn0gd3JpdGVyIFZpZXcgd3JpdGVyIHRoYXQgc2hvdWxkIGJlIHVzZWQgdG8gbW9kaWZ5IHZpZXcgZG9jdW1lbnQuCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAiY29udmVydEF0dHJpYnV0ZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gY29udmVydEF0dHJpYnV0ZShyYW5nZSwga2V5LCBvbGRWYWx1ZSwgbmV3VmFsdWUsIHdyaXRlcikgewogICAgICB0aGlzLmNvbnZlcnNpb25BcGkud3JpdGVyID0gd3JpdGVyOyAvLyBDcmVhdGUgYSBsaXN0IHdpdGggYXR0cmlidXRlcyB0byBjb25zdW1lLgoKICAgICAgdGhpcy5jb252ZXJzaW9uQXBpLmNvbnN1bWFibGUgPSB0aGlzLl9jcmVhdGVDb25zdW1hYmxlRm9yUmFuZ2UocmFuZ2UsICJhdHRyaWJ1dGU6Ii5jb25jYXQoa2V5KSk7IC8vIENyZWF0ZSBhIHNlcGFyYXRlIGF0dHJpYnV0ZSBldmVudCBmb3IgZWFjaCBub2RlIGluIHRoZSByYW5nZS4KCiAgICAgIHZhciBfaXRlcmF0b3I2ID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIocmFuZ2UpLAogICAgICAgICAgX3N0ZXA2OwoKICAgICAgdHJ5IHsKICAgICAgICBmb3IgKF9pdGVyYXRvcjYucygpOyAhKF9zdGVwNiA9IF9pdGVyYXRvcjYubigpKS5kb25lOykgewogICAgICAgICAgdmFyIHZhbHVlID0gX3N0ZXA2LnZhbHVlOwogICAgICAgICAgdmFyIGl0ZW0gPSB2YWx1ZS5pdGVtOwoKICAgICAgICAgIHZhciBpdGVtUmFuZ2UgPSBSYW5nZS5fY3JlYXRlRnJvbVBvc2l0aW9uQW5kU2hpZnQodmFsdWUucHJldmlvdXNQb3NpdGlvbiwgdmFsdWUubGVuZ3RoKTsKCiAgICAgICAgICB2YXIgZGF0YSA9IHsKICAgICAgICAgICAgaXRlbTogaXRlbSwKICAgICAgICAgICAgcmFuZ2U6IGl0ZW1SYW5nZSwKICAgICAgICAgICAgYXR0cmlidXRlS2V5OiBrZXksCiAgICAgICAgICAgIGF0dHJpYnV0ZU9sZFZhbHVlOiBvbGRWYWx1ZSwKICAgICAgICAgICAgYXR0cmlidXRlTmV3VmFsdWU6IG5ld1ZhbHVlCiAgICAgICAgICB9OwoKICAgICAgICAgIHRoaXMuX3Rlc3RBbmRGaXJlKCJhdHRyaWJ1dGU6Ii5jb25jYXQoa2V5KSwgZGF0YSk7CiAgICAgICAgfQogICAgICB9IGNhdGNoIChlcnIpIHsKICAgICAgICBfaXRlcmF0b3I2LmUoZXJyKTsKICAgICAgfSBmaW5hbGx5IHsKICAgICAgICBfaXRlcmF0b3I2LmYoKTsKICAgICAgfQoKICAgICAgdGhpcy5fY2xlYXJDb252ZXJzaW9uQXBpKCk7CiAgICB9CiAgICAvKioKICAgICAqIFN0YXJ0cyB0aGUgcmVjb252ZXJzaW9uIG9mIGFuIGVsZW1lbnQuIEl0IHdpbGw6CiAgICAgKgogICAgICogKiBGaXJlIGFuIHtAbGluayAjZXZlbnQ6aW5zZXJ0IGBpbnNlcnRgIGV2ZW50fSBmb3IgdGhlIGVsZW1lbnQgdG8gcmVjb252ZXJ0LgogICAgICogKiBGaXJlIGFuIHtAbGluayAjZXZlbnQ6YXR0cmlidXRlIGBhdHRyaWJ1dGVgIGV2ZW50fSBmb3IgZWxlbWVudCBhdHRyaWJ1dGVzLgogICAgICoKICAgICAqIFRoaXMgd2lsbCBub3QgcmVjb252ZXJ0IGNoaWxkcmVuIG9mIHRoZSBlbGVtZW50IGlmIHRoZXkgaGF2ZSBleGlzdGluZyAoYWxyZWFkeSBjb252ZXJ0ZWQpIHZpZXdzLiBGb3IgbmV3bHkgaW5zZXJ0ZWQgY2hpbGQgZWxlbWVudHMKICAgICAqIGl0IHdpbGwgYmVoYXZlIHRoZSBzYW1lIGFzIHtAbGluayAjY29udmVydEluc2VydH0uCiAgICAgKgogICAgICogRWxlbWVudCByZWNvbnZlcnNpb24gaXMgZGVmaW5lZCBieSB0aGUgYHRyaWdnZXJCeWAgY29uZmlndXJhdGlvbiBmb3IgdGhlCiAgICAgKiB7QGxpbmsgbW9kdWxlOmVuZ2luZS9jb252ZXJzaW9uL2Rvd25jYXN0aGVscGVyc35Eb3duY2FzdEhlbHBlcnMjZWxlbWVudFRvRWxlbWVudCBgZWxlbWVudFRvRWxlbWVudCgpYH0gY29udmVyc2lvbiBoZWxwZXIuCiAgICAgKgogICAgICogQGZpcmVzIGluc2VydAogICAgICogQGZpcmVzIGF0dHJpYnV0ZQogICAgICogQHBhcmFtIHttb2R1bGU6ZW5naW5lL21vZGVsL2VsZW1lbnR+RWxlbWVudH0gZWxlbWVudCBUaGUgZWxlbWVudCB0byBiZSByZWNvbnZlcnRlZC4KICAgICAqIEBwYXJhbSB7bW9kdWxlOmVuZ2luZS92aWV3L2Rvd25jYXN0d3JpdGVyfkRvd25jYXN0V3JpdGVyfSB3cml0ZXIgVGhlIHZpZXcgd3JpdGVyIHRoYXQgc2hvdWxkIGJlIHVzZWQgdG8gbW9kaWZ5IHRoZSB2aWV3IGRvY3VtZW50LgogICAgICovCgogIH0sIHsKICAgIGtleTogInJlY29udmVydEVsZW1lbnQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlY29udmVydEVsZW1lbnQoZWxlbWVudCwgd3JpdGVyKSB7CiAgICAgIHZhciBlbGVtZW50UmFuZ2UgPSBSYW5nZS5fY3JlYXRlT24oZWxlbWVudCk7CgogICAgICB0aGlzLmNvbnZlcnNpb25BcGkud3JpdGVyID0gd3JpdGVyOyAvLyBDcmVhdGUgYSBsaXN0IG9mIHRoaW5ncyB0aGF0IGNhbiBiZSBjb25zdW1lZCwgY29uc2lzdGluZyBvZiBub2RlcyBhbmQgdGhlaXIgYXR0cmlidXRlcy4KCiAgICAgIHRoaXMuY29udmVyc2lvbkFwaS5jb25zdW1hYmxlID0gdGhpcy5fY3JlYXRlSW5zZXJ0Q29uc3VtYWJsZShlbGVtZW50UmFuZ2UpOwogICAgICB2YXIgbWFwcGVyID0gdGhpcy5jb252ZXJzaW9uQXBpLm1hcHBlcjsKICAgICAgdmFyIGN1cnJlbnRWaWV3ID0gbWFwcGVyLnRvVmlld0VsZW1lbnQoZWxlbWVudCk7IC8vIFJlbW92ZSB0aGUgb2xkIHZpZXcgYnV0IGRvIG5vdCByZW1vdmUgbWFwcGVyIG1hcHBpbmdzIC0gdGhvc2Ugd2lsbCBiZSB1c2VkIHRvIHJldml2ZSBleGlzdGluZyBlbGVtZW50cy4KCiAgICAgIHdyaXRlci5yZW1vdmUoY3VycmVudFZpZXcpOyAvLyBDb252ZXJ0IHRoZSBlbGVtZW50IC0gd2l0aG91dCBjb252ZXJ0aW5nIGNoaWxkcmVuLgoKICAgICAgdGhpcy5fY29udmVydEluc2VydFdpdGhBdHRyaWJ1dGVzKHsKICAgICAgICBpdGVtOiBlbGVtZW50LAogICAgICAgIHJhbmdlOiBlbGVtZW50UmFuZ2UKICAgICAgfSk7CgogICAgICB2YXIgY29udmVydGVkVmlld0VsZW1lbnQgPSBtYXBwZXIudG9WaWV3RWxlbWVudChlbGVtZW50KTsgLy8gSXRlcmF0ZSBvdmVyIGNoaWxkcmVuIG9mIHJlY29udmVydGVkIGVsZW1lbnQgaW4gb3JkZXIgdG8uLi4KCiAgICAgIHZhciBfaXRlcmF0b3I3ID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIoUmFuZ2UuX2NyZWF0ZUluKGVsZW1lbnQpKSwKICAgICAgICAgIF9zdGVwNzsKCiAgICAgIHRyeSB7CiAgICAgICAgZm9yIChfaXRlcmF0b3I3LnMoKTsgIShfc3RlcDcgPSBfaXRlcmF0b3I3Lm4oKSkuZG9uZTspIHsKICAgICAgICAgIHZhciB2YWx1ZSA9IF9zdGVwNy52YWx1ZTsKICAgICAgICAgIHZhciBpdGVtID0gdmFsdWUuaXRlbTsKICAgICAgICAgIHZhciB2aWV3ID0gZWxlbWVudE9yVGV4dFByb3h5VG9WaWV3KGl0ZW0sIG1hcHBlcik7IC8vIC4uLmVpdGhlciBicmluZyBiYWNrIHByZXZpb3VzbHkgY29udmVydGVkIHZpZXcuLi4KCiAgICAgICAgICBpZiAodmlldykgewogICAgICAgICAgICAvLyBEbyBub3QgbW92ZSB2aWV3cyB0aGF0IGFyZSBhbHJlYWR5IGluIGNvbnZlcnRlZCBlbGVtZW50IC0gdGhvc2UgbWlnaHQgYmUgY3JlYXRlZCBieSB0aGUgbWFpbiBlbGVtZW50IGNvbnZlcnRlciBpbiBjYXNlCiAgICAgICAgICAgIC8vIHdoZW4gbWFpbiBlbGVtZW50IGNvbnZlcnRzIGFsc28gaXRzIGRpcmVjdCBjaGlsZHJlbi4KICAgICAgICAgICAgaWYgKHZpZXcucm9vdCAhPT0gY29udmVydGVkVmlld0VsZW1lbnQucm9vdCkgewogICAgICAgICAgICAgIHdyaXRlci5tb3ZlKHdyaXRlci5jcmVhdGVSYW5nZU9uKHZpZXcpLCBtYXBwZXIudG9WaWV3UG9zaXRpb24oUG9zaXRpb24uX2NyZWF0ZUJlZm9yZShpdGVtKSkpOwogICAgICAgICAgICB9CiAgICAgICAgICB9IC8vIC4uLiBvciBieSBjb252ZXJ0aW5nIG5ld2x5IGluc2VydGVkIGVsZW1lbnRzLgogICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgdGhpcy5fY29udmVydEluc2VydFdpdGhBdHRyaWJ1dGVzKHdhbGtlclZhbHVlVG9FdmVudERhdGEodmFsdWUpKTsKICAgICAgICAgICAgfQogICAgICAgIH0gLy8gQWZ0ZXIgcmVjb252ZXJzaW9uIGlzIGRvbmUgd2UgY2FuIHVuYmluZCB0aGUgb2xkIHZpZXcuCgogICAgICB9IGNhdGNoIChlcnIpIHsKICAgICAgICBfaXRlcmF0b3I3LmUoZXJyKTsKICAgICAgfSBmaW5hbGx5IHsKICAgICAgICBfaXRlcmF0b3I3LmYoKTsKICAgICAgfQoKICAgICAgbWFwcGVyLnVuYmluZFZpZXdFbGVtZW50KGN1cnJlbnRWaWV3KTsKCiAgICAgIHRoaXMuX2NsZWFyQ29udmVyc2lvbkFwaSgpOwogICAgfQogICAgLyoqCiAgICAgKiBTdGFydHMgdGhlIG1vZGVsIHNlbGVjdGlvbiBjb252ZXJzaW9uLgogICAgICoKICAgICAqIEZpcmVzIGV2ZW50cyBmb3IgYSBnaXZlbiB7QGxpbmsgbW9kdWxlOmVuZ2luZS9tb2RlbC9zZWxlY3Rpb25+U2VsZWN0aW9uIHNlbGVjdGlvbn0gdG8gc3RhcnQgdGhlIHNlbGVjdGlvbiBjb252ZXJzaW9uLgogICAgICoKICAgICAqIEBmaXJlcyBzZWxlY3Rpb24KICAgICAqIEBmaXJlcyBhZGRNYXJrZXIKICAgICAqIEBmaXJlcyBhdHRyaWJ1dGUKICAgICAqIEBwYXJhbSB7bW9kdWxlOmVuZ2luZS9tb2RlbC9zZWxlY3Rpb25+U2VsZWN0aW9ufSBzZWxlY3Rpb24gVGhlIHNlbGVjdGlvbiB0byBjb252ZXJ0LgogICAgICogQHBhcmFtIHttb2R1bGU6ZW5naW5lL21vZGVsL21hcmtlcmNvbGxlY3Rpb25+TWFya2VyQ29sbGVjdGlvbn0gbWFya2VycyBNYXJrZXJzIGNvbm5lY3RlZCB3aXRoIHRoZSBjb252ZXJ0ZWQgbW9kZWwuCiAgICAgKiBAcGFyYW0ge21vZHVsZTplbmdpbmUvdmlldy9kb3duY2FzdHdyaXRlcn5Eb3duY2FzdFdyaXRlcn0gd3JpdGVyIFZpZXcgd3JpdGVyIHRoYXQgc2hvdWxkIGJlIHVzZWQgdG8gbW9kaWZ5IHRoZSB2aWV3IGRvY3VtZW50LgogICAgICovCgogIH0sIHsKICAgIGtleTogImNvbnZlcnRTZWxlY3Rpb24iLAogICAgdmFsdWU6IGZ1bmN0aW9uIGNvbnZlcnRTZWxlY3Rpb24oc2VsZWN0aW9uLCBtYXJrZXJzLCB3cml0ZXIpIHsKICAgICAgdmFyIG1hcmtlcnNBdFNlbGVjdGlvbiA9IEFycmF5LmZyb20obWFya2Vycy5nZXRNYXJrZXJzQXRQb3NpdGlvbihzZWxlY3Rpb24uZ2V0Rmlyc3RQb3NpdGlvbigpKSk7CiAgICAgIHRoaXMuY29udmVyc2lvbkFwaS53cml0ZXIgPSB3cml0ZXI7CiAgICAgIHRoaXMuY29udmVyc2lvbkFwaS5jb25zdW1hYmxlID0gdGhpcy5fY3JlYXRlU2VsZWN0aW9uQ29uc3VtYWJsZShzZWxlY3Rpb24sIG1hcmtlcnNBdFNlbGVjdGlvbik7CiAgICAgIHRoaXMuZmlyZSgnc2VsZWN0aW9uJywgewogICAgICAgIHNlbGVjdGlvbjogc2VsZWN0aW9uCiAgICAgIH0sIHRoaXMuY29udmVyc2lvbkFwaSk7CgogICAgICBpZiAoIXNlbGVjdGlvbi5pc0NvbGxhcHNlZCkgewogICAgICAgIHJldHVybjsKICAgICAgfQoKICAgICAgZm9yICh2YXIgX2kgPSAwLCBfbWFya2Vyc0F0U2VsZWN0aW9uID0gbWFya2Vyc0F0U2VsZWN0aW9uOyBfaSA8IF9tYXJrZXJzQXRTZWxlY3Rpb24ubGVuZ3RoOyBfaSsrKSB7CiAgICAgICAgdmFyIG1hcmtlciA9IF9tYXJrZXJzQXRTZWxlY3Rpb25bX2ldOwogICAgICAgIHZhciBtYXJrZXJSYW5nZSA9IG1hcmtlci5nZXRSYW5nZSgpOwoKICAgICAgICBpZiAoIXNob3VsZE1hcmtlckNoYW5nZUJlQ29udmVydGVkKHNlbGVjdGlvbi5nZXRGaXJzdFBvc2l0aW9uKCksIG1hcmtlciwgdGhpcy5jb252ZXJzaW9uQXBpLm1hcHBlcikpIHsKICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgIH0KCiAgICAgICAgdmFyIGRhdGEgPSB7CiAgICAgICAgICBpdGVtOiBzZWxlY3Rpb24sCiAgICAgICAgICBtYXJrZXJOYW1lOiBtYXJrZXIubmFtZSwKICAgICAgICAgIG1hcmtlclJhbmdlOiBtYXJrZXJSYW5nZQogICAgICAgIH07CgogICAgICAgIGlmICh0aGlzLmNvbnZlcnNpb25BcGkuY29uc3VtYWJsZS50ZXN0KHNlbGVjdGlvbiwgJ2FkZE1hcmtlcjonICsgbWFya2VyLm5hbWUpKSB7CiAgICAgICAgICB0aGlzLmZpcmUoJ2FkZE1hcmtlcjonICsgbWFya2VyLm5hbWUsIGRhdGEsIHRoaXMuY29udmVyc2lvbkFwaSk7CiAgICAgICAgfQogICAgICB9CgogICAgICB2YXIgX2l0ZXJhdG9yOCA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKHNlbGVjdGlvbi5nZXRBdHRyaWJ1dGVLZXlzKCkpLAogICAgICAgICAgX3N0ZXA4OwoKICAgICAgdHJ5IHsKICAgICAgICBmb3IgKF9pdGVyYXRvcjgucygpOyAhKF9zdGVwOCA9IF9pdGVyYXRvcjgubigpKS5kb25lOykgewogICAgICAgICAgdmFyIGtleSA9IF9zdGVwOC52YWx1ZTsKICAgICAgICAgIHZhciBfZGF0YSA9IHsKICAgICAgICAgICAgaXRlbTogc2VsZWN0aW9uLAogICAgICAgICAgICByYW5nZTogc2VsZWN0aW9uLmdldEZpcnN0UmFuZ2UoKSwKICAgICAgICAgICAgYXR0cmlidXRlS2V5OiBrZXksCiAgICAgICAgICAgIGF0dHJpYnV0ZU9sZFZhbHVlOiBudWxsLAogICAgICAgICAgICBhdHRyaWJ1dGVOZXdWYWx1ZTogc2VsZWN0aW9uLmdldEF0dHJpYnV0ZShrZXkpCiAgICAgICAgICB9OyAvLyBEbyBub3QgZmlyZSBldmVudCBpZiB0aGUgYXR0cmlidXRlIGhhcyBiZWVuIGNvbnN1bWVkLgoKICAgICAgICAgIGlmICh0aGlzLmNvbnZlcnNpb25BcGkuY29uc3VtYWJsZS50ZXN0KHNlbGVjdGlvbiwgJ2F0dHJpYnV0ZTonICsgX2RhdGEuYXR0cmlidXRlS2V5KSkgewogICAgICAgICAgICB0aGlzLmZpcmUoJ2F0dHJpYnV0ZTonICsgX2RhdGEuYXR0cmlidXRlS2V5ICsgJzokdGV4dCcsIF9kYXRhLCB0aGlzLmNvbnZlcnNpb25BcGkpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSBjYXRjaCAoZXJyKSB7CiAgICAgICAgX2l0ZXJhdG9yOC5lKGVycik7CiAgICAgIH0gZmluYWxseSB7CiAgICAgICAgX2l0ZXJhdG9yOC5mKCk7CiAgICAgIH0KCiAgICAgIHRoaXMuX2NsZWFyQ29udmVyc2lvbkFwaSgpOwogICAgfQogICAgLyoqCiAgICAgKiBDb252ZXJ0cyB0aGUgYWRkZWQgbWFya2VyLiBGaXJlcyB0aGUge0BsaW5rICNldmVudDphZGRNYXJrZXIgYGFkZE1hcmtlcmB9IGV2ZW50IGZvciBlYWNoIGl0ZW0KICAgICAqIGluIHRoZSBtYXJrZXIncyByYW5nZS4gSWYgdGhlIHJhbmdlIGlzIGNvbGxhcHNlZCwgYSBzaW5nbGUgZXZlbnQgaXMgZGlzcGF0Y2hlZC4gU2VlIHRoZSBldmVudCBkZXNjcmlwdGlvbiBmb3IgbW9yZSBkZXRhaWxzLgogICAgICoKICAgICAqIEBmaXJlcyBhZGRNYXJrZXIKICAgICAqIEBwYXJhbSB7U3RyaW5nfSBtYXJrZXJOYW1lIE1hcmtlciBuYW1lLgogICAgICogQHBhcmFtIHttb2R1bGU6ZW5naW5lL21vZGVsL3JhbmdlflJhbmdlfSBtYXJrZXJSYW5nZSBUaGUgbWFya2VyIHJhbmdlLgogICAgICogQHBhcmFtIHttb2R1bGU6ZW5naW5lL3ZpZXcvZG93bmNhc3R3cml0ZXJ+RG93bmNhc3RXcml0ZXJ9IHdyaXRlciBWaWV3IHdyaXRlciB0aGF0IHNob3VsZCBiZSB1c2VkIHRvIG1vZGlmeSB0aGUgdmlldyBkb2N1bWVudC4KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJjb252ZXJ0TWFya2VyQWRkIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBjb252ZXJ0TWFya2VyQWRkKG1hcmtlck5hbWUsIG1hcmtlclJhbmdlLCB3cml0ZXIpIHsKICAgICAgLy8gRG8gbm90IGNvbnZlcnQgaWYgcmFuZ2UgaXMgaW4gZ3JhdmV5YXJkLgogICAgICBpZiAobWFya2VyUmFuZ2Uucm9vdC5yb290TmFtZSA9PSAnJGdyYXZleWFyZCcpIHsKICAgICAgICByZXR1cm47CiAgICAgIH0KCiAgICAgIHRoaXMuY29udmVyc2lvbkFwaS53cml0ZXIgPSB3cml0ZXI7IC8vIEluIG1hcmtlcnMnIGNhc2UsIGV2ZW50IG5hbWUgPT0gY29uc3VtYWJsZSBuYW1lLgoKICAgICAgdmFyIGV2ZW50TmFtZSA9ICdhZGRNYXJrZXI6JyArIG1hcmtlck5hbWU7IC8vCiAgICAgIC8vIEZpcnN0LCBmaXJlIGFuIGV2ZW50IGZvciB0aGUgd2hvbGUgbWFya2VyLgogICAgICAvLwoKICAgICAgdmFyIGNvbnN1bWFibGUgPSBuZXcgQ29uc3VtYWJsZSgpOwogICAgICBjb25zdW1hYmxlLmFkZChtYXJrZXJSYW5nZSwgZXZlbnROYW1lKTsKICAgICAgdGhpcy5jb252ZXJzaW9uQXBpLmNvbnN1bWFibGUgPSBjb25zdW1hYmxlOwogICAgICB0aGlzLmZpcmUoZXZlbnROYW1lLCB7CiAgICAgICAgbWFya2VyTmFtZTogbWFya2VyTmFtZSwKICAgICAgICBtYXJrZXJSYW5nZTogbWFya2VyUmFuZ2UKICAgICAgfSwgdGhpcy5jb252ZXJzaW9uQXBpKTsgLy8KICAgICAgLy8gRG8gbm90IGZpcmUgZXZlbnRzIGZvciBlYWNoIGl0ZW0gaW5zaWRlIHRoZSByYW5nZSBpZiB0aGUgcmFuZ2UgZ290IGNvbnN1bWVkLgogICAgICAvLwoKICAgICAgaWYgKCFjb25zdW1hYmxlLnRlc3QobWFya2VyUmFuZ2UsIGV2ZW50TmFtZSkpIHsKICAgICAgICByZXR1cm47CiAgICAgIH0gLy8KICAgICAgLy8gVGhlbiwgZmlyZSBhbiBldmVudCBmb3IgZWFjaCBpdGVtIGluc2lkZSB0aGUgbWFya2VyIHJhbmdlLgogICAgICAvLwoKCiAgICAgIHRoaXMuY29udmVyc2lvbkFwaS5jb25zdW1hYmxlID0gdGhpcy5fY3JlYXRlQ29uc3VtYWJsZUZvclJhbmdlKG1hcmtlclJhbmdlLCBldmVudE5hbWUpOwoKICAgICAgdmFyIF9pdGVyYXRvcjkgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihtYXJrZXJSYW5nZS5nZXRJdGVtcygpKSwKICAgICAgICAgIF9zdGVwOTsKCiAgICAgIHRyeSB7CiAgICAgICAgZm9yIChfaXRlcmF0b3I5LnMoKTsgIShfc3RlcDkgPSBfaXRlcmF0b3I5Lm4oKSkuZG9uZTspIHsKICAgICAgICAgIHZhciBpdGVtID0gX3N0ZXA5LnZhbHVlOwoKICAgICAgICAgIC8vIERvIG5vdCBmaXJlIGV2ZW50IGZvciBhbHJlYWR5IGNvbnN1bWVkIGl0ZW1zLgogICAgICAgICAgaWYgKCF0aGlzLmNvbnZlcnNpb25BcGkuY29uc3VtYWJsZS50ZXN0KGl0ZW0sIGV2ZW50TmFtZSkpIHsKICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICB9CgogICAgICAgICAgdmFyIGRhdGEgPSB7CiAgICAgICAgICAgIGl0ZW06IGl0ZW0sCiAgICAgICAgICAgIHJhbmdlOiBSYW5nZS5fY3JlYXRlT24oaXRlbSksCiAgICAgICAgICAgIG1hcmtlck5hbWU6IG1hcmtlck5hbWUsCiAgICAgICAgICAgIG1hcmtlclJhbmdlOiBtYXJrZXJSYW5nZQogICAgICAgICAgfTsKICAgICAgICAgIHRoaXMuZmlyZShldmVudE5hbWUsIGRhdGEsIHRoaXMuY29udmVyc2lvbkFwaSk7CiAgICAgICAgfQogICAgICB9IGNhdGNoIChlcnIpIHsKICAgICAgICBfaXRlcmF0b3I5LmUoZXJyKTsKICAgICAgfSBmaW5hbGx5IHsKICAgICAgICBfaXRlcmF0b3I5LmYoKTsKICAgICAgfQoKICAgICAgdGhpcy5fY2xlYXJDb252ZXJzaW9uQXBpKCk7CiAgICB9CiAgICAvKioKICAgICAqIEZpcmVzIHRoZSBjb252ZXJzaW9uIG9mIHRoZSBtYXJrZXIgcmVtb3ZhbC4gRmlyZXMgdGhlIHtAbGluayAjZXZlbnQ6cmVtb3ZlTWFya2VyIGByZW1vdmVNYXJrZXJgfSBldmVudCB3aXRoIHRoZSBwcm92aWRlZCBkYXRhLgogICAgICoKICAgICAqIEBmaXJlcyByZW1vdmVNYXJrZXIKICAgICAqIEBwYXJhbSB7U3RyaW5nfSBtYXJrZXJOYW1lIE1hcmtlciBuYW1lLgogICAgICogQHBhcmFtIHttb2R1bGU6ZW5naW5lL21vZGVsL3JhbmdlflJhbmdlfSBtYXJrZXJSYW5nZSBUaGUgbWFya2VyIHJhbmdlLgogICAgICogQHBhcmFtIHttb2R1bGU6ZW5naW5lL3ZpZXcvZG93bmNhc3R3cml0ZXJ+RG93bmNhc3RXcml0ZXJ9IHdyaXRlciBWaWV3IHdyaXRlciB0aGF0IHNob3VsZCBiZSB1c2VkIHRvIG1vZGlmeSB0aGUgdmlldyBkb2N1bWVudC4KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJjb252ZXJ0TWFya2VyUmVtb3ZlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBjb252ZXJ0TWFya2VyUmVtb3ZlKG1hcmtlck5hbWUsIG1hcmtlclJhbmdlLCB3cml0ZXIpIHsKICAgICAgLy8gRG8gbm90IGNvbnZlcnQgaWYgcmFuZ2UgaXMgaW4gZ3JhdmV5YXJkLgogICAgICBpZiAobWFya2VyUmFuZ2Uucm9vdC5yb290TmFtZSA9PSAnJGdyYXZleWFyZCcpIHsKICAgICAgICByZXR1cm47CiAgICAgIH0KCiAgICAgIHRoaXMuY29udmVyc2lvbkFwaS53cml0ZXIgPSB3cml0ZXI7CiAgICAgIHRoaXMuZmlyZSgncmVtb3ZlTWFya2VyOicgKyBtYXJrZXJOYW1lLCB7CiAgICAgICAgbWFya2VyTmFtZTogbWFya2VyTmFtZSwKICAgICAgICBtYXJrZXJSYW5nZTogbWFya2VyUmFuZ2UKICAgICAgfSwgdGhpcy5jb252ZXJzaW9uQXBpKTsKCiAgICAgIHRoaXMuX2NsZWFyQ29udmVyc2lvbkFwaSgpOwogICAgfQogICAgLyoqCiAgICAgKiBNYXBzIHRoZSBtb2RlbCBlbGVtZW50ICJpbnNlcnQiIHJlY29udmVyc2lvbiBmb3IgZ2l2ZW4gZXZlbnQgbmFtZXMuIFRoZSBldmVudCBuYW1lcyBtdXN0IGJlIGZ1bGx5IHNwZWNpZmllZDoKICAgICAqCiAgICAgKiAqIEZvciAiYXR0cmlidXRlIiBjaGFuZ2UgZXZlbnQsIGl0IHNob3VsZCBpbmNsdWRlIHRoZSBtYWluIGVsZW1lbnQgbmFtZSwgaS5lOiBgJ2F0dHJpYnV0ZTphdHRyaWJ1dGVOYW1lOmVsZW1lbnROYW1lJ2AuCiAgICAgKiAqIEZvciBjaGlsZCBub2RlIGNoYW5nZSBldmVudHMsIHRoZXNlIHNob3VsZCB1c2UgdGhlIGNoaWxkIGV2ZW50IG5hbWUgYXMgd2VsbCwgaS5lOgogICAgICogICAgICogRm9yIGFkZGluZyBhIG5vZGU6IGAnaW5zZXJ0OmNoaWxkRWxlbWVudE5hbWUnYC4KICAgICAqICAgICAqIEZvciByZW1vdmluZyBhIG5vZGU6IGAncmVtb3ZlOmNoaWxkRWxlbWVudE5hbWUnYC4KICAgICAqCiAgICAgKiAqKk5vdGUqKjogVGhpcyBtZXRob2Qgc2hvdWxkIG5vdCBiZSB1c2VkIGRpcmVjdGx5LiBUaGUgcmVjb252ZXJzaW9uIGlzIGRlZmluZWQgYnkgdGhlIGB0cmlnZ2VyQnkoKWAgY29uZmlndXJhdGlvbiBvZiB0aGUKICAgICAqIGBlbGVtZW50VG9FbGVtZW50KClgIGNvbnZlcnNpb24gaGVscGVyLgogICAgICoKICAgICAqIEBwcm90ZWN0ZWQKICAgICAqIEBwYXJhbSB7U3RyaW5nfSBtb2RlbE5hbWUgVGhlIG5hbWUgb2YgdGhlIG1haW4gbW9kZWwgZWxlbWVudCBmb3Igd2hpY2ggdGhlIGV2ZW50cyB3aWxsIHRyaWdnZXIgdGhlIHJlY29udmVyc2lvbi4KICAgICAqIEBwYXJhbSB7U3RyaW5nfSBldmVudE5hbWUgVGhlIG5hbWUgb2YgYW4gZXZlbnQgdGhhdCB3b3VsZCB0cmlnZ2VyIGNvbnZlcnNpb24gZm9yIGEgZ2l2ZW4gbW9kZWwgZWxlbWVudC4KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJfbWFwUmVjb252ZXJzaW9uVHJpZ2dlckV2ZW50IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBfbWFwUmVjb252ZXJzaW9uVHJpZ2dlckV2ZW50KG1vZGVsTmFtZSwgZXZlbnROYW1lKSB7CiAgICAgIHRoaXMuX3JlY29udmVyc2lvbkV2ZW50c01hcHBpbmcuc2V0KGV2ZW50TmFtZSwgbW9kZWxOYW1lKTsKICAgIH0KICAgIC8qKgogICAgICogQ3JlYXRlcyB7QGxpbmsgbW9kdWxlOmVuZ2luZS9jb252ZXJzaW9uL21vZGVsY29uc3VtYWJsZX5Nb2RlbENvbnN1bWFibGV9IHdpdGggdmFsdWVzIHRvIGNvbnN1bWUgZnJvbSBhIGdpdmVuIHJhbmdlLAogICAgICogYXNzdW1pbmcgdGhhdCB0aGUgcmFuZ2UgaGFzIGp1c3QgYmVlbiBpbnNlcnRlZCB0byB0aGUgbW9kZWwuCiAgICAgKgogICAgICogQHByaXZhdGUKICAgICAqIEBwYXJhbSB7bW9kdWxlOmVuZ2luZS9tb2RlbC9yYW5nZX5SYW5nZX0gcmFuZ2UgVGhlIGluc2VydGVkIHJhbmdlLgogICAgICogQHJldHVybnMge21vZHVsZTplbmdpbmUvY29udmVyc2lvbi9tb2RlbGNvbnN1bWFibGV+TW9kZWxDb25zdW1hYmxlfSBUaGUgdmFsdWVzIHRvIGNvbnN1bWUuCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAiX2NyZWF0ZUluc2VydENvbnN1bWFibGUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9jcmVhdGVJbnNlcnRDb25zdW1hYmxlKHJhbmdlKSB7CiAgICAgIHZhciBjb25zdW1hYmxlID0gbmV3IENvbnN1bWFibGUoKTsKCiAgICAgIHZhciBfaXRlcmF0b3IxMCA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKHJhbmdlKSwKICAgICAgICAgIF9zdGVwMTA7CgogICAgICB0cnkgewogICAgICAgIGZvciAoX2l0ZXJhdG9yMTAucygpOyAhKF9zdGVwMTAgPSBfaXRlcmF0b3IxMC5uKCkpLmRvbmU7KSB7CiAgICAgICAgICB2YXIgdmFsdWUgPSBfc3RlcDEwLnZhbHVlOwogICAgICAgICAgdmFyIGl0ZW0gPSB2YWx1ZS5pdGVtOwogICAgICAgICAgY29uc3VtYWJsZS5hZGQoaXRlbSwgJ2luc2VydCcpOwoKICAgICAgICAgIHZhciBfaXRlcmF0b3IxMSA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKGl0ZW0uZ2V0QXR0cmlidXRlS2V5cygpKSwKICAgICAgICAgICAgICBfc3RlcDExOwoKICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgIGZvciAoX2l0ZXJhdG9yMTEucygpOyAhKF9zdGVwMTEgPSBfaXRlcmF0b3IxMS5uKCkpLmRvbmU7KSB7CiAgICAgICAgICAgICAgdmFyIGtleSA9IF9zdGVwMTEudmFsdWU7CiAgICAgICAgICAgICAgY29uc3VtYWJsZS5hZGQoaXRlbSwgJ2F0dHJpYnV0ZTonICsga2V5KTsKICAgICAgICAgICAgfQogICAgICAgICAgfSBjYXRjaCAoZXJyKSB7CiAgICAgICAgICAgIF9pdGVyYXRvcjExLmUoZXJyKTsKICAgICAgICAgIH0gZmluYWxseSB7CiAgICAgICAgICAgIF9pdGVyYXRvcjExLmYoKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0gY2F0Y2ggKGVycikgewogICAgICAgIF9pdGVyYXRvcjEwLmUoZXJyKTsKICAgICAgfSBmaW5hbGx5IHsKICAgICAgICBfaXRlcmF0b3IxMC5mKCk7CiAgICAgIH0KCiAgICAgIHJldHVybiBjb25zdW1hYmxlOwogICAgfQogICAgLyoqCiAgICAgKiBDcmVhdGVzIHtAbGluayBtb2R1bGU6ZW5naW5lL2NvbnZlcnNpb24vbW9kZWxjb25zdW1hYmxlfk1vZGVsQ29uc3VtYWJsZX0gd2l0aCB2YWx1ZXMgdG8gY29uc3VtZSBmb3IgYSBnaXZlbiByYW5nZS4KICAgICAqCiAgICAgKiBAcHJpdmF0ZQogICAgICogQHBhcmFtIHttb2R1bGU6ZW5naW5lL21vZGVsL3JhbmdlflJhbmdlfSByYW5nZSBUaGUgYWZmZWN0ZWQgcmFuZ2UuCiAgICAgKiBAcGFyYW0ge1N0cmluZ30gdHlwZSBDb25zdW1hYmxlIHR5cGUuCiAgICAgKiBAcmV0dXJucyB7bW9kdWxlOmVuZ2luZS9jb252ZXJzaW9uL21vZGVsY29uc3VtYWJsZX5Nb2RlbENvbnN1bWFibGV9IFRoZSB2YWx1ZXMgdG8gY29uc3VtZS4KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJfY3JlYXRlQ29uc3VtYWJsZUZvclJhbmdlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBfY3JlYXRlQ29uc3VtYWJsZUZvclJhbmdlKHJhbmdlLCB0eXBlKSB7CiAgICAgIHZhciBjb25zdW1hYmxlID0gbmV3IENvbnN1bWFibGUoKTsKCiAgICAgIHZhciBfaXRlcmF0b3IxMiA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKHJhbmdlLmdldEl0ZW1zKCkpLAogICAgICAgICAgX3N0ZXAxMjsKCiAgICAgIHRyeSB7CiAgICAgICAgZm9yIChfaXRlcmF0b3IxMi5zKCk7ICEoX3N0ZXAxMiA9IF9pdGVyYXRvcjEyLm4oKSkuZG9uZTspIHsKICAgICAgICAgIHZhciBpdGVtID0gX3N0ZXAxMi52YWx1ZTsKICAgICAgICAgIGNvbnN1bWFibGUuYWRkKGl0ZW0sIHR5cGUpOwogICAgICAgIH0KICAgICAgfSBjYXRjaCAoZXJyKSB7CiAgICAgICAgX2l0ZXJhdG9yMTIuZShlcnIpOwogICAgICB9IGZpbmFsbHkgewogICAgICAgIF9pdGVyYXRvcjEyLmYoKTsKICAgICAgfQoKICAgICAgcmV0dXJuIGNvbnN1bWFibGU7CiAgICB9CiAgICAvKioKICAgICAqIENyZWF0ZXMge0BsaW5rIG1vZHVsZTplbmdpbmUvY29udmVyc2lvbi9tb2RlbGNvbnN1bWFibGV+TW9kZWxDb25zdW1hYmxlfSB3aXRoIHNlbGVjdGlvbiBjb25zdW1hYmxlIHZhbHVlcy4KICAgICAqCiAgICAgKiBAcHJpdmF0ZQogICAgICogQHBhcmFtIHttb2R1bGU6ZW5naW5lL21vZGVsL3NlbGVjdGlvbn5TZWxlY3Rpb259IHNlbGVjdGlvbiBUaGUgc2VsZWN0aW9uIHRvIGNyZWF0ZSB0aGUgY29uc3VtYWJsZSBmcm9tLgogICAgICogQHBhcmFtIHtJdGVyYWJsZS48bW9kdWxlOmVuZ2luZS9tb2RlbC9tYXJrZXJjb2xsZWN0aW9ufk1hcmtlcj59IG1hcmtlcnMgTWFya2VycyB0aGF0IGNvbnRhaW4gdGhlIHNlbGVjdGlvbi4KICAgICAqIEByZXR1cm5zIHttb2R1bGU6ZW5naW5lL2NvbnZlcnNpb24vbW9kZWxjb25zdW1hYmxlfk1vZGVsQ29uc3VtYWJsZX0gVGhlIHZhbHVlcyB0byBjb25zdW1lLgogICAgICovCgogIH0sIHsKICAgIGtleTogIl9jcmVhdGVTZWxlY3Rpb25Db25zdW1hYmxlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBfY3JlYXRlU2VsZWN0aW9uQ29uc3VtYWJsZShzZWxlY3Rpb24sIG1hcmtlcnMpIHsKICAgICAgdmFyIGNvbnN1bWFibGUgPSBuZXcgQ29uc3VtYWJsZSgpOwogICAgICBjb25zdW1hYmxlLmFkZChzZWxlY3Rpb24sICdzZWxlY3Rpb24nKTsKCiAgICAgIHZhciBfaXRlcmF0b3IxMyA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKG1hcmtlcnMpLAogICAgICAgICAgX3N0ZXAxMzsKCiAgICAgIHRyeSB7CiAgICAgICAgZm9yIChfaXRlcmF0b3IxMy5zKCk7ICEoX3N0ZXAxMyA9IF9pdGVyYXRvcjEzLm4oKSkuZG9uZTspIHsKICAgICAgICAgIHZhciBtYXJrZXIgPSBfc3RlcDEzLnZhbHVlOwogICAgICAgICAgY29uc3VtYWJsZS5hZGQoc2VsZWN0aW9uLCAnYWRkTWFya2VyOicgKyBtYXJrZXIubmFtZSk7CiAgICAgICAgfQogICAgICB9IGNhdGNoIChlcnIpIHsKICAgICAgICBfaXRlcmF0b3IxMy5lKGVycik7CiAgICAgIH0gZmluYWxseSB7CiAgICAgICAgX2l0ZXJhdG9yMTMuZigpOwogICAgICB9CgogICAgICB2YXIgX2l0ZXJhdG9yMTQgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihzZWxlY3Rpb24uZ2V0QXR0cmlidXRlS2V5cygpKSwKICAgICAgICAgIF9zdGVwMTQ7CgogICAgICB0cnkgewogICAgICAgIGZvciAoX2l0ZXJhdG9yMTQucygpOyAhKF9zdGVwMTQgPSBfaXRlcmF0b3IxNC5uKCkpLmRvbmU7KSB7CiAgICAgICAgICB2YXIga2V5ID0gX3N0ZXAxNC52YWx1ZTsKICAgICAgICAgIGNvbnN1bWFibGUuYWRkKHNlbGVjdGlvbiwgJ2F0dHJpYnV0ZTonICsga2V5KTsKICAgICAgICB9CiAgICAgIH0gY2F0Y2ggKGVycikgewogICAgICAgIF9pdGVyYXRvcjE0LmUoZXJyKTsKICAgICAgfSBmaW5hbGx5IHsKICAgICAgICBfaXRlcmF0b3IxNC5mKCk7CiAgICAgIH0KCiAgICAgIHJldHVybiBjb25zdW1hYmxlOwogICAgfQogICAgLyoqCiAgICAgKiBUZXN0cyBwYXNzZWQgYGNvbnN1bWFibGVgIHRvIGNoZWNrIHdoZXRoZXIgZ2l2ZW4gZXZlbnQgY2FuIGJlIGZpcmVkIGFuZCBpZiBzbywgZmlyZXMgaXQuCiAgICAgKgogICAgICogQHByaXZhdGUKICAgICAqIEBmaXJlcyBpbnNlcnQKICAgICAqIEBmaXJlcyBhdHRyaWJ1dGUKICAgICAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlIEV2ZW50IHR5cGUuCiAgICAgKiBAcGFyYW0ge09iamVjdH0gZGF0YSBFdmVudCBkYXRhLgogICAgICovCgogIH0sIHsKICAgIGtleTogIl90ZXN0QW5kRmlyZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gX3Rlc3RBbmRGaXJlKHR5cGUsIGRhdGEpIHsKICAgICAgaWYgKCF0aGlzLmNvbnZlcnNpb25BcGkuY29uc3VtYWJsZS50ZXN0KGRhdGEuaXRlbSwgdHlwZSkpIHsKICAgICAgICAvLyBEbyBub3QgZmlyZSBldmVudCBpZiB0aGUgaXRlbSB3YXMgY29uc3VtZWQuCiAgICAgICAgcmV0dXJuOwogICAgICB9CgogICAgICB0aGlzLmZpcmUoZ2V0RXZlbnROYW1lKHR5cGUsIGRhdGEpLCBkYXRhLCB0aGlzLmNvbnZlcnNpb25BcGkpOwogICAgfQogICAgLyoqCiAgICAgKiBDbGVhcnMgdGhlIGNvbnZlcnNpb24gQVBJIG9iamVjdC4KICAgICAqCiAgICAgKiBAcHJpdmF0ZQogICAgICovCgogIH0sIHsKICAgIGtleTogIl9jbGVhckNvbnZlcnNpb25BcGkiLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9jbGVhckNvbnZlcnNpb25BcGkoKSB7CiAgICAgIGRlbGV0ZSB0aGlzLmNvbnZlcnNpb25BcGkud3JpdGVyOwogICAgICBkZWxldGUgdGhpcy5jb252ZXJzaW9uQXBpLmNvbnN1bWFibGU7CiAgICB9CiAgICAvKioKICAgICAqIEludGVybmFsIG1ldGhvZCBmb3IgY29udmVydGluZyBlbGVtZW50IGluc2VydGlvbi4gSXQgd2lsbCBmaXJlIGV2ZW50cyBmb3IgdGhlIGluc2VydGVkIGVsZW1lbnQgYW5kIGV2ZW50cyBmb3IgaXRzIGF0dHJpYnV0ZXMuCiAgICAgKgogICAgICogQHByaXZhdGUKICAgICAqIEBmaXJlcyBpbnNlcnQKICAgICAqIEBmaXJlcyBhdHRyaWJ1dGUKICAgICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhIEV2ZW50IGRhdGEuCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAiX2NvbnZlcnRJbnNlcnRXaXRoQXR0cmlidXRlcyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gX2NvbnZlcnRJbnNlcnRXaXRoQXR0cmlidXRlcyhkYXRhKSB7CiAgICAgIHRoaXMuX3Rlc3RBbmRGaXJlKCdpbnNlcnQnLCBkYXRhKTsgLy8gRmlyZSBhIHNlcGFyYXRlIGFkZEF0dHJpYnV0ZSBldmVudCBmb3IgZWFjaCBhdHRyaWJ1dGUgdGhhdCB3YXMgc2V0IG9uIGluc2VydGVkIGl0ZW1zLgogICAgICAvLyBUaGlzIGlzIGltcG9ydGFudCBiZWNhdXNlIG1vc3QgYXR0cmlidXRlcyBjb252ZXJ0ZXJzIHdpbGwgbGlzdGVuIG9ubHkgdG8gYWRkL2NoYW5nZS9yZW1vdmVBdHRyaWJ1dGUgZXZlbnRzLgogICAgICAvLyBJZiB3ZSB3b3VsZCBub3QgYWRkIHRoaXMgcGFydCwgYXR0cmlidXRlcyBvbiBpbnNlcnRlZCBub2RlcyB3b3VsZCBub3QgYmUgY29udmVydGVkLgoKCiAgICAgIHZhciBfaXRlcmF0b3IxNSA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKGRhdGEuaXRlbS5nZXRBdHRyaWJ1dGVLZXlzKCkpLAogICAgICAgICAgX3N0ZXAxNTsKCiAgICAgIHRyeSB7CiAgICAgICAgZm9yIChfaXRlcmF0b3IxNS5zKCk7ICEoX3N0ZXAxNSA9IF9pdGVyYXRvcjE1Lm4oKSkuZG9uZTspIHsKICAgICAgICAgIHZhciBrZXkgPSBfc3RlcDE1LnZhbHVlOwogICAgICAgICAgZGF0YS5hdHRyaWJ1dGVLZXkgPSBrZXk7CiAgICAgICAgICBkYXRhLmF0dHJpYnV0ZU9sZFZhbHVlID0gbnVsbDsKICAgICAgICAgIGRhdGEuYXR0cmlidXRlTmV3VmFsdWUgPSBkYXRhLml0ZW0uZ2V0QXR0cmlidXRlKGtleSk7CgogICAgICAgICAgdGhpcy5fdGVzdEFuZEZpcmUoImF0dHJpYnV0ZToiLmNvbmNhdChrZXkpLCBkYXRhKTsKICAgICAgICB9CiAgICAgIH0gY2F0Y2ggKGVycikgewogICAgICAgIF9pdGVyYXRvcjE1LmUoZXJyKTsKICAgICAgfSBmaW5hbGx5IHsKICAgICAgICBfaXRlcmF0b3IxNS5mKCk7CiAgICAgIH0KICAgIH0KICAgIC8qKgogICAgICogUmV0dXJucyBkaWZmZXIgY2hhbmdlcyB0b2dldGhlciB3aXRoIGFkZGVkICJyZWNvbnZlcnQiIHR5cGUgY2hhbmdlcyBmb3Ige0BsaW5rICNyZWNvbnZlcnRFbGVtZW50fS4gVGhlc2UgYXJlIGRlZmluZWQgYnkKICAgICAqIGEgdGhlIGB0cmlnZ2VyQnkoKWAgY29uZmlndXJhdGlvbiBmb3IgdGhlCiAgICAgKiB7QGxpbmsgbW9kdWxlOmVuZ2luZS9jb252ZXJzaW9uL2Rvd25jYXN0aGVscGVyc35Eb3duY2FzdEhlbHBlcnMjZWxlbWVudFRvRWxlbWVudCBgZWxlbWVudFRvRWxlbWVudCgpYH0gY29udmVyc2lvbiBoZWxwZXIuCiAgICAgKgogICAgICogVGhpcyBtZXRob2Qgd2lsbCByZW1vdmUgZXZlcnkgbWFwcGVkIGluc2VydCBvciByZW1vdmUgY2hhbmdlIHdpdGggYSBzaW5nbGUgInJlY29udmVydCIgY2hhbmdlLgogICAgICoKICAgICAqIEZvciBpbnN0YW5jZTogSGF2aW5nIGEgYHRyaWdnZXJCeSgpYCBjb25maWd1cmF0aW9uIGRlZmluZWQgZm9yIHRoZSBgPGNvbXBsZXg+YCBlbGVtZW50IHRoYXQgaXNzdWVzIHRoaXMgZWxlbWVudCByZWNvbnZlcnNpb24gb24KICAgICAqIGBmb29gIGFuZCBgYmFyYCBhdHRyaWJ1dGVzIGNoYW5nZSwgYW5kIGEgc2V0IG9mIGNoYW5nZXMgZm9yIHRoaXMgZWxlbWVudDoKICAgICAqCiAgICAgKgkJY29uc3QgZGlmZmVyQ2hhbmdlcyA9IFsKICAgICAqCQkJeyB0eXBlOiAnYXR0cmlidXRlJywgYXR0cmlidXRlS2V5OiAnZm9vJywgLi4uIH0sCiAgICAgKgkJCXsgdHlwZTogJ2F0dHJpYnV0ZScsIGF0dHJpYnV0ZUtleTogJ2JhcicsIC4uLiB9LAogICAgICoJCQl7IHR5cGU6ICdhdHRyaWJ1dGUnLCBhdHRyaWJ1dGVLZXk6ICdiYXonLCAuLi4gfQogICAgICoJCV07CiAgICAgKgogICAgICogVGhpcyBtZXRob2Qgd2lsbCByZXR1cm46CiAgICAgKgogICAgICoJCWNvbnN0IHVwZGF0ZWRDaGFuZ2VzID0gWwogICAgICoJCQl7IHR5cGU6ICdyZWNvbnZlcnQnLCBlbGVtZW50OiBjb21wbGV4RWxlbWVudEluc3RhbmNlIH0sCiAgICAgKgkJCXsgdHlwZTogJ2F0dHJpYnV0ZScsIGF0dHJpYnV0ZUtleTogJ2JheicsIC4uLiB9CiAgICAgKgkJXTsKICAgICAqCiAgICAgKiBJbiB0aGUgZXhhbXBsZSBhYm92ZSwgdGhlIGAnYmF6J2AgYXR0cmlidXRlIGNoYW5nZSB3aWxsIGZpcmUgYW4ge0BsaW5rICNldmVudDphdHRyaWJ1dGUgYXR0cmlidXRlIGV2ZW50fQogICAgICoKICAgICAqIEBwYXJhbSB7bW9kdWxlOmVuZ2luZS9tb2RlbC9kaWZmZXJ+RGlmZmVyfSBkaWZmZXIgVGhlIGRpZmZlciBvYmplY3Qgd2l0aCBidWZmZXJlZCBjaGFuZ2VzLgogICAgICogQHJldHVybnMge0FycmF5LjxPYmplY3Q+fSBVcGRhdGVkIHNldCBvZiBjaGFuZ2VzLgogICAgICogQHByaXZhdGUKICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJfbWFwQ2hhbmdlc1dpdGhBdXRvbWF0aWNSZWNvbnZlcnNpb24iLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9tYXBDaGFuZ2VzV2l0aEF1dG9tYXRpY1JlY29udmVyc2lvbihkaWZmZXIpIHsKICAgICAgdmFyIGl0ZW1zVG9SZWNvbnZlcnQgPSBuZXcgU2V0KCk7CiAgICAgIHZhciB1cGRhdGVkID0gW107CgogICAgICB2YXIgX2l0ZXJhdG9yMTYgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihkaWZmZXIuZ2V0Q2hhbmdlcygpKSwKICAgICAgICAgIF9zdGVwMTY7CgogICAgICB0cnkgewogICAgICAgIGZvciAoX2l0ZXJhdG9yMTYucygpOyAhKF9zdGVwMTYgPSBfaXRlcmF0b3IxNi5uKCkpLmRvbmU7KSB7CiAgICAgICAgICB2YXIgZW50cnkgPSBfc3RlcDE2LnZhbHVlOwogICAgICAgICAgdmFyIHBvc2l0aW9uID0gZW50cnkucG9zaXRpb24gfHwgZW50cnkucmFuZ2Uuc3RhcnQ7IC8vIENhY2hlZCBwYXJlbnQgLSBqdXN0IGluIGNhc2UuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vY2tlZGl0b3IvY2tlZGl0b3I1L2lzc3Vlcy82NTc5LgoKICAgICAgICAgIHZhciBwb3NpdGlvblBhcmVudCA9IHBvc2l0aW9uLnBhcmVudDsKICAgICAgICAgIHZhciB0ZXh0Tm9kZSA9IGdldFRleHROb2RlQXRQb3NpdGlvbihwb3NpdGlvbiwgcG9zaXRpb25QYXJlbnQpOyAvLyBSZWNvbnZlcnNpb24gaXMgZG9uZSBvbmx5IG9uIGVsZW1lbnRzIHNvIHNraXAgdGV4dCBjaGFuZ2VzLgoKICAgICAgICAgIGlmICh0ZXh0Tm9kZSkgewogICAgICAgICAgICB1cGRhdGVkLnB1c2goZW50cnkpOwogICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgIH0KCiAgICAgICAgICB2YXIgZWxlbWVudCA9IGVudHJ5LnR5cGUgPT09ICdhdHRyaWJ1dGUnID8gZ2V0Tm9kZUFmdGVyUG9zaXRpb24ocG9zaXRpb24sIHBvc2l0aW9uUGFyZW50LCBudWxsKSA6IHBvc2l0aW9uUGFyZW50OyAvLyBDYXNlIG9mIHRleHQgbm9kZSBzZXQgZGlyZWN0bHkgaW4gcm9vdC4gRm9yIG5vdyB1c2VkIG9ubHkgaW4gdGVzdHMgYnV0IGNhbiBiZSBwb3NzaWJsZSB3aGVuIGVuYWJsZWQgaW4gcGFyYWdyYXBoLWxpa2Ugcm9vdHMuCiAgICAgICAgICAvLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9ja2VkaXRvci9ja2VkaXRvcjUvaXNzdWVzLzc2Mi4KCiAgICAgICAgICBpZiAoZWxlbWVudC5pcygnJHRleHQnKSkgewogICAgICAgICAgICB1cGRhdGVkLnB1c2goZW50cnkpOwogICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgIH0KCiAgICAgICAgICB2YXIgZXZlbnROYW1lID0gdm9pZCAwOwoKICAgICAgICAgIGlmIChlbnRyeS50eXBlID09PSAnYXR0cmlidXRlJykgewogICAgICAgICAgICBldmVudE5hbWUgPSAiYXR0cmlidXRlOiIuY29uY2F0KGVudHJ5LmF0dHJpYnV0ZUtleSwgIjoiKS5jb25jYXQoZWxlbWVudC5uYW1lKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGV2ZW50TmFtZSA9ICIiLmNvbmNhdChlbnRyeS50eXBlLCAiOiIpLmNvbmNhdChlbnRyeS5uYW1lKTsKICAgICAgICAgIH0KCiAgICAgICAgICBpZiAodGhpcy5faXNSZWNvbnZlcnRUcmlnZ2VyRXZlbnQoZXZlbnROYW1lLCBlbGVtZW50Lm5hbWUpKSB7CiAgICAgICAgICAgIGlmIChpdGVtc1RvUmVjb252ZXJ0LmhhcyhlbGVtZW50KSkgewogICAgICAgICAgICAgIC8vIEVsZW1lbnQgaXMgYWxyZWFkeSByZWNvbnZlcnRlZCwgc28gc2tpcCB0aGlzIGNoYW5nZS4KICAgICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaXRlbXNUb1JlY29udmVydC5hZGQoZWxlbWVudCk7IC8vIEFkZCBzcGVjaWFsICJyZWNvbnZlcnQiIGNoYW5nZS4KCiAgICAgICAgICAgIHVwZGF0ZWQucHVzaCh7CiAgICAgICAgICAgICAgdHlwZTogJ3JlY29udmVydCcsCiAgICAgICAgICAgICAgZWxlbWVudDogZWxlbWVudAogICAgICAgICAgICB9KTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHVwZGF0ZWQucHVzaChlbnRyeSk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9IGNhdGNoIChlcnIpIHsKICAgICAgICBfaXRlcmF0b3IxNi5lKGVycik7CiAgICAgIH0gZmluYWxseSB7CiAgICAgICAgX2l0ZXJhdG9yMTYuZigpOwogICAgICB9CgogICAgICByZXR1cm4gdXBkYXRlZDsKICAgIH0KICAgIC8qKgogICAgICogQ2hlY2tzIGlmIHRoZSByZXN1bHRpbmcgY2hhbmdlIHNob3VsZCB0cmlnZ2VyIGVsZW1lbnQgcmVjb252ZXJzaW9uLgogICAgICoKICAgICAqIFRoZXNlIGFyZSBkZWZpbmVkIGJ5IGEgYHRyaWdnZXJCeSgpYCBjb25maWd1cmF0aW9uIGZvciB0aGUKICAgICAqIHtAbGluayBtb2R1bGU6ZW5naW5lL2NvbnZlcnNpb24vZG93bmNhc3RoZWxwZXJzfkRvd25jYXN0SGVscGVycyNlbGVtZW50VG9FbGVtZW50IGBlbGVtZW50VG9FbGVtZW50KClgfSBjb252ZXJzaW9uIGhlbHBlci4KICAgICAqCiAgICAgKiBAcHJpdmF0ZQogICAgICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50TmFtZSBUaGUgZXZlbnQgbmFtZSB0byBjaGVjay4KICAgICAqIEBwYXJhbSB7U3RyaW5nfSBlbGVtZW50TmFtZSBUaGUgZWxlbWVudCBuYW1lIHRvIGNoZWNrLgogICAgICogQHJldHVybnMge0Jvb2xlYW59CiAgICAgKi8KCiAgfSwgewogICAga2V5OiAiX2lzUmVjb252ZXJ0VHJpZ2dlckV2ZW50IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBfaXNSZWNvbnZlcnRUcmlnZ2VyRXZlbnQoZXZlbnROYW1lLCBlbGVtZW50TmFtZSkgewogICAgICByZXR1cm4gdGhpcy5fcmVjb252ZXJzaW9uRXZlbnRzTWFwcGluZy5nZXQoZXZlbnROYW1lKSA9PT0gZWxlbWVudE5hbWU7CiAgICB9CiAgICAvKioKICAgICAqIEZpcmVkIGZvciBpbnNlcnRlZCBub2Rlcy4KICAgICAqCiAgICAgKiBgaW5zZXJ0YCBpcyBhIG5hbWVzcGFjZSBmb3IgYSBjbGFzcyBvZiBldmVudHMuIE5hbWVzIG9mIGFjdHVhbGx5IGNhbGxlZCBldmVudHMgZm9sbG93IHRoaXMgcGF0dGVybjoKICAgICAqIGBpbnNlcnQ6bmFtZWAuIGBuYW1lYCBpcyBlaXRoZXIgYCckdGV4dCdgLCB3aGVuIHtAbGluayBtb2R1bGU6ZW5naW5lL21vZGVsL3RleHR+VGV4dCBhIHRleHQgbm9kZX0gaGFzIGJlZW4gaW5zZXJ0ZWQsCiAgICAgKiBvciB7QGxpbmsgbW9kdWxlOmVuZ2luZS9tb2RlbC9lbGVtZW50fkVsZW1lbnQjbmFtZSBuYW1lfSBvZiBpbnNlcnRlZCBlbGVtZW50LgogICAgICoKICAgICAqIFRoaXMgd2F5IGxpc3RlbmVycyBjYW4gZWl0aGVyIGxpc3RlbiB0byBhIGdlbmVyYWwgYGluc2VydGAgZXZlbnQgb3Igc3BlY2lmaWMgZXZlbnQgKGZvciBleGFtcGxlIGBpbnNlcnQ6cGFyYWdyYXBoYCkuCiAgICAgKgogICAgICogQGV2ZW50IGluc2VydAogICAgICogQHBhcmFtIHtPYmplY3R9IGRhdGEgQWRkaXRpb25hbCBpbmZvcm1hdGlvbiBhYm91dCB0aGUgY2hhbmdlLgogICAgICogQHBhcmFtIHttb2R1bGU6ZW5naW5lL21vZGVsL2l0ZW1+SXRlbX0gZGF0YS5pdGVtIEluc2VydGVkIGl0ZW0uCiAgICAgKiBAcGFyYW0ge21vZHVsZTplbmdpbmUvbW9kZWwvcmFuZ2V+UmFuZ2V9IGRhdGEucmFuZ2UgUmFuZ2Ugc3Bhbm5pbmcgb3ZlciBpbnNlcnRlZCBpdGVtLgogICAgICogQHBhcmFtIHttb2R1bGU6ZW5naW5lL2NvbnZlcnNpb24vZG93bmNhc3RkaXNwYXRjaGVyfkRvd25jYXN0Q29udmVyc2lvbkFwaX0gY29udmVyc2lvbkFwaSBDb252ZXJzaW9uIGludGVyZmFjZQogICAgICogdG8gYmUgdXNlZCBieSBjYWxsYmFjaywgcGFzc2VkIGluIGBEb3duY2FzdERpc3BhdGNoZXJgIGNvbnN0cnVjdG9yLgogICAgICovCgogICAgLyoqCiAgICAgKiBGaXJlZCBmb3IgcmVtb3ZlZCBub2Rlcy4KICAgICAqCiAgICAgKiBgcmVtb3ZlYCBpcyBhIG5hbWVzcGFjZSBmb3IgYSBjbGFzcyBvZiBldmVudHMuIE5hbWVzIG9mIGFjdHVhbGx5IGNhbGxlZCBldmVudHMgZm9sbG93IHRoaXMgcGF0dGVybjoKICAgICAqIGByZW1vdmU6bmFtZWAuIGBuYW1lYCBpcyBlaXRoZXIgYCckdGV4dCdgLCB3aGVuIHtAbGluayBtb2R1bGU6ZW5naW5lL21vZGVsL3RleHR+VGV4dCBhIHRleHQgbm9kZX0gaGFzIGJlZW4gcmVtb3ZlZCwKICAgICAqIG9yIHRoZSB7QGxpbmsgbW9kdWxlOmVuZ2luZS9tb2RlbC9lbGVtZW50fkVsZW1lbnQjbmFtZSBuYW1lfSBvZiByZW1vdmVkIGVsZW1lbnQuCiAgICAgKgogICAgICogVGhpcyB3YXkgbGlzdGVuZXJzIGNhbiBlaXRoZXIgbGlzdGVuIHRvIGEgZ2VuZXJhbCBgcmVtb3ZlYCBldmVudCBvciBzcGVjaWZpYyBldmVudCAoZm9yIGV4YW1wbGUgYHJlbW92ZTpwYXJhZ3JhcGhgKS4KICAgICAqCiAgICAgKiBAZXZlbnQgcmVtb3ZlCiAgICAgKiBAcGFyYW0ge09iamVjdH0gZGF0YSBBZGRpdGlvbmFsIGluZm9ybWF0aW9uIGFib3V0IHRoZSBjaGFuZ2UuCiAgICAgKiBAcGFyYW0ge21vZHVsZTplbmdpbmUvbW9kZWwvcG9zaXRpb25+UG9zaXRpb259IGRhdGEucG9zaXRpb24gUG9zaXRpb24gZnJvbSB3aGljaCB0aGUgbm9kZSBoYXMgYmVlbiByZW1vdmVkLgogICAgICogQHBhcmFtIHtOdW1iZXJ9IGRhdGEubGVuZ3RoIE9mZnNldCBzaXplIG9mIHRoZSByZW1vdmVkIG5vZGUuCiAgICAgKiBAcGFyYW0ge21vZHVsZTplbmdpbmUvY29udmVyc2lvbi9kb3duY2FzdGRpc3BhdGNoZXJ+RG93bmNhc3RDb252ZXJzaW9uQXBpfSBjb252ZXJzaW9uQXBpIENvbnZlcnNpb24gaW50ZXJmYWNlCiAgICAgKiB0byBiZSB1c2VkIGJ5IGNhbGxiYWNrLCBwYXNzZWQgaW4gYERvd25jYXN0RGlzcGF0Y2hlcmAgY29uc3RydWN0b3IuCiAgICAgKi8KCiAgICAvKioKICAgICAqIEZpcmVkIGluIHRoZSBmb2xsb3dpbmcgY2FzZXM6CiAgICAgKgogICAgICogKiB3aGVuIGFuIGF0dHJpYnV0ZSBoYXMgYmVlbiBhZGRlZCwgY2hhbmdlZCwgb3IgcmVtb3ZlZCBmcm9tIGEgbm9kZSwKICAgICAqICogd2hlbiBhIG5vZGUgd2l0aCBhbiBhdHRyaWJ1dGUgaXMgaW5zZXJ0ZWQsCiAgICAgKiAqIHdoZW4gY29sbGFwc2VkIG1vZGVsIHNlbGVjdGlvbiBhdHRyaWJ1dGUgaXMgY29udmVydGVkLgogICAgICoKICAgICAqIGBhdHRyaWJ1dGVgIGlzIGEgbmFtZXNwYWNlIGZvciBhIGNsYXNzIG9mIGV2ZW50cy4gTmFtZXMgb2YgYWN0dWFsbHkgY2FsbGVkIGV2ZW50cyBmb2xsb3cgdGhpcyBwYXR0ZXJuOgogICAgICogYGF0dHJpYnV0ZTphdHRyaWJ1dGVLZXk6bmFtZWAuIGBhdHRyaWJ1dGVLZXlgIGlzIHRoZSBrZXkgb2YgYWRkZWQvY2hhbmdlZC9yZW1vdmVkIGF0dHJpYnV0ZS4KICAgICAqIGBuYW1lYCBpcyBlaXRoZXIgYCckdGV4dCdgIGlmIGNoYW5nZSB3YXMgb24ge0BsaW5rIG1vZHVsZTplbmdpbmUvbW9kZWwvdGV4dH5UZXh0IGEgdGV4dCBub2RlfSwKICAgICAqIG9yIHRoZSB7QGxpbmsgbW9kdWxlOmVuZ2luZS9tb2RlbC9lbGVtZW50fkVsZW1lbnQjbmFtZSBuYW1lfSBvZiBlbGVtZW50IHdoaWNoIGF0dHJpYnV0ZSBoYXMgY2hhbmdlZC4KICAgICAqCiAgICAgKiBUaGlzIHdheSBsaXN0ZW5lcnMgY2FuIGVpdGhlciBsaXN0ZW4gdG8gYSBnZW5lcmFsIGBhdHRyaWJ1dGU6Ym9sZGAgZXZlbnQgb3Igc3BlY2lmaWMgZXZlbnQgKGZvciBleGFtcGxlIGBhdHRyaWJ1dGU6c3JjOmltYWdlYCkuCiAgICAgKgogICAgICogQGV2ZW50IGF0dHJpYnV0ZQogICAgICogQHBhcmFtIHtPYmplY3R9IGRhdGEgQWRkaXRpb25hbCBpbmZvcm1hdGlvbiBhYm91dCB0aGUgY2hhbmdlLgogICAgICogQHBhcmFtIHttb2R1bGU6ZW5naW5lL21vZGVsL2l0ZW1+SXRlbXxtb2R1bGU6ZW5naW5lL21vZGVsL2RvY3VtZW50c2VsZWN0aW9ufkRvY3VtZW50U2VsZWN0aW9ufSBkYXRhLml0ZW0gQ2hhbmdlZCBpdGVtCiAgICAgKiBvciBjb252ZXJ0ZWQgc2VsZWN0aW9uLgogICAgICogQHBhcmFtIHttb2R1bGU6ZW5naW5lL21vZGVsL3JhbmdlflJhbmdlfSBkYXRhLnJhbmdlIFJhbmdlIHNwYW5uaW5nIG92ZXIgY2hhbmdlZCBpdGVtIG9yIHNlbGVjdGlvbiByYW5nZS4KICAgICAqIEBwYXJhbSB7U3RyaW5nfSBkYXRhLmF0dHJpYnV0ZUtleSBBdHRyaWJ1dGUga2V5LgogICAgICogQHBhcmFtIHsqfSBkYXRhLmF0dHJpYnV0ZU9sZFZhbHVlIEF0dHJpYnV0ZSB2YWx1ZSBiZWZvcmUgdGhlIGNoYW5nZS4gVGhpcyBpcyBgbnVsbGAgd2hlbiBzZWxlY3Rpb24gYXR0cmlidXRlIGlzIGNvbnZlcnRlZC4KICAgICAqIEBwYXJhbSB7Kn0gZGF0YS5hdHRyaWJ1dGVOZXdWYWx1ZSBOZXcgYXR0cmlidXRlIHZhbHVlLgogICAgICogQHBhcmFtIHttb2R1bGU6ZW5naW5lL2NvbnZlcnNpb24vZG93bmNhc3RkaXNwYXRjaGVyfkRvd25jYXN0Q29udmVyc2lvbkFwaX0gY29udmVyc2lvbkFwaSBDb252ZXJzaW9uIGludGVyZmFjZQogICAgICogdG8gYmUgdXNlZCBieSBjYWxsYmFjaywgcGFzc2VkIGluIGBEb3duY2FzdERpc3BhdGNoZXJgIGNvbnN0cnVjdG9yLgogICAgICovCgogICAgLyoqCiAgICAgKiBGaXJlZCBmb3Ige0BsaW5rIG1vZHVsZTplbmdpbmUvbW9kZWwvc2VsZWN0aW9uflNlbGVjdGlvbiBzZWxlY3Rpb259IGNoYW5nZXMuCiAgICAgKgogICAgICogQGV2ZW50IHNlbGVjdGlvbgogICAgICogQHBhcmFtIHttb2R1bGU6ZW5naW5lL21vZGVsL3NlbGVjdGlvbn5TZWxlY3Rpb259IHNlbGVjdGlvbiBTZWxlY3Rpb24gdGhhdCBpcyBjb252ZXJ0ZWQuCiAgICAgKiBAcGFyYW0ge21vZHVsZTplbmdpbmUvY29udmVyc2lvbi9kb3duY2FzdGRpc3BhdGNoZXJ+RG93bmNhc3RDb252ZXJzaW9uQXBpfSBjb252ZXJzaW9uQXBpIENvbnZlcnNpb24gaW50ZXJmYWNlCiAgICAgKiB0byBiZSB1c2VkIGJ5IGNhbGxiYWNrLCBwYXNzZWQgaW4gYERvd25jYXN0RGlzcGF0Y2hlcmAgY29uc3RydWN0b3IuCiAgICAgKi8KCiAgICAvKioKICAgICAqIEZpcmVkIHdoZW4gYSBuZXcgbWFya2VyIGlzIGFkZGVkIHRvIHRoZSBtb2RlbC4gQWxzbyBmaXJlZCB3aGVuIGEgY29sbGFwc2VkIG1vZGVsIHNlbGVjdGlvbiB0aGF0IGlzIGluc2lkZSBhIG1hcmtlciBpcyBjb252ZXJ0ZWQuCiAgICAgKgogICAgICogYGFkZE1hcmtlcmAgaXMgYSBuYW1lc3BhY2UgZm9yIGEgY2xhc3Mgb2YgZXZlbnRzLiBOYW1lcyBvZiBhY3R1YWxseSBjYWxsZWQgZXZlbnRzIGZvbGxvdyB0aGlzIHBhdHRlcm46CiAgICAgKiBgYWRkTWFya2VyOm1hcmtlck5hbWVgLiBCeSBzcGVjaWZ5aW5nIGNlcnRhaW4gbWFya2VyIG5hbWVzLCB5b3UgY2FuIG1ha2UgdGhlIGV2ZW50cyBldmVuIG1vcmUgZ3JhZHVhbC4gRm9yIGV4YW1wbGUsCiAgICAgKiBpZiBtYXJrZXJzIGFyZSBuYW1lZCBgZm9vOmFiY2AsIGBmb286YmFyYCwgdGhlbiBpdCBpcyBwb3NzaWJsZSB0byBsaXN0ZW4gdG8gYGFkZE1hcmtlcjpmb29gIG9yIGBhZGRNYXJrZXI6Zm9vOmFiY2AgYW5kCiAgICAgKiBgYWRkTWFya2VyOmZvbzpiYXJgIGV2ZW50cy4KICAgICAqCiAgICAgKiBJZiB0aGUgbWFya2VyIHJhbmdlIGlzIG5vdCBjb2xsYXBzZWQ6CiAgICAgKgogICAgICogKiB0aGUgZXZlbnQgaXMgZmlyZWQgZm9yIGVhY2ggaXRlbSBpbiB0aGUgbWFya2VyIHJhbmdlIG9uZSBieSBvbmUsCiAgICAgKiAqIGBjb252ZXJzaW9uQXBpLmNvbnN1bWFibGVgIGluY2x1ZGVzIGVhY2ggaXRlbSBvZiB0aGUgbWFya2VyIHJhbmdlIGFuZCB0aGUgY29uc3VtYWJsZSB2YWx1ZSBpcyBzYW1lIGFzIHRoZSBldmVudCBuYW1lLgogICAgICoKICAgICAqIElmIHRoZSBtYXJrZXIgcmFuZ2UgaXMgY29sbGFwc2VkOgogICAgICoKICAgICAqICogdGhlcmUgaXMgb25seSBvbmUgZXZlbnQsCiAgICAgKiAqIGBjb252ZXJzaW9uQXBpLmNvbnN1bWFibGVgIGluY2x1ZGVzIG1hcmtlciByYW5nZSB3aXRoIHRoZSBldmVudCBuYW1lLgogICAgICoKICAgICAqIElmIHRoZSBzZWxlY3Rpb24gaW5zaWRlIGEgbWFya2VyIGlzIGNvbnZlcnRlZDoKICAgICAqCiAgICAgKiAqIHRoZXJlIGlzIG9ubHkgb25lIGV2ZW50LAogICAgICogKiBgY29udmVyc2lvbkFwaS5jb25zdW1hYmxlYCBpbmNsdWRlcyB0aGUgc2VsZWN0aW9uIGluc3RhbmNlIHdpdGggdGhlIGV2ZW50IG5hbWUuCiAgICAgKgogICAgICogQGV2ZW50IGFkZE1hcmtlcgogICAgICogQHBhcmFtIHtPYmplY3R9IGRhdGEgQWRkaXRpb25hbCBpbmZvcm1hdGlvbiBhYm91dCB0aGUgY2hhbmdlLgogICAgICogQHBhcmFtIHttb2R1bGU6ZW5naW5lL21vZGVsL2l0ZW1+SXRlbXxtb2R1bGU6ZW5naW5lL21vZGVsL3NlbGVjdGlvbn5TZWxlY3Rpb259IGRhdGEuaXRlbSBJdGVtIGluc2lkZSB0aGUgbmV3IG1hcmtlciBvcgogICAgICogdGhlIHNlbGVjdGlvbiB0aGF0IGlzIGJlaW5nIGNvbnZlcnRlZC4KICAgICAqIEBwYXJhbSB7bW9kdWxlOmVuZ2luZS9tb2RlbC9yYW5nZX5SYW5nZX0gW2RhdGEucmFuZ2VdIFJhbmdlIHNwYW5uaW5nIG92ZXIgY29udmVydGVkIGl0ZW0uIEF2YWlsYWJsZSBvbmx5IGluIG1hcmtlciBjb252ZXJzaW9uLCBpZgogICAgICogdGhlIG1hcmtlciByYW5nZSB3YXMgbm90IGNvbGxhcHNlZC4KICAgICAqIEBwYXJhbSB7bW9kdWxlOmVuZ2luZS9tb2RlbC9yYW5nZX5SYW5nZX0gZGF0YS5tYXJrZXJSYW5nZSBNYXJrZXIgcmFuZ2UuCiAgICAgKiBAcGFyYW0ge1N0cmluZ30gZGF0YS5tYXJrZXJOYW1lIE1hcmtlciBuYW1lLgogICAgICogQHBhcmFtIHttb2R1bGU6ZW5naW5lL2NvbnZlcnNpb24vZG93bmNhc3RkaXNwYXRjaGVyfkRvd25jYXN0Q29udmVyc2lvbkFwaX0gY29udmVyc2lvbkFwaSBDb252ZXJzaW9uIGludGVyZmFjZQogICAgICogdG8gYmUgdXNlZCBieSBjYWxsYmFjaywgcGFzc2VkIGluIGBEb3duY2FzdERpc3BhdGNoZXJgIGNvbnN0cnVjdG9yLgogICAgICovCgogICAgLyoqCiAgICAgKiBGaXJlZCB3aGVuIGEgbWFya2VyIGlzIHJlbW92ZWQgZnJvbSB0aGUgbW9kZWwuCiAgICAgKgogICAgICogYHJlbW92ZU1hcmtlcmAgaXMgYSBuYW1lc3BhY2UgZm9yIGEgY2xhc3Mgb2YgZXZlbnRzLiBOYW1lcyBvZiBhY3R1YWxseSBjYWxsZWQgZXZlbnRzIGZvbGxvdyB0aGlzIHBhdHRlcm46CiAgICAgKiBgcmVtb3ZlTWFya2VyOm1hcmtlck5hbWVgLiBCeSBzcGVjaWZ5aW5nIGNlcnRhaW4gbWFya2VyIG5hbWVzLCB5b3UgY2FuIG1ha2UgdGhlIGV2ZW50cyBldmVuIG1vcmUgZ3JhZHVhbC4gRm9yIGV4YW1wbGUsCiAgICAgKiBpZiBtYXJrZXJzIGFyZSBuYW1lZCBgZm9vOmFiY2AsIGBmb286YmFyYCwgdGhlbiBpdCBpcyBwb3NzaWJsZSB0byBsaXN0ZW4gdG8gYHJlbW92ZU1hcmtlcjpmb29gIG9yIGByZW1vdmVNYXJrZXI6Zm9vOmFiY2AgYW5kCiAgICAgKiBgcmVtb3ZlTWFya2VyOmZvbzpiYXJgIGV2ZW50cy4KICAgICAqCiAgICAgKiBAZXZlbnQgcmVtb3ZlTWFya2VyCiAgICAgKiBAcGFyYW0ge09iamVjdH0gZGF0YSBBZGRpdGlvbmFsIGluZm9ybWF0aW9uIGFib3V0IHRoZSBjaGFuZ2UuCiAgICAgKiBAcGFyYW0ge21vZHVsZTplbmdpbmUvbW9kZWwvcmFuZ2V+UmFuZ2V9IGRhdGEubWFya2VyUmFuZ2UgTWFya2VyIHJhbmdlLgogICAgICogQHBhcmFtIHtTdHJpbmd9IGRhdGEubWFya2VyTmFtZSBNYXJrZXIgbmFtZS4KICAgICAqIEBwYXJhbSB7bW9kdWxlOmVuZ2luZS9jb252ZXJzaW9uL2Rvd25jYXN0ZGlzcGF0Y2hlcn5Eb3duY2FzdENvbnZlcnNpb25BcGl9IGNvbnZlcnNpb25BcGkgQ29udmVyc2lvbiBpbnRlcmZhY2UKICAgICAqIHRvIGJlIHVzZWQgYnkgY2FsbGJhY2ssIHBhc3NlZCBpbiBgRG93bmNhc3REaXNwYXRjaGVyYCBjb25zdHJ1Y3Rvci4KICAgICAqLwoKICB9XSk7CgogIHJldHVybiBEb3duY2FzdERpc3BhdGNoZXI7Cn0oKTsKCmV4cG9ydCB7IERvd25jYXN0RGlzcGF0Y2hlciBhcyBkZWZhdWx0IH07Cm1peChEb3duY2FzdERpc3BhdGNoZXIsIEVtaXR0ZXJNaXhpbik7IC8vIEhlbHBlciBmdW5jdGlvbiwgY2hlY2tzIHdoZXRoZXIgY2hhbmdlIG9mIGBtYXJrZXJgIGF0IGBtb2RlbFBvc2l0aW9uYCBzaG91bGQgYmUgY29udmVydGVkLiBNYXJrZXIgY2hhbmdlcyBhcmUgbm90Ci8vIGNvbnZlcnRlZCBpZiB0aGV5IGhhcHBlbiBpbnNpZGUgYW4gZWxlbWVudCB3aXRoIGN1c3RvbSBjb252ZXJzaW9uIG1ldGhvZC4KLy8KLy8gQHBhcmFtIHttb2R1bGU6ZW5naW5lL21vZGVsL3Bvc2l0aW9uflBvc2l0aW9ufSBtb2RlbFBvc2l0aW9uCi8vIEBwYXJhbSB7bW9kdWxlOmVuZ2luZS9tb2RlbC9tYXJrZXJjb2xsZWN0aW9ufk1hcmtlcn0gbWFya2VyCi8vIEBwYXJhbSB7bW9kdWxlOmVuZ2luZS9jb252ZXJzaW9uL21hcHBlcn5NYXBwZXJ9IG1hcHBlcgovLyBAcmV0dXJucyB7Qm9vbGVhbn0KCmZ1bmN0aW9uIHNob3VsZE1hcmtlckNoYW5nZUJlQ29udmVydGVkKG1vZGVsUG9zaXRpb24sIG1hcmtlciwgbWFwcGVyKSB7CiAgdmFyIHJhbmdlID0gbWFya2VyLmdldFJhbmdlKCk7CiAgdmFyIGFuY2VzdG9ycyA9IEFycmF5LmZyb20obW9kZWxQb3NpdGlvbi5nZXRBbmNlc3RvcnMoKSk7CiAgYW5jZXN0b3JzLnNoaWZ0KCk7IC8vIFJlbW92ZSByb290IGVsZW1lbnQuIEl0IGNhbm5vdCBiZSBwYXNzZWQgdG8gYG1vZGVsLlJhbmdlI2NvbnRhaW5zSXRlbWAuCgogIGFuY2VzdG9ycy5yZXZlcnNlKCk7CiAgdmFyIGhhc0N1c3RvbUhhbmRsaW5nID0gYW5jZXN0b3JzLnNvbWUoZnVuY3Rpb24gKGVsZW1lbnQpIHsKICAgIGlmIChyYW5nZS5jb250YWluc0l0ZW0oZWxlbWVudCkpIHsKICAgICAgdmFyIHZpZXdFbGVtZW50ID0gbWFwcGVyLnRvVmlld0VsZW1lbnQoZWxlbWVudCk7CiAgICAgIHJldHVybiAhIXZpZXdFbGVtZW50LmdldEN1c3RvbVByb3BlcnR5KCdhZGRIaWdobGlnaHQnKTsKICAgIH0KICB9KTsKICByZXR1cm4gIWhhc0N1c3RvbUhhbmRsaW5nOwp9CgpmdW5jdGlvbiBnZXRFdmVudE5hbWUodHlwZSwgZGF0YSkgewogIHZhciBuYW1lID0gZGF0YS5pdGVtLm5hbWUgfHwgJyR0ZXh0JzsKICByZXR1cm4gIiIuY29uY2F0KHR5cGUsICI6IikuY29uY2F0KG5hbWUpOwp9CgpmdW5jdGlvbiB3YWxrZXJWYWx1ZVRvRXZlbnREYXRhKHZhbHVlKSB7CiAgdmFyIGl0ZW0gPSB2YWx1ZS5pdGVtOwoKICB2YXIgaXRlbVJhbmdlID0gUmFuZ2UuX2NyZWF0ZUZyb21Qb3NpdGlvbkFuZFNoaWZ0KHZhbHVlLnByZXZpb3VzUG9zaXRpb24sIHZhbHVlLmxlbmd0aCk7CgogIHJldHVybiB7CiAgICBpdGVtOiBpdGVtLAogICAgcmFuZ2U6IGl0ZW1SYW5nZQogIH07Cn0KCmZ1bmN0aW9uIGVsZW1lbnRPclRleHRQcm94eVRvVmlldyhpdGVtLCBtYXBwZXIpIHsKICBpZiAoaXRlbS5pcygndGV4dFByb3h5JykpIHsKICAgIHZhciBtYXBwZWRQb3NpdGlvbiA9IG1hcHBlci50b1ZpZXdQb3NpdGlvbihQb3NpdGlvbi5fY3JlYXRlQmVmb3JlKGl0ZW0pKTsKICAgIHZhciBwb3NpdGlvblBhcmVudCA9IG1hcHBlZFBvc2l0aW9uLnBhcmVudDsKICAgIHJldHVybiBwb3NpdGlvblBhcmVudC5pcygnJHRleHQnKSA/IHBvc2l0aW9uUGFyZW50IDogbnVsbDsKICB9CgogIHJldHVybiBtYXBwZXIudG9WaWV3RWxlbWVudChpdGVtKTsKfQovKioKICogQ29udmVyc2lvbiBpbnRlcmZhY2UgdGhhdCBpcyByZWdpc3RlcmVkIGZvciBnaXZlbiB7QGxpbmsgbW9kdWxlOmVuZ2luZS9jb252ZXJzaW9uL2Rvd25jYXN0ZGlzcGF0Y2hlcn5Eb3duY2FzdERpc3BhdGNoZXJ9CiAqIGFuZCBpcyBwYXNzZWQgYXMgb25lIG9mIHBhcmFtZXRlcnMgd2hlbiB7QGxpbmsgbW9kdWxlOmVuZ2luZS9jb252ZXJzaW9uL2Rvd25jYXN0ZGlzcGF0Y2hlcn5Eb3duY2FzdERpc3BhdGNoZXIgZGlzcGF0Y2hlcn0KICogZmlyZXMgaXRzIGV2ZW50cy4KICoKICogQGludGVyZmFjZSBtb2R1bGU6ZW5naW5lL2NvbnZlcnNpb24vZG93bmNhc3RkaXNwYXRjaGVyfkRvd25jYXN0Q29udmVyc2lvbkFwaQogKi8KCi8qKgogKiBUaGUge0BsaW5rIG1vZHVsZTplbmdpbmUvY29udmVyc2lvbi9kb3duY2FzdGRpc3BhdGNoZXJ+RG93bmNhc3REaXNwYXRjaGVyfSBpbnN0YW5jZS4KICoKICogQG1lbWJlciB7bW9kdWxlOmVuZ2luZS9jb252ZXJzaW9uL2Rvd25jYXN0ZGlzcGF0Y2hlcn5Eb3duY2FzdERpc3BhdGNoZXJ9ICNkaXNwYXRjaGVyCiAqLwoKLyoqCiAqIFN0b3JlcyB0aGUgaW5mb3JtYXRpb24gYWJvdXQgd2hhdCBwYXJ0cyBvZiBhIHByb2Nlc3NlZCBtb2RlbCBpdGVtIGFyZSBzdGlsbCB3YWl0aW5nIHRvIGJlIGhhbmRsZWQuIEFmdGVyIGEgcGllY2Ugb2YgYSBtb2RlbCBpdGVtIHdhcwogKiBjb252ZXJ0ZWQsIGFuIGFwcHJvcHJpYXRlIGNvbnN1bWFibGUgdmFsdWUgc2hvdWxkIGJlIHtAbGluayBtb2R1bGU6ZW5naW5lL2NvbnZlcnNpb24vbW9kZWxjb25zdW1hYmxlfk1vZGVsQ29uc3VtYWJsZSNjb25zdW1lIGNvbnN1bWVkfS4KICoKICogQG1lbWJlciB7bW9kdWxlOmVuZ2luZS9jb252ZXJzaW9uL21vZGVsY29uc3VtYWJsZX5Nb2RlbENvbnN1bWFibGV9ICNjb25zdW1hYmxlCiAqLwoKLyoqCiAqIFRoZSB7QGxpbmsgbW9kdWxlOmVuZ2luZS9jb252ZXJzaW9uL21hcHBlcn5NYXBwZXJ9IGluc3RhbmNlLgogKgogKiBAbWVtYmVyIHttb2R1bGU6ZW5naW5lL2NvbnZlcnNpb24vbWFwcGVyfk1hcHBlcn0gI21hcHBlcgogKi8KCi8qKgogKiBUaGUge0BsaW5rIG1vZHVsZTplbmdpbmUvbW9kZWwvc2NoZW1hflNjaGVtYX0gaW5zdGFuY2Ugc2V0IGZvciB0aGUgbW9kZWwgdGhhdCBpcyBkb3duY2FzdC4KICoKICogQG1lbWJlciB7bW9kdWxlOmVuZ2luZS9tb2RlbC9zY2hlbWF+U2NoZW1hfSAjc2NoZW1hCiAqLwoKLyoqCiAqIFRoZSB7QGxpbmsgbW9kdWxlOmVuZ2luZS92aWV3L2Rvd25jYXN0d3JpdGVyfkRvd25jYXN0V3JpdGVyfSBpbnN0YW5jZSB1c2VkIHRvIG1hbmlwdWxhdGUgdGhlIGRhdGEgZHVyaW5nIGNvbnZlcnNpb24uCiAqCiAqIEBtZW1iZXIge21vZHVsZTplbmdpbmUvdmlldy9kb3duY2FzdHdyaXRlcn5Eb3duY2FzdFdyaXRlcn0gI3dyaXRlcgogKi8KCi8qKgogKiBBbiBvYmplY3Qgd2l0aCBhbiBhZGRpdGlvbmFsIGNvbmZpZ3VyYXRpb24gd2hpY2ggY2FuIGJlIHVzZWQgZHVyaW5nIHRoZSBjb252ZXJzaW9uIHByb2Nlc3MuIEF2YWlsYWJsZSBvbmx5IGZvciBkYXRhIGRvd25jYXN0IGNvbnZlcnNpb24uCiAqCiAqIEBtZW1iZXIge09iamVjdH0gI29wdGlvbnMKICov"},{"version":3,"sources":["/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-engine/src/conversion/downcastdispatcher.js"],"names":["Consumable","Range","Position","getNodeAfterPosition","getTextNodeAtPosition","EmitterMixin","mix","DowncastDispatcher","conversionApi","Object","assign","dispatcher","_reconversionEventsMapping","Map","differ","markers","writer","getMarkersToRemove","change","convertMarkerRemove","name","range","changes","_mapChangesWithAutomaticReconversion","entry","type","convertInsert","_createFromPositionAndShift","position","length","convertRemove","reconvertElement","element","convertAttribute","attributeKey","attributeOldValue","attributeNewValue","mapper","flushUnboundMarkerNames","markerName","markerRange","get","getRange","convertMarkerAdd","getMarkersToAdd","consumable","_createInsertConsumable","Array","from","map","walkerValueToEventData","data","_convertInsertWithAttributes","_clearConversionApi","fire","key","oldValue","newValue","_createConsumableForRange","value","item","itemRange","previousPosition","_testAndFire","elementRange","_createOn","currentView","toViewElement","remove","convertedViewElement","_createIn","view","elementOrTextProxyToView","root","move","createRangeOn","toViewPosition","_createBefore","unbindViewElement","selection","markersAtSelection","getMarkersAtPosition","getFirstPosition","_createSelectionConsumable","isCollapsed","marker","shouldMarkerChangeBeConverted","test","getAttributeKeys","getFirstRange","getAttribute","rootName","eventName","add","getItems","modelName","set","getEventName","itemsToReconvert","Set","updated","getChanges","start","positionParent","parent","textNode","push","is","_isReconvertTriggerEvent","has","elementName","modelPosition","ancestors","getAncestors","shift","reverse","hasCustomHandling","some","containsItem","viewElement","getCustomProperty","mappedPosition"],"mappings":";;;;;;;;;;;;;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA,OAAOA,UAAP,MAAuB,mBAAvB;AACA,OAAOC,KAAP,MAAkB,gBAAlB;AACA,OAAOC,QAAP,IAAmBC,oBAAnB,EAAyCC,qBAAzC,QAAsE,mBAAtE;AAEA,OAAOC,YAAP,MAAyB,4CAAzB;AACA,OAAOC,GAAP,MAAgB,mCAAhB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IACqBC,kB;AACpB;AACD;AACA;AACA;AACA;AACA;AACA;AACC,8BAAaC,aAAb,EAA6B;AAAA;;AAC5B;AACF;AACA;AACA;AACA;AACE,SAAKA,aAAL,GAAqBC,MAAM,CAACC,MAAP,CAAe;AAAEC,MAAAA,UAAU,EAAE;AAAd,KAAf,EAAqCH,aAArC,CAArB;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,SAAKI,0BAAL,GAAkC,IAAIC,GAAJ,EAAlC;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;;;;;WACC,wBAAgBC,MAAhB,EAAwBC,OAAxB,EAAiCC,MAAjC,EAA0C;AACzC;AADyC,iDAEnBF,MAAM,CAACG,kBAAP,EAFmB;AAAA;;AAAA;AAEzC,4DAAoD;AAAA,cAAxCC,MAAwC;AACnD,eAAKC,mBAAL,CAA0BD,MAAM,CAACE,IAAjC,EAAuCF,MAAM,CAACG,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Z,IAAjD,CAAT;AACA,WAFD,MAEO;AACNwE,YAAAA,SAAS,aAAOpE,KAAK,CAACC,IAAb,cAAuBD,KAAK,CAACJ,IAA7B,CAAT;AACA;;AAED,cAAK,KAAKwF,wBAAL,CAA+BhB,SAA/B,EAA0C5D,OAAO,CAACZ,IAAlD,CAAL,EAAgE;AAC/D,gBAAK8E,gBAAgB,CAACW,GAAjB,CAAsB7E,OAAtB,CAAL,EAAuC;AACtC;AACA;AACA;;AAEDkE,YAAAA,gBAAgB,CAACL,GAAjB,CAAsB7D,OAAtB,EAN+D,CAQ/D;;AACAoE,YAAAA,OAAO,CAACM,IAAR,CAAc;AAAEjF,cAAAA,IAAI,EAAE,WAAR;AAAqBO,cAAAA,OAAO,EAAPA;AAArB,aAAd;AACA,WAVD,MAUO;AACNoE,YAAAA,OAAO,CAACM,IAAR,CAAclF,KAAd;AACA;AACD;AAhD6C;AAAA;AAAA;AAAA;AAAA;;AAkD9C,aAAO4E,OAAP;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACC,kCAA0BR,SAA1B,EAAqCkB,WAArC,EAAmD;AAClD,aAAO,KAAKlG,0BAAL,CAAgC6B,GAAhC,CAAqCmD,SAArC,MAAqDkB,WAA5D;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;SA5rBqBvG,kB;AA+rBrBD,GAAG,CAAEC,kBAAF,EAAsBF,YAAtB,CAAH,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASiF,6BAAT,CAAwCyB,aAAxC,EAAuD1B,MAAvD,EAA+DhD,MAA/D,EAAwE;AACvE,MAAMhB,KAAK,GAAGgE,MAAM,CAAC3C,QAAP,EAAd;AACA,MAAMsE,SAAS,GAAGjE,KAAK,CAACC,IAAN,CAAY+D,aAAa,CAACE,YAAd,EAAZ,CAAlB;AACAD,EAAAA,SAAS,CAACE,KAAV,GAHuE,CAGpD;;AACnBF,EAAAA,SAAS,CAACG,OAAV;AAEA,MAAMC,iBAAiB,GAAGJ,SAAS,CAACK,IAAV,CAAgB,UAAArF,OAAO,EAAI;AACpD,QAAKX,KAAK,CAACiG,YAAN,CAAoBtF,OAApB,CAAL,EAAqC;AACpC,UAAMuF,WAAW,GAAGlF,MAAM,CAAC8B,aAAP,CAAsBnC,OAAtB,CAApB;AAEA,aAAO,CAAC,CAACuF,WAAW,CAACC,iBAAZ,CAA+B,cAA/B,CAAT;AACA;AACD,GANyB,CAA1B;AAQA,SAAO,CAACJ,iBAAR;AACA;;AAED,SAASnB,YAAT,CAAuBxE,IAAvB,EAA6B0B,IAA7B,EAAoC;AACnC,MAAM/B,IAAI,GAAG+B,IAAI,CAACS,IAAL,CAAUxC,IAAV,IAAkB,OAA/B;AAEA,mBAAWK,IAAX,cAAqBL,IAArB;AACA;;AAED,SAAS8B,sBAAT,CAAiCS,KAAjC,EAAyC;AACxC,MAAMC,IAAI,GAAGD,KAAK,CAACC,IAAnB;;AACA,MAAMC,SAAS,GAAG5D,KAAK,CAAC0B,2BAAN,CAAmCgC,KAAK,CAACG,gBAAzC,EAA2DH,KAAK,CAAC9B,MAAjE,CAAlB;;AAEA,SAAO;AACN+B,IAAAA,IAAI,EAAJA,IADM;AAENvC,IAAAA,KAAK,EAAEwC;AAFD,GAAP;AAIA;;AAED,SAASW,wBAAT,CAAmCZ,IAAnC,EAAyCvB,MAAzC,EAAkD;AACjD,MAAKuB,IAAI,CAAC+C,EAAL,CAAS,WAAT,CAAL,EAA8B;AAC7B,QAAMc,cAAc,GAAGpF,MAAM,CAACuC,cAAP,CAAuB1E,QAAQ,CAAC2E,aAAT,CAAwBjB,IAAxB,CAAvB,CAAvB;AACA,QAAM2C,cAAc,GAAGkB,cAAc,CAACjB,MAAtC;AAEA,WAAOD,cAAc,CAACI,EAAf,CAAmB,OAAnB,IAA+BJ,cAA/B,GAAgD,IAAvD;AACA;;AAED,SAAOlE,MAAM,CAAC8B,aAAP,CAAsBP,IAAtB,CAAP;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/conversion/downcastdispatcher\n */\n\nimport Consumable from './modelconsumable';\nimport Range from '../model/range';\nimport Position, { getNodeAfterPosition, getTextNodeAtPosition } from '../model/position';\n\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\n\n/**\n * The downcast dispatcher is a central point of downcasting (conversion from the model to the view), which is a process of reacting\n * to changes in the model and firing a set of events. Callbacks listening to these events are called converters. The\n * converters' role is to convert the model changes to changes in view (for example, adding view nodes or\n * changing attributes on view elements).\n *\n * During the conversion process, downcast dispatcher fires events basing on the state of the model and prepares\n * data for these events. It is important to understand that the events are connected with the changes done on the model,\n * for example: \"a node has been inserted\" or \"an attribute has changed\". This is in contrary to upcasting (a view-to-model conversion)\n * where you convert the view state (view nodes) to a model tree.\n *\n * The events are prepared basing on a diff created by {@link module:engine/model/differ~Differ Differ}, which buffers them\n * and then passes to the downcast dispatcher as a diff between the old model state and the new model state.\n *\n * Note that because the changes are converted, there is a need to have a mapping between the model structure and the view structure.\n * To map positions and elements during the downcast (a model-to-view conversion), use {@link module:engine/conversion/mapper~Mapper}.\n *\n * Downcast dispatcher fires the following events for model tree changes:\n *\n * * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:insert `insert`} &ndash;\n * If a range of nodes was inserted to the model tree.\n * * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:remove `remove`} &ndash;\n * If a range of nodes was removed from the model tree.\n * * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:attribute `attribute`} &ndash;\n * If an attribute was added, changed or removed from a model node.\n *\n * For {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:insert `insert`}\n * and {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:attribute `attribute`},\n * downcast dispatcher generates {@link module:engine/conversion/modelconsumable~ModelConsumable consumables}.\n * These are used to have control over which changes have already been consumed. It is useful when some converters\n * overwrite others or convert multiple changes (for example, it converts an insertion of an element and also converts that\n * element's attributes during the insertion).\n *\n * Additionally, downcast dispatcher fires events for {@link module:engine/model/markercollection~Marker marker} changes:\n *\n * * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:addMarker} &ndash; If a marker was added.\n * * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:removeMarker} &ndash; If a marker was removed.\n *\n * Note that changing a marker is done through removing the marker from the old range and adding it to the new range,\n * so both events are fired.\n *\n * Finally, downcast dispatcher also handles firing events for the {@link module:engine/model/selection model selection}\n * conversion:\n *\n * * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:selection}\n * &ndash; Converts the selection from the model to the view.\n * * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:attribute}\n * &ndash; Fired for every selection attribute.\n * * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:addMarker}\n * &ndash; Fired for every marker that contains a selection.\n *\n * Unlike the model tree and the markers, the events for selection are not fired for changes but for a selection state.\n *\n * When providing custom listeners for a downcast dispatcher, remember to check whether a given change has not been\n * {@link module:engine/conversion/modelconsumable~ModelConsumable#consume consumed} yet.\n *\n * When providing custom listeners for downcast dispatcher, keep in mind that any callback that has\n * {@link module:engine/conversion/modelconsumable~ModelConsumable#consume consumed} a value from a consumable and\n * converted the change should also stop the event (for efficiency purposes).\n *\n * When providing custom listeners for downcast dispatcher, remember to use the provided\n * {@link module:engine/view/downcastwriter~DowncastWriter view downcast writer} to apply changes to the view document.\n *\n * You can read more about conversion in the following guides:\n *\n * * {@glink framework/guides/deep-dive/conversion/conversion-introduction Advanced conversion concepts &mdash; attributes}\n * * {@glink framework/guides/deep-dive/conversion/conversion-extending-output Extending the editor output }\n * * {@glink framework/guides/deep-dive/conversion/custom-element-conversion Custom element conversion}\n *\n * An example of a custom converter for the downcast dispatcher:\n *\n *\t\t// You will convert inserting a \"paragraph\" model element into the model.\n *\t\tdowncastDispatcher.on( 'insert:paragraph', ( evt, data, conversionApi ) => {\n *\t\t\t// Remember to check whether the change has not been consumed yet and consume it.\n *\t\t\tif ( conversionApi.consumable.consume( data.item, 'insert' ) ) {\n *\t\t\t\treturn;\n *\t\t\t}\n *\n *\t\t\t// Translate the position in the model to a position in the view.\n *\t\t\tconst viewPosition = conversionApi.mapper.toViewPosition( data.range.start );\n *\n *\t\t\t// Create a <p> element that will be inserted into the view at the `viewPosition`.\n *\t\t\tconst viewElement = conversionApi.writer.createContainerElement( 'p' );\n *\n *\t\t\t// Bind the newly created view element to the model element so positions will map accordingly in the future.\n *\t\t\tconversionApi.mapper.bindElements( data.item, viewElement );\n *\n *\t\t\t// Add the newly created view element to the view.\n *\t\t\tconversionApi.writer.insert( viewPosition, viewElement );\n *\n *\t\t\t// Remember to stop the event propagation.\n *\t\t\tevt.stop();\n *\t\t} );\n */\nexport default class DowncastDispatcher {\n\t/**\n\t * Creates a downcast dispatcher instance.\n\t *\n\t * @see module:engine/conversion/downcastdispatcher~DowncastConversionApi\n\t * @param {Object} conversionApi Additional properties for an interface that will be passed to events fired\n\t * by the downcast dispatcher.\n\t */\n\tconstructor( conversionApi ) {\n\t\t/**\n\t\t * An interface passed by the dispatcher to the event callbacks.\n\t\t *\n\t\t * @member {module:engine/conversion/downcastdispatcher~DowncastConversionApi}\n\t\t */\n\t\tthis.conversionApi = Object.assign( { dispatcher: this }, conversionApi );\n\n\t\t/**\n\t\t * Maps conversion event names that will trigger element reconversion for a given element name.\n\t\t *\n\t\t * @type {Map<String, String>}\n\t\t * @private\n\t\t */\n\t\tthis._reconversionEventsMapping = new Map();\n\t}\n\n\t/**\n\t * Takes a {@link module:engine/model/differ~Differ model differ} object with buffered changes and fires conversion basing on it.\n\t *\n\t * @param {module:engine/model/differ~Differ} differ The differ object with buffered changes.\n\t * @param {module:engine/model/markercollection~MarkerCollection} markers Markers connected with the converted model.\n\t * @param {module:engine/view/downcastwriter~DowncastWriter} writer The view writer that should be used to modify the view document.\n\t */\n\tconvertChanges( differ, markers, writer ) {\n\t\t// Before the view is updated, remove markers which have changed.\n\t\tfor ( const change of differ.getMarkersToRemove() ) {\n\t\t\tthis.convertMarkerRemove( change.name, change.range, writer );\n\t\t}\n\n\t\tconst changes = this._mapChangesWithAutomaticReconversion( differ );\n\n\t\t// Convert changes that happened on model tree.\n\t\tfor ( const entry of changes ) {\n\t\t\tif ( entry.type === 'insert' ) {\n\t\t\t\tthis.convertInsert( Range._createFromPositionAndShift( entry.position, entry.length ), writer );\n\t\t\t} else if ( entry.type === 'remove' ) {\n\t\t\t\tthis.convertRemove( entry.position, entry.length, entry.name, writer );\n\t\t\t} else if ( entry.type === 'reconvert' ) {\n\t\t\t\tthis.reconvertElement( entry.element, writer );\n\t\t\t} else {\n\t\t\t\t// Defaults to 'attribute' change.\n\t\t\t\tthis.convertAttribute( entry.range, entry.attributeKey, entry.attributeOldValue, entry.attributeNewValue, writer );\n\t\t\t}\n\t\t}\n\n\t\tfor ( const markerName of this.conversionApi.mapper.flushUnboundMarkerNames() ) {\n\t\t\tconst markerRange = markers.get( markerName ).getRange();\n\n\t\t\tthis.convertMarkerRemove( markerName, markerRange, writer );\n\t\t\tthis.convertMarkerAdd( markerName, markerRange, writer );\n\t\t}\n\n\t\t// After the view is updated, convert markers which have changed.\n\t\tfor ( const change of differ.getMarkersToAdd() ) {\n\t\t\tthis.convertMarkerAdd( change.name, change.range, writer );\n\t\t}\n\t}\n\n\t/**\n\t * Starts a conversion of a range insertion.\n\t *\n\t * For each node in the range, {@link #event:insert `insert` event is fired}. For each attribute on each node,\n\t * {@link #event:attribute `attribute` event is fired}.\n\t *\n\t * @fires insert\n\t * @fires attribute\n\t * @param {module:engine/model/range~Range} range The inserted range.\n\t * @param {module:engine/view/downcastwriter~DowncastWriter} writer The view writer that should be used to modify the view document.\n\t */\n\tconvertInsert( range, writer ) {\n\t\tthis.conversionApi.writer = writer;\n\n\t\t// Create a list of things that can be consumed, consisting of nodes and their attributes.\n\t\tthis.conversionApi.consumable = this._createInsertConsumable( range );\n\n\t\t// Fire a separate insert event for each node and text fragment contained in the range.\n\t\tfor ( const data of Array.from( range ).map( walkerValueToEventData ) ) {\n\t\t\tthis._convertInsertWithAttributes( data );\n\t\t}\n\n\t\tthis._clearConversionApi();\n\t}\n\n\t/**\n\t * Fires conversion of a single node removal. Fires {@link #event:remove remove event} with provided data.\n\t *\n\t * @param {module:engine/model/position~Position} position Position from which node was removed.\n\t * @param {Number} length Offset size of removed node.\n\t * @param {String} name Name of removed node.\n\t * @param {module:engine/view/downcastwriter~DowncastWriter} writer View writer that should be used to modify view document.\n\t */\n\tconvertRemove( position, length, name, writer ) {\n\t\tthis.conversionApi.writer = writer;\n\n\t\tthis.fire( 'remove:' + name, { position, length }, this.conversionApi );\n\n\t\tthis._clearConversionApi();\n\t}\n\n\t/**\n\t * Starts a conversion of an attribute change on a given `range`.\n\t *\n\t * For each node in the given `range`, {@link #event:attribute attribute event} is fired with the passed data.\n\t *\n\t * @fires attribute\n\t * @param {module:engine/model/range~Range} range Changed range.\n\t * @param {String} key Key of the attribute that has changed.\n\t * @param {*} oldValue Attribute value before the change or `null` if the attribute has not been set before.\n\t * @param {*} newValue New attribute value or `null` if the attribute has been removed.\n\t * @param {module:engine/view/downcastwriter~DowncastWriter} writer View writer that should be used to modify view document.\n\t */\n\tconvertAttribute( range, key, oldValue, newValue, writer ) {\n\t\tthis.conversionApi.writer = writer;\n\n\t\t// Create a list with attributes to consume.\n\t\tthis.conversionApi.consumable = this._createConsumableForRange( range, `attribute:${ key }` );\n\n\t\t// Create a separate attribute event for each node in the range.\n\t\tfor ( const value of range ) {\n\t\t\tconst item = value.item;\n\t\t\tconst itemRange = Range._createFromPositionAndShift( value.previousPosition, value.length );\n\t\t\tconst data = {\n\t\t\t\titem,\n\t\t\t\trange: itemRange,\n\t\t\t\tattributeKey: key,\n\t\t\t\tattributeOldValue: oldValue,\n\t\t\t\tattributeNewValue: newValue\n\t\t\t};\n\n\t\t\tthis._testAndFire( `attribute:${ key }`, data );\n\t\t}\n\n\t\tthis._clearConversionApi();\n\t}\n\n\t/**\n\t * Starts the reconversion of an element. It will:\n\t *\n\t * * Fire an {@link #event:insert `insert` event} for the element to reconvert.\n\t * * Fire an {@link #event:attribute `attribute` event} for element attributes.\n\t *\n\t * This will not reconvert children of the element if they have existing (already converted) views. For newly inserted child elements\n\t * it will behave the same as {@link #convertInsert}.\n\t *\n\t * Element reconversion is defined by the `triggerBy` configuration for the\n\t * {@link module:engine/conversion/downcasthelpers~DowncastHelpers#elementToElement `elementToElement()`} conversion helper.\n\t *\n\t * @fires insert\n\t * @fires attribute\n\t * @param {module:engine/model/element~Element} element The element to be reconverted.\n\t * @param {module:engine/view/downcastwriter~DowncastWriter} writer The view writer that should be used to modify the view document.\n\t */\n\treconvertElement( element, writer ) {\n\t\tconst elementRange = Range._createOn( element );\n\n\t\tthis.conversionApi.writer = writer;\n\n\t\t// Create a list of things that can be consumed, consisting of nodes and their attributes.\n\t\tthis.conversionApi.consumable = this._createInsertConsumable( elementRange );\n\n\t\tconst mapper = this.conversionApi.mapper;\n\t\tconst currentView = mapper.toViewElement( element );\n\n\t\t// Remove the old view but do not remove mapper mappings - those will be used to revive existing elements.\n\t\twriter.remove( currentView );\n\n\t\t// Convert the element - without converting children.\n\t\tthis._convertInsertWithAttributes( {\n\t\t\titem: element,\n\t\t\trange: elementRange\n\t\t} );\n\n\t\tconst convertedViewElement = mapper.toViewElement( element );\n\n\t\t// Iterate over children of reconverted element in order to...\n\t\tfor ( const value of Range._createIn( element ) ) {\n\t\t\tconst { item } = value;\n\n\t\t\tconst view = elementOrTextProxyToView( item, mapper );\n\n\t\t\t// ...either bring back previously converted view...\n\t\t\tif ( view ) {\n\t\t\t\t// Do not move views that are already in converted element - those might be created by the main element converter in case\n\t\t\t\t// when main element converts also its direct children.\n\t\t\t\tif ( view.root !== convertedViewElement.root ) {\n\t\t\t\t\twriter.move(\n\t\t\t\t\t\twriter.createRangeOn( view ),\n\t\t\t\t\t\tmapper.toViewPosition( Position._createBefore( item ) )\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// ... or by converting newly inserted elements.\n\t\t\telse {\n\t\t\t\tthis._convertInsertWithAttributes( walkerValueToEventData( value ) );\n\t\t\t}\n\t\t}\n\n\t\t// After reconversion is done we can unbind the old view.\n\t\tmapper.unbindViewElement( currentView );\n\n\t\tthis._clearConversionApi();\n\t}\n\n\t/**\n\t * Starts the model selection conversion.\n\t *\n\t * Fires events for a given {@link module:engine/model/selection~Selection selection} to start the selection conversion.\n\t *\n\t * @fires selection\n\t * @fires addMarker\n\t * @fires attribute\n\t * @param {module:engine/model/selection~Selection} selection The selection to convert.\n\t * @param {module:engine/model/markercollection~MarkerCollection} markers Markers connected with the converted model.\n\t * @param {module:engine/view/downcastwriter~DowncastWriter} writer View writer that should be used to modify the view document.\n\t */\n\tconvertSelection( selection, markers, writer ) {\n\t\tconst markersAtSelection = Array.from( markers.getMarkersAtPosition( selection.getFirstPosition() ) );\n\n\t\tthis.conversionApi.writer = writer;\n\t\tthis.conversionApi.consumable = this._createSelectionConsumable( selection, markersAtSelection );\n\n\t\tthis.fire( 'selection', { selection }, this.conversionApi );\n\n\t\tif ( !selection.isCollapsed ) {\n\t\t\treturn;\n\t\t}\n\n\t\tfor ( const marker of markersAtSelection ) {\n\t\t\tconst markerRange = marker.getRange();\n\n\t\t\tif ( !shouldMarkerChangeBeConverted( selection.getFirstPosition(), marker, this.conversionApi.mapper ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst data = {\n\t\t\t\titem: selection,\n\t\t\t\tmarkerName: marker.name,\n\t\t\t\tmarkerRange\n\t\t\t};\n\n\t\t\tif ( this.conversionApi.consumable.test( selection, 'addMarker:' + marker.name ) ) {\n\t\t\t\tthis.fire( 'addMarker:' + marker.name, data, this.conversionApi );\n\t\t\t}\n\t\t}\n\n\t\tfor ( const key of selection.getAttributeKeys() ) {\n\t\t\tconst data = {\n\t\t\t\titem: selection,\n\t\t\t\trange: selection.getFirstRange(),\n\t\t\t\tattributeKey: key,\n\t\t\t\tattributeOldValue: null,\n\t\t\t\tattributeNewValue: selection.getAttribute( key )\n\t\t\t};\n\n\t\t\t// Do not fire event if the attribute has been consumed.\n\t\t\tif ( this.conversionApi.consumable.test( selection, 'attribute:' + data.attributeKey ) ) {\n\t\t\t\tthis.fire( 'attribute:' + data.attributeKey + ':$text', data, this.conversionApi );\n\t\t\t}\n\t\t}\n\n\t\tthis._clearConversionApi();\n\t}\n\n\t/**\n\t * Converts the added marker. Fires the {@link #event:addMarker `addMarker`} event for each item\n\t * in the marker's range. If the range is collapsed, a single event is dispatched. See the event description for more details.\n\t *\n\t * @fires addMarker\n\t * @param {String} markerName Marker name.\n\t * @param {module:engine/model/range~Range} markerRange The marker range.\n\t * @param {module:engine/view/downcastwriter~DowncastWriter} writer View writer that should be used to modify the view document.\n\t */\n\tconvertMarkerAdd( markerName, markerRange, writer ) {\n\t\t// Do not convert if range is in graveyard.\n\t\tif ( markerRange.root.rootName == '$graveyard' ) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.conversionApi.writer = writer;\n\n\t\t// In markers' case, event name == consumable name.\n\t\tconst eventName = 'addMarker:' + markerName;\n\n\t\t//\n\t\t// First, fire an event for the whole marker.\n\t\t//\n\t\tconst consumable = new Consumable();\n\t\tconsumable.add( markerRange, eventName );\n\n\t\tthis.conversionApi.consumable = consumable;\n\n\t\tthis.fire( eventName, { markerName, markerRange }, this.conversionApi );\n\n\t\t//\n\t\t// Do not fire events for each item inside the range if the range got consumed.\n\t\t//\n\t\tif ( !consumable.test( markerRange, eventName ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t//\n\t\t// Then, fire an event for each item inside the marker range.\n\t\t//\n\t\tthis.conversionApi.consumable = this._createConsumableForRange( markerRange, eventName );\n\n\t\tfor ( const item of markerRange.getItems() ) {\n\t\t\t// Do not fire event for already consumed items.\n\t\t\tif ( !this.conversionApi.consumable.test( item, eventName ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst data = { item, range: Range._createOn( item ), markerName, markerRange };\n\n\t\t\tthis.fire( eventName, data, this.conversionApi );\n\t\t}\n\n\t\tthis._clearConversionApi();\n\t}\n\n\t/**\n\t * Fires the conversion of the marker removal. Fires the {@link #event:removeMarker `removeMarker`} event with the provided data.\n\t *\n\t * @fires removeMarker\n\t * @param {String} markerName Marker name.\n\t * @param {module:engine/model/range~Range} markerRange The marker range.\n\t * @param {module:engine/view/downcastwriter~DowncastWriter} writer View writer that should be used to modify the view document.\n\t */\n\tconvertMarkerRemove( markerName, markerRange, writer ) {\n\t\t// Do not convert if range is in graveyard.\n\t\tif ( markerRange.root.rootName == '$graveyard' ) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.conversionApi.writer = writer;\n\n\t\tthis.fire( 'removeMarker:' + markerName, { markerName, markerRange }, this.conversionApi );\n\n\t\tthis._clearConversionApi();\n\t}\n\n\t/**\n\t * Maps the model element \"insert\" reconversion for given event names. The event names must be fully specified:\n\t *\n\t * * For \"attribute\" change event, it should include the main element name, i.e: `'attribute:attributeName:elementName'`.\n\t * * For child node change events, these should use the child event name as well, i.e:\n\t *     * For adding a node: `'insert:childElementName'`.\n\t *     * For removing a node: `'remove:childElementName'`.\n\t *\n\t * **Note**: This method should not be used directly. The reconversion is defined by the `triggerBy()` configuration of the\n\t * `elementToElement()` conversion helper.\n\t *\n\t * @protected\n\t * @param {String} modelName The name of the main model element for which the events will trigger the reconversion.\n\t * @param {String} eventName The name of an event that would trigger conversion for a given model element.\n\t */\n\t_mapReconversionTriggerEvent( modelName, eventName ) {\n\t\tthis._reconversionEventsMapping.set( eventName, modelName );\n\t}\n\n\t/**\n\t * Creates {@link module:engine/conversion/modelconsumable~ModelConsumable} with values to consume from a given range,\n\t * assuming that the range has just been inserted to the model.\n\t *\n\t * @private\n\t * @param {module:engine/model/range~Range} range The inserted range.\n\t * @returns {module:engine/conversion/modelconsumable~ModelConsumable} The values to consume.\n\t */\n\t_createInsertConsumable( range ) {\n\t\tconst consumable = new Consumable();\n\n\t\tfor ( const value of range ) {\n\t\t\tconst item = value.item;\n\n\t\t\tconsumable.add( item, 'insert' );\n\n\t\t\tfor ( const key of item.getAttributeKeys() ) {\n\t\t\t\tconsumable.add( item, 'attribute:' + key );\n\t\t\t}\n\t\t}\n\n\t\treturn consumable;\n\t}\n\n\t/**\n\t * Creates {@link module:engine/conversion/modelconsumable~ModelConsumable} with values to consume for a given range.\n\t *\n\t * @private\n\t * @param {module:engine/model/range~Range} range The affected range.\n\t * @param {String} type Consumable type.\n\t * @returns {module:engine/conversion/modelconsumable~ModelConsumable} The values to consume.\n\t */\n\t_createConsumableForRange( range, type ) {\n\t\tconst consumable = new Consumable();\n\n\t\tfor ( const item of range.getItems() ) {\n\t\t\tconsumable.add( item, type );\n\t\t}\n\n\t\treturn consumable;\n\t}\n\n\t/**\n\t * Creates {@link module:engine/conversion/modelconsumable~ModelConsumable} with selection consumable values.\n\t *\n\t * @private\n\t * @param {module:engine/model/selection~Selection} selection The selection to create the consumable from.\n\t * @param {Iterable.<module:engine/model/markercollection~Marker>} markers Markers that contain the selection.\n\t * @returns {module:engine/conversion/modelconsumable~ModelConsumable} The values to consume.\n\t */\n\t_createSelectionConsumable( selection, markers ) {\n\t\tconst consumable = new Consumable();\n\n\t\tconsumable.add( selection, 'selection' );\n\n\t\tfor ( const marker of markers ) {\n\t\t\tconsumable.add( selection, 'addMarker:' + marker.name );\n\t\t}\n\n\t\tfor ( const key of selection.getAttributeKeys() ) {\n\t\t\tconsumable.add( selection, 'attribute:' + key );\n\t\t}\n\n\t\treturn consumable;\n\t}\n\n\t/**\n\t * Tests passed `consumable` to check whether given event can be fired and if so, fires it.\n\t *\n\t * @private\n\t * @fires insert\n\t * @fires attribute\n\t * @param {String} type Event type.\n\t * @param {Object} data Event data.\n\t */\n\t_testAndFire( type, data ) {\n\t\tif ( !this.conversionApi.consumable.test( data.item, type ) ) {\n\t\t\t// Do not fire event if the item was consumed.\n\t\t\treturn;\n\t\t}\n\n\t\tthis.fire( getEventName( type, data ), data, this.conversionApi );\n\t}\n\n\t/**\n\t * Clears the conversion API object.\n\t *\n\t * @private\n\t */\n\t_clearConversionApi() {\n\t\tdelete this.conversionApi.writer;\n\t\tdelete this.conversionApi.consumable;\n\t}\n\n\t/**\n\t * Internal method for converting element insertion. It will fire events for the inserted element and events for its attributes.\n\t *\n\t * @private\n\t * @fires insert\n\t * @fires attribute\n\t * @param {Object} data Event data.\n\t */\n\t_convertInsertWithAttributes( data ) {\n\t\tthis._testAndFire( 'insert', data );\n\n\t\t// Fire a separate addAttribute event for each attribute that was set on inserted items.\n\t\t// This is important because most attributes converters will listen only to add/change/removeAttribute events.\n\t\t// If we would not add this part, attributes on inserted nodes would not be converted.\n\t\tfor ( const key of data.item.getAttributeKeys() ) {\n\t\t\tdata.attributeKey = key;\n\t\t\tdata.attributeOldValue = null;\n\t\t\tdata.attributeNewValue = data.item.getAttribute( key );\n\n\t\t\tthis._testAndFire( `attribute:${ key }`, data );\n\t\t}\n\t}\n\n\t/**\n\t * Returns differ changes together with added \"reconvert\" type changes for {@link #reconvertElement}. These are defined by\n\t * a the `triggerBy()` configuration for the\n\t * {@link module:engine/conversion/downcasthelpers~DowncastHelpers#elementToElement `elementToElement()`} conversion helper.\n\t *\n\t * This method will remove every mapped insert or remove change with a single \"reconvert\" change.\n\t *\n\t * For instance: Having a `triggerBy()` configuration defined for the `<complex>` element that issues this element reconversion on\n\t * `foo` and `bar` attributes change, and a set of changes for this element:\n\t *\n\t *\t\tconst differChanges = [\n\t *\t\t\t{ type: 'attribute', attributeKey: 'foo', ... },\n\t *\t\t\t{ type: 'attribute', attributeKey: 'bar', ... },\n\t *\t\t\t{ type: 'attribute', attributeKey: 'baz', ... }\n\t *\t\t];\n\t *\n\t * This method will return:\n\t *\n\t *\t\tconst updatedChanges = [\n\t *\t\t\t{ type: 'reconvert', element: complexElementInstance },\n\t *\t\t\t{ type: 'attribute', attributeKey: 'baz', ... }\n\t *\t\t];\n\t *\n\t * In the example above, the `'baz'` attribute change will fire an {@link #event:attribute attribute event}\n\t *\n\t * @param {module:engine/model/differ~Differ} differ The differ object with buffered changes.\n\t * @returns {Array.<Object>} Updated set of changes.\n\t * @private\n\t */\n\t_mapChangesWithAutomaticReconversion( differ ) {\n\t\tconst itemsToReconvert = new Set();\n\t\tconst updated = [];\n\n\t\tfor ( const entry of differ.getChanges() ) {\n\t\t\tconst position = entry.position || entry.range.start;\n\t\t\t// Cached parent - just in case. See https://github.com/ckeditor/ckeditor5/issues/6579.\n\t\t\tconst positionParent = position.parent;\n\t\t\tconst textNode = getTextNodeAtPosition( position, positionParent );\n\n\t\t\t// Reconversion is done only on elements so skip text changes.\n\t\t\tif ( textNode ) {\n\t\t\t\tupdated.push( entry );\n\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst element = entry.type === 'attribute' ? getNodeAfterPosition( position, positionParent, null ) : positionParent;\n\n\t\t\t// Case of text node set directly in root. For now used only in tests but can be possible when enabled in paragraph-like roots.\n\t\t\t// See: https://github.com/ckeditor/ckeditor5/issues/762.\n\t\t\tif ( element.is( '$text' ) ) {\n\t\t\t\tupdated.push( entry );\n\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tlet eventName;\n\n\t\t\tif ( entry.type === 'attribute' ) {\n\t\t\t\teventName = `attribute:${ entry.attributeKey }:${ element.name }`;\n\t\t\t} else {\n\t\t\t\teventName = `${ entry.type }:${ entry.name }`;\n\t\t\t}\n\n\t\t\tif ( this._isReconvertTriggerEvent( eventName, element.name ) ) {\n\t\t\t\tif ( itemsToReconvert.has( element ) ) {\n\t\t\t\t\t// Element is already reconverted, so skip this change.\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\titemsToReconvert.add( element );\n\n\t\t\t\t// Add special \"reconvert\" change.\n\t\t\t\tupdated.push( { type: 'reconvert', element } );\n\t\t\t} else {\n\t\t\t\tupdated.push( entry );\n\t\t\t}\n\t\t}\n\n\t\treturn updated;\n\t}\n\n\t/**\n\t * Checks if the resulting change should trigger element reconversion.\n\t *\n\t * These are defined by a `triggerBy()` configuration for the\n\t * {@link module:engine/conversion/downcasthelpers~DowncastHelpers#elementToElement `elementToElement()`} conversion helper.\n\t *\n\t * @private\n\t * @param {String} eventName The event name to check.\n\t * @param {String} elementName The element name to check.\n\t * @returns {Boolean}\n\t */\n\t_isReconvertTriggerEvent( eventName, elementName ) {\n\t\treturn this._reconversionEventsMapping.get( eventName ) === elementName;\n\t}\n\n\t/**\n\t * Fired for inserted nodes.\n\t *\n\t * `insert` is a namespace for a class of events. Names of actually called events follow this pattern:\n\t * `insert:name`. `name` is either `'$text'`, when {@link module:engine/model/text~Text a text node} has been inserted,\n\t * or {@link module:engine/model/element~Element#name name} of inserted element.\n\t *\n\t * This way listeners can either listen to a general `insert` event or specific event (for example `insert:paragraph`).\n\t *\n\t * @event insert\n\t * @param {Object} data Additional information about the change.\n\t * @param {module:engine/model/item~Item} data.item Inserted item.\n\t * @param {module:engine/model/range~Range} data.range Range spanning over inserted item.\n\t * @param {module:engine/conversion/downcastdispatcher~DowncastConversionApi} conversionApi Conversion interface\n\t * to be used by callback, passed in `DowncastDispatcher` constructor.\n\t */\n\n\t/**\n\t * Fired for removed nodes.\n\t *\n\t * `remove` is a namespace for a class of events. Names of actually called events follow this pattern:\n\t * `remove:name`. `name` is either `'$text'`, when {@link module:engine/model/text~Text a text node} has been removed,\n\t * or the {@link module:engine/model/element~Element#name name} of removed element.\n\t *\n\t * This way listeners can either listen to a general `remove` event or specific event (for example `remove:paragraph`).\n\t *\n\t * @event remove\n\t * @param {Object} data Additional information about the change.\n\t * @param {module:engine/model/position~Position} data.position Position from which the node has been removed.\n\t * @param {Number} data.length Offset size of the removed node.\n\t * @param {module:engine/conversion/downcastdispatcher~DowncastConversionApi} conversionApi Conversion interface\n\t * to be used by callback, passed in `DowncastDispatcher` constructor.\n\t */\n\n\t/**\n\t * Fired in the following cases:\n\t *\n\t * * when an attribute has been added, changed, or removed from a node,\n\t * * when a node with an attribute is inserted,\n\t * * when collapsed model selection attribute is converted.\n\t *\n\t * `attribute` is a namespace for a class of events. Names of actually called events follow this pattern:\n\t * `attribute:attributeKey:name`. `attributeKey` is the key of added/changed/removed attribute.\n\t * `name` is either `'$text'` if change was on {@link module:engine/model/text~Text a text node},\n\t * or the {@link module:engine/model/element~Element#name name} of element which attribute has changed.\n\t *\n\t * This way listeners can either listen to a general `attribute:bold` event or specific event (for example `attribute:src:image`).\n\t *\n\t * @event attribute\n\t * @param {Object} data Additional information about the change.\n\t * @param {module:engine/model/item~Item|module:engine/model/documentselection~DocumentSelection} data.item Changed item\n\t * or converted selection.\n\t * @param {module:engine/model/range~Range} data.range Range spanning over changed item or selection range.\n\t * @param {String} data.attributeKey Attribute key.\n\t * @param {*} data.attributeOldValue Attribute value before the change. This is `null` when selection attribute is converted.\n\t * @param {*} data.attributeNewValue New attribute value.\n\t * @param {module:engine/conversion/downcastdispatcher~DowncastConversionApi} conversionApi Conversion interface\n\t * to be used by callback, passed in `DowncastDispatcher` constructor.\n\t */\n\n\t/**\n\t * Fired for {@link module:engine/model/selection~Selection selection} changes.\n\t *\n\t * @event selection\n\t * @param {module:engine/model/selection~Selection} selection Selection that is converted.\n\t * @param {module:engine/conversion/downcastdispatcher~DowncastConversionApi} conversionApi Conversion interface\n\t * to be used by callback, passed in `DowncastDispatcher` constructor.\n\t */\n\n\t/**\n\t * Fired when a new marker is added to the model. Also fired when a collapsed model selection that is inside a marker is converted.\n\t *\n\t * `addMarker` is a namespace for a class of events. Names of actually called events follow this pattern:\n\t * `addMarker:markerName`. By specifying certain marker names, you can make the events even more gradual. For example,\n\t * if markers are named `foo:abc`, `foo:bar`, then it is possible to listen to `addMarker:foo` or `addMarker:foo:abc` and\n\t * `addMarker:foo:bar` events.\n\t *\n\t * If the marker range is not collapsed:\n\t *\n\t * * the event is fired for each item in the marker range one by one,\n\t * * `conversionApi.consumable` includes each item of the marker range and the consumable value is same as the event name.\n\t *\n\t * If the marker range is collapsed:\n\t *\n\t * * there is only one event,\n\t * * `conversionApi.consumable` includes marker range with the event name.\n\t *\n\t * If the selection inside a marker is converted:\n\t *\n\t * * there is only one event,\n\t * * `conversionApi.consumable` includes the selection instance with the event name.\n\t *\n\t * @event addMarker\n\t * @param {Object} data Additional information about the change.\n\t * @param {module:engine/model/item~Item|module:engine/model/selection~Selection} data.item Item inside the new marker or\n\t * the selection that is being converted.\n\t * @param {module:engine/model/range~Range} [data.range] Range spanning over converted item. Available only in marker conversion, if\n\t * the marker range was not collapsed.\n\t * @param {module:engine/model/range~Range} data.markerRange Marker range.\n\t * @param {String} data.markerName Marker name.\n\t * @param {module:engine/conversion/downcastdispatcher~DowncastConversionApi} conversionApi Conversion interface\n\t * to be used by callback, passed in `DowncastDispatcher` constructor.\n\t */\n\n\t/**\n\t * Fired when a marker is removed from the model.\n\t *\n\t * `removeMarker` is a namespace for a class of events. Names of actually called events follow this pattern:\n\t * `removeMarker:markerName`. By specifying certain marker names, you can make the events even more gradual. For example,\n\t * if markers are named `foo:abc`, `foo:bar`, then it is possible to listen to `removeMarker:foo` or `removeMarker:foo:abc` and\n\t * `removeMarker:foo:bar` events.\n\t *\n\t * @event removeMarker\n\t * @param {Object} data Additional information about the change.\n\t * @param {module:engine/model/range~Range} data.markerRange Marker range.\n\t * @param {String} data.markerName Marker name.\n\t * @param {module:engine/conversion/downcastdispatcher~DowncastConversionApi} conversionApi Conversion interface\n\t * to be used by callback, passed in `DowncastDispatcher` constructor.\n\t */\n}\n\nmix( DowncastDispatcher, EmitterMixin );\n\n// Helper function, checks whether change of `marker` at `modelPosition` should be converted. Marker changes are not\n// converted if they happen inside an element with custom conversion method.\n//\n// @param {module:engine/model/position~Position} modelPosition\n// @param {module:engine/model/markercollection~Marker} marker\n// @param {module:engine/conversion/mapper~Mapper} mapper\n// @returns {Boolean}\nfunction shouldMarkerChangeBeConverted( modelPosition, marker, mapper ) {\n\tconst range = marker.getRange();\n\tconst ancestors = Array.from( modelPosition.getAncestors() );\n\tancestors.shift(); // Remove root element. It cannot be passed to `model.Range#containsItem`.\n\tancestors.reverse();\n\n\tconst hasCustomHandling = ancestors.some( element => {\n\t\tif ( range.containsItem( element ) ) {\n\t\t\tconst viewElement = mapper.toViewElement( element );\n\n\t\t\treturn !!viewElement.getCustomProperty( 'addHighlight' );\n\t\t}\n\t} );\n\n\treturn !hasCustomHandling;\n}\n\nfunction getEventName( type, data ) {\n\tconst name = data.item.name || '$text';\n\n\treturn `${ type }:${ name }`;\n}\n\nfunction walkerValueToEventData( value ) {\n\tconst item = value.item;\n\tconst itemRange = Range._createFromPositionAndShift( value.previousPosition, value.length );\n\n\treturn {\n\t\titem,\n\t\trange: itemRange\n\t};\n}\n\nfunction elementOrTextProxyToView( item, mapper ) {\n\tif ( item.is( 'textProxy' ) ) {\n\t\tconst mappedPosition = mapper.toViewPosition( Position._createBefore( item ) );\n\t\tconst positionParent = mappedPosition.parent;\n\n\t\treturn positionParent.is( '$text' ) ? positionParent : null;\n\t}\n\n\treturn mapper.toViewElement( item );\n}\n\n/**\n * Conversion interface that is registered for given {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher}\n * and is passed as one of parameters when {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher dispatcher}\n * fires its events.\n *\n * @interface module:engine/conversion/downcastdispatcher~DowncastConversionApi\n */\n\n/**\n * The {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher} instance.\n *\n * @member {module:engine/conversion/downcastdispatcher~DowncastDispatcher} #dispatcher\n */\n\n/**\n * Stores the information about what parts of a processed model item are still waiting to be handled. After a piece of a model item was\n * converted, an appropriate consumable value should be {@link module:engine/conversion/modelconsumable~ModelConsumable#consume consumed}.\n *\n * @member {module:engine/conversion/modelconsumable~ModelConsumable} #consumable\n */\n\n/**\n * The {@link module:engine/conversion/mapper~Mapper} instance.\n *\n * @member {module:engine/conversion/mapper~Mapper} #mapper\n */\n\n/**\n * The {@link module:engine/model/schema~Schema} instance set for the model that is downcast.\n *\n * @member {module:engine/model/schema~Schema} #schema\n */\n\n/**\n * The {@link module:engine/view/downcastwriter~DowncastWriter} instance used to manipulate the data during conversion.\n *\n * @member {module:engine/view/downcastwriter~DowncastWriter} #writer\n */\n\n/**\n * An object with an additional configuration which can be used during the conversion process. Available only for data downcast conversion.\n *\n * @member {Object} #options\n */\n"]}]}