{"remainingRequest":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/babel-loader/lib/index.js!/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-dev-webpack-plugin/lib/translatesourceloader.js?{}!/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-utils/src/fastdiff.js","dependencies":[{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-utils/src/fastdiff.js","mtime":499162500000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-dev-webpack-plugin/lib/translatesourceloader.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-utils/src/fastdiff.js"],"names":["fastDiff","a","b","cmp","atomicChanges","Array","isArray","prototype","slice","call","changeIndexes","findChangeBoundaryIndexes","changeIndexesToAtomicChanges","length","changeIndexesToChanges","arr1","arr2","firstIndex","findFirstDifferenceIndex","lastIndexOld","lastIndexNew","oldArrayReversed","cutAndReverse","newArrayReversed","lastIndex","i","Math","max","undefined","arr","howMany","reverse","newArray","result","push","index","type","values","newLength","fill","concat"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/fastdiff\n */\n\n/**\n * Finds positions of the first and last change in the given string/array and generates a set of changes:\n *\n *\t\tfastDiff( '12a', '12xyza' );\n *\t\t// [ { index: 2, type: 'insert', values: [ 'x', 'y', 'z' ] } ]\n *\n *\t\tfastDiff( '12a', '12aa' );\n *\t\t// [ { index: 3, type: 'insert', values: [ 'a' ] } ]\n *\n *\t\tfastDiff( '12xyza', '12a' );\n *\t\t// [ { index: 2, type: 'delete', howMany: 3 } ]\n *\n *\t\tfastDiff( [ '1', '2', 'a', 'a' ], [ '1', '2', 'a' ] );\n *\t\t// [ { index: 3, type: 'delete', howMany: 1 } ]\n *\n *\t\tfastDiff( [ '1', '2', 'a', 'b', 'c', '3' ], [ '2', 'a', 'b' ] );\n *\t\t// [ { index: 0, type: 'insert', values: [ '2', 'a', 'b' ] }, { index: 3, type: 'delete', howMany: 6 } ]\n *\n * Passed arrays can contain any type of data, however to compare them correctly custom comparator function\n * should be passed as a third parameter:\n *\n *\t\tfastDiff( [ { value: 1 }, { value: 2 } ], [ { value: 1 }, { value: 3 } ], ( a, b ) => {\n *\t\t\treturn a.value === b.value;\n *\t\t} );\n *\t\t// [ { index: 1, type: 'insert', values: [ { value: 3 } ] }, { index: 2, type: 'delete', howMany: 1 } ]\n *\n * The resulted set of changes can be applied to the input in order to transform it into the output, for example:\n *\n *\t\tlet input = '12abc3';\n *\t\tconst output = '2ab';\n *\t\tconst changes = fastDiff( input, output );\n *\n *\t\tchanges.forEach( change => {\n *\t\t\tif ( change.type == 'insert' ) {\n *\t\t\t\tinput = input.substring( 0, change.index ) + change.values.join( '' ) + input.substring( change.index );\n *\t\t\t} else if ( change.type == 'delete' ) {\n *\t\t\t\tinput = input.substring( 0, change.index ) + input.substring( change.index + change.howMany );\n *\t\t\t}\n *\t\t} );\n *\n *\t\t// input equals output now\n *\n * or in case of arrays:\n *\n *\t\tlet input = [ '1', '2', 'a', 'b', 'c', '3' ];\n *\t\tconst output = [ '2', 'a', 'b' ];\n *\t\tconst changes = fastDiff( input, output );\n *\n *\t\tchanges.forEach( change => {\n *\t\t\tif ( change.type == 'insert' ) {\n *\t\t\t\tinput = input.slice( 0, change.index ).concat( change.values, input.slice( change.index ) );\n *\t\t\t} else if ( change.type == 'delete' ) {\n *\t\t\t\tinput = input.slice( 0, change.index ).concat( input.slice( change.index + change.howMany ) );\n *\t\t\t}\n *\t\t} );\n *\n *\t\t// input equals output now\n *\n * By passing `true` as the fourth parameter (`atomicChanges`) the output of this function will become compatible with\n * the {@link module:utils/diff~diff `diff()`} function:\n *\n *\t\tfastDiff( '12a', '12xyza' );\n *\t\t// [ 'equal', 'equal', 'insert', 'insert', 'insert', 'equal' ]\n *\n * The default output format of this function is compatible with the output format of\n * {@link module:utils/difftochanges~diffToChanges `diffToChanges()`}. The `diffToChanges()` input format is, in turn,\n * compatible with the output of {@link module:utils/diff~diff `diff()`}:\n *\n *\t\tconst a = '1234';\n *\t\tconst b = '12xyz34';\n *\n *\t\t// Both calls will return the same results (grouped changes format).\n *\t\tfastDiff( a, b );\n *\t\tdiffToChanges( diff( a, b ) );\n *\n *\t\t// Again, both calls will return the same results (atomic changes format).\n *\t\tfastDiff( a, b, null, true );\n *\t\tdiff( a, b );\n *\n *\n * @param {Array|String} a Input array or string.\n * @param {Array|String} b Input array or string.\n * @param {Function} [cmp] Optional function used to compare array values, by default `===` (strict equal operator) is used.\n * @param {Boolean} [atomicChanges=false] Whether an array of `inset|delete|equal` operations should\n * be returned instead of changes set. This makes this function compatible with {@link module:utils/diff~diff `diff()`}.\n * @returns {Array} Array of changes.\n */\nexport default function fastDiff( a, b, cmp, atomicChanges = false ) {\n\t// Set the comparator function.\n\tcmp = cmp || function( a, b ) {\n\t\treturn a === b;\n\t};\n\n\t// Convert the string (or any array-like object - eg. NodeList) to an array by using the slice() method because,\n\t// unlike Array.from(), it returns array of UTF-16 code units instead of the code points of a string.\n\t// One code point might be a surrogate pair of two code units. All text offsets are expected to be in code units.\n\t// See ckeditor/ckeditor5#3147.\n\t//\n\t// We need to make sure here that fastDiff() works identical to diff().\n\tif ( !Array.isArray( a ) ) {\n\t\ta = Array.prototype.slice.call( a );\n\t}\n\n\tif ( !Array.isArray( b ) ) {\n\t\tb = Array.prototype.slice.call( b );\n\t}\n\n\t// Find first and last change.\n\tconst changeIndexes = findChangeBoundaryIndexes( a, b, cmp );\n\n\t// Transform into changes array.\n\treturn atomicChanges ? changeIndexesToAtomicChanges( changeIndexes, b.length ) : changeIndexesToChanges( b, changeIndexes );\n}\n\n// Finds position of the first and last change in the given arrays. For example:\n//\n//\t\tconst indexes = findChangeBoundaryIndexes( [ '1', '2', '3', '4' ], [ '1', '3', '4', '2', '4' ] );\n//\t\tconsole.log( indexes ); // { firstIndex: 1, lastIndexOld: 3, lastIndexNew: 4 }\n//\n// The above indexes means that in the first array the modified part is `1[23]4` and in the second array it is `1[342]4`.\n// Based on such indexes, array with `insert`/`delete` operations which allows transforming first value into the second one\n// can be generated.\n//\n// @param {Array} arr1\n// @param {Array} arr2\n// @param {Function} cmp Comparator function.\n// @returns {Object}\n// @returns {Number} return.firstIndex Index of the first change in both values (always the same for both).\n// @returns {Number} result.lastIndexOld Index of the last common value in `arr1`.\n// @returns {Number} result.lastIndexNew Index of the last common value in `arr2`.\nfunction findChangeBoundaryIndexes( arr1, arr2, cmp ) {\n\t// Find the first difference between passed values.\n\tconst firstIndex = findFirstDifferenceIndex( arr1, arr2, cmp );\n\n\t// If arrays are equal return -1 indexes object.\n\tif ( firstIndex === -1 ) {\n\t\treturn { firstIndex: -1, lastIndexOld: -1, lastIndexNew: -1 };\n\t}\n\n\t// Remove the common part of each value and reverse them to make it simpler to find the last difference between them.\n\tconst oldArrayReversed = cutAndReverse( arr1, firstIndex );\n\tconst newArrayReversed = cutAndReverse( arr2, firstIndex );\n\n\t// Find the first difference between reversed values.\n\t// It should be treated as \"how many elements from the end the last difference occurred\".\n\t//\n\t// For example:\n\t//\n\t// \t\t\t\tinitial\t->\tafter cut\t-> reversed:\n\t// oldValue:\t'321ba'\t->\t'21ba'\t\t-> 'ab12'\n\t// newValue:\t'31xba'\t->\t'1xba'\t\t-> 'abx1'\n\t// lastIndex:\t\t\t\t\t\t\t-> 2\n\t//\n\t// So the last change occurred two characters from the end of the arrays.\n\tconst lastIndex = findFirstDifferenceIndex( oldArrayReversed, newArrayReversed, cmp );\n\n\t// Use `lastIndex` to calculate proper offset, starting from the beginning (`lastIndex` kind of starts from the end).\n\tconst lastIndexOld = arr1.length - lastIndex;\n\tconst lastIndexNew = arr2.length - lastIndex;\n\n\treturn { firstIndex, lastIndexOld, lastIndexNew };\n}\n\n// Returns a first index on which given arrays differ. If both arrays are the same, -1 is returned.\n//\n// @param {Array} arr1\n// @param {Array} arr2\n// @param {Function} cmp Comparator function.\n// @returns {Number}\nfunction findFirstDifferenceIndex( arr1, arr2, cmp ) {\n\tfor ( let i = 0; i < Math.max( arr1.length, arr2.length ); i++ ) {\n\t\tif ( arr1[ i ] === undefined || arr2[ i ] === undefined || !cmp( arr1[ i ], arr2[ i ] ) ) {\n\t\t\treturn i;\n\t\t}\n\t}\n\n\treturn -1; // Return -1 if arrays are equal.\n}\n\n// Returns a copy of the given array with `howMany` elements removed starting from the beginning and in reversed order.\n//\n// @param {Array} arr Array to be processed.\n// @param {Number} howMany How many elements from array beginning to remove.\n// @returns {Array} Shortened and reversed array.\nfunction cutAndReverse( arr, howMany ) {\n\treturn arr.slice( howMany ).reverse();\n}\n\n// Generates changes array based on change indexes from `findChangeBoundaryIndexes` function. This function will\n// generate array with 0 (no changes), 1 (deletion or insertion) or 2 records (insertion and deletion).\n//\n// @param {Array} newArray New array for which change indexes were calculated.\n// @param {Object} changeIndexes Change indexes object from `findChangeBoundaryIndexes` function.\n// @returns {Array.<Object>} Array of changes compatible with {@link module:utils/difftochanges~diffToChanges} format.\nfunction changeIndexesToChanges( newArray, changeIndexes ) {\n\tconst result = [];\n\tconst { firstIndex, lastIndexOld, lastIndexNew } = changeIndexes;\n\n\t// Order operations as 'insert', 'delete' array to keep compatibility with {@link module:utils/difftochanges~diffToChanges}\n\t// in most cases. However, 'diffToChanges' does not stick to any order so in some cases\n\t// (for example replacing '12345' with 'abcd') it will generate 'delete', 'insert' order.\n\tif ( lastIndexNew - firstIndex > 0 ) {\n\t\tresult.push( {\n\t\t\tindex: firstIndex,\n\t\t\ttype: 'insert',\n\t\t\tvalues: newArray.slice( firstIndex, lastIndexNew )\n\t\t} );\n\t}\n\n\tif ( lastIndexOld - firstIndex > 0 ) {\n\t\tresult.push( {\n\t\t\tindex: firstIndex + ( lastIndexNew - firstIndex ), // Increase index of what was inserted.\n\t\t\ttype: 'delete',\n\t\t\thowMany: lastIndexOld - firstIndex\n\t\t} );\n\t}\n\n\treturn result;\n}\n\n// Generates array with set `equal|insert|delete` operations based on change indexes from `findChangeBoundaryIndexes` function.\n//\n// @param {Object} changeIndexes Change indexes object from `findChangeBoundaryIndexes` function.\n// @param {Number} newLength Length of the new array on which `findChangeBoundaryIndexes` calculated change indexes.\n// @returns {Array.<String>} Array of changes compatible with {@link module:utils/diff~diff} format.\nfunction changeIndexesToAtomicChanges( changeIndexes, newLength ) {\n\tconst { firstIndex, lastIndexOld, lastIndexNew } = changeIndexes;\n\n\t// No changes.\n\tif ( firstIndex === -1 ) {\n\t\treturn Array( newLength ).fill( 'equal' );\n\t}\n\n\tlet result = [];\n\tif ( firstIndex > 0 ) {\n\t\tresult = result.concat( Array( firstIndex ).fill( 'equal' ) );\n\t}\n\n\tif ( lastIndexNew - firstIndex > 0 ) {\n\t\tresult = result.concat( Array( lastIndexNew - firstIndex ).fill( 'insert' ) );\n\t}\n\n\tif ( lastIndexOld - firstIndex > 0 ) {\n\t\tresult = result.concat( Array( lastIndexOld - firstIndex ).fill( 'delete' ) );\n\t}\n\n\tif ( lastIndexNew < newLength ) {\n\t\tresult = result.concat( Array( newLength - lastIndexNew ).fill( 'equal' ) );\n\t}\n\n\treturn result;\n}\n"]}]}