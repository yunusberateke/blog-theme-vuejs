{"remainingRequest":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/babel-loader/lib/index.js!/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-dev-webpack-plugin/lib/translatesourceloader.js?{}!/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-engine/src/view/stylesmap.js","dependencies":[{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-engine/src/view/stylesmap.js","mtime":499162500000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-dev-webpack-plugin/lib/translatesourceloader.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-engine/src/view/stylesmap.js"],"names":["get","isObject","merge","set","unset","StylesMap","styleProcessor","_styles","_styleProcessor","entries","Object","from","Array","length","isEmpty","getStyleNames","inlineStyle","clear","parsedStyles","parseInlineStyles","key","value","toNormalizedForm","name","styles","getReducedForm","propertyDescriptor","find","property","isArray","nameOrObject","valueOrObject","path","toPath","_cleanEmptyObjectsOnPath","getNormalized","_getStylesEntries","map","arr","join","sort","propertyName","parsed","keys","push","pathParts","split","isChildPath","parentPath","splice","parentObject","isParentEmpty","remove","StylesProcessor","_normalizers","Map","_extractors","_reducers","_consumables","propertyValue","appendStyleValue","has","normalizer","undefined","extractor","normalizedValue","reducer","callback","callbackOrPath","shorthandName","styleNames","_mapStyleNames","alsoName","stylesString","quoteType","propertyNameStart","propertyValueStart","stylesMap","charAt","i","char","substr","trim","replace","stylesObject","nameOrPath","valueToSet"],"mappings":"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ED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACC,uBAAeT,IAAf,EAAsB;AACrB,aAAO,KAAKf,eAAL,CAAqB2B,aAArB,CAAoCZ,IAApC,EAA0C,KAAKhB,OAA/C,CAAP;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACC,oBAAW;AACV,UAAK,KAAKO,OAAV,EAAoB;AACnB,eAAO,EAAP;AACA;;AAED,aAAO,KAAKsB,iBAAL,GACLC,GADK,CACA,UAAAC,GAAG;AAAA,eAAIA,GAAG,CAACC,IAAJ,CAAU,GAAV,CAAJ;AAAA,OADH,EAELC,IAFK,GAGLD,IAHK,CAGC,GAHD,IAGS,GAHhB;AAIA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACC,qBAAaE,YAAb,EAA4B;AAC3B,UAAK,KAAK3B,OAAV,EAAoB;AACnB;AACA;;AAED,UAAK,KAAKP,OAAL,CAAckC,YAAd,KAAgC,CAACxC,QAAQ,CAAE,KAAKM,OAAL,CAAckC,YAAd,CAAF,CAA9C,EAAiF;AAChF;AACA,eAAO,KAAKlC,OAAL,CAAckC,YAAd,CAAP;AACA;;AAED,UAAMjB,MAAM,GAAG,KAAKhB,eAAL,CAAqBiB,cAArB,CAAqCgB,YAArC,EAAmD,KAAKlC,OAAxD,CAAf;;AAEA,UAAMmB,kBAAkB,GAAGF,MAAM,CAACG,IAAP,CAAa;AAAA;AAAA,YAAIC,QAAJ;;AAAA,eAAoBA,QAAQ,KAAKa,YAA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CA;AACA;;AA1JA;AAAA;AAAA,WA2JC,0BAAkB1C,IAAlB,EAAyB;AACxB,aAAO,KAAKmC,YAAL,CAAkB1D,GAAlB,CAAuBuB,IAAvB,KAAiC,EAAxC;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAjNA;AAAA;AAAA,WAkNC,uBAAeA,IAAf,EAAqB4C,QAArB,EAAgC;AAC/B,WAAKb,YAAL,CAAkBnD,GAAlB,CAAuBoB,IAAvB,EAA6B4C,QAA7B;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AA5PA;AAAA;AAAA,WA6PC,sBAAc5C,IAAd,EAAoB6C,cAApB,EAAqC;AACpC,WAAKZ,WAAL,CAAiBrD,GAAjB,CAAsBoB,IAAtB,EAA4B6C,cAA5B;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAjSA;AAAA;AAAA,WAkSC,oBAAY7C,IAAZ,EAAkB4C,QAAlB,EAA6B;AAC5B,WAAKV,SAAL,CAAetD,GAAf,CAAoBoB,IAApB,EAA0B4C,QAA1B;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC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","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/stylesmap\n */\n\nimport { get, isObject, merge, set, unset } from 'lodash-es';\n\n/**\n * Styles map. Allows handling (adding, removing, retrieving) a set of style rules (usually, of an element).\n *\n * The styles map is capable of normalizing style names so e.g. the following operations are possible:\n */\nexport default class StylesMap {\n\t/**\n\t * Creates Styles instance.\n\t *\n\t * @param {module:engine/view/stylesmap~StylesProcessor} styleProcessor\n\t */\n\tconstructor( styleProcessor ) {\n\t\t/**\n\t\t * Keeps an internal representation of styles map. Normalized styles are kept as object tree to allow unified modification and\n\t\t * value access model using lodash's get, set, unset, etc methods.\n\t\t *\n\t\t * When no style processor rules are defined the it acts as simple key-value storage.\n\t\t *\n\t\t * @private\n\t\t * @type {Object}\n\t\t */\n\t\tthis._styles = {};\n\n\t\t/**\n\t\t * An instance of the {@link module:engine/view/stylesmap~StylesProcessor}.\n\t\t *\n\t\t * @private\n\t\t * @member {module:engine/view/stylesmap~StylesProcessor}\n\t\t */\n\t\tthis._styleProcessor = styleProcessor;\n\t}\n\n\t/**\n\t * Returns true if style map has no styles set.\n\t *\n\t * @returns {Boolean}\n\t */\n\tget isEmpty() {\n\t\tconst entries = Object.entries( this._styles );\n\t\tconst from = Array.from( entries );\n\n\t\treturn !from.length;\n\t}\n\n\t/**\n\t * Number of styles defined.\n\t *\n\t * @type {Number}\n\t */\n\tget size() {\n\t\tif ( this.isEmpty ) {\n\t\t\treturn 0;\n\t\t}\n\n\t\treturn this.getStyleNames().length;\n\t}\n\n\t/**\n\t * Set styles map to a new value.\n\t *\n\t *\t\tstyles.setTo( 'border:1px solid blue;margin-top:1px;' );\n\t *\n\t * @param {String} inlineStyle\n\t */\n\tsetTo( inlineStyle ) {\n\t\tthis.clear();\n\n\t\tconst parsedStyles = Array.from( parseInlineStyles( inlineStyle ).entries() );\n\n\t\tfor ( const [ key, value ] of parsedStyles ) {\n\t\t\tthis._styleProcessor.toNormalizedForm( key, value, this._styles );\n\t\t}\n\t}\n\n\t/**\n\t * Checks if a given style is set.\n\t *\n\t *\t\tstyles.setTo( 'margin-left:1px;' );\n\t *\n\t *\t\tstyles.has( 'margin-left' );    // -> true\n\t *\t\tstyles.has( 'padding' );        // -> false\n\t *\n\t * **Note**: This check supports normalized style names.\n\t *\n\t *\t\t// Enable 'margin' shorthand processing:\n\t *\t\teditor.data.addStyleProcessorRules( addMarginRules );\n\t *\n\t *\t\tstyles.setTo( 'margin:2px;' );\n\t *\n\t *\t\tstyles.has( 'margin' );         // -> true\n\t *\t\tstyles.has( 'margin-top' );     // -> true\n\t *\t\tstyles.has( 'margin-left' );    // -> true\n\t *\n\t *\t\tstyles.remove( 'margin-top' );\n\t *\n\t *\t\tstyles.has( 'margin' );         // -> false\n\t *\t\tstyles.has( 'margin-top' );     // -> false\n\t *\t\tstyles.has( 'margin-left' );    // -> true\n\t *\n\t * @param {String} name Style name.\n\t * @returns {Boolean}\n\t */\n\thas( name ) {\n\t\tif ( this.isEmpty ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst styles = this._styleProcessor.getReducedForm( name, this._styles );\n\n\t\tconst propertyDescriptor = styles.find( ( [ property ] ) => property === name );\n\n\t\t// Only return a value if it is set;\n\t\treturn Array.isArray( propertyDescriptor );\n\t}\n\n\t/**\n\t * Sets a given style.\n\t *\n\t * Can insert one by one:\n\t *\n\t *\t\tstyles.set( 'color', 'blue' );\n\t *\t\tstyles.set( 'margin-right', '1em' );\n\t *\n\t * or many styles at once:\n\t *\n\t *\t\tstyles.set( {\n\t *\t\t\tcolor: 'blue',\n\t *\t\t\t'margin-right': '1em'\n\t *\t\t} );\n\t *\n\t * ***Note**:* This method uses {@link module:engine/controller/datacontroller~DataController#addStyleProcessorRules\n\t * enabled style processor rules} to normalize passed values.\n\t *\n\t *\t\t// Enable 'margin' shorthand processing:\n\t *\t\teditor.data.addStyleProcessorRules( addMarginRules );\n\t *\n\t *\t\tstyles.set( 'margin', '2px' );\n\t *\n\t * The above code will set margin to:\n\t *\n\t *\t\tstyles.getNormalized( 'margin' );\n\t *\t\t// -> { top: '2px', right: '2px', bottom: '2px', left: '2px' }\n\t *\n\t * Which makes it possible to retrieve a \"sub-value\":\n\t *\n\t *\t\tstyles.get( 'margin-left' );       // -> '2px'\n\t *\n\t * Or modify it:\n\t *\n\t *\t\tstyles.remove( 'margin-left' );\n\t *\n\t *\t\tstyles.getNormalized( 'margin' );  // -> { top: '1px', bottom: '1px', right: '1px' }\n\t *\t\tstyles.toString();                 // -> 'margin-bottom:1px;margin-right:1px;margin-top:1px;'\n\t *\n\t * This method also allows to set normalized values directly (if a particular styles processor rule was enabled):\n\t *\n\t *\t\tstyles.set( 'border-color', { top: 'blue' } );\n\t *\t\tstyles.set( 'margin', { right: '2em' } );\n\t *\n\t *\t\tstyles.toString();                 // -> 'border-color-top:blue;margin-right:2em;'\n\t *\n\t * @param {String|Object} nameOrObject Style property name or object with multiple properties.\n\t * @param {String|Object} valueOrObject Value to set.\n\t */\n\tset( nameOrObject, valueOrObject ) {\n\t\tif ( isObject( nameOrObject ) ) {\n\t\t\tfor ( const [ key, value ] of Object.entries( nameOrObject ) ) {\n\t\t\t\tthis._styleProcessor.toNormalizedForm( key, value, this._styles );\n\t\t\t}\n\t\t} else {\n\t\t\tthis._styleProcessor.toNormalizedForm( nameOrObject, valueOrObject, this._styles );\n\t\t}\n\t}\n\n\t/**\n\t * Removes given style.\n\t *\n\t *\t\tstyles.setTo( 'background:#f00;margin-right:2px;' );\n\t *\n\t *\t\tstyles.remove( 'background' );\n\t *\n\t *\t\tstyles.toString();   // -> 'margin-right:2px;'\n\t *\n\t * ***Note**:* This method uses {@link module:engine/controller/datacontroller~DataController#addStyleProcessorRules\n\t * enabled style processor rules} to normalize passed values.\n\t *\n\t *\t\t// Enable 'margin' shorthand processing:\n\t *\t\teditor.data.addStyleProcessorRules( addMarginRules );\n\t *\n\t *\t\tstyles.setTo( 'margin:1px' );\n\t *\n\t *\t\tstyles.remove( 'margin-top' );\n\t *\t\tstyles.remove( 'margin-right' );\n\t *\n\t *\t\tstyles.toString(); // -> 'margin-bottom:1px;margin-left:1px;'\n\t *\n\t * @param {String} name Style name.\n\t */\n\tremove( name ) {\n\t\tconst path = toPath( name );\n\n\t\tunset( this._styles, path );\n\t\tdelete this._styles[ name ];\n\n\t\tthis._cleanEmptyObjectsOnPath( path );\n\t}\n\n\t/**\n\t * Returns a normalized style object or a single value.\n\t *\n\t *\t\t// Enable 'margin' shorthand processing:\n\t *\t\teditor.data.addStyleProcessorRules( addMarginRules );\n\t *\n\t *\t\tconst styles = new Styles();\n\t *\t\tstyles.setTo( 'margin:1px 2px 3em;' );\n\t *\n\t *\t\tstyles.getNormalized( 'margin' );\n\t *\t\t// will log:\n\t *\t\t// {\n\t *\t\t//     top: '1px',\n\t *\t\t//     right: '2px',\n\t *\t\t//     bottom: '3em',\n\t *\t\t//     left: '2px'     // normalized value from margin shorthand\n\t *\t\t// }\n\t *\n\t *\t\tstyles.getNormalized( 'margin-left' ); // -> '2px'\n\t *\n\t * **Note**: This method will only return normalized styles if a style processor was defined.\n\t *\n\t * @param {String} name Style name.\n\t * @returns {Object|String|undefined}\n\t */\n\tgetNormalized( name ) {\n\t\treturn this._styleProcessor.getNormalized( name, this._styles );\n\t}\n\n\t/**\n\t * Returns a normalized style string. Styles are sorted by name.\n\t *\n\t *\t\tstyles.set( 'margin' , '1px' );\n\t *\t\tstyles.set( 'background', '#f00' );\n\t *\n\t *\t\tstyles.toString(); // -> 'background:#f00;margin:1px;'\n\t *\n\t * **Note**: This method supports normalized styles if defined.\n\t *\n\t *\t\t// Enable 'margin' shorthand processing:\n\t *\t\teditor.data.addStyleProcessorRules( addMarginRules );\n\t *\n\t *\t\tstyles.set( 'margin' , '1px' );\n\t *\t\tstyles.set( 'background', '#f00' );\n\t *\t\tstyles.remove( 'margin-top' );\n\t *\t\tstyles.remove( 'margin-right' );\n\t *\n\t *\t\tstyles.toString(); // -> 'background:#f00;margin-bottom:1px;margin-left:1px;'\n\t *\n\t * @returns {String}\n\t */\n\ttoString() {\n\t\tif ( this.isEmpty ) {\n\t\t\treturn '';\n\t\t}\n\n\t\treturn this._getStylesEntries()\n\t\t\t.map( arr => arr.join( ':' ) )\n\t\t\t.sort()\n\t\t\t.join( ';' ) + ';';\n\t}\n\n\t/**\n\t * Returns property as a value string or undefined if property is not set.\n\t *\n\t *\t\t// Enable 'margin' shorthand processing:\n\t *\t\teditor.data.addStyleProcessorRules( addMarginRules );\n\t *\n\t *\t\tconst styles = new Styles();\n\t *\t\tstyles.setTo( 'margin:1px;' );\n\t *\t\tstyles.set( 'margin-bottom', '3em' );\n\t *\n\t *\t\tstyles.getAsString( 'margin' ); // -> 'margin: 1px 1px 3em;'\n\t *\n\t * Note, however, that all sub-values must be set for the longhand property name to return a value:\n\t *\n\t *\t\tconst styles = new Styles();\n\t *\t\tstyles.setTo( 'margin:1px;' );\n\t *\t\tstyles.remove( 'margin-bottom' );\n\t *\n\t *\t\tstyles.getAsString( 'margin' ); // -> undefined\n\t *\n\t * In the above scenario, it is not possible to return a `margin` value, so `undefined` is returned.\n\t * Instead, you should use:\n\t *\n\t *\t\tconst styles = new Styles();\n\t *\t\tstyles.setTo( 'margin:1px;' );\n\t *\t\tstyles.remove( 'margin-bottom' );\n\t *\n\t *\t\tfor ( const styleName of styles.getStyleNames() ) {\n\t *\t\t\tconsole.log( styleName, styles.getAsString( styleName ) );\n\t *\t\t}\n\t *\t\t// 'margin-top', '1px'\n\t *\t\t// 'margin-right', '1px'\n\t *\t\t// 'margin-left', '1px'\n\t *\n\t * In general, it is recommend to iterate over style names like in the example above. This way, you will always get all\n\t * the currently set style values. So, if all the 4 margin values would be set\n\t * the for-of loop above would yield only `'margin'`, `'1px'`:\n\t *\n\t *\t\tconst styles = new Styles();\n\t *\t\tstyles.setTo( 'margin:1px;' );\n\t *\n\t *\t\tfor ( const styleName of styles.getStyleNames() ) {\n\t *\t\t\tconsole.log( styleName, styles.getAsString( styleName ) );\n\t *\t\t}\n\t *\t\t// 'margin', '1px'\n\t *\n\t * **Note**: To get a normalized version of a longhand property use the {@link #getNormalized `#getNormalized()`} method.\n\t *\n\t * @param {String} propertyName\n\t * @returns {String|undefined}\n\t */\n\tgetAsString( propertyName ) {\n\t\tif ( this.isEmpty ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( this._styles[ propertyName ] && !isObject( this._styles[ propertyName ] ) ) {\n\t\t\t// Try return styles set directly - values that are not parsed.\n\t\t\treturn this._styles[ propertyName ];\n\t\t}\n\n\t\tconst styles = this._styleProcessor.getReducedForm( propertyName, this._styles );\n\n\t\tconst propertyDescriptor = styles.find( ( [ property ] ) => property === propertyName );\n\n\t\t// Only return a value if it is set;\n\t\tif ( Array.isArray( propertyDescriptor ) ) {\n\t\t\treturn propertyDescriptor[ 1 ];\n\t\t}\n\t}\n\n\t/**\n\t * Returns style property names as they would appear when using {@link #toString `#toString()`}.\n\t *\n\t * @returns {Array.<String>}\n\t */\n\tgetStyleNames() {\n\t\tif ( this.isEmpty ) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst entries = this._getStylesEntries();\n\n\t\treturn entries.map( ( [ key ] ) => key );\n\t}\n\n\t/**\n\t * Removes all styles.\n\t */\n\tclear() {\n\t\tthis._styles = {};\n\t}\n\n\t/**\n\t * Returns normalized styles entries for further processing.\n\t *\n\t * @private\n\t * @returns {Array.<module:engine/view/stylesmap~PropertyDescriptor>}\n\t */\n\t_getStylesEntries() {\n\t\tconst parsed = [];\n\n\t\tconst keys = Object.keys( this._styles );\n\n\t\tfor ( const key of keys ) {\n\t\t\tparsed.push( ...this._styleProcessor.getReducedForm( key, this._styles ) );\n\t\t}\n\n\t\treturn parsed;\n\t}\n\n\t/**\n\t * Removes empty objects upon removing an entry from internal object.\n\t *\n\t * @param {String} path\n\t * @private\n\t */\n\t_cleanEmptyObjectsOnPath( path ) {\n\t\tconst pathParts = path.split( '.' );\n\t\tconst isChildPath = pathParts.length > 1;\n\n\t\tif ( !isChildPath ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst parentPath = pathParts.splice( 0, pathParts.length - 1 ).join( '.' );\n\n\t\tconst parentObject = get( this._styles, parentPath );\n\n\t\tif ( !parentObject ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst isParentEmpty = !Array.from( Object.keys( parentObject ) ).length;\n\n\t\tif ( isParentEmpty ) {\n\t\t\tthis.remove( parentPath );\n\t\t}\n\t}\n}\n\n/**\n * Style processor is responsible for writing and reading a normalized styles object.\n */\nexport class StylesProcessor {\n\t/**\n\t * Creates StylesProcessor instance.\n\t *\n\t * @private\n\t */\n\tconstructor() {\n\t\tthis._normalizers = new Map();\n\t\tthis._extractors = new Map();\n\t\tthis._reducers = new Map();\n\t\tthis._consumables = new Map();\n\t}\n\n\t/**\n\t * Parse style string value to a normalized object and appends it to styles object.\n\t *\n\t *\t\tconst styles = {};\n\t *\n\t *\t\tstylesProcessor.toNormalizedForm( 'margin', '1px', styles );\n\t *\n\t *\t\t// styles will consist: { margin: { top: '1px', right: '1px', bottom: '1px', left: '1px; } }\n\t *\n\t * **Note**: To define normalizer callbacks use {@link #setNormalizer}.\n\t *\n\t * @param {String} name Name of style property.\n\t * @param {String} propertyValue Value of style property.\n\t * @param {Object} styles Object holding normalized styles.\n\t */\n\ttoNormalizedForm( name, propertyValue, styles ) {\n\t\tif ( isObject( propertyValue ) ) {\n\t\t\tappendStyleValue( styles, toPath( name ), propertyValue );\n\n\t\t\treturn;\n\t\t}\n\n\t\tif ( this._normalizers.has( name ) ) {\n\t\t\tconst normalizer = this._normalizers.get( name );\n\n\t\t\tconst { path, value } = normalizer( propertyValue );\n\n\t\t\tappendStyleValue( styles, path, value );\n\t\t} else {\n\t\t\tappendStyleValue( styles, name, propertyValue );\n\t\t}\n\t}\n\n\t/**\n\t * Returns a normalized version of a style property.\n\t *\t\tconst styles = {\n\t *\t\t\tmargin: { top: '1px', right: '1px', bottom: '1px', left: '1px; },\n\t *\t\t\tbackground: { color: '#f00' }\n\t *\t\t};\n\t *\n\t *\t\tstylesProcessor.getNormalized( 'background' );\n\t *\t\t// will return: { color: '#f00' }\n\t *\n\t *\t\tstylesProcessor.getNormalized( 'margin-top' );\n\t *\t\t// will return: '1px'\n\t *\n\t * **Note**: In some cases extracting single value requires defining an extractor callback {@link #setExtractor}.\n\t *\n\t * @param {String} name Name of style property.\n\t * @param {Object} styles Object holding normalized styles.\n\t * @returns {*}\n\t */\n\tgetNormalized( name, styles ) {\n\t\tif ( !name ) {\n\t\t\treturn merge( {}, styles );\n\t\t}\n\n\t\t// Might be empty string.\n\t\tif ( styles[ name ] !== undefined ) {\n\t\t\treturn styles[ name ];\n\t\t}\n\n\t\tif ( this._extractors.has( name ) ) {\n\t\t\tconst extractor = this._extractors.get( name );\n\n\t\t\tif ( typeof extractor === 'string' ) {\n\t\t\t\treturn get( styles, extractor );\n\t\t\t}\n\n\t\t\tconst value = extractor( name, styles );\n\n\t\t\tif ( value ) {\n\t\t\t\treturn value;\n\t\t\t}\n\t\t}\n\n\t\treturn get( styles, toPath( name ) );\n\t}\n\n\t/**\n\t * Returns a reduced form of style property form normalized object.\n\t *\n\t * For default margin reducer, the below code:\n\t *\n\t *\t\tstylesProcessor.getReducedForm( 'margin', {\n\t *\t\t\tmargin: { top: '1px', right: '1px', bottom: '2px', left: '1px; }\n\t *\t\t} );\n\t *\n\t * will return:\n\t *\n\t *\t\t[\n\t *\t\t\t[ 'margin', '1px 1px 2px' ]\n\t *\t\t]\n\t *\n\t * because it might be represented as a shorthand 'margin' value. However if one of margin long hand values is missing it should return:\n\t *\n\t *\t\t[\n\t *\t\t\t[ 'margin-top', '1px' ],\n\t *\t\t\t[ 'margin-right', '1px' ],\n\t *\t\t\t[ 'margin-bottom', '2px' ]\n\t *\t\t\t// the 'left' value is missing - cannot use 'margin' shorthand.\n\t *\t\t]\n\t *\n\t * **Note**: To define reducer callbacks use {@link #setReducer}.\n\t *\n\t * @param {String} name\n\t * @param {String} name Name of style property.\n\t * @param {Object} styles Object holding normalized styles.\n\t * @returns {Array.<module:engine/view/stylesmap~PropertyDescriptor>}\n\t */\n\tgetReducedForm( name, styles ) {\n\t\tconst normalizedValue = this.getNormalized( name, styles );\n\n\t\t// Might be empty string.\n\t\tif ( normalizedValue === undefined ) {\n\t\t\treturn [];\n\t\t}\n\n\t\tif ( this._reducers.has( name ) ) {\n\t\t\tconst reducer = this._reducers.get( name );\n\n\t\t\treturn reducer( normalizedValue );\n\t\t}\n\n\t\treturn [ [ name, normalizedValue ] ];\n\t}\n\n\t/**\n\t * Returns related style names.\n\t *\n\t *\t\tstylesProcessor.getRelatedStyles( 'margin' );\n\t *\t\t// will return: [ 'margin-top', 'margin-right', 'margin-bottom', 'margin-left' ];\n\t *\n\t *\t\tstylesProcessor.getRelatedStyles( 'margin-top' );\n\t *\t\t// will return: [ 'margin' ];\n\t *\n\t * **Note**: To define new style relations load an existing style processor or use\n\t * {@link module:engine/view/stylesmap~StylesProcessor#setStyleRelation `StylesProcessor.setStyleRelation()`}.\n\t *\n\t * @param {String} name\n\t * @returns {Array.<String>}\n\t */\n\tgetRelatedStyles( name ) {\n\t\treturn this._consumables.get( name ) || [];\n\t}\n\n\t/**\n\t * Adds a normalizer method for a style property.\n\t *\n\t * A normalizer returns describing how the value should be normalized.\n\t *\n\t * For instance 'margin' style is a shorthand for four margin values:\n\t *\n\t * - 'margin-top'\n\t * - 'margin-right'\n\t * - 'margin-bottom'\n\t * - 'margin-left'\n\t *\n\t * and can be written in various ways if some values are equal to others. For instance `'margin: 1px 2em;'` is a shorthand for\n\t * `'margin-top: 1px;margin-right: 2em;margin-bottom: 1px;margin-left: 2em'`.\n\t *\n\t * A normalizer should parse various margin notations as a single object:\n\t *\n\t *\t\tconst styles = {\n\t *\t\t\tmargin: {\n\t *\t\t\t\ttop: '1px',\n\t *\t\t\t\tright: '2em',\n\t *\t\t\t\tbottom: '1px',\n\t *\t\t\t\tleft: '2em'\n\t *\t\t\t}\n\t *\t\t};\n\t *\n\t * Thus a normalizer for 'margin' style should return an object defining style path and value to store:\n\t *\n\t *\t\tconst returnValue = {\n\t *\t\t\tpath: 'margin',\n\t *\t\t\tvalue: {\n\t *\t\t\t\ttop: '1px',\n\t *\t\t\t\tright: '2em',\n\t *\t\t\t\tbottom: '1px',\n\t *\t\t\t\tleft: '2em'\n\t *\t\t\t}\n\t *\t\t};\n\t *\n\t * Additionally to fully support all margin notations there should be also defined 4 normalizers for longhand margin notations. Below\n\t * is an example for 'margin-top' style property normalizer:\n\t *\n\t *\t\tstylesProcessor.setNormalizer( 'margin-top', valueString => {\n\t *\t\t\treturn {\n\t *\t\t\t\tpath: 'margin.top',\n\t *\t\t\t\tvalue: valueString\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t * @param {String} name\n\t * @param {Function} callback\n\t */\n\tsetNormalizer( name, callback ) {\n\t\tthis._normalizers.set( name, callback );\n\t}\n\n\t/**\n\t * Adds a extractor callback for a style property.\n\t *\n\t * Most normalized style values are stored as one level objects. It is assumed that `'margin-top'` style will be stored as:\n\t *\n\t *\t\tconst styles = {\n\t *\t\t\tmargin: {\n\t *\t\t\t\ttop: 'value'\n\t *\t\t\t}\n\t *\t\t}\n\t *\n\t * However, some styles can have conflicting notations and thus it might be harder to extract a style value from shorthand. For instance\n\t * the 'border-top-style' can be defined using `'border-top:solid'`, `'border-style:solid none none none'` or by `'border:solid'`\n\t * shorthands. The default border styles processors stores styles as:\n\t *\n\t *\t\tconst styles = {\n\t *\t\t\tborder: {\n\t *\t\t\t\tstyle: {\n\t *\t\t\t\t\ttop: 'solid'\n\t *\t\t\t\t}\n\t *\t\t\t}\n\t *\t\t}\n\t *\n\t * as it is better to modify border style independently from other values. On the other part the output of the border might be\n\t * desired as `border-top`, `border-left`, etc notation.\n\t *\n\t * In the above example a reducer should return a side border value that combines style, color and width:\n\t *\n\t *\t\tstyleProcessor.setExtractor( 'border-top', styles => {\n\t *\t\t\treturn {\n\t *\t\t\t\tcolor: styles.border.color.top,\n\t *\t\t\t\tstyle: styles.border.style.top,\n\t *\t\t\t\twidth: styles.border.width.top\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t * @param {String} name\n\t * @param {Function|String} callbackOrPath Callback that return a requested value or path string for single values.\n\t */\n\tsetExtractor( name, callbackOrPath ) {\n\t\tthis._extractors.set( name, callbackOrPath );\n\t}\n\n\t/**\n\t * Adds a reducer callback for a style property.\n\t *\n\t * Reducer returns a minimal notation for given style name. For longhand properties it is not required to write a reducer as\n\t * by default the direct value from style path is taken.\n\t *\n\t * For shorthand styles a reducer should return minimal style notation either by returning single name-value tuple or multiple tuples\n\t * if a shorthand cannot be used. For instance for a margin shorthand a reducer might return:\n\t *\n\t *\t\tconst marginShortHandTuple = [\n\t *\t\t\t[ 'margin', '1px 1px 2px' ]\n\t *\t\t];\n\t *\n\t * or a longhand tuples for defined values:\n\t *\n\t *\t\t// Considering margin.bottom and margin.left are undefined.\n\t *\t\tconst marginLonghandsTuples = [\n\t *\t\t\t[ 'margin-top', '1px' ],\n\t *\t\t\t[ 'margin-right', '1px' ]\n\t *\t\t];\n\t *\n\t * A reducer obtains a normalized style value:\n\t *\n\t *\t\t// Simplified reducer that always outputs 4 values which are always present:\n\t *\t\tstylesProcessor.setReducer( 'margin', margin => {\n\t *\t\t\treturn [\n\t *\t\t\t\t[ 'margin', `${ margin.top } ${ margin.right } ${ margin.bottom } ${ margin.left }` ]\n\t *\t\t\t]\n\t *\t\t} );\n\t *\n\t * @param {String} name\n\t * @param {Function} callback\n\t */\n\tsetReducer( name, callback ) {\n\t\tthis._reducers.set( name, callback );\n\t}\n\n\t/**\n\t * Defines a style shorthand relation to other style notations.\n\t *\n\t *\t\tstylesProcessor.setStyleRelation( 'margin', [\n\t *\t\t\t'margin-top',\n\t *\t\t\t'margin-right',\n\t *\t\t\t'margin-bottom',\n\t *\t\t\t'margin-left'\n\t *\t\t] );\n\t *\n\t * This enables expanding of style names for shorthands. For instance, if defined,\n\t * {@link module:engine/conversion/viewconsumable~ViewConsumable view consumable} items are automatically created\n\t * for long-hand margin style notation alongside the `'margin'` item.\n\t *\n\t * This means that when an element being converted has a style `margin`, a converter for `margin-left` will work just\n\t * fine since the view consumable will contain a consumable `margin-left` item (thanks to the relation) and\n\t * `element.getStyle( 'margin-left' )` will work as well assuming that the style processor was correctly configured.\n\t * However, once `margin-left` is consumed, `margin` will not be consumable anymore.\n\t *\n\t * @param {String} shorthandName\n\t * @param {Array.<String>} styleNames\n\t */\n\tsetStyleRelation( shorthandName, styleNames ) {\n\t\tthis._mapStyleNames( shorthandName, styleNames );\n\n\t\tfor ( const alsoName of styleNames ) {\n\t\t\tthis._mapStyleNames( alsoName, [ shorthandName ] );\n\t\t}\n\t}\n\n\t/**\n\t * Set two-way binding of style names.\n\t *\n\t * @param {String} name\n\t * @param {Array.<String>} styleNames\n\t * @private\n\t */\n\t_mapStyleNames( name, styleNames ) {\n\t\tif ( !this._consumables.has( name ) ) {\n\t\t\tthis._consumables.set( name, [] );\n\t\t}\n\n\t\tthis._consumables.get( name ).push( ...styleNames );\n\t}\n}\n\n// Parses inline styles and puts property - value pairs into styles map.\n//\n// @param {String} stylesString Styles to parse.\n// @returns {Map.<String, String>} stylesMap Map of parsed properties and values.\nfunction parseInlineStyles( stylesString ) {\n\t// `null` if no quote was found in input string or last found quote was a closing quote. See below.\n\tlet quoteType = null;\n\tlet propertyNameStart = 0;\n\tlet propertyValueStart = 0;\n\tlet propertyName = null;\n\n\tconst stylesMap = new Map();\n\n\t// Do not set anything if input string is empty.\n\tif ( stylesString === '' ) {\n\t\treturn stylesMap;\n\t}\n\n\t// Fix inline styles that do not end with `;` so they are compatible with algorithm below.\n\tif ( stylesString.charAt( stylesString.length - 1 ) != ';' ) {\n\t\tstylesString = stylesString + ';';\n\t}\n\n\t// Seek the whole string for \"special characters\".\n\tfor ( let i = 0; i < stylesString.length; i++ ) {\n\t\tconst char = stylesString.charAt( i );\n\n\t\tif ( quoteType === null ) {\n\t\t\t// No quote found yet or last found quote was a closing quote.\n\t\t\tswitch ( char ) {\n\t\t\t\tcase ':':\n\t\t\t\t\t// Most of time colon means that property name just ended.\n\t\t\t\t\t// Sometimes however `:` is found inside property value (for example in background image url).\n\t\t\t\t\tif ( !propertyName ) {\n\t\t\t\t\t\t// Treat this as end of property only if property name is not already saved.\n\t\t\t\t\t\t// Save property name.\n\t\t\t\t\t\tpropertyName = stylesString.substr( propertyNameStart, i - propertyNameStart );\n\t\t\t\t\t\t// Save this point as the start of property value.\n\t\t\t\t\t\tpropertyValueStart = i + 1;\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase '\"':\n\t\t\t\tcase '\\'':\n\t\t\t\t\t// Opening quote found (this is an opening quote, because `quoteType` is `null`).\n\t\t\t\t\tquoteType = char;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase ';': {\n\t\t\t\t\t// Property value just ended.\n\t\t\t\t\t// Use previously stored property value start to obtain property value.\n\t\t\t\t\tconst propertyValue = stylesString.substr( propertyValueStart, i - propertyValueStart );\n\n\t\t\t\t\tif ( propertyName ) {\n\t\t\t\t\t\t// Save parsed part.\n\t\t\t\t\t\tstylesMap.set( propertyName.trim(), propertyValue.trim() );\n\t\t\t\t\t}\n\n\t\t\t\t\tpropertyName = null;\n\n\t\t\t\t\t// Save this point as property name start. Property name starts immediately after previous property value ends.\n\t\t\t\t\tpropertyNameStart = i + 1;\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} else if ( char === quoteType ) {\n\t\t\t// If a quote char is found and it is a closing quote, mark this fact by `null`-ing `quoteType`.\n\t\t\tquoteType = null;\n\t\t}\n\t}\n\n\treturn stylesMap;\n}\n\n// Return lodash compatible path from style name.\nfunction toPath( name ) {\n\treturn name.replace( '-', '.' );\n}\n\n// Appends style definition to the styles object.\n//\n// @param {String} nameOrPath\n// @param {String|Object} valueOrObject\n// @private\nfunction appendStyleValue( stylesObject, nameOrPath, valueOrObject ) {\n\tlet valueToSet = valueOrObject;\n\n\tif ( isObject( valueOrObject ) ) {\n\t\tvalueToSet = merge( {}, get( stylesObject, nameOrPath ), valueOrObject );\n\t}\n\n\tset( stylesObject, nameOrPath, valueToSet );\n}\n\n/**\n * A CSS style property descriptor that contains tuplet of two strings:\n *\n * - first string describes property name\n * - second string describes property value\n *\n *\t\tconst marginDescriptor = [ 'margin', '2px 3em' ];\n *\t\tconst marginTopDescriptor = [ 'margin-top', '2px' ];\n *\n * @typedef {Array.<String, String>} module:engine/view/stylesmap~PropertyDescriptor\n */\n\n/**\n * An object describing values associated with the sides of a box, for instance margins, paddings,\n * border widths, border colors, etc.\n *\n *\t\tconst margin = {\n *\t\t\ttop: '1px',\n *\t\t\tright: '3px',\n *\t\t\tbottom: '3px',\n *\t\t\tleft: '7px'\n *\t\t};\n *\n *\t\tconst borderColor = {\n *\t\t\ttop: 'red',\n *\t\t\tright: 'blue',\n *\t\t\tbottom: 'blue',\n *\t\t\tleft: 'red'\n *\t\t};\n *\n * @typedef {Object} module:engine/view/stylesmap~BoxSides\n *\n * @property {String} top Top side value.\n * @property {String} right Right side value.\n * @property {String} bottom Bottom side value.\n * @property {String} left Left side value.\n */\n"]}]}