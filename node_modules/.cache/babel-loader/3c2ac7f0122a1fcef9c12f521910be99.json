{"remainingRequest":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/babel-loader/lib/index.js!/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-dev-webpack-plugin/lib/translatesourceloader.js?{}!/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-engine/src/model/selection.js","dependencies":[{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-engine/src/model/selection.js","mtime":499162500000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-dev-webpack-plugin/lib/translatesourceloader.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyIGZyb20gIi9ob21lL2VrZWJlcmF0L1lhbmRleC5EaXNrL1Byb2plbGVyaW0vQmVuaW1Qcm9qZWxlcmltL3dlYnNpdGVtL3dlYnNpdGVtLXdlYi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlciI7CmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSAiL2hvbWUvZWtlYmVyYXQvWWFuZGV4LkRpc2svUHJvamVsZXJpbS9CZW5pbVByb2plbGVyaW0vd2Vic2l0ZW0vd2Vic2l0ZW0td2ViL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jbGFzc0NhbGxDaGVjayI7CmltcG9ydCBfY3JlYXRlQ2xhc3MgZnJvbSAiL2hvbWUvZWtlYmVyYXQvWWFuZGV4LkRpc2svUHJvamVsZXJpbS9CZW5pbVByb2plbGVyaW0vd2Vic2l0ZW0vd2Vic2l0ZW0td2ViL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jcmVhdGVDbGFzcyI7CmltcG9ydCAicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMubWFwLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZy5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5pdGVyYXRvci5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL3dlYi5kb20tY29sbGVjdGlvbnMuaXRlcmF0b3IuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuYW5jaG9yLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZnJvbS5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLndlYWstc2V0LmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmluZC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL3dlYi5kb20tY29sbGVjdGlvbnMuZm9yLWVhY2guanMiOwoKLyoqCiAqIEBsaWNlbnNlIENvcHlyaWdodCAoYykgMjAwMy0yMDIxLCBDS1NvdXJjZSAtIEZyZWRlcmljbyBLbmFiYmVuLiBBbGwgcmlnaHRzIHJlc2VydmVkLgogKiBGb3IgbGljZW5zaW5nLCBzZWUgTElDRU5TRS5tZCBvciBodHRwczovL2NrZWRpdG9yLmNvbS9sZWdhbC9ja2VkaXRvci1vc3MtbGljZW5zZQogKi8KCi8qKgogKiBAbW9kdWxlIGVuZ2luZS9tb2RlbC9zZWxlY3Rpb24KICovCmltcG9ydCBQb3NpdGlvbiBmcm9tICcuL3Bvc2l0aW9uJzsKaW1wb3J0IE5vZGUgZnJvbSAnLi9ub2RlJzsKaW1wb3J0IFJhbmdlIGZyb20gJy4vcmFuZ2UnOwppbXBvcnQgRW1pdHRlck1peGluIGZyb20gJ0Bja2VkaXRvci9ja2VkaXRvcjUtdXRpbHMvc3JjL2VtaXR0ZXJtaXhpbic7CmltcG9ydCBDS0VkaXRvckVycm9yIGZyb20gJ0Bja2VkaXRvci9ja2VkaXRvcjUtdXRpbHMvc3JjL2NrZWRpdG9yZXJyb3InOwppbXBvcnQgbWl4IGZyb20gJ0Bja2VkaXRvci9ja2VkaXRvcjUtdXRpbHMvc3JjL21peCc7CmltcG9ydCBpc0l0ZXJhYmxlIGZyb20gJ0Bja2VkaXRvci9ja2VkaXRvcjUtdXRpbHMvc3JjL2lzaXRlcmFibGUnOwovKioKICogU2VsZWN0aW9uIGlzIGEgc2V0IG9mIHtAbGluayBtb2R1bGU6ZW5naW5lL21vZGVsL3JhbmdlflJhbmdlIHJhbmdlc30uIEl0IGhhcyBhIGRpcmVjdGlvbiBzcGVjaWZpZWQgYnkgaXRzCiAqIHtAbGluayBtb2R1bGU6ZW5naW5lL21vZGVsL3NlbGVjdGlvbn5TZWxlY3Rpb24jYW5jaG9yIGFuY2hvcn0gYW5kIHtAbGluayBtb2R1bGU6ZW5naW5lL21vZGVsL3NlbGVjdGlvbn5TZWxlY3Rpb24jZm9jdXMgZm9jdXN9CiAqIChpdCBjYW4gYmUge0BsaW5rIG1vZHVsZTplbmdpbmUvbW9kZWwvc2VsZWN0aW9uflNlbGVjdGlvbiNpc0JhY2t3YXJkIGZvcndhcmQgb3IgYmFja3dhcmR9KS4KICogQWRkaXRpb25hbGx5LCBzZWxlY3Rpb24gbWF5IGhhdmUgaXRzIG93biBhdHRyaWJ1dGVzICh0aGluayDigJMgd2hldGhlciB0ZXh0IHR5cGVkIGluIGluIHRoaXMgc2VsZWN0aW9uCiAqIHNob3VsZCBoYXZlIHRob3NlIGF0dHJpYnV0ZXMg4oCTIGUuZy4gd2hldGhlciB5b3UgdHlwZSBhIGJvbGRlZCB0ZXh0KS4KICoKICogQG1peGVzIG1vZHVsZTp1dGlscy9lbWl0dGVybWl4aW5+RW1pdHRlck1peGluCiAqLwoKdmFyIFNlbGVjdGlvbiA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7CiAgLyoqCiAgICogQ3JlYXRlcyBhIG5ldyBzZWxlY3Rpb24gaW5zdGFuY2UgYmFzZWQgb24gdGhlIGdpdmVuIHtAbGluayBtb2R1bGU6ZW5naW5lL21vZGVsL3NlbGVjdGlvbn5TZWxlY3RhYmxlIHNlbGVjdGFibGV9CiAgICogb3IgY3JlYXRlcyBhbiBlbXB0eSBzZWxlY3Rpb24gaWYgbm8gYXJndW1lbnRzIHdlcmUgcGFzc2VkLgogICAqCiAgICoJCS8vIENyZWF0ZXMgZW1wdHkgc2VsZWN0aW9uIHdpdGhvdXQgcmFuZ2VzLgogICAqCQljb25zdCBzZWxlY3Rpb24gPSB3cml0ZXIuY3JlYXRlU2VsZWN0aW9uKCk7CiAgICoKICAgKgkJLy8gQ3JlYXRlcyBzZWxlY3Rpb24gYXQgdGhlIGdpdmVuIHJhbmdlLgogICAqCQljb25zdCByYW5nZSA9IHdyaXRlci5jcmVhdGVSYW5nZSggc3RhcnQsIGVuZCApOwogICAqCQljb25zdCBzZWxlY3Rpb24gPSB3cml0ZXIuY3JlYXRlU2VsZWN0aW9uKCByYW5nZSApOwogICAqCiAgICoJCS8vIENyZWF0ZXMgc2VsZWN0aW9uIGF0IHRoZSBnaXZlbiByYW5nZXMKICAgKgkJY29uc3QgcmFuZ2VzID0gWyB3cml0ZXIuY3JlYXRlUmFuZ2UoIHN0YXJ0MSwgZW5kMiApLCB3cml0ZXIuY3JlYXRlUmFuZ2UoIHN0YXIyLCBlbmQyICkgXTsKICAgKgkJY29uc3Qgc2VsZWN0aW9uID0gd3JpdGVyLmNyZWF0ZVNlbGVjdGlvbiggcmFuZ2VzICk7CiAgICoKICAgKgkJLy8gQ3JlYXRlcyBzZWxlY3Rpb24gZnJvbSB0aGUgb3RoZXIgc2VsZWN0aW9uLgogICAqCQkvLyBOb3RlOiBJdCBkb2Vzbid0IGNvcGllcyBzZWxlY3Rpb24gYXR0cmlidXRlcy4KICAgKgkJY29uc3Qgb3RoZXJTZWxlY3Rpb24gPSB3cml0ZXIuY3JlYXRlU2VsZWN0aW9uKCk7CiAgICoJCWNvbnN0IHNlbGVjdGlvbiA9IHdyaXRlci5jcmVhdGVTZWxlY3Rpb24oIG90aGVyU2VsZWN0aW9uICk7CiAgICoKICAgKgkJLy8gQ3JlYXRlcyBzZWxlY3Rpb24gZnJvbSB0aGUgZ2l2ZW4gZG9jdW1lbnQgc2VsZWN0aW9uLgogICAqCQkvLyBOb3RlOiBJdCBkb2Vzbid0IGNvcGllcyBzZWxlY3Rpb24gYXR0cmlidXRlcy4KICAgKgkJY29uc3QgZG9jdW1lbnRTZWxlY3Rpb24gPSBtb2RlbC5kb2N1bWVudC5zZWxlY3Rpb247CiAgICoJCWNvbnN0IHNlbGVjdGlvbiA9IHdyaXRlci5jcmVhdGVTZWxlY3Rpb24oIGRvY3VtZW50U2VsZWN0aW9uICk7CiAgICoKICAgKgkJLy8gQ3JlYXRlcyBzZWxlY3Rpb24gYXQgdGhlIGdpdmVuIHBvc2l0aW9uLgogICAqCQljb25zdCBwb3NpdGlvbiA9IHdyaXRlci5jcmVhdGVQb3NpdGlvbkZyb21QYXRoKCByb290LCBwYXRoICk7CiAgICoJCWNvbnN0IHNlbGVjdGlvbiA9IHdyaXRlci5jcmVhdGVTZWxlY3Rpb24oIHBvc2l0aW9uICk7CiAgICoKICAgKgkJLy8gQ3JlYXRlcyBzZWxlY3Rpb24gYXQgdGhlIGdpdmVuIG9mZnNldCBpbiB0aGUgZ2l2ZW4gZWxlbWVudC4KICAgKgkJY29uc3QgcGFyYWdyYXBoID0gd3JpdGVyLmNyZWF0ZUVsZW1lbnQoICdwYXJhZ3JhcGgnICk7CiAgICoJCWNvbnN0IHNlbGVjdGlvbiA9IHdyaXRlci5jcmVhdGVTZWxlY3Rpb24oIHBhcmFncmFwaCwgb2Zmc2V0ICk7CiAgICoKICAgKgkJLy8gQ3JlYXRlcyBhIHJhbmdlIGluc2lkZSBhbiB7QGxpbmsgbW9kdWxlOmVuZ2luZS9tb2RlbC9lbGVtZW50fkVsZW1lbnQgZWxlbWVudH0gd2hpY2ggc3RhcnRzIGJlZm9yZSB0aGUKICAgKgkJLy8gZmlyc3QgY2hpbGQgb2YgdGhhdCBlbGVtZW50IGFuZCBlbmRzIGFmdGVyIHRoZSBsYXN0IGNoaWxkIG9mIHRoYXQgZWxlbWVudC4KICAgKgkJY29uc3Qgc2VsZWN0aW9uID0gd3JpdGVyLmNyZWF0ZVNlbGVjdGlvbiggcGFyYWdyYXBoLCAnaW4nICk7CiAgICoKICAgKgkJLy8gQ3JlYXRlcyBhIHJhbmdlIG9uIGFuIHtAbGluayBtb2R1bGU6ZW5naW5lL21vZGVsL2l0ZW1+SXRlbSBpdGVtfSB3aGljaCBzdGFydHMgYmVmb3JlIHRoZSBpdGVtIGFuZCBlbmRzCiAgICoJCS8vIGp1c3QgYWZ0ZXIgdGhlIGl0ZW0uCiAgICoJCWNvbnN0IHNlbGVjdGlvbiA9IHdyaXRlci5jcmVhdGVTZWxlY3Rpb24oIHBhcmFncmFwaCwgJ29uJyApOwogICAqCiAgICogU2VsZWN0aW9uJ3MgY29uc3RydWN0b3IgYWxsb3cgcGFzc2luZyBhZGRpdGlvbmFsIG9wdGlvbnMgKGAnYmFja3dhcmQnYCkgYXMgdGhlIGxhc3QgYXJndW1lbnQuCiAgICoKICAgKgkJLy8gQ3JlYXRlcyBiYWNrd2FyZCBzZWxlY3Rpb24uCiAgICoJCWNvbnN0IHNlbGVjdGlvbiA9IHdyaXRlci5jcmVhdGVTZWxlY3Rpb24oIHJhbmdlLCB7IGJhY2t3YXJkOiB0cnVlIH0gKTsKICAgKgogICAqIEBwYXJhbSB7bW9kdWxlOmVuZ2luZS9tb2RlbC9zZWxlY3Rpb25+U2VsZWN0YWJsZX0gc2VsZWN0YWJsZQogICAqIEBwYXJhbSB7TnVtYmVyfCdiZWZvcmUnfCdlbmQnfCdhZnRlcid8J29uJ3wnaW4nfSBbcGxhY2VPck9mZnNldF0gU2V0cyBwbGFjZSBvciBvZmZzZXQgb2YgdGhlIHNlbGVjdGlvbi4KICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdCiAgICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy5iYWNrd2FyZF0gU2V0cyB0aGlzIHNlbGVjdGlvbiBpbnN0YW5jZSB0byBiZSBiYWNrd2FyZC4KICAgKi8KICBmdW5jdGlvbiBTZWxlY3Rpb24oc2VsZWN0YWJsZSwgcGxhY2VPck9mZnNldCwgb3B0aW9ucykgewogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFNlbGVjdGlvbik7CgogICAgLyoqCiAgICAgKiBTcGVjaWZpZXMgd2hldGhlciB0aGUgbGFzdCBhZGRlZCByYW5nZSB3YXMgYWRkZWQgYXMgYSBiYWNrd2FyZCBvciBmb3J3YXJkIHJhbmdlLgogICAgICoKICAgICAqIEBwcml2YXRlCiAgICAgKiBAdHlwZSB7Qm9vbGVhbn0KICAgICAqLwogICAgdGhpcy5fbGFzdFJhbmdlQmFja3dhcmQgPSBmYWxzZTsKICAgIC8qKgogICAgICogU3RvcmVzIHNlbGVjdGlvbiByYW5nZXMuCiAgICAgKgogICAgICogQHByb3RlY3RlZAogICAgICogQHR5cGUge0FycmF5Ljxtb2R1bGU6ZW5naW5lL21vZGVsL3JhbmdlflJhbmdlPn0KICAgICAqLwoKICAgIHRoaXMuX3JhbmdlcyA9IFtdOwogICAgLyoqCiAgICAgKiBMaXN0IG9mIGF0dHJpYnV0ZXMgc2V0IG9uIGN1cnJlbnQgc2VsZWN0aW9uLgogICAgICoKICAgICAqIEBwcm90ZWN0ZWQKICAgICAqIEB0eXBlIHtNYXAuPFN0cmluZywqPn0KICAgICAqLwoKICAgIHRoaXMuX2F0dHJzID0gbmV3IE1hcCgpOwoKICAgIGlmIChzZWxlY3RhYmxlKSB7CiAgICAgIHRoaXMuc2V0VG8oc2VsZWN0YWJsZSwgcGxhY2VPck9mZnNldCwgb3B0aW9ucyk7CiAgICB9CiAgfQogIC8qKgogICAqIFNlbGVjdGlvbiBhbmNob3IuIEFuY2hvciBpcyB0aGUgcG9zaXRpb24gZnJvbSB3aGljaCB0aGUgc2VsZWN0aW9uIHdhcyBzdGFydGVkLiBJZiBhIHVzZXIgaXMgbWFraW5nIGEgc2VsZWN0aW9uCiAgICogYnkgZHJhZ2dpbmcgdGhlIG1vdXNlLCB0aGUgYW5jaG9yIGlzIHdoZXJlIHRoZSB1c2VyIHByZXNzZWQgdGhlIG1vdXNlIGJ1dHRvbiAodGhlIGJlZ2lubmluZyBvZiB0aGUgc2VsZWN0aW9uKS4KICAgKgogICAqIEFuY2hvciBhbmQge0BsaW5rICNmb2N1c30gZGVmaW5lIHRoZSBkaXJlY3Rpb24gb2YgdGhlIHNlbGVjdGlvbiwgd2hpY2ggaXMgaW1wb3J0YW50CiAgICogd2hlbiBleHBhbmRpbmcvc2hyaW5raW5nIHNlbGVjdGlvbi4gVGhlIGZvY3VzIG1vdmVzLCB3aGlsZSB0aGUgYW5jaG9yIHNob3VsZCByZW1haW4gaW4gdGhlIHNhbWUgcGxhY2UuCiAgICoKICAgKiBBbmNob3IgaXMgYWx3YXlzIHNldCB0byB0aGUge0BsaW5rIG1vZHVsZTplbmdpbmUvbW9kZWwvcmFuZ2V+UmFuZ2Ujc3RhcnQgc3RhcnR9IG9yCiAgICoge0BsaW5rIG1vZHVsZTplbmdpbmUvbW9kZWwvcmFuZ2V+UmFuZ2UjZW5kIGVuZH0gcG9zaXRpb24gb2YgdGhlIGxhc3Qgb2Ygc2VsZWN0aW9uJ3MgcmFuZ2VzLiBXaGV0aGVyIGl0IGlzCiAgICogdGhlIGBzdGFydGAgb3IgYGVuZGAgZGVwZW5kcyBvbiB0aGUgc3BlY2lmaWVkIGBvcHRpb25zLmJhY2t3YXJkYC4gU2VlIHRoZSB7QGxpbmsgI3NldFRvIGBzZXRUbygpYH0gbWV0aG9kLgogICAqCiAgICogTWF5IGJlIHNldCB0byBgbnVsbGAgaWYgdGhlcmUgYXJlIG5vIHJhbmdlcyBpbiB0aGUgc2VsZWN0aW9uLgogICAqCiAgICogQHNlZSAjZm9jdXMKICAgKiBAcmVhZG9ubHkKICAgKiBAdHlwZSB7bW9kdWxlOmVuZ2luZS9tb2RlbC9wb3NpdGlvbn5Qb3NpdGlvbnxudWxsfQogICAqLwoKCiAgX2NyZWF0ZUNsYXNzKFNlbGVjdGlvbiwgW3sKICAgIGtleTogImFuY2hvciIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgaWYgKHRoaXMuX3Jhbmdlcy5sZW5ndGggPiAwKSB7CiAgICAgICAgdmFyIHJhbmdlID0gdGhpcy5fcmFuZ2VzW3RoaXMuX3Jhbmdlcy5sZW5ndGggLSAxXTsKICAgICAgICByZXR1cm4gdGhpcy5fbGFzdFJhbmdlQmFja3dhcmQgPyByYW5nZS5lbmQgOiByYW5nZS5zdGFydDsKICAgICAgfQoKICAgICAgcmV0dXJuIG51bGw7CiAgICB9CiAgICAvKioKICAgICAqIFNlbGVjdGlvbiBmb2N1cy4gRm9jdXMgaXMgdGhlIHBvc2l0aW9uIHdoZXJlIHRoZSBzZWxlY3Rpb24gZW5kcy4gSWYgYSB1c2VyIGlzIG1ha2luZyBhIHNlbGVjdGlvbgogICAgICogYnkgZHJhZ2dpbmcgdGhlIG1vdXNlLCB0aGUgZm9jdXMgaXMgd2hlcmUgdGhlIG1vdXNlIGN1cnNvciBpcy4KICAgICAqCiAgICAgKiBNYXkgYmUgc2V0IHRvIGBudWxsYCBpZiB0aGVyZSBhcmUgbm8gcmFuZ2VzIGluIHRoZSBzZWxlY3Rpb24uCiAgICAgKgogICAgICogQHNlZSAjYW5jaG9yCiAgICAgKiBAcmVhZG9ubHkKICAgICAqIEB0eXBlIHttb2R1bGU6ZW5naW5lL21vZGVsL3Bvc2l0aW9uflBvc2l0aW9ufG51bGx9CiAgICAgKi8KCiAgfSwgewogICAga2V5OiAiZm9jdXMiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIGlmICh0aGlzLl9yYW5nZXMubGVuZ3RoID4gMCkgewogICAgICAgIHZhciByYW5nZSA9IHRoaXMuX3Jhbmdlc1t0aGlzLl9yYW5nZXMubGVuZ3RoIC0gMV07CiAgICAgICAgcmV0dXJuIHRoaXMuX2xhc3RSYW5nZUJhY2t3YXJkID8gcmFuZ2Uuc3RhcnQgOiByYW5nZS5lbmQ7CiAgICAgIH0KCiAgICAgIHJldHVybiBudWxsOwogICAgfQogICAgLyoqCiAgICAgKiBXaGV0aGVyIHRoZSBzZWxlY3Rpb24gaXMgY29sbGFwc2VkLiBTZWxlY3Rpb24gaXMgY29sbGFwc2VkIHdoZW4gdGhlcmUgaXMgZXhhY3RseSBvbmUgcmFuZ2UgaW4gaXQKICAgICAqIGFuZCBpdCBpcyBjb2xsYXBzZWQuCiAgICAgKgogICAgICogQHJlYWRvbmx5CiAgICAgKiBAdHlwZSB7Qm9vbGVhbn0KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJpc0NvbGxhcHNlZCIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgdmFyIGxlbmd0aCA9IHRoaXMuX3Jhbmdlcy5sZW5ndGg7CgogICAgICBpZiAobGVuZ3RoID09PSAxKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuX3Jhbmdlc1swXS5pc0NvbGxhcHNlZDsKICAgICAgfSBlbHNlIHsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0KICAgIH0KICAgIC8qKgogICAgICogUmV0dXJucyB0aGUgbnVtYmVyIG9mIHJhbmdlcyBpbiB0aGUgc2VsZWN0aW9uLgogICAgICoKICAgICAqIEByZWFkb25seQogICAgICogQHR5cGUge051bWJlcn0KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJyYW5nZUNvdW50IiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gdGhpcy5fcmFuZ2VzLmxlbmd0aDsKICAgIH0KICAgIC8qKgogICAgICogU3BlY2lmaWVzIHdoZXRoZXIgdGhlIHNlbGVjdGlvbidzIHtAbGluayAjZm9jdXN9IHByZWNlZGVzIHRoZSBzZWxlY3Rpb24ncyB7QGxpbmsgI2FuY2hvcn0uCiAgICAgKgogICAgICogQHJlYWRvbmx5CiAgICAgKiBAdHlwZSB7Qm9vbGVhbn0KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJpc0JhY2t3YXJkIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gIXRoaXMuaXNDb2xsYXBzZWQgJiYgdGhpcy5fbGFzdFJhbmdlQmFja3dhcmQ7CiAgICB9CiAgICAvKioKICAgICAqIENoZWNrcyB3aGV0aGVyIHRoaXMgc2VsZWN0aW9uIGlzIGVxdWFsIHRvIHRoZSBnaXZlbiBzZWxlY3Rpb24uIFNlbGVjdGlvbnMgYXJlIGVxdWFsIGlmIHRoZXkgaGF2ZSB0aGUgc2FtZSBkaXJlY3Rpb25zLAogICAgICogdGhlIHNhbWUgbnVtYmVyIG9mIHJhbmdlcyBhbmQgYWxsIHJhbmdlcyBmcm9tIG9uZSBzZWxlY3Rpb24gZXF1YWwgdG8gcmFuZ2VzIGZyb20gdGhlIGFub3RoZXIgc2VsZWN0aW9uLgogICAgICoKICAgICAqIEBwYXJhbSB7bW9kdWxlOmVuZ2luZS9tb2RlbC9zZWxlY3Rpb25+U2VsZWN0aW9ufG1vZHVsZTplbmdpbmUvbW9kZWwvZG9jdW1lbnRzZWxlY3Rpb25+RG9jdW1lbnRTZWxlY3Rpb259IG90aGVyU2VsZWN0aW9uCiAgICAgKiBTZWxlY3Rpb24gdG8gY29tcGFyZSB3aXRoLgogICAgICogQHJldHVybnMge0Jvb2xlYW59IGB0cnVlYCBpZiBzZWxlY3Rpb25zIGFyZSBlcXVhbCwgYGZhbHNlYCBvdGhlcndpc2UuCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAiaXNFcXVhbCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gaXNFcXVhbChvdGhlclNlbGVjdGlvbikgewogICAgICBpZiAodGhpcy5yYW5nZUNvdW50ICE9IG90aGVyU2VsZWN0aW9uLnJhbmdlQ291bnQpIHsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0gZWxzZSBpZiAodGhpcy5yYW5nZUNvdW50ID09PSAwKSB7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgIH0KCiAgICAgIGlmICghdGhpcy5hbmNob3IuaXNFcXVhbChvdGhlclNlbGVjdGlvbi5hbmNob3IpIHx8ICF0aGlzLmZvY3VzLmlzRXF1YWwob3RoZXJTZWxlY3Rpb24uZm9jdXMpKSB7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICB9CgogICAgICB2YXIgX2l0ZXJhdG9yID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIodGhpcy5fcmFuZ2VzKSwKICAgICAgICAgIF9zdGVwOwoKICAgICAgdHJ5IHsKICAgICAgICBmb3IgKF9pdGVyYXRvci5zKCk7ICEoX3N0ZXAgPSBfaXRlcmF0b3IubigpKS5kb25lOykgewogICAgICAgICAgdmFyIHRoaXNSYW5nZSA9IF9zdGVwLnZhbHVlOwogICAgICAgICAgdmFyIGZvdW5kID0gZmFsc2U7CgogICAgICAgICAgdmFyIF9pdGVyYXRvcjIgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihvdGhlclNlbGVjdGlvbi5fcmFuZ2VzKSwKICAgICAgICAgICAgICBfc3RlcDI7CgogICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgZm9yIChfaXRlcmF0b3IyLnMoKTsgIShfc3RlcDIgPSBfaXRlcmF0b3IyLm4oKSkuZG9uZTspIHsKICAgICAgICAgICAgICB2YXIgb3RoZXJSYW5nZSA9IF9zdGVwMi52YWx1ZTsKCiAgICAgICAgICAgICAgaWYgKHRoaXNSYW5nZS5pc0VxdWFsKG90aGVyUmFuZ2UpKSB7CiAgICAgICAgICAgICAgICBmb3VuZCA9IHRydWU7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0gY2F0Y2ggKGVycikgewogICAgICAgICAgICBfaXRlcmF0b3IyLmUoZXJyKTsKICAgICAgICAgIH0gZmluYWxseSB7CiAgICAgICAgICAgIF9pdGVyYXRvcjIuZigpOwogICAgICAgICAgfQoKICAgICAgICAgIGlmICghZm91bmQpIHsKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSBjYXRjaCAoZXJyKSB7CiAgICAgICAgX2l0ZXJhdG9yLmUoZXJyKTsKICAgICAgfSBmaW5hbGx5IHsKICAgICAgICBfaXRlcmF0b3IuZigpOwogICAgICB9CgogICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KICAgIC8qKgogICAgICogUmV0dXJucyBhbiBpdGVyYWJsZSBvYmplY3QgdGhhdCBpdGVyYXRlcyBvdmVyIGNvcGllcyBvZiBzZWxlY3Rpb24gcmFuZ2VzLgogICAgICoKICAgICAqIEByZXR1cm5zIHtJdGVyYWJsZS48bW9kdWxlOmVuZ2luZS9tb2RlbC9yYW5nZX5SYW5nZT59CiAgICAgKi8KCiAgfSwgewogICAga2V5OiAiZ2V0UmFuZ2VzIiwKICAgIHZhbHVlOgogICAgLyojX19QVVJFX18qLwogICAgcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gZ2V0UmFuZ2VzKCkgewogICAgICB2YXIgX2l0ZXJhdG9yMywgX3N0ZXAzLCByYW5nZTsKCiAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBnZXRSYW5nZXMkKF9jb250ZXh0KSB7CiAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgIF9pdGVyYXRvcjMgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcih0aGlzLl9yYW5nZXMpOwogICAgICAgICAgICAgIF9jb250ZXh0LnByZXYgPSAxOwoKICAgICAgICAgICAgICBfaXRlcmF0b3IzLnMoKTsKCiAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgICBpZiAoKF9zdGVwMyA9IF9pdGVyYXRvcjMubigpKS5kb25lKSB7CiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gOTsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgcmFuZ2UgPSBfc3RlcDMudmFsdWU7CiAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDc7CiAgICAgICAgICAgICAgcmV0dXJuIG5ldyBSYW5nZShyYW5nZS5zdGFydCwgcmFuZ2UuZW5kKTsKCiAgICAgICAgICAgIGNhc2UgNzoKICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMzsKICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgIGNhc2UgOToKICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTQ7CiAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICBjYXNlIDExOgogICAgICAgICAgICAgIF9jb250ZXh0LnByZXYgPSAxMTsKICAgICAgICAgICAgICBfY29udGV4dC50MCA9IF9jb250ZXh0WyJjYXRjaCJdKDEpOwoKICAgICAgICAgICAgICBfaXRlcmF0b3IzLmUoX2NvbnRleHQudDApOwoKICAgICAgICAgICAgY2FzZSAxNDoKICAgICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gMTQ7CgogICAgICAgICAgICAgIF9pdGVyYXRvcjMuZigpOwoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuZmluaXNoKDE0KTsKCiAgICAgICAgICAgIGNhc2UgMTc6CiAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sIGdldFJhbmdlcywgdGhpcywgW1sxLCAxMSwgMTQsIDE3XV0pOwogICAgfSkKICAgIC8qKgogICAgICogUmV0dXJucyBhIGNvcHkgb2YgdGhlIGZpcnN0IHJhbmdlIGluIHRoZSBzZWxlY3Rpb24uCiAgICAgKiBGaXJzdCByYW5nZSBpcyB0aGUgb25lIHdoaWNoIHtAbGluayBtb2R1bGU6ZW5naW5lL21vZGVsL3JhbmdlflJhbmdlI3N0YXJ0IHN0YXJ0fSBwb3NpdGlvbgogICAgICoge0BsaW5rIG1vZHVsZTplbmdpbmUvbW9kZWwvcG9zaXRpb25+UG9zaXRpb24jaXNCZWZvcmUgaXMgYmVmb3JlfSBzdGFydCBwb3NpdGlvbiBvZiBhbGwgb3RoZXIgcmFuZ2VzCiAgICAgKiAobm90IHRvIGNvbmZ1c2Ugd2l0aCB0aGUgZmlyc3QgcmFuZ2UgYWRkZWQgdG8gdGhlIHNlbGVjdGlvbikuCiAgICAgKgogICAgICogUmV0dXJucyBgbnVsbGAgaWYgdGhlcmUgYXJlIG5vIHJhbmdlcyBpbiBzZWxlY3Rpb24uCiAgICAgKgogICAgICogQHJldHVybnMge21vZHVsZTplbmdpbmUvbW9kZWwvcmFuZ2V+UmFuZ2V8bnVsbH0KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJnZXRGaXJzdFJhbmdlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRGaXJzdFJhbmdlKCkgewogICAgICB2YXIgZmlyc3QgPSBudWxsOwoKICAgICAgdmFyIF9pdGVyYXRvcjQgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcih0aGlzLl9yYW5nZXMpLAogICAgICAgICAgX3N0ZXA0OwoKICAgICAgdHJ5IHsKICAgICAgICBmb3IgKF9pdGVyYXRvcjQucygpOyAhKF9zdGVwNCA9IF9pdGVyYXRvcjQubigpKS5kb25lOykgewogICAgICAgICAgdmFyIHJhbmdlID0gX3N0ZXA0LnZhbHVlOwoKICAgICAgICAgIGlmICghZmlyc3QgfHwgcmFuZ2Uuc3RhcnQuaXNCZWZvcmUoZmlyc3Quc3RhcnQpKSB7CiAgICAgICAgICAgIGZpcnN0ID0gcmFuZ2U7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9IGNhdGNoIChlcnIpIHsKICAgICAgICBfaXRlcmF0b3I0LmUoZXJyKTsKICAgICAgfSBmaW5hbGx5IHsKICAgICAgICBfaXRlcmF0b3I0LmYoKTsKICAgICAgfQoKICAgICAgcmV0dXJuIGZpcnN0ID8gbmV3IFJhbmdlKGZpcnN0LnN0YXJ0LCBmaXJzdC5lbmQpIDogbnVsbDsKICAgIH0KICAgIC8qKgogICAgICogUmV0dXJucyBhIGNvcHkgb2YgdGhlIGxhc3QgcmFuZ2UgaW4gdGhlIHNlbGVjdGlvbi4KICAgICAqIExhc3QgcmFuZ2UgaXMgdGhlIG9uZSB3aGljaCB7QGxpbmsgbW9kdWxlOmVuZ2luZS9tb2RlbC9yYW5nZX5SYW5nZSNlbmQgZW5kfSBwb3NpdGlvbgogICAgICoge0BsaW5rIG1vZHVsZTplbmdpbmUvbW9kZWwvcG9zaXRpb25+UG9zaXRpb24jaXNBZnRlciBpcyBhZnRlcn0gZW5kIHBvc2l0aW9uIG9mIGFsbCBvdGhlciByYW5nZXMgKG5vdCB0byBjb25mdXNlIHdpdGggdGhlIHJhbmdlIG1vc3QKICAgICAqIHJlY2VudGx5IGFkZGVkIHRvIHRoZSBzZWxlY3Rpb24pLgogICAgICoKICAgICAqIFJldHVybnMgYG51bGxgIGlmIHRoZXJlIGFyZSBubyByYW5nZXMgaW4gc2VsZWN0aW9uLgogICAgICoKICAgICAqIEByZXR1cm5zIHttb2R1bGU6ZW5naW5lL21vZGVsL3JhbmdlflJhbmdlfG51bGx9CiAgICAgKi8KCiAgfSwgewogICAga2V5OiAiZ2V0TGFzdFJhbmdlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRMYXN0UmFuZ2UoKSB7CiAgICAgIHZhciBsYXN0ID0gbnVsbDsKCiAgICAgIHZhciBfaXRlcmF0b3I1ID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIodGhpcy5fcmFuZ2VzKSwKICAgICAgICAgIF9zdGVwNTsKCiAgICAgIHRyeSB7CiAgICAgICAgZm9yIChfaXRlcmF0b3I1LnMoKTsgIShfc3RlcDUgPSBfaXRlcmF0b3I1Lm4oKSkuZG9uZTspIHsKICAgICAgICAgIHZhciByYW5nZSA9IF9zdGVwNS52YWx1ZTsKCiAgICAgICAgICBpZiAoIWxhc3QgfHwgcmFuZ2UuZW5kLmlzQWZ0ZXIobGFzdC5lbmQpKSB7CiAgICAgICAgICAgIGxhc3QgPSByYW5nZTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0gY2F0Y2ggKGVycikgewogICAgICAgIF9pdGVyYXRvcjUuZShlcnIpOwogICAgICB9IGZpbmFsbHkgewogICAgICAgIF9pdGVyYXRvcjUuZigpOwogICAgICB9CgogICAgICByZXR1cm4gbGFzdCA/IG5ldyBSYW5nZShsYXN0LnN0YXJ0LCBsYXN0LmVuZCkgOiBudWxsOwogICAgfQogICAgLyoqCiAgICAgKiBSZXR1cm5zIHRoZSBmaXJzdCBwb3NpdGlvbiBpbiB0aGUgc2VsZWN0aW9uLgogICAgICogRmlyc3QgcG9zaXRpb24gaXMgdGhlIHBvc2l0aW9uIHRoYXQge0BsaW5rIG1vZHVsZTplbmdpbmUvbW9kZWwvcG9zaXRpb25+UG9zaXRpb24jaXNCZWZvcmUgaXMgYmVmb3JlfQogICAgICogYW55IG90aGVyIHBvc2l0aW9uIGluIHRoZSBzZWxlY3Rpb24uCiAgICAgKgogICAgICogUmV0dXJucyBgbnVsbGAgaWYgdGhlcmUgYXJlIG5vIHJhbmdlcyBpbiBzZWxlY3Rpb24uCiAgICAgKgogICAgICogQHJldHVybnMge21vZHVsZTplbmdpbmUvbW9kZWwvcG9zaXRpb25+UG9zaXRpb258bnVsbH0KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJnZXRGaXJzdFBvc2l0aW9uIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRGaXJzdFBvc2l0aW9uKCkgewogICAgICB2YXIgZmlyc3QgPSB0aGlzLmdldEZpcnN0UmFuZ2UoKTsKICAgICAgcmV0dXJuIGZpcnN0ID8gZmlyc3Quc3RhcnQuY2xvbmUoKSA6IG51bGw7CiAgICB9CiAgICAvKioKICAgICAqIFJldHVybnMgdGhlIGxhc3QgcG9zaXRpb24gaW4gdGhlIHNlbGVjdGlvbi4KICAgICAqIExhc3QgcG9zaXRpb24gaXMgdGhlIHBvc2l0aW9uIHRoYXQge0BsaW5rIG1vZHVsZTplbmdpbmUvbW9kZWwvcG9zaXRpb25+UG9zaXRpb24jaXNBZnRlciBpcyBhZnRlcn0KICAgICAqIGFueSBvdGhlciBwb3NpdGlvbiBpbiB0aGUgc2VsZWN0aW9uLgogICAgICoKICAgICAqIFJldHVybnMgYG51bGxgIGlmIHRoZXJlIGFyZSBubyByYW5nZXMgaW4gc2VsZWN0aW9uLgogICAgICoKICAgICAqIEByZXR1cm5zIHttb2R1bGU6ZW5naW5lL21vZGVsL3Bvc2l0aW9uflBvc2l0aW9ufG51bGx9CiAgICAgKi8KCiAgfSwgewogICAga2V5OiAiZ2V0TGFzdFBvc2l0aW9uIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRMYXN0UG9zaXRpb24oKSB7CiAgICAgIHZhciBsYXN0UmFuZ2UgPSB0aGlzLmdldExhc3RSYW5nZSgpOwogICAgICByZXR1cm4gbGFzdFJhbmdlID8gbGFzdFJhbmdlLmVuZC5jbG9uZSgpIDogbnVsbDsKICAgIH0KICAgIC8qKgogICAgICogU2V0cyB0aGlzIHNlbGVjdGlvbidzIHJhbmdlcyBhbmQgZGlyZWN0aW9uIHRvIHRoZSBzcGVjaWZpZWQgbG9jYXRpb24gYmFzZWQgb24gdGhlIGdpdmVuCiAgICAgKiB7QGxpbmsgbW9kdWxlOmVuZ2luZS9tb2RlbC9zZWxlY3Rpb25+U2VsZWN0YWJsZSBzZWxlY3RhYmxlfS4KICAgICAqCiAgICAgKgkJLy8gUmVtb3ZlcyBhbGwgc2VsZWN0aW9uJ3MgcmFuZ2VzLgogICAgICoJCXNlbGVjdGlvbi5zZXRUbyggbnVsbCApOwogICAgICoKICAgICAqCQkvLyBTZXRzIHNlbGVjdGlvbiB0byB0aGUgZ2l2ZW4gcmFuZ2UuCiAgICAgKgkJY29uc3QgcmFuZ2UgPSB3cml0ZXIuY3JlYXRlUmFuZ2UoIHN0YXJ0LCBlbmQgKTsKICAgICAqCQlzZWxlY3Rpb24uc2V0VG8oIHJhbmdlICk7CiAgICAgKgogICAgICoJCS8vIFNldHMgc2VsZWN0aW9uIHRvIGdpdmVuIHJhbmdlcy4KICAgICAqCQljb25zdCByYW5nZXMgPSBbIHdyaXRlci5jcmVhdGVSYW5nZSggc3RhcnQxLCBlbmQyICksIHdyaXRlci5jcmVhdGVSYW5nZSggc3RhcjIsIGVuZDIgKSBdOwogICAgICoJCXNlbGVjdGlvbi5zZXRUbyggcmFuZ2VzICk7CiAgICAgKgogICAgICoJCS8vIFNldHMgc2VsZWN0aW9uIHRvIG90aGVyIHNlbGVjdGlvbi4KICAgICAqCQkvLyBOb3RlOiBJdCBkb2Vzbid0IGNvcGllcyBzZWxlY3Rpb24gYXR0cmlidXRlcy4KICAgICAqCQljb25zdCBvdGhlclNlbGVjdGlvbiA9IHdyaXRlci5jcmVhdGVTZWxlY3Rpb24oKTsKICAgICAqCQlzZWxlY3Rpb24uc2V0VG8oIG90aGVyU2VsZWN0aW9uICk7CiAgICAgKgogICAgICoJCS8vIFNldHMgc2VsZWN0aW9uIHRvIHRoZSBnaXZlbiBkb2N1bWVudCBzZWxlY3Rpb24uCiAgICAgKgkJLy8gTm90ZTogSXQgZG9lc24ndCBjb3BpZXMgc2VsZWN0aW9uIGF0dHJpYnV0ZXMuCiAgICAgKgkJY29uc3QgZG9jdW1lbnRTZWxlY3Rpb24gPSBuZXcgRG9jdW1lbnRTZWxlY3Rpb24oIGRvYyApOwogICAgICoJCXNlbGVjdGlvbi5zZXRUbyggZG9jdW1lbnRTZWxlY3Rpb24gKTsKICAgICAqCiAgICAgKgkJLy8gU2V0cyBjb2xsYXBzZWQgc2VsZWN0aW9uIGF0IHRoZSBnaXZlbiBwb3NpdGlvbi4KICAgICAqCQljb25zdCBwb3NpdGlvbiA9IHdyaXRlci5jcmVhdGVQb3NpdGlvbkZyb21QYXRoKCByb290LCBwYXRoICk7CiAgICAgKgkJc2VsZWN0aW9uLnNldFRvKCBwb3NpdGlvbiApOwogICAgICoKICAgICAqCQkvLyBTZXRzIGNvbGxhcHNlZCBzZWxlY3Rpb24gYXQgdGhlIHBvc2l0aW9uIG9mIHRoZSBnaXZlbiBub2RlIGFuZCBhbiBvZmZzZXQuCiAgICAgKgkJc2VsZWN0aW9uLnNldFRvKCBwYXJhZ3JhcGgsIG9mZnNldCApOwogICAgICoKICAgICAqIENyZWF0ZXMgYSByYW5nZSBpbnNpZGUgYW4ge0BsaW5rIG1vZHVsZTplbmdpbmUvbW9kZWwvZWxlbWVudH5FbGVtZW50IGVsZW1lbnR9IHdoaWNoIHN0YXJ0cyBiZWZvcmUgdGhlIGZpcnN0IGNoaWxkIG9mCiAgICAJICogdGhhdCBlbGVtZW50IGFuZCBlbmRzIGFmdGVyIHRoZSBsYXN0IGNoaWxkIG9mIHRoYXQgZWxlbWVudC4KICAgICAqCiAgICAgKgkJc2VsZWN0aW9uLnNldFRvKCBwYXJhZ3JhcGgsICdpbicgKTsKICAgICAqCiAgICAgKiBDcmVhdGVzIGEgcmFuZ2Ugb24gYW4ge0BsaW5rIG1vZHVsZTplbmdpbmUvbW9kZWwvaXRlbX5JdGVtIGl0ZW19IHdoaWNoIHN0YXJ0cyBiZWZvcmUgdGhlIGl0ZW0gYW5kIGVuZHMganVzdCBhZnRlciB0aGUgaXRlbS4KICAgICAqCiAgICAgKgkJc2VsZWN0aW9uLnNldFRvKCBwYXJhZ3JhcGgsICdvbicgKTsKICAgICAqCiAgICAgKiBgU2VsZWN0aW9uI3NldFRvKClgJyBtZXRob2QgYWxsb3cgcGFzc2luZyBhZGRpdGlvbmFsIG9wdGlvbnMgKGBiYWNrd2FyZGApIGFzIHRoZSBsYXN0IGFyZ3VtZW50LgogICAgICoKICAgICAqCQkvLyBTZXRzIGJhY2t3YXJkIHNlbGVjdGlvbi4KICAgICAqCQljb25zdCBzZWxlY3Rpb24gPSB3cml0ZXIuY3JlYXRlU2VsZWN0aW9uKCByYW5nZSwgeyBiYWNrd2FyZDogdHJ1ZSB9ICk7CiAgICAgKgogICAgICogQHBhcmFtIHttb2R1bGU6ZW5naW5lL21vZGVsL3NlbGVjdGlvbn5TZWxlY3RhYmxlfSBzZWxlY3RhYmxlCiAgICAgKiBAcGFyYW0ge051bWJlcnwnYmVmb3JlJ3wnZW5kJ3wnYWZ0ZXInfCdvbid8J2luJ30gW3BsYWNlT3JPZmZzZXRdIFNldHMgcGxhY2Ugb3Igb2Zmc2V0IG9mIHRoZSBzZWxlY3Rpb24uCiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdCiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLmJhY2t3YXJkXSBTZXRzIHRoaXMgc2VsZWN0aW9uIGluc3RhbmNlIHRvIGJlIGJhY2t3YXJkLgogICAgICovCgogIH0sIHsKICAgIGtleTogInNldFRvIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRUbyhzZWxlY3RhYmxlLCBwbGFjZU9yT2Zmc2V0LCBvcHRpb25zKSB7CiAgICAgIGlmIChzZWxlY3RhYmxlID09PSBudWxsKSB7CiAgICAgICAgdGhpcy5fc2V0UmFuZ2VzKFtdKTsKICAgICAgfSBlbHNlIGlmIChzZWxlY3RhYmxlIGluc3RhbmNlb2YgU2VsZWN0aW9uKSB7CiAgICAgICAgdGhpcy5fc2V0UmFuZ2VzKHNlbGVjdGFibGUuZ2V0UmFuZ2VzKCksIHNlbGVjdGFibGUuaXNCYWNrd2FyZCk7CiAgICAgIH0gZWxzZSBpZiAoc2VsZWN0YWJsZSAmJiB0eXBlb2Ygc2VsZWN0YWJsZS5nZXRSYW5nZXMgPT0gJ2Z1bmN0aW9uJykgewogICAgICAgIC8vIFdlIGFzc3VtZSB0aGF0IHRoZSBzZWxlY3RhYmxlIGlzIGEgRG9jdW1lbnRTZWxlY3Rpb24uCiAgICAgICAgLy8gSXQgY2FuJ3QgYmUgaW1wb3J0ZWQgaGVyZSwgYmVjYXVzZSBpdCB3b3VsZCBsZWFkIHRvIGNpcmN1bGFyIGltcG9ydHMuCiAgICAgICAgdGhpcy5fc2V0UmFuZ2VzKHNlbGVjdGFibGUuZ2V0UmFuZ2VzKCksIHNlbGVjdGFibGUuaXNCYWNrd2FyZCk7CiAgICAgIH0gZWxzZSBpZiAoc2VsZWN0YWJsZSBpbnN0YW5jZW9mIFJhbmdlKSB7CiAgICAgICAgdGhpcy5fc2V0UmFuZ2VzKFtzZWxlY3RhYmxlXSwgISFwbGFjZU9yT2Zmc2V0ICYmICEhcGxhY2VPck9mZnNldC5iYWNrd2FyZCk7CiAgICAgIH0gZWxzZSBpZiAoc2VsZWN0YWJsZSBpbnN0YW5jZW9mIFBvc2l0aW9uKSB7CiAgICAgICAgdGhpcy5fc2V0UmFuZ2VzKFtuZXcgUmFuZ2Uoc2VsZWN0YWJsZSldKTsKICAgICAgfSBlbHNlIGlmIChzZWxlY3RhYmxlIGluc3RhbmNlb2YgTm9kZSkgewogICAgICAgIHZhciBiYWNrd2FyZCA9ICEhb3B0aW9ucyAmJiAhIW9wdGlvbnMuYmFja3dhcmQ7CiAgICAgICAgdmFyIHJhbmdlOwoKICAgICAgICBpZiAocGxhY2VPck9mZnNldCA9PSAnaW4nKSB7CiAgICAgICAgICByYW5nZSA9IFJhbmdlLl9jcmVhdGVJbihzZWxlY3RhYmxlKTsKICAgICAgICB9IGVsc2UgaWYgKHBsYWNlT3JPZmZzZXQgPT0gJ29uJykgewogICAgICAgICAgcmFuZ2UgPSBSYW5nZS5fY3JlYXRlT24oc2VsZWN0YWJsZSk7CiAgICAgICAgfSBlbHNlIGlmIChwbGFjZU9yT2Zmc2V0ICE9PSB1bmRlZmluZWQpIHsKICAgICAgICAgIHJhbmdlID0gbmV3IFJhbmdlKFBvc2l0aW9uLl9jcmVhdGVBdChzZWxlY3RhYmxlLCBwbGFjZU9yT2Zmc2V0KSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIC8qKgogICAgICAgICAgICogc2VsZWN0aW9uLnNldFRvIHJlcXVpcmVzIHRoZSBzZWNvbmQgcGFyYW1ldGVyIHdoZW4gdGhlIGZpcnN0IHBhcmFtZXRlciBpcyBhIG5vZGUuCiAgICAgICAgICAgKgogICAgICAgICAgICogQGVycm9yIG1vZGVsLXNlbGVjdGlvbi1zZXR0by1yZXF1aXJlZC1zZWNvbmQtcGFyYW1ldGVyCiAgICAgICAgICAgKi8KICAgICAgICAgIHRocm93IG5ldyBDS0VkaXRvckVycm9yKCdtb2RlbC1zZWxlY3Rpb24tc2V0dG8tcmVxdWlyZWQtc2Vjb25kLXBhcmFtZXRlcicsIFt0aGlzLCBzZWxlY3RhYmxlXSk7CiAgICAgICAgfQoKICAgICAgICB0aGlzLl9zZXRSYW5nZXMoW3JhbmdlXSwgYmFja3dhcmQpOwogICAgICB9IGVsc2UgaWYgKGlzSXRlcmFibGUoc2VsZWN0YWJsZSkpIHsKICAgICAgICAvLyBXZSBhc3N1bWUgdGhhdCB0aGUgc2VsZWN0YWJsZSBpcyBhbiBpdGVyYWJsZSBvZiByYW5nZXMuCiAgICAgICAgdGhpcy5fc2V0UmFuZ2VzKHNlbGVjdGFibGUsIHBsYWNlT3JPZmZzZXQgJiYgISFwbGFjZU9yT2Zmc2V0LmJhY2t3YXJkKTsKICAgICAgfSBlbHNlIHsKICAgICAgICAvKioKICAgICAgICAgKiBDYW5ub3Qgc2V0IHRoZSBzZWxlY3Rpb24gdG8gdGhlIGdpdmVuIHBsYWNlLgogICAgICAgICAqCiAgICAgICAgICogSW52YWxpZCBwYXJhbWV0ZXJzIHdlcmUgc3BlY2lmaWVkIHdoZW4gc2V0dGluZyB0aGUgc2VsZWN0aW9uLiBDb21tb24gaXNzdWVzOgogICAgICAgICAqCiAgICAgICAgICogKiBBIHtAbGluayBtb2R1bGU6ZW5naW5lL21vZGVsL3RleHRwcm94eX5UZXh0UHJveHl9IGluc3RhbmNlIHdhcyBwYXNzZWQgaW5zdGVhZCBvZgogICAgICAgICAqIGEgcmVhbCB7QGxpbmsgbW9kdWxlOmVuZ2luZS9tb2RlbC90ZXh0flRleHR9LgogICAgICAgICAqICogVmlldyBub2RlcyB3ZXJlIHBhc3NlZCBpbnN0ZWFkIG9mIG1vZGVsIG5vZGVzLgogICAgICAgICAqICogYG51bGxgL2B1bmRlZmluZWRgIHdhcyBwYXNzZWQuCiAgICAgICAgICoKICAgICAgICAgKiBAZXJyb3IgbW9kZWwtc2VsZWN0aW9uLXNldHRvLW5vdC1zZWxlY3RhYmxlCiAgICAgICAgICovCiAgICAgICAgdGhyb3cgbmV3IENLRWRpdG9yRXJyb3IoJ21vZGVsLXNlbGVjdGlvbi1zZXR0by1ub3Qtc2VsZWN0YWJsZScsIFt0aGlzLCBzZWxlY3RhYmxlXSk7CiAgICAgIH0KICAgIH0KICAgIC8qKgogICAgICogUmVwbGFjZXMgYWxsIHJhbmdlcyB0aGF0IHdlcmUgYWRkZWQgdG8gdGhlIHNlbGVjdGlvbiB3aXRoIGdpdmVuIGFycmF5IG9mIHJhbmdlcy4gTGFzdCByYW5nZSBvZiB0aGUgYXJyYXkKICAgICAqIGlzIHRyZWF0ZWQgbGlrZSB0aGUgbGFzdCBhZGRlZCByYW5nZSBhbmQgaXMgdXNlZCB0byBzZXQge0BsaW5rIG1vZHVsZTplbmdpbmUvbW9kZWwvc2VsZWN0aW9uflNlbGVjdGlvbiNhbmNob3J9IGFuZAogICAgICoge0BsaW5rIG1vZHVsZTplbmdpbmUvbW9kZWwvc2VsZWN0aW9uflNlbGVjdGlvbiNmb2N1c30uIEFjY2VwdHMgYSBmbGFnIGRlc2NyaWJpbmcgaW4gd2hpY2ggZGlyZWN0aW9uIHRoZSBzZWxlY3Rpb24gaXMgbWFkZS4KICAgICAqCiAgICAgKiBAcHJvdGVjdGVkCiAgICAgKiBAZmlyZXMgY2hhbmdlOnJhbmdlCiAgICAgKiBAcGFyYW0ge0l0ZXJhYmxlLjxtb2R1bGU6ZW5naW5lL21vZGVsL3JhbmdlflJhbmdlPn0gbmV3UmFuZ2VzIFJhbmdlcyB0byBzZXQuCiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtpc0xhc3RCYWNrd2FyZD1mYWxzZV0gRmxhZyBkZXNjcmliaW5nIGlmIGxhc3QgYWRkZWQgcmFuZ2Ugd2FzIHNlbGVjdGVkIGZvcndhcmQgLSBmcm9tIHN0YXJ0IHRvIGVuZCAoYGZhbHNlYCkKICAgICAqIG9yIGJhY2t3YXJkIC0gZnJvbSBlbmQgdG8gc3RhcnQgKGB0cnVlYCkuCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAiX3NldFJhbmdlcyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gX3NldFJhbmdlcyhuZXdSYW5nZXMpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHZhciBpc0xhc3RCYWNrd2FyZCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogZmFsc2U7CiAgICAgIG5ld1JhbmdlcyA9IEFycmF5LmZyb20obmV3UmFuZ2VzKTsgLy8gQ2hlY2sgd2hldGhlciB0aGVyZSBpcyBhbnkgcmFuZ2UgaW4gbmV3IHJhbmdlcyBzZXQgdGhhdCBpcyBkaWZmZXJlbnQgdGhhbiBhbGwgYWxyZWFkeSBhZGRlZCByYW5nZXMuCgogICAgICB2YXIgYW55TmV3UmFuZ2UgPSBuZXdSYW5nZXMuc29tZShmdW5jdGlvbiAobmV3UmFuZ2UpIHsKICAgICAgICBpZiAoIShuZXdSYW5nZSBpbnN0YW5jZW9mIFJhbmdlKSkgewogICAgICAgICAgLyoqCiAgICAgICAgICAgKiBTZWxlY3Rpb24gcmFuZ2Ugc2V0IHRvIGFuIG9iamVjdCB0aGF0IGlzIG5vdCBhbiBpbnN0YW5jZSBvZiB7QGxpbmsgbW9kdWxlOmVuZ2luZS9tb2RlbC9yYW5nZX5SYW5nZX0uCiAgICAgICAgICAgKgogICAgICAgICAgICogT25seSB7QGxpbmsgbW9kdWxlOmVuZ2luZS9tb2RlbC9yYW5nZX5SYW5nZX0gaW5zdGFuY2VzIGNhbiBiZSB1c2VkIHRvIHNldCBhIHNlbGVjdGlvbi4KICAgICAgICAgICAqIENvbW1vbiBtaXN0YWtlcyBsZWFkaW5nIHRvIHRoaXMgZXJyb3IgYXJlOgogICAgICAgICAgICoKICAgICAgICAgICAqICogdXNpbmcgRE9NIGBSYW5nZWAgb2JqZWN0LAogICAgICAgICAgICogKiBpbmNvcnJlY3QgQ0tFZGl0b3IgNSBpbnN0YWxsYXRpb24gd2l0aCBtdWx0aXBsZSBgY2tlZGl0b3I1LWVuZ2luZWAgcGFja2FnZXMgaGF2aW5nIGRpZmZlcmVudCB2ZXJzaW9ucy4KICAgICAgICAgICAqCiAgICAgICAgICAgKiBAZXJyb3IgbW9kZWwtc2VsZWN0aW9uLXNldC1yYW5nZXMtbm90LXJhbmdlCiAgICAgICAgICAgKi8KICAgICAgICAgIHRocm93IG5ldyBDS0VkaXRvckVycm9yKCdtb2RlbC1zZWxlY3Rpb24tc2V0LXJhbmdlcy1ub3QtcmFuZ2UnLCBbX3RoaXMsIG5ld1Jhbmdlc10pOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIF90aGlzLl9yYW5nZXMuZXZlcnkoZnVuY3Rpb24gKG9sZFJhbmdlKSB7CiAgICAgICAgICByZXR1cm4gIW9sZFJhbmdlLmlzRXF1YWwobmV3UmFuZ2UpOwogICAgICAgIH0pOwogICAgICB9KTsgLy8gRG9uJ3QgZG8gYW55dGhpbmcgaWYgbm90aGluZyBjaGFuZ2VkLgoKICAgICAgaWYgKG5ld1Jhbmdlcy5sZW5ndGggPT09IHRoaXMuX3Jhbmdlcy5sZW5ndGggJiYgIWFueU5ld1JhbmdlKSB7CiAgICAgICAgcmV0dXJuOwogICAgICB9CgogICAgICB0aGlzLl9yZW1vdmVBbGxSYW5nZXMoKTsKCiAgICAgIHZhciBfaXRlcmF0b3I2ID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIobmV3UmFuZ2VzKSwKICAgICAgICAgIF9zdGVwNjsKCiAgICAgIHRyeSB7CiAgICAgICAgZm9yIChfaXRlcmF0b3I2LnMoKTsgIShfc3RlcDYgPSBfaXRlcmF0b3I2Lm4oKSkuZG9uZTspIHsKICAgICAgICAgIHZhciByYW5nZSA9IF9zdGVwNi52YWx1ZTsKCiAgICAgICAgICB0aGlzLl9wdXNoUmFuZ2UocmFuZ2UpOwogICAgICAgIH0KICAgICAgfSBjYXRjaCAoZXJyKSB7CiAgICAgICAgX2l0ZXJhdG9yNi5lKGVycik7CiAgICAgIH0gZmluYWxseSB7CiAgICAgICAgX2l0ZXJhdG9yNi5mKCk7CiAgICAgIH0KCiAgICAgIHRoaXMuX2xhc3RSYW5nZUJhY2t3YXJkID0gISFpc0xhc3RCYWNrd2FyZDsKICAgICAgdGhpcy5maXJlKCdjaGFuZ2U6cmFuZ2UnLCB7CiAgICAgICAgZGlyZWN0Q2hhbmdlOiB0cnVlCiAgICAgIH0pOwogICAgfQogICAgLyoqCiAgICAgKiBNb3ZlcyB7QGxpbmsgbW9kdWxlOmVuZ2luZS9tb2RlbC9zZWxlY3Rpb25+U2VsZWN0aW9uI2ZvY3VzfSB0byB0aGUgc3BlY2lmaWVkIGxvY2F0aW9uLgogICAgICoKICAgICAqIFRoZSBsb2NhdGlvbiBjYW4gYmUgc3BlY2lmaWVkIGluIHRoZSBzYW1lIGZvcm0gYXMKICAgICAqIHtAbGluayBtb2R1bGU6ZW5naW5lL21vZGVsL3dyaXRlcn5Xcml0ZXIjY3JlYXRlUG9zaXRpb25BdCB3cml0ZXIuY3JlYXRlUG9zaXRpb25BdCgpfSBwYXJhbWV0ZXJzLgogICAgICoKICAgICAqIEBmaXJlcyBjaGFuZ2U6cmFuZ2UKICAgICAqIEBwYXJhbSB7bW9kdWxlOmVuZ2luZS9tb2RlbC9pdGVtfkl0ZW18bW9kdWxlOmVuZ2luZS9tb2RlbC9wb3NpdGlvbn5Qb3NpdGlvbn0gaXRlbU9yUG9zaXRpb24KICAgICAqIEBwYXJhbSB7TnVtYmVyfCdlbmQnfCdiZWZvcmUnfCdhZnRlcid9IFtvZmZzZXRdIE9mZnNldCBvciBvbmUgb2YgdGhlIGZsYWdzLiBVc2VkIG9ubHkgd2hlbgogICAgICogZmlyc3QgcGFyYW1ldGVyIGlzIGEge0BsaW5rIG1vZHVsZTplbmdpbmUvbW9kZWwvaXRlbX5JdGVtIG1vZGVsIGl0ZW19LgogICAgICovCgogIH0sIHsKICAgIGtleTogInNldEZvY3VzIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRGb2N1cyhpdGVtT3JQb3NpdGlvbiwgb2Zmc2V0KSB7CiAgICAgIGlmICh0aGlzLmFuY2hvciA9PT0gbnVsbCkgewogICAgICAgIC8qKgogICAgICAgICAqIENhbm5vdCBzZXQgc2VsZWN0aW9uIGZvY3VzIGlmIHRoZXJlIGFyZSBubyByYW5nZXMgaW4gc2VsZWN0aW9uLgogICAgICAgICAqCiAgICAgICAgICogQGVycm9yIG1vZGVsLXNlbGVjdGlvbi1zZXRmb2N1cy1uby1yYW5nZXMKICAgICAgICAgKi8KICAgICAgICB0aHJvdyBuZXcgQ0tFZGl0b3JFcnJvcignbW9kZWwtc2VsZWN0aW9uLXNldGZvY3VzLW5vLXJhbmdlcycsIFt0aGlzLCBpdGVtT3JQb3NpdGlvbl0pOwogICAgICB9CgogICAgICB2YXIgbmV3Rm9jdXMgPSBQb3NpdGlvbi5fY3JlYXRlQXQoaXRlbU9yUG9zaXRpb24sIG9mZnNldCk7CgogICAgICBpZiAobmV3Rm9jdXMuY29tcGFyZVdpdGgodGhpcy5mb2N1cykgPT0gJ3NhbWUnKSB7CiAgICAgICAgcmV0dXJuOwogICAgICB9CgogICAgICB2YXIgYW5jaG9yID0gdGhpcy5hbmNob3I7CgogICAgICBpZiAodGhpcy5fcmFuZ2VzLmxlbmd0aCkgewogICAgICAgIHRoaXMuX3BvcFJhbmdlKCk7CiAgICAgIH0KCiAgICAgIGlmIChuZXdGb2N1cy5jb21wYXJlV2l0aChhbmNob3IpID09ICdiZWZvcmUnKSB7CiAgICAgICAgdGhpcy5fcHVzaFJhbmdlKG5ldyBSYW5nZShuZXdGb2N1cywgYW5jaG9yKSk7CgogICAgICAgIHRoaXMuX2xhc3RSYW5nZUJhY2t3YXJkID0gdHJ1ZTsKICAgICAgfSBlbHNlIHsKICAgICAgICB0aGlzLl9wdXNoUmFuZ2UobmV3IFJhbmdlKGFuY2hvciwgbmV3Rm9jdXMpKTsKCiAgICAgICAgdGhpcy5fbGFzdFJhbmdlQmFja3dhcmQgPSBmYWxzZTsKICAgICAgfQoKICAgICAgdGhpcy5maXJlKCdjaGFuZ2U6cmFuZ2UnLCB7CiAgICAgICAgZGlyZWN0Q2hhbmdlOiB0cnVlCiAgICAgIH0pOwogICAgfQogICAgLyoqCiAgICAgKiBHZXRzIGFuIGF0dHJpYnV0ZSB2YWx1ZSBmb3IgZ2l2ZW4ga2V5IG9yIGB1bmRlZmluZWRgIGlmIHRoYXQgYXR0cmlidXRlIGlzIG5vdCBzZXQgb24gdGhlIHNlbGVjdGlvbi4KICAgICAqCiAgICAgKiBAcGFyYW0ge1N0cmluZ30ga2V5IEtleSBvZiBhdHRyaWJ1dGUgdG8gbG9vayBmb3IuCiAgICAgKiBAcmV0dXJucyB7Kn0gQXR0cmlidXRlIHZhbHVlIG9yIGB1bmRlZmluZWRgLgogICAgICovCgogIH0sIHsKICAgIGtleTogImdldEF0dHJpYnV0ZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0QXR0cmlidXRlKGtleSkgewogICAgICByZXR1cm4gdGhpcy5fYXR0cnMuZ2V0KGtleSk7CiAgICB9CiAgICAvKioKICAgICAqIFJldHVybnMgaXRlcmFibGUgdGhhdCBpdGVyYXRlcyBvdmVyIHRoaXMgc2VsZWN0aW9uJ3MgYXR0cmlidXRlcy4KICAgICAqCiAgICAgKiBBdHRyaWJ1dGVzIGFyZSByZXR1cm5lZCBhcyBhcnJheXMgY29udGFpbmluZyB0d28gaXRlbXMuIEZpcnN0IG9uZSBpcyBhdHRyaWJ1dGUga2V5IGFuZCBzZWNvbmQgaXMgYXR0cmlidXRlIHZhbHVlLgogICAgICogVGhpcyBmb3JtYXQgaXMgYWNjZXB0ZWQgYnkgbmF0aXZlIGBNYXBgIG9iamVjdCBhbmQgYWxzbyBjYW4gYmUgcGFzc2VkIGluIGBOb2RlYCBjb25zdHJ1Y3Rvci4KICAgICAqCiAgICAgKiBAcmV0dXJucyB7SXRlcmFibGUuPCo+fQogICAgICovCgogIH0sIHsKICAgIGtleTogImdldEF0dHJpYnV0ZXMiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldEF0dHJpYnV0ZXMoKSB7CiAgICAgIHJldHVybiB0aGlzLl9hdHRycy5lbnRyaWVzKCk7CiAgICB9CiAgICAvKioKICAgICAqIFJldHVybnMgaXRlcmFibGUgdGhhdCBpdGVyYXRlcyBvdmVyIHRoaXMgc2VsZWN0aW9uJ3MgYXR0cmlidXRlIGtleXMuCiAgICAgKgogICAgICogQHJldHVybnMge0l0ZXJhYmxlLjxTdHJpbmc+fQogICAgICovCgogIH0sIHsKICAgIGtleTogImdldEF0dHJpYnV0ZUtleXMiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldEF0dHJpYnV0ZUtleXMoKSB7CiAgICAgIHJldHVybiB0aGlzLl9hdHRycy5rZXlzKCk7CiAgICB9CiAgICAvKioKICAgICAqIENoZWNrcyBpZiB0aGUgc2VsZWN0aW9uIGhhcyBhbiBhdHRyaWJ1dGUgZm9yIGdpdmVuIGtleS4KICAgICAqCiAgICAgKiBAcGFyYW0ge1N0cmluZ30ga2V5IEtleSBvZiBhdHRyaWJ1dGUgdG8gY2hlY2suCiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn0gYHRydWVgIGlmIGF0dHJpYnV0ZSB3aXRoIGdpdmVuIGtleSBpcyBzZXQgb24gc2VsZWN0aW9uLCBgZmFsc2VgIG90aGVyd2lzZS4KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJoYXNBdHRyaWJ1dGUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGhhc0F0dHJpYnV0ZShrZXkpIHsKICAgICAgcmV0dXJuIHRoaXMuX2F0dHJzLmhhcyhrZXkpOwogICAgfQogICAgLyoqCiAgICAgKiBSZW1vdmVzIGFuIGF0dHJpYnV0ZSB3aXRoIGdpdmVuIGtleSBmcm9tIHRoZSBzZWxlY3Rpb24uCiAgICAgKgogICAgICogSWYgZ2l2ZW4gYXR0cmlidXRlIHdhcyBzZXQgb24gdGhlIHNlbGVjdGlvbiwgZmlyZXMgdGhlIHtAbGluayAjZXZlbnQ6Y2hhbmdlOnJhbmdlfSBldmVudCB3aXRoCiAgICAgKiByZW1vdmVkIGF0dHJpYnV0ZSBrZXkuCiAgICAgKgogICAgICogQGZpcmVzIGNoYW5nZTphdHRyaWJ1dGUKICAgICAqIEBwYXJhbSB7U3RyaW5nfSBrZXkgS2V5IG9mIGF0dHJpYnV0ZSB0byByZW1vdmUuCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAicmVtb3ZlQXR0cmlidXRlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZW1vdmVBdHRyaWJ1dGUoa2V5KSB7CiAgICAgIGlmICh0aGlzLmhhc0F0dHJpYnV0ZShrZXkpKSB7CiAgICAgICAgdGhpcy5fYXR0cnMuZGVsZXRlKGtleSk7CgogICAgICAgIHRoaXMuZmlyZSgnY2hhbmdlOmF0dHJpYnV0ZScsIHsKICAgICAgICAgIGF0dHJpYnV0ZUtleXM6IFtrZXldLAogICAgICAgICAgZGlyZWN0Q2hhbmdlOiB0cnVlCiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0KICAgIC8qKgogICAgICogU2V0cyBhdHRyaWJ1dGUgb24gdGhlIHNlbGVjdGlvbi4gSWYgYXR0cmlidXRlIHdpdGggdGhlIHNhbWUga2V5IGFscmVhZHkgaXMgc2V0LCBpdCdzIHZhbHVlIGlzIG92ZXJ3cml0dGVuLgogICAgICoKICAgICAqIElmIHRoZSBhdHRyaWJ1dGUgdmFsdWUgaGFzIGNoYW5nZWQsIGZpcmVzIHRoZSB7QGxpbmsgI2V2ZW50OmNoYW5nZTpyYW5nZX0gZXZlbnQgd2l0aAogICAgICogdGhlIGF0dHJpYnV0ZSBrZXkuCiAgICAgKgogICAgICogQGZpcmVzIGNoYW5nZTphdHRyaWJ1dGUKICAgICAqIEBwYXJhbSB7U3RyaW5nfSBrZXkgS2V5IG9mIGF0dHJpYnV0ZSB0byBzZXQuCiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIEF0dHJpYnV0ZSB2YWx1ZS4KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJzZXRBdHRyaWJ1dGUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHNldEF0dHJpYnV0ZShrZXksIHZhbHVlKSB7CiAgICAgIGlmICh0aGlzLmdldEF0dHJpYnV0ZShrZXkpICE9PSB2YWx1ZSkgewogICAgICAgIHRoaXMuX2F0dHJzLnNldChrZXksIHZhbHVlKTsKCiAgICAgICAgdGhpcy5maXJlKCdjaGFuZ2U6YXR0cmlidXRlJywgewogICAgICAgICAgYXR0cmlidXRlS2V5czogW2tleV0sCiAgICAgICAgICBkaXJlY3RDaGFuZ2U6IHRydWUKICAgICAgICB9KTsKICAgICAgfQogICAgfQogICAgLyoqCiAgICAgKiBSZXR1cm5zIHRoZSBzZWxlY3RlZCBlbGVtZW50LiB7QGxpbmsgbW9kdWxlOmVuZ2luZS9tb2RlbC9lbGVtZW50fkVsZW1lbnQgRWxlbWVudH0gaXMgY29uc2lkZXJlZCBhcyBzZWxlY3RlZCBpZiB0aGVyZSBpcyBvbmx5CiAgICAgKiBvbmUgcmFuZ2UgaW4gdGhlIHNlbGVjdGlvbiwgYW5kIHRoYXQgcmFuZ2UgY29udGFpbnMgZXhhY3RseSBvbmUgZWxlbWVudC4KICAgICAqIFJldHVybnMgYG51bGxgIGlmIHRoZXJlIGlzIG5vIHNlbGVjdGVkIGVsZW1lbnQuCiAgICAgKgogICAgICogQHJldHVybnMge21vZHVsZTplbmdpbmUvbW9kZWwvZWxlbWVudH5FbGVtZW50fG51bGx9CiAgICAgKi8KCiAgfSwgewogICAga2V5OiAiZ2V0U2VsZWN0ZWRFbGVtZW50IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRTZWxlY3RlZEVsZW1lbnQoKSB7CiAgICAgIGlmICh0aGlzLnJhbmdlQ291bnQgIT09IDEpIHsKICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgfQoKICAgICAgcmV0dXJuIHRoaXMuZ2V0Rmlyc3RSYW5nZSgpLmdldENvbnRhaW5lZEVsZW1lbnQoKTsKICAgIH0KICAgIC8qKgogICAgICogQ2hlY2tzIHdoZXRoZXIgdGhpcyBvYmplY3QgaXMgb2YgdGhlIGdpdmVuLgogICAgICoKICAgICAqCQlzZWxlY3Rpb24uaXMoICdzZWxlY3Rpb24nICk7IC8vIC0+IHRydWUKICAgICAqCQlzZWxlY3Rpb24uaXMoICdtb2RlbDpzZWxlY3Rpb24nICk7IC8vIC0+IHRydWUKICAgICAqCiAgICAgKgkJc2VsZWN0aW9uLmlzKCAndmlldzpzZWxlY3Rpb24nICk7IC8vIC0+IGZhbHNlCiAgICAgKgkJc2VsZWN0aW9uLmlzKCAncmFuZ2UnICk7IC8vIC0+IGZhbHNlCiAgICAgKgogICAgICoge0BsaW5rIG1vZHVsZTplbmdpbmUvbW9kZWwvbm9kZX5Ob2RlI2lzIENoZWNrIHRoZSBlbnRpcmUgbGlzdCBvZiBtb2RlbCBvYmplY3RzfSB3aGljaCBpbXBsZW1lbnQgdGhlIGBpcygpYCBtZXRob2QuCiAgICAgKgogICAgICogQHBhcmFtIHtTdHJpbmd9IHR5cGUKICAgICAqIEByZXR1cm5zIHtCb29sZWFufQogICAgICovCgogIH0sIHsKICAgIGtleTogImlzIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBpcyh0eXBlKSB7CiAgICAgIHJldHVybiB0eXBlID09PSAnc2VsZWN0aW9uJyB8fCB0eXBlID09PSAnbW9kZWw6c2VsZWN0aW9uJzsKICAgIH0KICAgIC8qKgogICAgICogR2V0cyBlbGVtZW50cyBvZiB0eXBlIHtAbGluayBtb2R1bGU6ZW5naW5lL21vZGVsL3NjaGVtYX5TY2hlbWEjaXNCbG9jayAiYmxvY2sifSB0b3VjaGVkIGJ5IHRoZSBzZWxlY3Rpb24uCiAgICAgKgogICAgICogVGhpcyBtZXRob2QncyByZXN1bHQgY2FuIGJlIHVzZWQgZm9yIGV4YW1wbGUgdG8gYXBwbHkgYmxvY2sgc3R5bGluZyB0byBhbGwgYmxvY2tzIGNvdmVyZWQgYnkgdGhpcyBzZWxlY3Rpb24uCiAgICAgKgogICAgICogKipOb3RlOioqIGBnZXRTZWxlY3RlZEJsb2NrcygpYCByZXR1cm5zIGJsb2NrcyB0aGF0IGFyZSBuZXN0ZWQgaW4gb3RoZXIgbm9uLWJsb2NrIGVsZW1lbnRzCiAgICAgKiBidXQgd2lsbCBub3QgcmV0dXJuIGJsb2NrcyBuZXN0ZWQgaW4gb3RoZXIgYmxvY2tzLgogICAgICoKICAgICAqIEluIHRoaXMgY2FzZSB0aGUgZnVuY3Rpb24gd2lsbCByZXR1cm4gZXhhY3RseSBhbGwgMyBwYXJhZ3JhcGhzIChub3RlOiBgPGJsb2NrUXVvdGU+YCBpcyBub3QgYSBibG9jayBpdHNlbGYpOgogICAgICoKICAgICAqCQk8cGFyYWdyYXBoPlthPC9wYXJhZ3JhcGg+CiAgICAgKgkJPGJsb2NrUXVvdGU+CiAgICAgKgkJCTxwYXJhZ3JhcGg+YjwvcGFyYWdyYXBoPgogICAgICoJCTwvYmxvY2tRdW90ZT4KICAgICAqCQk8cGFyYWdyYXBoPmNdZDwvcGFyYWdyYXBoPgogICAgICoKICAgICAqIEluIHRoaXMgY2FzZSB0aGUgcGFyYWdyYXBoIHdpbGwgYWxzbyBiZSByZXR1cm5lZCwgZGVzcGl0ZSB0aGUgY29sbGFwc2VkIHNlbGVjdGlvbjoKICAgICAqCiAgICAgKgkJPHBhcmFncmFwaD5bXWE8L3BhcmFncmFwaD4KICAgICAqCiAgICAgKiBJbiBzdWNoIGEgc2NlbmFyaW8sIGhvd2V2ZXIsIG9ubHkgYmxvY2tzIEEsIEIgJiBFIHdpbGwgYmUgcmV0dXJuZWQgYXMgYmxvY2tzIEMgJiBEIGFyZSBuZXN0ZWQgaW4gYmxvY2sgQjoKICAgICAqCiAgICAgKgkJWzxibG9ja0E+PC9ibG9ja0E+CiAgICAgKgkJPGJsb2NrQj4KICAgICAqCQkJPGJsb2NrQz48L2Jsb2NrQz4KICAgICAqCQkJPGJsb2NrRD48L2Jsb2NrRD4KICAgICAqCQk8L2Jsb2NrQj4KICAgICAqCQk8YmxvY2tFPjwvYmxvY2tFPl0KICAgICAqCiAgICAgKiBJZiB0aGUgc2VsZWN0aW9uIGlzIGluc2lkZSBhIGJsb2NrIGFsbCB0aGUgaW5uZXIgYmxvY2tzIChBICYgQikgYXJlIHJldHVybmVkOgogICAgICoKICAgICAqIAkJPGJsb2NrPgogICAgICoJCQk8YmxvY2tBPlthPC9ibG9ja0E+CiAgICAgKiAJCQk8YmxvY2tCPmJdPC9ibG9ja0I+CiAgICAgKiAJCTwvYmxvY2s+CiAgICAgKgogICAgICogKipTcGVjaWFsIGNhc2UqKjogSWYgYSBzZWxlY3Rpb24gZW5kcyBhdCB0aGUgYmVnaW5uaW5nIG9mIGEgYmxvY2ssIHRoYXQgYmxvY2sgaXMgbm90IHJldHVybmVkIGFzIGZyb20gdXNlciBwZXJzcGVjdGl2ZQogICAgICogdGhpcyBibG9jayB3YXNuJ3Qgc2VsZWN0ZWQuIFNlZSBbIzk4NF0oaHR0cHM6Ly9naXRodWIuY29tL2NrZWRpdG9yL2NrZWRpdG9yNS1lbmdpbmUvaXNzdWVzLzk4NCkgZm9yIG1vcmUgZGV0YWlscy4KICAgICAqCiAgICAgKgkJPHBhcmFncmFwaD5bYTwvcGFyYWdyYXBoPgogICAgICoJCTxwYXJhZ3JhcGg+YjwvcGFyYWdyYXBoPgogICAgICoJCTxwYXJhZ3JhcGg+XWM8L3BhcmFncmFwaD4gLy8gdGhpcyBibG9jayB3aWxsIG5vdCBiZSByZXR1cm5lZAogICAgICoKICAgICAqIEByZXR1cm5zIHtJdGVyYWJsZS48bW9kdWxlOmVuZ2luZS9tb2RlbC9lbGVtZW50fkVsZW1lbnQ+fQogICAgICovCgogIH0sIHsKICAgIGtleTogImdldFNlbGVjdGVkQmxvY2tzIiwKICAgIHZhbHVlOgogICAgLyojX19QVVJFX18qLwogICAgcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gZ2V0U2VsZWN0ZWRCbG9ja3MoKSB7CiAgICAgIHZhciB2aXNpdGVkLCBfaXRlcmF0b3I3LCBfc3RlcDcsIHJhbmdlLCBzdGFydEJsb2NrLCBfaXRlcmF0b3I4LCBfc3RlcDgsIHZhbHVlLCBibG9jaywgZW5kQmxvY2s7CgogICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gZ2V0U2VsZWN0ZWRCbG9ja3MkKF9jb250ZXh0MikgewogICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Mi5wcmV2ID0gX2NvbnRleHQyLm5leHQpIHsKICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgIHZpc2l0ZWQgPSBuZXcgV2Vha1NldCgpOwogICAgICAgICAgICAgIF9pdGVyYXRvcjcgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcih0aGlzLmdldFJhbmdlcygpKTsKICAgICAgICAgICAgICBfY29udGV4dDIucHJldiA9IDI7CgogICAgICAgICAgICAgIF9pdGVyYXRvcjcucygpOwoKICAgICAgICAgICAgY2FzZSA0OgogICAgICAgICAgICAgIGlmICgoX3N0ZXA3ID0gX2l0ZXJhdG9yNy5uKCkpLmRvbmUpIHsKICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gMzU7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIHJhbmdlID0gX3N0ZXA3LnZhbHVlOwogICAgICAgICAgICAgIC8vIEdldCBzdGFydCBibG9jayBvZiByYW5nZSBpbiBjYXNlIG9mIGEgY29sbGFwc2VkIHJhbmdlLgogICAgICAgICAgICAgIHN0YXJ0QmxvY2sgPSBnZXRQYXJlbnRCbG9jayhyYW5nZS5zdGFydCwgdmlzaXRlZCk7CgogICAgICAgICAgICAgIGlmICghKHN0YXJ0QmxvY2sgJiYgaXNUb3BCbG9ja0luUmFuZ2Uoc3RhcnRCbG9jaywgcmFuZ2UpKSkgewogICAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAxMDsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAxMDsKICAgICAgICAgICAgICByZXR1cm4gc3RhcnRCbG9jazsKCiAgICAgICAgICAgIGNhc2UgMTA6CiAgICAgICAgICAgICAgX2l0ZXJhdG9yOCA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKHJhbmdlLmdldFdhbGtlcigpKTsKICAgICAgICAgICAgICBfY29udGV4dDIucHJldiA9IDExOwoKICAgICAgICAgICAgICBfaXRlcmF0b3I4LnMoKTsKCiAgICAgICAgICAgIGNhc2UgMTM6CiAgICAgICAgICAgICAgaWYgKChfc3RlcDggPSBfaXRlcmF0b3I4Lm4oKSkuZG9uZSkgewogICAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAyMTsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgdmFsdWUgPSBfc3RlcDgudmFsdWU7CiAgICAgICAgICAgICAgYmxvY2sgPSB2YWx1ZS5pdGVtOwoKICAgICAgICAgICAgICBpZiAoISh2YWx1ZS50eXBlID09ICdlbGVtZW50RW5kJyAmJiBpc1VudmlzaXRlZFRvcEJsb2NrKGJsb2NrLCB2aXNpdGVkLCByYW5nZSkpKSB7CiAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDE5OwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDE5OwogICAgICAgICAgICAgIHJldHVybiBibG9jazsKCiAgICAgICAgICAgIGNhc2UgMTk6CiAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAxMzsKICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgIGNhc2UgMjE6CiAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAyNjsKICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgIGNhc2UgMjM6CiAgICAgICAgICAgICAgX2NvbnRleHQyLnByZXYgPSAyMzsKICAgICAgICAgICAgICBfY29udGV4dDIudDAgPSBfY29udGV4dDJbImNhdGNoIl0oMTEpOwoKICAgICAgICAgICAgICBfaXRlcmF0b3I4LmUoX2NvbnRleHQyLnQwKTsKCiAgICAgICAgICAgIGNhc2UgMjY6CiAgICAgICAgICAgICAgX2NvbnRleHQyLnByZXYgPSAyNjsKCiAgICAgICAgICAgICAgX2l0ZXJhdG9yOC5mKCk7CgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuZmluaXNoKDI2KTsKCiAgICAgICAgICAgIGNhc2UgMjk6CiAgICAgICAgICAgICAgZW5kQmxvY2sgPSBnZXRQYXJlbnRCbG9jayhyYW5nZS5lbmQsIHZpc2l0ZWQpOyAvLyAjOTg0LiBEb24ndCByZXR1cm4gdGhlIGVuZCBibG9jayBpZiB0aGUgcmFuZ2UgZW5kcyByaWdodCBhdCBpdHMgYmVnaW5uaW5nLgoKICAgICAgICAgICAgICBpZiAoIShlbmRCbG9jayAmJiAhcmFuZ2UuZW5kLmlzVG91Y2hpbmcoUG9zaXRpb24uX2NyZWF0ZUF0KGVuZEJsb2NrLCAwKSkgJiYgaXNUb3BCbG9ja0luUmFuZ2UoZW5kQmxvY2ssIHJhbmdlKSkpIHsKICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gMzM7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gMzM7CiAgICAgICAgICAgICAgcmV0dXJuIGVuZEJsb2NrOwoKICAgICAgICAgICAgY2FzZSAzMzoKICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDQ7CiAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICBjYXNlIDM1OgogICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gNDA7CiAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICBjYXNlIDM3OgogICAgICAgICAgICAgIF9jb250ZXh0Mi5wcmV2ID0gMzc7CiAgICAgICAgICAgICAgX2NvbnRleHQyLnQxID0gX2NvbnRleHQyWyJjYXRjaCJdKDIpOwoKICAgICAgICAgICAgICBfaXRlcmF0b3I3LmUoX2NvbnRleHQyLnQxKTsKCiAgICAgICAgICAgIGNhc2UgNDA6CiAgICAgICAgICAgICAgX2NvbnRleHQyLnByZXYgPSA0MDsKCiAgICAgICAgICAgICAgX2l0ZXJhdG9yNy5mKCk7CgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuZmluaXNoKDQwKTsKCiAgICAgICAgICAgIGNhc2UgNDM6CiAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5zdG9wKCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LCBnZXRTZWxlY3RlZEJsb2NrcywgdGhpcywgW1syLCAzNywgNDAsIDQzXSwgWzExLCAyMywgMjYsIDI5XV0pOwogICAgfSkKICAgIC8qKgogICAgICogQ2hlY2tzIHdoZXRoZXIgdGhlIHNlbGVjdGlvbiBjb250YWlucyB0aGUgZW50aXJlIGNvbnRlbnQgb2YgdGhlIGdpdmVuIGVsZW1lbnQuIFRoaXMgbWVhbnMgdGhhdCBzZWxlY3Rpb24gbXVzdCBzdGFydAogICAgICogYXQgYSBwb3NpdGlvbiB7QGxpbmsgbW9kdWxlOmVuZ2luZS9tb2RlbC9wb3NpdGlvbn5Qb3NpdGlvbiNpc1RvdWNoaW5nIHRvdWNoaW5nfSB0aGUgZWxlbWVudCdzIHN0YXJ0IGFuZCBlbmRzIGF0IHBvc2l0aW9uCiAgICAgKiB0b3VjaGluZyB0aGUgZWxlbWVudCdzIGVuZC4KICAgICAqCiAgICAgKiBCeSBkZWZhdWx0LCB0aGlzIG1ldGhvZCB3aWxsIGNoZWNrIHdoZXRoZXIgdGhlIGVudGlyZSBjb250ZW50IG9mIHRoZSBzZWxlY3Rpb24ncyBjdXJyZW50IHJvb3QgaXMgc2VsZWN0ZWQuCiAgICAgKiBVc2VmdWwgdG8gY2hlY2sgaWYgZS5nLiB0aGUgdXNlciBoYXMganVzdCBwcmVzc2VkIDxrYmQ+Q3RybDwva2JkPiArIDxrYmQ+QTwva2JkPi4KICAgICAqCiAgICAgKiBAcGFyYW0ge21vZHVsZTplbmdpbmUvbW9kZWwvZWxlbWVudH5FbGVtZW50fSBbZWxlbWVudD10aGlzLmFuY2hvci5yb290XQogICAgICogQHJldHVybnMge0Jvb2xlYW59CiAgICAgKi8KCiAgfSwgewogICAga2V5OiAiY29udGFpbnNFbnRpcmVDb250ZW50IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBjb250YWluc0VudGlyZUNvbnRlbnQoKSB7CiAgICAgIHZhciBlbGVtZW50ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB0aGlzLmFuY2hvci5yb290OwoKICAgICAgdmFyIGxpbWl0U3RhcnRQb3NpdGlvbiA9IFBvc2l0aW9uLl9jcmVhdGVBdChlbGVtZW50LCAwKTsKCiAgICAgIHZhciBsaW1pdEVuZFBvc2l0aW9uID0gUG9zaXRpb24uX2NyZWF0ZUF0KGVsZW1lbnQsICdlbmQnKTsKCiAgICAgIHJldHVybiBsaW1pdFN0YXJ0UG9zaXRpb24uaXNUb3VjaGluZyh0aGlzLmdldEZpcnN0UG9zaXRpb24oKSkgJiYgbGltaXRFbmRQb3NpdGlvbi5pc1RvdWNoaW5nKHRoaXMuZ2V0TGFzdFBvc2l0aW9uKCkpOwogICAgfQogICAgLyoqCiAgICAgKiBBZGRzIGdpdmVuIHJhbmdlIHRvIGludGVybmFsIHtAbGluayAjX3JhbmdlcyByYW5nZXMgYXJyYXl9LiBUaHJvd3MgYW4gZXJyb3IKICAgICAqIGlmIGdpdmVuIHJhbmdlIGlzIGludGVyc2VjdGluZyB3aXRoIGFueSByYW5nZSB0aGF0IGlzIGFscmVhZHkgc3RvcmVkIGluIHRoaXMgc2VsZWN0aW9uLgogICAgICoKICAgICAqIEBwcm90ZWN0ZWQKICAgICAqIEBwYXJhbSB7bW9kdWxlOmVuZ2luZS9tb2RlbC9yYW5nZX5SYW5nZX0gcmFuZ2UgUmFuZ2UgdG8gYWRkLgogICAgICovCgogIH0sIHsKICAgIGtleTogIl9wdXNoUmFuZ2UiLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9wdXNoUmFuZ2UocmFuZ2UpIHsKICAgICAgdGhpcy5fY2hlY2tSYW5nZShyYW5nZSk7CgogICAgICB0aGlzLl9yYW5nZXMucHVzaChuZXcgUmFuZ2UocmFuZ2Uuc3RhcnQsIHJhbmdlLmVuZCkpOwogICAgfQogICAgLyoqCiAgICAgKiBDaGVja3MgaWYgZ2l2ZW4gcmFuZ2UgaW50ZXJzZWN0cyB3aXRoIHJhbmdlcyB0aGF0IGFyZSBhbHJlYWR5IGluIHRoZSBzZWxlY3Rpb24uIFRocm93cyBhbiBlcnJvciBpZiBpdCBkb2VzLgogICAgICoKICAgICAqIEBwcm90ZWN0ZWQKICAgICAqIEBwYXJhbSB7bW9kdWxlOmVuZ2luZS9tb2RlbC9yYW5nZX5SYW5nZX0gcmFuZ2UgUmFuZ2UgdG8gY2hlY2suCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAiX2NoZWNrUmFuZ2UiLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9jaGVja1JhbmdlKHJhbmdlKSB7CiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5fcmFuZ2VzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgaWYgKHJhbmdlLmlzSW50ZXJzZWN0aW5nKHRoaXMuX3Jhbmdlc1tpXSkpIHsKICAgICAgICAgIC8qKgogICAgICAgICAgICogVHJ5aW5nIHRvIGFkZCBhIHJhbmdlIHRoYXQgaW50ZXJzZWN0cyB3aXRoIGFub3RoZXIgcmFuZ2UgaW4gdGhlIHNlbGVjdGlvbi4KICAgICAgICAgICAqCiAgICAgICAgICAgKiBAZXJyb3IgbW9kZWwtc2VsZWN0aW9uLXJhbmdlLWludGVyc2VjdHMKICAgICAgICAgICAqIEBwYXJhbSB7bW9kdWxlOmVuZ2luZS9tb2RlbC9yYW5nZX5SYW5nZX0gYWRkZWRSYW5nZSBSYW5nZSB0aGF0IHdhcyBhZGRlZCB0byB0aGUgc2VsZWN0aW9uLgogICAgICAgICAgICogQHBhcmFtIHttb2R1bGU6ZW5naW5lL21vZGVsL3JhbmdlflJhbmdlfSBpbnRlcnNlY3RpbmdSYW5nZSBSYW5nZSBpbiB0aGUgc2VsZWN0aW9uIHRoYXQgaW50ZXJzZWN0cyB3aXRoIGBhZGRlZFJhbmdlYC4KICAgICAgICAgICAqLwogICAgICAgICAgdGhyb3cgbmV3IENLRWRpdG9yRXJyb3IoJ21vZGVsLXNlbGVjdGlvbi1yYW5nZS1pbnRlcnNlY3RzJywgW3RoaXMsIHJhbmdlXSwgewogICAgICAgICAgICBhZGRlZFJhbmdlOiByYW5nZSwKICAgICAgICAgICAgaW50ZXJzZWN0aW5nUmFuZ2U6IHRoaXMuX3Jhbmdlc1tpXQogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgICAvKioKICAgICAqIERlbGV0ZXMgcmFuZ2VzIGZyb20gaW50ZXJuYWwgcmFuZ2UgYXJyYXkuIFVzZXMge0BsaW5rICNfcG9wUmFuZ2UgX3BvcFJhbmdlfSB0bwogICAgICogZW5zdXJlIHByb3BlciByYW5nZXMgcmVtb3ZhbC4KICAgICAqCiAgICAgKiBAcHJvdGVjdGVkCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAiX3JlbW92ZUFsbFJhbmdlcyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gX3JlbW92ZUFsbFJhbmdlcygpIHsKICAgICAgd2hpbGUgKHRoaXMuX3Jhbmdlcy5sZW5ndGggPiAwKSB7CiAgICAgICAgdGhpcy5fcG9wUmFuZ2UoKTsKICAgICAgfQogICAgfQogICAgLyoqCiAgICAgKiBSZW1vdmVzIG1vc3QgcmVjZW50bHkgYWRkZWQgcmFuZ2UgZnJvbSB0aGUgc2VsZWN0aW9uLgogICAgICoKICAgICAqIEBwcm90ZWN0ZWQKICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJfcG9wUmFuZ2UiLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9wb3BSYW5nZSgpIHsKICAgICAgdGhpcy5fcmFuZ2VzLnBvcCgpOwogICAgfQogICAgLyoqCiAgICAgKiBGaXJlZCB3aGVuIHNlbGVjdGlvbiByYW5nZShzKSBjaGFuZ2VkLgogICAgICoKICAgICAqIEBldmVudCBjaGFuZ2U6cmFuZ2UKICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gZGlyZWN0Q2hhbmdlIEluIGNhc2Ugb2Yge0BsaW5rIG1vZHVsZTplbmdpbmUvbW9kZWwvc2VsZWN0aW9uflNlbGVjdGlvbn0gY2xhc3MgaXQgaXMgYWx3YXlzIHNldAogICAgICogdG8gYHRydWVgIHdoaWNoIGluZGljYXRlcyB0aGF0IHRoZSBzZWxlY3Rpb24gY2hhbmdlIHdhcyBjYXVzZWQgYnkgYSBkaXJlY3QgdXNlIG9mIHNlbGVjdGlvbidzIEFQSS4KICAgICAqIFRoZSB7QGxpbmsgbW9kdWxlOmVuZ2luZS9tb2RlbC9kb2N1bWVudHNlbGVjdGlvbn5Eb2N1bWVudFNlbGVjdGlvbn0sIGhvd2V2ZXIsIG1heSBjaGFuZ2UgYmVjYXVzZSBpdHMgcG9zaXRpb24KICAgICAqIHdhcyBkaXJlY3RseSBjaGFuZ2VkIHRocm91Z2ggdGhlIHtAbGluayBtb2R1bGU6ZW5naW5lL21vZGVsL3dyaXRlcn5Xcml0ZXIgd3JpdGVyfSBvciBiZWNhdXNlIGl0cyBwb3NpdGlvbiB3YXMKICAgICAqIGNoYW5nZWQgYmVjYXVzZSB0aGUgc3RydWN0dXJlIG9mIHRoZSBtb2RlbCBoYXMgYmVlbiBjaGFuZ2VkICh3aGljaCBtZWFucyBhbiBpbmRpcmVjdCBjaGFuZ2UpLgogICAgICogVGhlIGluZGlyZWN0IGNoYW5nZSBkb2VzIG5vdCBvY2N1ciBpbiBjYXNlIG9mIG5vcm1hbCAoZGV0YWNoZWQpIHNlbGVjdGlvbnMgYmVjYXVzZSB0aGV5IGFyZSAic3RhdGljIiAoYXMgIm5vdCBsaXZlIikKICAgICAqIHdoaWNoIG1lYW4gdGhhdCB0aGV5IGFyZSBub3QgdXBkYXRlZCBvbmNlIHRoZSBkb2N1bWVudCBjaGFuZ2VzLgogICAgICovCgogICAgLyoqCiAgICAgKiBGaXJlZCB3aGVuIHNlbGVjdGlvbiBhdHRyaWJ1dGUgY2hhbmdlZC4KICAgICAqCiAgICAgKiBAZXZlbnQgY2hhbmdlOmF0dHJpYnV0ZQogICAgICogQHBhcmFtIHtCb29sZWFufSBkaXJlY3RDaGFuZ2UgSW4gY2FzZSBvZiB7QGxpbmsgbW9kdWxlOmVuZ2luZS9tb2RlbC9zZWxlY3Rpb25+U2VsZWN0aW9ufSBjbGFzcyBpdCBpcyBhbHdheXMgc2V0CiAgICAgKiB0byBgdHJ1ZWAgd2hpY2ggaW5kaWNhdGVzIHRoYXQgdGhlIHNlbGVjdGlvbiBjaGFuZ2Ugd2FzIGNhdXNlZCBieSBhIGRpcmVjdCB1c2Ugb2Ygc2VsZWN0aW9uJ3MgQVBJLgogICAgICogVGhlIHtAbGluayBtb2R1bGU6ZW5naW5lL21vZGVsL2RvY3VtZW50c2VsZWN0aW9ufkRvY3VtZW50U2VsZWN0aW9ufSwgaG93ZXZlciwgbWF5IGNoYW5nZSBiZWNhdXNlIGl0cyBhdHRyaWJ1dGVzCiAgICAgKiB3ZXJlIGRpcmVjdGx5IGNoYW5nZWQgdGhyb3VnaCB0aGUge0BsaW5rIG1vZHVsZTplbmdpbmUvbW9kZWwvd3JpdGVyfldyaXRlciB3cml0ZXJ9IG9yIGJlY2F1c2UgaXRzIHBvc2l0aW9uIHdhcwogICAgICogY2hhbmdlZCBpbiB0aGUgbW9kZWwgYW5kIGl0cyBhdHRyaWJ1dGVzIHdlcmUgcmVmcmVzaGVkICh3aGljaCBtZWFucyBhbiBpbmRpcmVjdCBjaGFuZ2UpLgogICAgICogVGhlIGluZGlyZWN0IGNoYW5nZSBkb2VzIG5vdCBvY2N1ciBpbiBjYXNlIG9mIG5vcm1hbCAoZGV0YWNoZWQpIHNlbGVjdGlvbnMgYmVjYXVzZSB0aGV5IGFyZSAic3RhdGljIiAoYXMgIm5vdCBsaXZlIikKICAgICAqIHdoaWNoIG1lYW4gdGhhdCB0aGV5IGFyZSBub3QgdXBkYXRlZCBvbmNlIHRoZSBkb2N1bWVudCBjaGFuZ2VzLgogICAgICogQHBhcmFtIHtBcnJheS48U3RyaW5nPn0gYXR0cmlidXRlS2V5cyBBcnJheSBjb250YWluaW5nIGtleXMgb2YgYXR0cmlidXRlcyB0aGF0IGNoYW5nZWQuCiAgICAgKi8KCiAgfV0pOwoKICByZXR1cm4gU2VsZWN0aW9uOwp9KCk7CgpleHBvcnQgeyBTZWxlY3Rpb24gYXMgZGVmYXVsdCB9OwptaXgoU2VsZWN0aW9uLCBFbWl0dGVyTWl4aW4pOyAvLyBDaGVja3Mgd2hldGhlciB0aGUgZ2l2ZW4gZWxlbWVudCBleHRlbmRzICRibG9jayBpbiB0aGUgc2NoZW1hIGFuZCBoYXMgYSBwYXJlbnQgKGlzIG5vdCBhIHJvb3QpLgovLyBNYXJrcyBpdCBhcyBhbHJlYWR5IHZpc2l0ZWQuCgpmdW5jdGlvbiBpc1VudmlzaXRlZEJsb2NrKGVsZW1lbnQsIHZpc2l0ZWQpIHsKICBpZiAodmlzaXRlZC5oYXMoZWxlbWVudCkpIHsKICAgIHJldHVybiBmYWxzZTsKICB9CgogIHZpc2l0ZWQuYWRkKGVsZW1lbnQpOwogIHJldHVybiBlbGVtZW50LnJvb3QuZG9jdW1lbnQubW9kZWwuc2NoZW1hLmlzQmxvY2soZWxlbWVudCkgJiYgZWxlbWVudC5wYXJlbnQ7Cn0gLy8gQ2hlY2tzIGlmIHRoZSBnaXZlbiBlbGVtZW50IGlzIGEgJGJsb2NrIHdhcyBub3QgcHJldmlvdXNseSB2aXNpdGVkIGFuZCBpcyBhIHRvcCBibG9jayBpbiBhIHJhbmdlLgoKCmZ1bmN0aW9uIGlzVW52aXNpdGVkVG9wQmxvY2soZWxlbWVudCwgdmlzaXRlZCwgcmFuZ2UpIHsKICByZXR1cm4gaXNVbnZpc2l0ZWRCbG9jayhlbGVtZW50LCB2aXNpdGVkKSAmJiBpc1RvcEJsb2NrSW5SYW5nZShlbGVtZW50LCByYW5nZSk7Cn0gLy8gRmluZHMgdGhlIGxvd2VzdCBlbGVtZW50IGluIHBvc2l0aW9uJ3MgYW5jZXN0b3JzIHdoaWNoIGlzIGEgYmxvY2suCi8vIEl0IHdpbGwgc2VhcmNoIHVudGlsIGZpcnN0IGFuY2VzdG9yIHRoYXQgaXMgYSBsaW1pdCBlbGVtZW50LgovLyBNYXJrcyBhbGwgYW5jZXN0b3JzIGFzIGFscmVhZHkgdmlzaXRlZCB0byBub3QgaW5jbHVkZSBhbnkgb2YgdGhlbSBsYXRlciBvbi4KCgpmdW5jdGlvbiBnZXRQYXJlbnRCbG9jayhwb3NpdGlvbiwgdmlzaXRlZCkgewogIHZhciBlbGVtZW50ID0gcG9zaXRpb24ucGFyZW50OwogIHZhciBzY2hlbWEgPSBlbGVtZW50LnJvb3QuZG9jdW1lbnQubW9kZWwuc2NoZW1hOwogIHZhciBhbmNlc3RvcnMgPSBwb3NpdGlvbi5wYXJlbnQuZ2V0QW5jZXN0b3JzKHsKICAgIHBhcmVudEZpcnN0OiB0cnVlLAogICAgaW5jbHVkZVNlbGY6IHRydWUKICB9KTsKICB2YXIgaGFzUGFyZW50TGltaXQgPSBmYWxzZTsKICB2YXIgYmxvY2sgPSBhbmNlc3RvcnMuZmluZChmdW5jdGlvbiAoZWxlbWVudCkgewogICAgLy8gU3RvcCBzZWFyY2hpbmcgYWZ0ZXIgZmlyc3QgcGFyZW50IG5vZGUgdGhhdCBpcyBsaW1pdCBlbGVtZW50LgogICAgaWYgKGhhc1BhcmVudExpbWl0KSB7CiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KCiAgICBoYXNQYXJlbnRMaW1pdCA9IHNjaGVtYS5pc0xpbWl0KGVsZW1lbnQpOwogICAgcmV0dXJuICFoYXNQYXJlbnRMaW1pdCAmJiBpc1VudmlzaXRlZEJsb2NrKGVsZW1lbnQsIHZpc2l0ZWQpOwogIH0pOyAvLyBNYXJrIGFsbCBhbmNlc3RvcnMgb2YgdGhpcyBwb3NpdGlvbidzIHBhcmVudCwgYmVjYXVzZSBmaW5kKCkgbWlnaHQndmUgc3RvcHBlZCBlYXJseSBhbmQKICAvLyB0aGUgZm91bmQgYmxvY2sgbWF5IGJlIGEgY2hpbGQgb2YgYW5vdGhlciBibG9jay4KCiAgYW5jZXN0b3JzLmZvckVhY2goZnVuY3Rpb24gKGVsZW1lbnQpIHsKICAgIHJldHVybiB2aXNpdGVkLmFkZChlbGVtZW50KTsKICB9KTsKICByZXR1cm4gYmxvY2s7Cn0gLy8gQ2hlY2tzIGlmIHRoZSBibG9ja3MgaXMgbm90IG5lc3RlZCBpbiBvdGhlciBibG9jayBpbnNpZGUgYSByYW5nZS4KLy8KLy8gQHBhcmFtIHttb2R1bGU6ZW5naW5lL21vZGVsL2VsZW1lbnR+RWxlbWVudH0gYmxvY2sgQmxvY2sgdG8gY2hlY2suCi8vIEBwYXJhbSB7bW9kdWxlOmVuZ2luZS9tb2RlbC9yYW5nZX5SYW5nZX0gcmFuZ2UgUmFuZ2UgdG8gY2hlY2suCgoKZnVuY3Rpb24gaXNUb3BCbG9ja0luUmFuZ2UoYmxvY2ssIHJhbmdlKSB7CiAgdmFyIHBhcmVudEJsb2NrID0gZmluZEFuY2VzdG9yQmxvY2soYmxvY2spOwoKICBpZiAoIXBhcmVudEJsb2NrKSB7CiAgICByZXR1cm4gdHJ1ZTsKICB9IC8vIEFkZCBsb29zZSBmbGFnIHRvIGNoZWNrIGFzIHBhcmVudFJhbmdlIGNhbiBiZSBlcXVhbCB0byByYW5nZS4KCgogIHZhciBpc1BhcmVudEluUmFuZ2UgPSByYW5nZS5jb250YWluc1JhbmdlKFJhbmdlLl9jcmVhdGVPbihwYXJlbnRCbG9jayksIHRydWUpOwogIHJldHVybiAhaXNQYXJlbnRJblJhbmdlOwp9IC8vIFJldHVybnMgZmlyc3QgYW5jZXN0b3IgYmxvY2sgb2YgYSBub2RlLgovLwovLyBAcGFyYW0ge21vZHVsZTplbmdpbmUvbW9kZWwvbm9kZX5Ob2RlfSBub2RlCi8vIEByZXR1cm5zIHttb2R1bGU6ZW5naW5lL21vZGVsL25vZGV+Tm9kZXx1bmRlZmluZWR9CgoKZnVuY3Rpb24gZmluZEFuY2VzdG9yQmxvY2sobm9kZSkgewogIHZhciBzY2hlbWEgPSBub2RlLnJvb3QuZG9jdW1lbnQubW9kZWwuc2NoZW1hOwogIHZhciBwYXJlbnQgPSBub2RlLnBhcmVudDsKCiAgd2hpbGUgKHBhcmVudCkgewogICAgaWYgKHNjaGVtYS5pc0Jsb2NrKHBhcmVudCkpIHsKICAgICAgcmV0dXJuIHBhcmVudDsKICAgIH0KCiAgICBwYXJlbnQgPSBwYXJlbnQucGFyZW50OwogIH0KfQovKioKICogQW4gZW50aXR5IHRoYXQgaXMgdXNlZCB0byBzZXQgc2VsZWN0aW9uLgogKgogKiBTZWUgYWxzbyB7QGxpbmsgbW9kdWxlOmVuZ2luZS9tb2RlbC9zZWxlY3Rpb25+U2VsZWN0aW9uI3NldFRvfQogKgogKiBAdHlwZWRlZiB7CiAqICAgICBtb2R1bGU6ZW5naW5lL21vZGVsL3NlbGVjdGlvbn5TZWxlY3Rpb258CiAqICAgICBtb2R1bGU6ZW5naW5lL21vZGVsL2RvY3VtZW50c2VsZWN0aW9ufkRvY3VtZW50U2VsZWN0aW9ufAogKiAgICAgbW9kdWxlOmVuZ2luZS9tb2RlbC9wb3NpdGlvbn5Qb3NpdGlvbnwKICogICAgIG1vZHVsZTplbmdpbmUvbW9kZWwvcmFuZ2V+UmFuZ2V8CiAqICAgICBtb2R1bGU6ZW5naW5lL21vZGVsL25vZGV+Tm9kZXwKICogICAgIEl0ZXJhYmxlLjxtb2R1bGU6ZW5naW5lL21vZGVsL3JhbmdlflJhbmdlPnwKICogICAgIG51bGwKICogfSBtb2R1bGU6ZW5naW5lL21vZGVsL3NlbGVjdGlvbn5TZWxlY3RhYmxlCiAqLw=="},{"version":3,"sources":["/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-engine/src/model/selection.js"],"names":["Position","Node","Range","EmitterMixin","CKEditorError","mix","isIterable","Selection","selectable","placeOrOffset","options","_lastRangeBackward","_ranges","_attrs","Map","setTo","length","range","end","start","isCollapsed","otherSelection","rangeCount","anchor","isEqual","focus","thisRange","found","otherRange","first","isBefore","last","isAfter","getFirstRange","clone","lastRange","getLastRange","_setRanges","getRanges","isBackward","backward","_createIn","_createOn","undefined","_createAt","newRanges","isLastBackward","Array","from","anyNewRange","some","newRange","every","oldRange","_removeAllRanges","_pushRange","fire","directChange","itemOrPosition","offset","newFocus","compareWith","_popRange","key","get","entries","keys","has","hasAttribute","delete","attributeKeys","value","getAttribute","set","getContainedElement","type","visited","WeakSet","startBlock","getParentBlock","isTopBlockInRange","getWalker","block","item","isUnvisitedTopBlock","endBlock","isTouching","element","root","limitStartPosition","limitEndPosition","getFirstPosition","getLastPosition","_checkRange","push","i","isIntersecting","addedRange","intersectingRange","pop","isUnvisitedBlock","add","document","model","schema","isBlock","parent","position","ancestors","getAncestors","parentFirst","includeSelf","hasParentLimit","find","isLimit","forEach","parentBlock","findAncestorBlock","isParentInRange","containsRange","node"],"mappings":";;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA,OAAOA,QAAP,MAAqB,YAArB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,YAAP,MAAyB,4CAAzB;AACA,OAAOC,aAAP,MAA0B,6CAA1B;AACA,OAAOC,GAAP,MAAgB,mCAAhB;AACA,OAAOC,UAAP,MAAuB,0CAAvB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IACqBC,S;AACpB;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,qBAAaC,UAAb,EAAyBC,aAAzB,EAAwCC,OAAxC,EAAkD;AAAA;;AACjD;AACF;AACA;AACA;AACA;AACA;AACE,SAAKC,kBAAL,GAA0B,KAA1B;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,SAAKC,OAAL,GAAe,EAAf;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,SAAKC,MAAL,GAAc,IAAIC,GAAJ,EAAd;;AAEA,QAAKN,UAAL,EAAkB;AACjB,WAAKO,KAAL,CAAYP,UAAZ,EAAwBC,aAAxB,EAAuCC,OAAvC;AACA;AACD;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;SACC,eAAa;AACZ,UAAK,KAAKE,OAAL,CAAaI,MAAb,GAAsB,CAA3B,EAA+B;AAC9B,YAAMC,KAAK,GAAG,KAAKL,OAAL,CAAc,KAAKA,OAAL,CAAaI,MAAb,GAAsB,CAApC,CAAd;AAEA,eAAO,KAAKL,kBAAL,GAA0BM,KAAK,CAACC,GAAhC,GAAsCD,KAAK,CAACE,KAAnD;AACA;;AAED,aAAO,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","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/selection\n */\n\nimport Position from './position';\nimport Node from './node';\nimport Range from './range';\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport isIterable from '@ckeditor/ckeditor5-utils/src/isiterable';\n\n/**\n * Selection is a set of {@link module:engine/model/range~Range ranges}. It has a direction specified by its\n * {@link module:engine/model/selection~Selection#anchor anchor} and {@link module:engine/model/selection~Selection#focus focus}\n * (it can be {@link module:engine/model/selection~Selection#isBackward forward or backward}).\n * Additionally, selection may have its own attributes (think – whether text typed in in this selection\n * should have those attributes – e.g. whether you type a bolded text).\n *\n * @mixes module:utils/emittermixin~EmitterMixin\n */\nexport default class Selection {\n\t/**\n\t * Creates a new selection instance based on the given {@link module:engine/model/selection~Selectable selectable}\n\t * or creates an empty selection if no arguments were passed.\n\t *\n\t *\t\t// Creates empty selection without ranges.\n\t *\t\tconst selection = writer.createSelection();\n\t *\n\t *\t\t// Creates selection at the given range.\n\t *\t\tconst range = writer.createRange( start, end );\n\t *\t\tconst selection = writer.createSelection( range );\n\t *\n\t *\t\t// Creates selection at the given ranges\n\t *\t\tconst ranges = [ writer.createRange( start1, end2 ), writer.createRange( star2, end2 ) ];\n\t *\t\tconst selection = writer.createSelection( ranges );\n\t *\n\t *\t\t// Creates selection from the other selection.\n\t *\t\t// Note: It doesn't copies selection attributes.\n\t *\t\tconst otherSelection = writer.createSelection();\n\t *\t\tconst selection = writer.createSelection( otherSelection );\n\t *\n\t *\t\t// Creates selection from the given document selection.\n\t *\t\t// Note: It doesn't copies selection attributes.\n\t *\t\tconst documentSelection = model.document.selection;\n\t *\t\tconst selection = writer.createSelection( documentSelection );\n\t *\n\t *\t\t// Creates selection at the given position.\n\t *\t\tconst position = writer.createPositionFromPath( root, path );\n\t *\t\tconst selection = writer.createSelection( position );\n\t *\n\t *\t\t// Creates selection at the given offset in the given element.\n\t *\t\tconst paragraph = writer.createElement( 'paragraph' );\n\t *\t\tconst selection = writer.createSelection( paragraph, offset );\n\t *\n\t *\t\t// Creates a range inside an {@link module:engine/model/element~Element element} which starts before the\n\t *\t\t// first child of that element and ends after the last child of that element.\n\t *\t\tconst selection = writer.createSelection( paragraph, 'in' );\n\t *\n\t *\t\t// Creates a range on an {@link module:engine/model/item~Item item} which starts before the item and ends\n\t *\t\t// just after the item.\n\t *\t\tconst selection = writer.createSelection( paragraph, 'on' );\n\t *\n\t * Selection's constructor allow passing additional options (`'backward'`) as the last argument.\n\t *\n\t *\t\t// Creates backward selection.\n\t *\t\tconst selection = writer.createSelection( range, { backward: true } );\n\t *\n\t * @param {module:engine/model/selection~Selectable} selectable\n\t * @param {Number|'before'|'end'|'after'|'on'|'in'} [placeOrOffset] Sets place or offset of the selection.\n\t * @param {Object} [options]\n\t * @param {Boolean} [options.backward] Sets this selection instance to be backward.\n\t */\n\tconstructor( selectable, placeOrOffset, options ) {\n\t\t/**\n\t\t * Specifies whether the last added range was added as a backward or forward range.\n\t\t *\n\t\t * @private\n\t\t * @type {Boolean}\n\t\t */\n\t\tthis._lastRangeBackward = false;\n\n\t\t/**\n\t\t * Stores selection ranges.\n\t\t *\n\t\t * @protected\n\t\t * @type {Array.<module:engine/model/range~Range>}\n\t\t */\n\t\tthis._ranges = [];\n\n\t\t/**\n\t\t * List of attributes set on current selection.\n\t\t *\n\t\t * @protected\n\t\t * @type {Map.<String,*>}\n\t\t */\n\t\tthis._attrs = new Map();\n\n\t\tif ( selectable ) {\n\t\t\tthis.setTo( selectable, placeOrOffset, options );\n\t\t}\n\t}\n\n\t/**\n\t * Selection anchor. Anchor is the position from which the selection was started. If a user is making a selection\n\t * by dragging the mouse, the anchor is where the user pressed the mouse button (the beginning of the selection).\n\t *\n\t * Anchor and {@link #focus} define the direction of the selection, which is important\n\t * when expanding/shrinking selection. The focus moves, while the anchor should remain in the same place.\n\t *\n\t * Anchor is always set to the {@link module:engine/model/range~Range#start start} or\n\t * {@link module:engine/model/range~Range#end end} position of the last of selection's ranges. Whether it is\n\t * the `start` or `end` depends on the specified `options.backward`. See the {@link #setTo `setTo()`} method.\n\t *\n\t * May be set to `null` if there are no ranges in the selection.\n\t *\n\t * @see #focus\n\t * @readonly\n\t * @type {module:engine/model/position~Position|null}\n\t */\n\tget anchor() {\n\t\tif ( this._ranges.length > 0 ) {\n\t\t\tconst range = this._ranges[ this._ranges.length - 1 ];\n\n\t\t\treturn this._lastRangeBackward ? range.end : range.start;\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Selection focus. Focus is the position where the selection ends. If a user is making a selection\n\t * by dragging the mouse, the focus is where the mouse cursor is.\n\t *\n\t * May be set to `null` if there are no ranges in the selection.\n\t *\n\t * @see #anchor\n\t * @readonly\n\t * @type {module:engine/model/position~Position|null}\n\t */\n\tget focus() {\n\t\tif ( this._ranges.length > 0 ) {\n\t\t\tconst range = this._ranges[ this._ranges.length - 1 ];\n\n\t\t\treturn this._lastRangeBackward ? range.start : range.end;\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Whether the selection is collapsed. Selection is collapsed when there is exactly one range in it\n\t * and it is collapsed.\n\t *\n\t * @readonly\n\t * @type {Boolean}\n\t */\n\tget isCollapsed() {\n\t\tconst length = this._ranges.length;\n\n\t\tif ( length === 1 ) {\n\t\t\treturn this._ranges[ 0 ].isCollapsed;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * Returns the number of ranges in the selection.\n\t *\n\t * @readonly\n\t * @type {Number}\n\t */\n\tget rangeCount() {\n\t\treturn this._ranges.length;\n\t}\n\n\t/**\n\t * Specifies whether the selection's {@link #focus} precedes the selection's {@link #anchor}.\n\t *\n\t * @readonly\n\t * @type {Boolean}\n\t */\n\tget isBackward() {\n\t\treturn !this.isCollapsed && this._lastRangeBackward;\n\t}\n\n\t/**\n\t * Checks whether this selection is equal to the given selection. Selections are equal if they have the same directions,\n\t * the same number of ranges and all ranges from one selection equal to ranges from the another selection.\n\t *\n\t * @param {module:engine/model/selection~Selection|module:engine/model/documentselection~DocumentSelection} otherSelection\n\t * Selection to compare with.\n\t * @returns {Boolean} `true` if selections are equal, `false` otherwise.\n\t */\n\tisEqual( otherSelection ) {\n\t\tif ( this.rangeCount != otherSelection.rangeCount ) {\n\t\t\treturn false;\n\t\t} else if ( this.rangeCount === 0 ) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif ( !this.anchor.isEqual( otherSelection.anchor ) || !this.focus.isEqual( otherSelection.focus ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tfor ( const thisRange of this._ranges ) {\n\t\t\tlet found = false;\n\n\t\t\tfor ( const otherRange of otherSelection._ranges ) {\n\t\t\t\tif ( thisRange.isEqual( otherRange ) ) {\n\t\t\t\t\tfound = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( !found ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Returns an iterable object that iterates over copies of selection ranges.\n\t *\n\t * @returns {Iterable.<module:engine/model/range~Range>}\n\t */\n\t* getRanges() {\n\t\tfor ( const range of this._ranges ) {\n\t\t\tyield new Range( range.start, range.end );\n\t\t}\n\t}\n\n\t/**\n\t * Returns a copy of the first range in the selection.\n\t * First range is the one which {@link module:engine/model/range~Range#start start} position\n\t * {@link module:engine/model/position~Position#isBefore is before} start position of all other ranges\n\t * (not to confuse with the first range added to the selection).\n\t *\n\t * Returns `null` if there are no ranges in selection.\n\t *\n\t * @returns {module:engine/model/range~Range|null}\n\t */\n\tgetFirstRange() {\n\t\tlet first = null;\n\n\t\tfor ( const range of this._ranges ) {\n\t\t\tif ( !first || range.start.isBefore( first.start ) ) {\n\t\t\t\tfirst = range;\n\t\t\t}\n\t\t}\n\n\t\treturn first ? new Range( first.start, first.end ) : null;\n\t}\n\n\t/**\n\t * Returns a copy of the last range in the selection.\n\t * Last range is the one which {@link module:engine/model/range~Range#end end} position\n\t * {@link module:engine/model/position~Position#isAfter is after} end position of all other ranges (not to confuse with the range most\n\t * recently added to the selection).\n\t *\n\t * Returns `null` if there are no ranges in selection.\n\t *\n\t * @returns {module:engine/model/range~Range|null}\n\t */\n\tgetLastRange() {\n\t\tlet last = null;\n\n\t\tfor ( const range of this._ranges ) {\n\t\t\tif ( !last || range.end.isAfter( last.end ) ) {\n\t\t\t\tlast = range;\n\t\t\t}\n\t\t}\n\n\t\treturn last ? new Range( last.start, last.end ) : null;\n\t}\n\n\t/**\n\t * Returns the first position in the selection.\n\t * First position is the position that {@link module:engine/model/position~Position#isBefore is before}\n\t * any other position in the selection.\n\t *\n\t * Returns `null` if there are no ranges in selection.\n\t *\n\t * @returns {module:engine/model/position~Position|null}\n\t */\n\tgetFirstPosition() {\n\t\tconst first = this.getFirstRange();\n\n\t\treturn first ? first.start.clone() : null;\n\t}\n\n\t/**\n\t * Returns the last position in the selection.\n\t * Last position is the position that {@link module:engine/model/position~Position#isAfter is after}\n\t * any other position in the selection.\n\t *\n\t * Returns `null` if there are no ranges in selection.\n\t *\n\t * @returns {module:engine/model/position~Position|null}\n\t */\n\tgetLastPosition() {\n\t\tconst lastRange = this.getLastRange();\n\n\t\treturn lastRange ? lastRange.end.clone() : null;\n\t}\n\n\t/**\n\t * Sets this selection's ranges and direction to the specified location based on the given\n\t * {@link module:engine/model/selection~Selectable selectable}.\n\t *\n\t *\t\t// Removes all selection's ranges.\n\t *\t\tselection.setTo( null );\n\t *\n\t *\t\t// Sets selection to the given range.\n\t *\t\tconst range = writer.createRange( start, end );\n\t *\t\tselection.setTo( range );\n\t *\n\t *\t\t// Sets selection to given ranges.\n\t *\t\tconst ranges = [ writer.createRange( start1, end2 ), writer.createRange( star2, end2 ) ];\n\t *\t\tselection.setTo( ranges );\n\t *\n\t *\t\t// Sets selection to other selection.\n\t *\t\t// Note: It doesn't copies selection attributes.\n\t *\t\tconst otherSelection = writer.createSelection();\n\t *\t\tselection.setTo( otherSelection );\n\t *\n\t *\t\t// Sets selection to the given document selection.\n\t *\t\t// Note: It doesn't copies selection attributes.\n\t *\t\tconst documentSelection = new DocumentSelection( doc );\n\t *\t\tselection.setTo( documentSelection );\n\t *\n\t *\t\t// Sets collapsed selection at the given position.\n\t *\t\tconst position = writer.createPositionFromPath( root, path );\n\t *\t\tselection.setTo( position );\n\t *\n\t *\t\t// Sets collapsed selection at the position of the given node and an offset.\n\t *\t\tselection.setTo( paragraph, offset );\n\t *\n\t * Creates a range inside an {@link module:engine/model/element~Element element} which starts before the first child of\n \t * that element and ends after the last child of that element.\n\t *\n\t *\t\tselection.setTo( paragraph, 'in' );\n\t *\n\t * Creates a range on an {@link module:engine/model/item~Item item} which starts before the item and ends just after the item.\n\t *\n\t *\t\tselection.setTo( paragraph, 'on' );\n\t *\n\t * `Selection#setTo()`' method allow passing additional options (`backward`) as the last argument.\n\t *\n\t *\t\t// Sets backward selection.\n\t *\t\tconst selection = writer.createSelection( range, { backward: true } );\n\t *\n\t * @param {module:engine/model/selection~Selectable} selectable\n\t * @param {Number|'before'|'end'|'after'|'on'|'in'} [placeOrOffset] Sets place or offset of the selection.\n\t * @param {Object} [options]\n\t * @param {Boolean} [options.backward] Sets this selection instance to be backward.\n\t */\n\tsetTo( selectable, placeOrOffset, options ) {\n\t\tif ( selectable === null ) {\n\t\t\tthis._setRanges( [] );\n\t\t} else if ( selectable instanceof Selection ) {\n\t\t\tthis._setRanges( selectable.getRanges(), selectable.isBackward );\n\t\t} else if ( selectable && typeof selectable.getRanges == 'function' ) {\n\t\t\t// We assume that the selectable is a DocumentSelection.\n\t\t\t// It can't be imported here, because it would lead to circular imports.\n\t\t\tthis._setRanges( selectable.getRanges(), selectable.isBackward );\n\t\t} else if ( selectable instanceof Range ) {\n\t\t\tthis._setRanges( [ selectable ], !!placeOrOffset && !!placeOrOffset.backward );\n\t\t} else if ( selectable instanceof Position ) {\n\t\t\tthis._setRanges( [ new Range( selectable ) ] );\n\t\t} else if ( selectable instanceof Node ) {\n\t\t\tconst backward = !!options && !!options.backward;\n\t\t\tlet range;\n\n\t\t\tif ( placeOrOffset == 'in' ) {\n\t\t\t\trange = Range._createIn( selectable );\n\t\t\t} else if ( placeOrOffset == 'on' ) {\n\t\t\t\trange = Range._createOn( selectable );\n\t\t\t} else if ( placeOrOffset !== undefined ) {\n\t\t\t\trange = new Range( Position._createAt( selectable, placeOrOffset ) );\n\t\t\t} else {\n\t\t\t\t/**\n\t\t\t\t * selection.setTo requires the second parameter when the first parameter is a node.\n\t\t\t\t *\n\t\t\t\t * @error model-selection-setto-required-second-parameter\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError( 'model-selection-setto-required-second-parameter', [ this, selectable ] );\n\t\t\t}\n\n\t\t\tthis._setRanges( [ range ], backward );\n\t\t} else if ( isIterable( selectable ) ) {\n\t\t\t// We assume that the selectable is an iterable of ranges.\n\t\t\tthis._setRanges( selectable, placeOrOffset && !!placeOrOffset.backward );\n\t\t} else {\n\t\t\t/**\n\t\t\t * Cannot set the selection to the given place.\n\t\t\t *\n\t\t\t * Invalid parameters were specified when setting the selection. Common issues:\n\t\t\t *\n\t\t\t * * A {@link module:engine/model/textproxy~TextProxy} instance was passed instead of\n\t\t\t * a real {@link module:engine/model/text~Text}.\n\t\t\t * * View nodes were passed instead of model nodes.\n\t\t\t * * `null`/`undefined` was passed.\n\t\t\t *\n\t\t\t * @error model-selection-setto-not-selectable\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'model-selection-setto-not-selectable', [ this, selectable ] );\n\t\t}\n\t}\n\n\t/**\n\t * Replaces all ranges that were added to the selection with given array of ranges. Last range of the array\n\t * is treated like the last added range and is used to set {@link module:engine/model/selection~Selection#anchor} and\n\t * {@link module:engine/model/selection~Selection#focus}. Accepts a flag describing in which direction the selection is made.\n\t *\n\t * @protected\n\t * @fires change:range\n\t * @param {Iterable.<module:engine/model/range~Range>} newRanges Ranges to set.\n\t * @param {Boolean} [isLastBackward=false] Flag describing if last added range was selected forward - from start to end (`false`)\n\t * or backward - from end to start (`true`).\n\t */\n\t_setRanges( newRanges, isLastBackward = false ) {\n\t\tnewRanges = Array.from( newRanges );\n\n\t\t// Check whether there is any range in new ranges set that is different than all already added ranges.\n\t\tconst anyNewRange = newRanges.some( newRange => {\n\t\t\tif ( !( newRange instanceof Range ) ) {\n\t\t\t\t/**\n\t\t\t\t * Selection range set to an object that is not an instance of {@link module:engine/model/range~Range}.\n\t\t\t\t *\n\t\t\t\t * Only {@link module:engine/model/range~Range} instances can be used to set a selection.\n\t\t\t\t * Common mistakes leading to this error are:\n\t\t\t\t *\n\t\t\t\t * * using DOM `Range` object,\n\t\t\t\t * * incorrect CKEditor 5 installation with multiple `ckeditor5-engine` packages having different versions.\n\t\t\t\t *\n\t\t\t\t * @error model-selection-set-ranges-not-range\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError(\n\t\t\t\t\t'model-selection-set-ranges-not-range',\n\t\t\t\t\t[ this, newRanges ]\n\t\t\t\t);\n\t\t\t}\n\n\t\t\treturn this._ranges.every( oldRange => {\n\t\t\t\treturn !oldRange.isEqual( newRange );\n\t\t\t} );\n\t\t} );\n\n\t\t// Don't do anything if nothing changed.\n\t\tif ( newRanges.length === this._ranges.length && !anyNewRange ) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._removeAllRanges();\n\n\t\tfor ( const range of newRanges ) {\n\t\t\tthis._pushRange( range );\n\t\t}\n\n\t\tthis._lastRangeBackward = !!isLastBackward;\n\n\t\tthis.fire( 'change:range', { directChange: true } );\n\t}\n\n\t/**\n\t * Moves {@link module:engine/model/selection~Selection#focus} to the specified location.\n\t *\n\t * The location can be specified in the same form as\n\t * {@link module:engine/model/writer~Writer#createPositionAt writer.createPositionAt()} parameters.\n\t *\n\t * @fires change:range\n\t * @param {module:engine/model/item~Item|module:engine/model/position~Position} itemOrPosition\n\t * @param {Number|'end'|'before'|'after'} [offset] Offset or one of the flags. Used only when\n\t * first parameter is a {@link module:engine/model/item~Item model item}.\n\t */\n\tsetFocus( itemOrPosition, offset ) {\n\t\tif ( this.anchor === null ) {\n\t\t\t/**\n\t\t\t * Cannot set selection focus if there are no ranges in selection.\n\t\t\t *\n\t\t\t * @error model-selection-setfocus-no-ranges\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'model-selection-setfocus-no-ranges', [ this, itemOrPosition ] );\n\t\t}\n\n\t\tconst newFocus = Position._createAt( itemOrPosition, offset );\n\n\t\tif ( newFocus.compareWith( this.focus ) == 'same' ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst anchor = this.anchor;\n\n\t\tif ( this._ranges.length ) {\n\t\t\tthis._popRange();\n\t\t}\n\n\t\tif ( newFocus.compareWith( anchor ) == 'before' ) {\n\t\t\tthis._pushRange( new Range( newFocus, anchor ) );\n\t\t\tthis._lastRangeBackward = true;\n\t\t} else {\n\t\t\tthis._pushRange( new Range( anchor, newFocus ) );\n\t\t\tthis._lastRangeBackward = false;\n\t\t}\n\n\t\tthis.fire( 'change:range', { directChange: true } );\n\t}\n\n\t/**\n\t * Gets an attribute value for given key or `undefined` if that attribute is not set on the selection.\n\t *\n\t * @param {String} key Key of attribute to look for.\n\t * @returns {*} Attribute value or `undefined`.\n\t */\n\tgetAttribute( key ) {\n\t\treturn this._attrs.get( key );\n\t}\n\n\t/**\n\t * Returns iterable that iterates over this selection's attributes.\n\t *\n\t * Attributes are returned as arrays containing two items. First one is attribute key and second is attribute value.\n\t * This format is accepted by native `Map` object and also can be passed in `Node` constructor.\n\t *\n\t * @returns {Iterable.<*>}\n\t */\n\tgetAttributes() {\n\t\treturn this._attrs.entries();\n\t}\n\n\t/**\n\t * Returns iterable that iterates over this selection's attribute keys.\n\t *\n\t * @returns {Iterable.<String>}\n\t */\n\tgetAttributeKeys() {\n\t\treturn this._attrs.keys();\n\t}\n\n\t/**\n\t * Checks if the selection has an attribute for given key.\n\t *\n\t * @param {String} key Key of attribute to check.\n\t * @returns {Boolean} `true` if attribute with given key is set on selection, `false` otherwise.\n\t */\n\thasAttribute( key ) {\n\t\treturn this._attrs.has( key );\n\t}\n\n\t/**\n\t * Removes an attribute with given key from the selection.\n\t *\n\t * If given attribute was set on the selection, fires the {@link #event:change:range} event with\n\t * removed attribute key.\n\t *\n\t * @fires change:attribute\n\t * @param {String} key Key of attribute to remove.\n\t */\n\tremoveAttribute( key ) {\n\t\tif ( this.hasAttribute( key ) ) {\n\t\t\tthis._attrs.delete( key );\n\n\t\t\tthis.fire( 'change:attribute', { attributeKeys: [ key ], directChange: true } );\n\t\t}\n\t}\n\n\t/**\n\t * Sets attribute on the selection. If attribute with the same key already is set, it's value is overwritten.\n\t *\n\t * If the attribute value has changed, fires the {@link #event:change:range} event with\n\t * the attribute key.\n\t *\n\t * @fires change:attribute\n\t * @param {String} key Key of attribute to set.\n\t * @param {*} value Attribute value.\n\t */\n\tsetAttribute( key, value ) {\n\t\tif ( this.getAttribute( key ) !== value ) {\n\t\t\tthis._attrs.set( key, value );\n\n\t\t\tthis.fire( 'change:attribute', { attributeKeys: [ key ], directChange: true } );\n\t\t}\n\t}\n\n\t/**\n\t * Returns the selected element. {@link module:engine/model/element~Element Element} is considered as selected if there is only\n\t * one range in the selection, and that range contains exactly one element.\n\t * Returns `null` if there is no selected element.\n\t *\n\t * @returns {module:engine/model/element~Element|null}\n\t */\n\tgetSelectedElement() {\n\t\tif ( this.rangeCount !== 1 ) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn this.getFirstRange().getContainedElement();\n\t}\n\n\t/**\n\t * Checks whether this object is of the given.\n\t *\n\t *\t\tselection.is( 'selection' ); // -> true\n\t *\t\tselection.is( 'model:selection' ); // -> true\n\t *\n\t *\t\tselection.is( 'view:selection' ); // -> false\n\t *\t\tselection.is( 'range' ); // -> false\n\t *\n\t * {@link module:engine/model/node~Node#is Check the entire list of model objects} which implement the `is()` method.\n\t *\n\t * @param {String} type\n\t * @returns {Boolean}\n\t */\n\tis( type ) {\n\t\treturn type === 'selection' || type === 'model:selection';\n\t}\n\n\t/**\n\t * Gets elements of type {@link module:engine/model/schema~Schema#isBlock \"block\"} touched by the selection.\n\t *\n\t * This method's result can be used for example to apply block styling to all blocks covered by this selection.\n\t *\n\t * **Note:** `getSelectedBlocks()` returns blocks that are nested in other non-block elements\n\t * but will not return blocks nested in other blocks.\n\t *\n\t * In this case the function will return exactly all 3 paragraphs (note: `<blockQuote>` is not a block itself):\n\t *\n\t *\t\t<paragraph>[a</paragraph>\n\t *\t\t<blockQuote>\n\t *\t\t\t<paragraph>b</paragraph>\n\t *\t\t</blockQuote>\n\t *\t\t<paragraph>c]d</paragraph>\n\t *\n\t * In this case the paragraph will also be returned, despite the collapsed selection:\n\t *\n\t *\t\t<paragraph>[]a</paragraph>\n\t *\n\t * In such a scenario, however, only blocks A, B & E will be returned as blocks C & D are nested in block B:\n\t *\n\t *\t\t[<blockA></blockA>\n\t *\t\t<blockB>\n\t *\t\t\t<blockC></blockC>\n\t *\t\t\t<blockD></blockD>\n\t *\t\t</blockB>\n\t *\t\t<blockE></blockE>]\n\t *\n\t * If the selection is inside a block all the inner blocks (A & B) are returned:\n\t *\n\t * \t\t<block>\n\t *\t\t\t<blockA>[a</blockA>\n\t * \t\t\t<blockB>b]</blockB>\n\t * \t\t</block>\n\t *\n\t * **Special case**: If a selection ends at the beginning of a block, that block is not returned as from user perspective\n\t * this block wasn't selected. See [#984](https://github.com/ckeditor/ckeditor5-engine/issues/984) for more details.\n\t *\n\t *\t\t<paragraph>[a</paragraph>\n\t *\t\t<paragraph>b</paragraph>\n\t *\t\t<paragraph>]c</paragraph> // this block will not be returned\n\t *\n\t * @returns {Iterable.<module:engine/model/element~Element>}\n\t */\n\t* getSelectedBlocks() {\n\t\tconst visited = new WeakSet();\n\n\t\tfor ( const range of this.getRanges() ) {\n\t\t\t// Get start block of range in case of a collapsed range.\n\t\t\tconst startBlock = getParentBlock( range.start, visited );\n\n\t\t\tif ( startBlock && isTopBlockInRange( startBlock, range ) ) {\n\t\t\t\tyield startBlock;\n\t\t\t}\n\n\t\t\tfor ( const value of range.getWalker() ) {\n\t\t\t\tconst block = value.item;\n\n\t\t\t\tif ( value.type == 'elementEnd' && isUnvisitedTopBlock( block, visited, range ) ) {\n\t\t\t\t\tyield block;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst endBlock = getParentBlock( range.end, visited );\n\n\t\t\t// #984. Don't return the end block if the range ends right at its beginning.\n\t\t\tif ( endBlock && !range.end.isTouching( Position._createAt( endBlock, 0 ) ) && isTopBlockInRange( endBlock, range ) ) {\n\t\t\t\tyield endBlock;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Checks whether the selection contains the entire content of the given element. This means that selection must start\n\t * at a position {@link module:engine/model/position~Position#isTouching touching} the element's start and ends at position\n\t * touching the element's end.\n\t *\n\t * By default, this method will check whether the entire content of the selection's current root is selected.\n\t * Useful to check if e.g. the user has just pressed <kbd>Ctrl</kbd> + <kbd>A</kbd>.\n\t *\n\t * @param {module:engine/model/element~Element} [element=this.anchor.root]\n\t * @returns {Boolean}\n\t */\n\tcontainsEntireContent( element = this.anchor.root ) {\n\t\tconst limitStartPosition = Position._createAt( element, 0 );\n\t\tconst limitEndPosition = Position._createAt( element, 'end' );\n\n\t\treturn limitStartPosition.isTouching( this.getFirstPosition() ) &&\n\t\t\tlimitEndPosition.isTouching( this.getLastPosition() );\n\t}\n\n\t/**\n\t * Adds given range to internal {@link #_ranges ranges array}. Throws an error\n\t * if given range is intersecting with any range that is already stored in this selection.\n\t *\n\t * @protected\n\t * @param {module:engine/model/range~Range} range Range to add.\n\t */\n\t_pushRange( range ) {\n\t\tthis._checkRange( range );\n\t\tthis._ranges.push( new Range( range.start, range.end ) );\n\t}\n\n\t/**\n\t * Checks if given range intersects with ranges that are already in the selection. Throws an error if it does.\n\t *\n\t * @protected\n\t * @param {module:engine/model/range~Range} range Range to check.\n\t */\n\t_checkRange( range ) {\n\t\tfor ( let i = 0; i < this._ranges.length; i++ ) {\n\t\t\tif ( range.isIntersecting( this._ranges[ i ] ) ) {\n\t\t\t\t/**\n\t\t\t\t * Trying to add a range that intersects with another range in the selection.\n\t\t\t\t *\n\t\t\t\t * @error model-selection-range-intersects\n\t\t\t\t * @param {module:engine/model/range~Range} addedRange Range that was added to the selection.\n\t\t\t\t * @param {module:engine/model/range~Range} intersectingRange Range in the selection that intersects with `addedRange`.\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError(\n\t\t\t\t\t'model-selection-range-intersects',\n\t\t\t\t\t[ this, range ],\n\t\t\t\t\t{ addedRange: range, intersectingRange: this._ranges[ i ] }\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Deletes ranges from internal range array. Uses {@link #_popRange _popRange} to\n\t * ensure proper ranges removal.\n\t *\n\t * @protected\n\t */\n\t_removeAllRanges() {\n\t\twhile ( this._ranges.length > 0 ) {\n\t\t\tthis._popRange();\n\t\t}\n\t}\n\n\t/**\n\t * Removes most recently added range from the selection.\n\t *\n\t * @protected\n\t */\n\t_popRange() {\n\t\tthis._ranges.pop();\n\t}\n\n\t/**\n\t * Fired when selection range(s) changed.\n\t *\n\t * @event change:range\n\t * @param {Boolean} directChange In case of {@link module:engine/model/selection~Selection} class it is always set\n\t * to `true` which indicates that the selection change was caused by a direct use of selection's API.\n\t * The {@link module:engine/model/documentselection~DocumentSelection}, however, may change because its position\n\t * was directly changed through the {@link module:engine/model/writer~Writer writer} or because its position was\n\t * changed because the structure of the model has been changed (which means an indirect change).\n\t * The indirect change does not occur in case of normal (detached) selections because they are \"static\" (as \"not live\")\n\t * which mean that they are not updated once the document changes.\n\t */\n\n\t/**\n\t * Fired when selection attribute changed.\n\t *\n\t * @event change:attribute\n\t * @param {Boolean} directChange In case of {@link module:engine/model/selection~Selection} class it is always set\n\t * to `true` which indicates that the selection change was caused by a direct use of selection's API.\n\t * The {@link module:engine/model/documentselection~DocumentSelection}, however, may change because its attributes\n\t * were directly changed through the {@link module:engine/model/writer~Writer writer} or because its position was\n\t * changed in the model and its attributes were refreshed (which means an indirect change).\n\t * The indirect change does not occur in case of normal (detached) selections because they are \"static\" (as \"not live\")\n\t * which mean that they are not updated once the document changes.\n\t * @param {Array.<String>} attributeKeys Array containing keys of attributes that changed.\n\t */\n}\n\nmix( Selection, EmitterMixin );\n\n// Checks whether the given element extends $block in the schema and has a parent (is not a root).\n// Marks it as already visited.\nfunction isUnvisitedBlock( element, visited ) {\n\tif ( visited.has( element ) ) {\n\t\treturn false;\n\t}\n\n\tvisited.add( element );\n\n\treturn element.root.document.model.schema.isBlock( element ) && element.parent;\n}\n\n// Checks if the given element is a $block was not previously visited and is a top block in a range.\nfunction isUnvisitedTopBlock( element, visited, range ) {\n\treturn isUnvisitedBlock( element, visited ) && isTopBlockInRange( element, range );\n}\n\n// Finds the lowest element in position's ancestors which is a block.\n// It will search until first ancestor that is a limit element.\n// Marks all ancestors as already visited to not include any of them later on.\nfunction getParentBlock( position, visited ) {\n\tconst element = position.parent;\n\tconst schema = element.root.document.model.schema;\n\n\tconst ancestors = position.parent.getAncestors( { parentFirst: true, includeSelf: true } );\n\n\tlet hasParentLimit = false;\n\n\tconst block = ancestors.find( element => {\n\t\t// Stop searching after first parent node that is limit element.\n\t\tif ( hasParentLimit ) {\n\t\t\treturn false;\n\t\t}\n\n\t\thasParentLimit = schema.isLimit( element );\n\n\t\treturn !hasParentLimit && isUnvisitedBlock( element, visited );\n\t} );\n\n\t// Mark all ancestors of this position's parent, because find() might've stopped early and\n\t// the found block may be a child of another block.\n\tancestors.forEach( element => visited.add( element ) );\n\n\treturn block;\n}\n\n// Checks if the blocks is not nested in other block inside a range.\n//\n// @param {module:engine/model/element~Element} block Block to check.\n// @param {module:engine/model/range~Range} range Range to check.\nfunction isTopBlockInRange( block, range ) {\n\tconst parentBlock = findAncestorBlock( block );\n\n\tif ( !parentBlock ) {\n\t\treturn true;\n\t}\n\n\t// Add loose flag to check as parentRange can be equal to range.\n\tconst isParentInRange = range.containsRange( Range._createOn( parentBlock ), true );\n\n\treturn !isParentInRange;\n}\n\n// Returns first ancestor block of a node.\n//\n// @param {module:engine/model/node~Node} node\n// @returns {module:engine/model/node~Node|undefined}\nfunction findAncestorBlock( node ) {\n\tconst schema = node.root.document.model.schema;\n\n\tlet parent = node.parent;\n\n\twhile ( parent ) {\n\t\tif ( schema.isBlock( parent ) ) {\n\t\t\treturn parent;\n\t\t}\n\n\t\tparent = parent.parent;\n\t}\n}\n\n/**\n * An entity that is used to set selection.\n *\n * See also {@link module:engine/model/selection~Selection#setTo}\n *\n * @typedef {\n *     module:engine/model/selection~Selection|\n *     module:engine/model/documentselection~DocumentSelection|\n *     module:engine/model/position~Position|\n *     module:engine/model/range~Range|\n *     module:engine/model/node~Node|\n *     Iterable.<module:engine/model/range~Range>|\n *     null\n * } module:engine/model/selection~Selectable\n */\n"]}]}