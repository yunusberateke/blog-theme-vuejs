{"remainingRequest":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/babel-loader/lib/index.js!/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-dev-webpack-plugin/lib/translatesourceloader.js?{}!/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-engine/src/model/operation/insertoperation.js","dependencies":[{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-engine/src/model/operation/insertoperation.js","mtime":499162500000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-dev-webpack-plugin/lib/translatesourceloader.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-engine/src/model/operation/insertoperation.js"],"names":["Operation","Position","NodeList","MoveOperation","_insert","_normalizeNodes","Text","Element","CKEditorError","InsertOperation","position","nodes","baseVersion","clone","stickiness","shouldReceiveAttributes","maxOffset","map","node","_clone","insert","graveyard","root","document","gyPosition","targetElement","parent","offset","originalNodes","json","toJSON","children","child","name","push","fromJSON"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/operation/insertoperation\n */\n\nimport Operation from './operation';\nimport Position from '../position';\nimport NodeList from '../nodelist';\nimport MoveOperation from './moveoperation';\nimport { _insert, _normalizeNodes } from './utils';\nimport Text from '../text';\nimport Element from '../element';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * Operation to insert one or more nodes at given position in the model.\n *\n * @extends module:engine/model/operation/operation~Operation\n */\nexport default class InsertOperation extends Operation {\n\t/**\n\t * Creates an insert operation.\n\t *\n\t * @param {module:engine/model/position~Position} position Position of insertion.\n\t * @param {module:engine/model/node~NodeSet} nodes The list of nodes to be inserted.\n\t * @param {Number|null} baseVersion Document {@link module:engine/model/document~Document#version} on which operation\n\t * can be applied or `null` if the operation operates on detached (non-document) tree.\n\t */\n\tconstructor( position, nodes, baseVersion ) {\n\t\tsuper( baseVersion );\n\n\t\t/**\n\t\t * Position of insertion.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/position~Position} module:engine/model/operation/insertoperation~InsertOperation#position\n\t\t */\n\t\tthis.position = position.clone();\n\t\tthis.position.stickiness = 'toNone';\n\n\t\t/**\n\t\t * List of nodes to insert.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/nodelist~NodeList} module:engine/model/operation/insertoperation~InsertOperation#nodeList\n\t\t */\n\t\tthis.nodes = new NodeList( _normalizeNodes( nodes ) );\n\n\t\t/**\n\t\t * Flag deciding how the operation should be transformed. If set to `true`, nodes might get additional attributes\n\t\t * during operational transformation. This happens when the operation insertion position is inside of a range\n\t\t * where attributes have changed.\n\t\t *\n\t\t * @member {Boolean} module:engine/model/operation/insertoperation~InsertOperation#shouldReceiveAttributes\n\t\t */\n\t\tthis.shouldReceiveAttributes = false;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget type() {\n\t\treturn 'insert';\n\t}\n\n\t/**\n\t * Total offset size of inserted nodes.\n\t *\n\t * @returns {Number}\n\t */\n\tget howMany() {\n\t\treturn this.nodes.maxOffset;\n\t}\n\n\t/**\n\t * Creates and returns an operation that has the same parameters as this operation.\n\t *\n\t * @returns {module:engine/model/operation/insertoperation~InsertOperation} Clone of this operation.\n\t */\n\tclone() {\n\t\tconst nodes = new NodeList( [ ...this.nodes ].map( node => node._clone( true ) ) );\n\t\tconst insert = new InsertOperation( this.position, nodes, this.baseVersion );\n\n\t\tinsert.shouldReceiveAttributes = this.shouldReceiveAttributes;\n\n\t\treturn insert;\n\t}\n\n\t/**\n\t * See {@link module:engine/model/operation/operation~Operation#getReversed `Operation#getReversed()`}.\n\t *\n\t * @returns {module:engine/model/operation/moveoperation~MoveOperation}\n\t */\n\tgetReversed() {\n\t\tconst graveyard = this.position.root.document.graveyard;\n\t\tconst gyPosition = new Position( graveyard, [ 0 ] );\n\n\t\treturn new MoveOperation( this.position, this.nodes.maxOffset, gyPosition, this.baseVersion + 1 );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\t_validate() {\n\t\tconst targetElement = this.position.parent;\n\n\t\tif ( !targetElement || targetElement.maxOffset < this.position.offset ) {\n\t\t\t/**\n\t\t\t * Insertion position is invalid.\n\t\t\t *\n\t\t\t * @error insert-operation-position-invalid\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'insert-operation-position-invalid',\n\t\t\t\tthis\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\t_execute() {\n\t\t// What happens here is that we want original nodes be passed to writer because we want original nodes\n\t\t// to be inserted to the model. But in InsertOperation, we want to keep those nodes as they were added\n\t\t// to the operation, not modified. For example, text nodes can get merged or cropped while Elements can\n\t\t// get children. It is important that InsertOperation has the copy of original nodes in intact state.\n\t\tconst originalNodes = this.nodes;\n\t\tthis.nodes = new NodeList( [ ...originalNodes ].map( node => node._clone( true ) ) );\n\n\t\t_insert( this.position, originalNodes );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\ttoJSON() {\n\t\tconst json = super.toJSON();\n\n\t\tjson.position = this.position.toJSON();\n\t\tjson.nodes = this.nodes.toJSON();\n\n\t\treturn json;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get className() {\n\t\treturn 'InsertOperation';\n\t}\n\n\t/**\n\t * Creates `InsertOperation` object from deserilized object, i.e. from parsed JSON string.\n\t *\n\t * @param {Object} json Deserialized JSON object.\n\t * @param {module:engine/model/document~Document} document Document on which this operation will be applied.\n\t * @returns {module:engine/model/operation/insertoperation~InsertOperation}\n\t */\n\tstatic fromJSON( json, document ) {\n\t\tconst children = [];\n\n\t\tfor ( const child of json.nodes ) {\n\t\t\tif ( child.name ) {\n\t\t\t\t// If child has name property, it is an Element.\n\t\t\t\tchildren.push( Element.fromJSON( child ) );\n\t\t\t} else {\n\t\t\t\t// Otherwise, it is a Text node.\n\t\t\t\tchildren.push( Text.fromJSON( child ) );\n\t\t\t}\n\t\t}\n\n\t\tconst insert = new InsertOperation( Position.fromJSON( json.position, document ), children, json.baseVersion );\n\t\tinsert.shouldReceiveAttributes = json.shouldReceiveAttributes;\n\n\t\treturn insert;\n\t}\n\n\t// @if CK_DEBUG_ENGINE // toString() {\n\t// @if CK_DEBUG_ENGINE // \tconst nodeString = this.nodes.length > 1 ? `[ ${ this.nodes.length } ]` : this.nodes.getNode( 0 );\n\n\t// @if CK_DEBUG_ENGINE //\treturn `InsertOperation( ${ this.baseVersion } ): ${ nodeString } -> ${ this.position }`;\n\t// @if CK_DEBUG_ENGINE // }\n}\n"]}]}