{"remainingRequest":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/babel-loader/lib/index.js!/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-dev-webpack-plugin/lib/translatesourceloader.js?{}!/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-engine/src/model/nodelist.js","dependencies":[{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-engine/src/model/nodelist.js","mtime":499162500000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-dev-webpack-plugin/lib/translatesourceloader.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-engine/src/model/nodelist.js"],"names":["Node","CKEditorError","NodeList","nodes","_nodes","_insertNodes","Symbol","iterator","length","reduce","sum","node","offsetSize","index","indexOf","getNodeIndex","slice","maxOffset","getNodeStartOffset","offset","totalOffset","nodeList","splice","indexStart","howMany","map","toJSON"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/nodelist\n */\n\nimport Node from './node';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * Provides an interface to operate on a list of {@link module:engine/model/node~Node nodes}. `NodeList` is used internally\n * in classes like {@link module:engine/model/element~Element Element}\n * or {@link module:engine/model/documentfragment~DocumentFragment DocumentFragment}.\n */\nexport default class NodeList {\n\t/**\n\t * Creates an empty node list.\n\t *\n\t * @protected\n\t * @param {Iterable.<module:engine/model/node~Node>} nodes Nodes contained in this node list.\n\t */\n\tconstructor( nodes ) {\n\t\t/**\n\t\t * Nodes contained in this node list.\n\t\t *\n\t\t * @private\n\t\t * @member {Array.<module:engine/model/node~Node>}\n\t\t */\n\t\tthis._nodes = [];\n\n\t\tif ( nodes ) {\n\t\t\tthis._insertNodes( 0, nodes );\n\t\t}\n\t}\n\n\t/**\n\t * Iterable interface.\n\t *\n\t * Iterates over all nodes contained inside this node list.\n\t *\n\t * @returns {Iterable.<module:engine/model/node~Node>}\n\t */\n\t[ Symbol.iterator ]() {\n\t\treturn this._nodes[ Symbol.iterator ]();\n\t}\n\n\t/**\n\t * Number of nodes contained inside this node list.\n\t *\n\t * @readonly\n\t * @type {Number}\n\t */\n\tget length() {\n\t\treturn this._nodes.length;\n\t}\n\n\t/**\n\t * Sum of {@link module:engine/model/node~Node#offsetSize offset sizes} of all nodes contained inside this node list.\n\t *\n\t * @readonly\n\t * @type {Number}\n\t */\n\tget maxOffset() {\n\t\treturn this._nodes.reduce( ( sum, node ) => sum + node.offsetSize, 0 );\n\t}\n\n\t/**\n\t * Gets the node at the given index. Returns `null` if incorrect index was passed.\n\t *\n\t * @param {Number} index Index of node.\n\t * @returns {module:engine/model/node~Node|null} Node at given index.\n\t */\n\tgetNode( index ) {\n\t\treturn this._nodes[ index ] || null;\n\t}\n\n\t/**\n\t * Returns an index of the given node. Returns `null` if given node is not inside this node list.\n\t *\n\t * @param {module:engine/model/node~Node} node Child node to look for.\n\t * @returns {Number|null} Child node's index.\n\t */\n\tgetNodeIndex( node ) {\n\t\tconst index = this._nodes.indexOf( node );\n\n\t\treturn index == -1 ? null : index;\n\t}\n\n\t/**\n\t * Returns the starting offset of given node. Starting offset is equal to the sum of\n\t * {@link module:engine/model/node~Node#offsetSize offset sizes} of all nodes that are before this node in this node list.\n\t *\n\t * @param {module:engine/model/node~Node} node Node to look for.\n\t * @returns {Number|null} Node's starting offset.\n\t */\n\tgetNodeStartOffset( node ) {\n\t\tconst index = this.getNodeIndex( node );\n\n\t\treturn index === null ? null : this._nodes.slice( 0, index ).reduce( ( sum, node ) => sum + node.offsetSize, 0 );\n\t}\n\n\t/**\n\t * Converts index to offset in node list.\n\t *\n\t * Returns starting offset of a node that is at given index. Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError}\n\t * `model-nodelist-index-out-of-bounds` if given index is less than `0` or more than {@link #length}.\n\t *\n\t * @param {Number} index Node's index.\n\t * @returns {Number} Node's starting offset.\n\t */\n\tindexToOffset( index ) {\n\t\tif ( index == this._nodes.length ) {\n\t\t\treturn this.maxOffset;\n\t\t}\n\n\t\tconst node = this._nodes[ index ];\n\n\t\tif ( !node ) {\n\t\t\t/**\n\t\t\t * Given index cannot be found in the node list.\n\t\t\t *\n\t\t\t * @error model-nodelist-index-out-of-bounds\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'model-nodelist-index-out-of-bounds', this );\n\t\t}\n\n\t\treturn this.getNodeStartOffset( node );\n\t}\n\n\t/**\n\t * Converts offset in node list to index.\n\t *\n\t * Returns index of a node that occupies given offset. Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError}\n\t * `model-nodelist-offset-out-of-bounds` if given offset is less than `0` or more than {@link #maxOffset}.\n\t *\n\t * @param {Number} offset Offset to look for.\n\t * @returns {Number} Index of a node that occupies given offset.\n\t */\n\toffsetToIndex( offset ) {\n\t\tlet totalOffset = 0;\n\n\t\tfor ( const node of this._nodes ) {\n\t\t\tif ( offset >= totalOffset && offset < totalOffset + node.offsetSize ) {\n\t\t\t\treturn this.getNodeIndex( node );\n\t\t\t}\n\n\t\t\ttotalOffset += node.offsetSize;\n\t\t}\n\n\t\tif ( totalOffset != offset ) {\n\t\t\t/**\n\t\t\t * Given offset cannot be found in the node list.\n\t\t\t *\n\t\t\t * @error model-nodelist-offset-out-of-bounds\n\t\t\t * @param {Number} offset\n\t\t\t * @param {module:engine/model/nodelist~NodeList} nodeList Stringified node list.\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'model-nodelist-offset-out-of-bounds',\n\t\t\t\tthis,\n\t\t\t\t{\n\t\t\t\t\toffset,\n\t\t\t\t\tnodeList: this\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\n\t\treturn this.length;\n\t}\n\n\t/**\n\t * Inserts given nodes at given index.\n\t *\n\t * @protected\n\t * @param {Number} index Index at which nodes should be inserted.\n\t * @param {Iterable.<module:engine/model/node~Node>} nodes Nodes to be inserted.\n\t */\n\t_insertNodes( index, nodes ) {\n\t\t// Validation.\n\t\tfor ( const node of nodes ) {\n\t\t\tif ( !( node instanceof Node ) ) {\n\t\t\t\t/**\n\t\t\t\t * Trying to insert an object which is not a Node instance.\n\t\t\t\t *\n\t\t\t\t * @error model-nodelist-insertnodes-not-node\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError( 'model-nodelist-insertnodes-not-node', this );\n\t\t\t}\n\t\t}\n\n\t\tthis._nodes.splice( index, 0, ...nodes );\n\t}\n\n\t/**\n\t * Removes one or more nodes starting at the given index.\n\t *\n\t * @protected\n\t * @param {Number} indexStart Index of the first node to remove.\n\t * @param {Number} [howMany=1] Number of nodes to remove.\n\t * @returns {Array.<module:engine/model/node~Node>} Array containing removed nodes.\n\t */\n\t_removeNodes( indexStart, howMany = 1 ) {\n\t\treturn this._nodes.splice( indexStart, howMany );\n\t}\n\n\t/**\n\t * Converts `NodeList` instance to an array containing nodes that were inserted in the node list. Nodes\n\t * are also converted to their plain object representation.\n\t *\n\t * @returns {Array.<module:engine/model/node~Node>} `NodeList` instance converted to `Array`.\n\t */\n\ttoJSON() {\n\t\treturn this._nodes.map( node => node.toJSON() );\n\t}\n}\n"]}]}