{"remainingRequest":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/babel-loader/lib/index.js!/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-dev-webpack-plugin/lib/translatesourceloader.js?{}!/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-engine/src/model/utils/deletecontent.js","dependencies":[{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-engine/src/model/utils/deletecontent.js","mtime":499162500000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-dev-webpack-plugin/lib/translatesourceloader.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-engine/src/model/utils/deletecontent.js"],"names":["LivePosition","Range","DocumentSelection","deleteContent","model","selection","options","isCollapsed","selRange","getFirstRange","root","rootName","schema","change","writer","doNotResetEntireContent","shouldEntireContentBeReplacedWithParagraph","replaceEntireContentWithParagraph","getLivePositionsForSelectedBlocks","startPosition","endPosition","isTouching","remove","createRange","leaveUnmerged","mergeBranches","removeDisallowedAttributes","parent","getChildren","collapseSelectionAt","doNotAutoparagraph","shouldAutoparagraph","insertParagraph","detach","range","document","start","end","hasContent","ignoreMarkers","endBlock","getParentBlock","createPositionAt","createSelection","modifySelection","direction","getLastPosition","fromPosition","position","element","ancestors","getAncestors","parentFirst","includeSelf","isLimit","isBlock","checkShouldMerge","getAncestorsJustBelowCommonAncestor","startAncestor","endAncestor","mergeBranchesRight","mergeBranchesLeft","commonAncestor","startElement","endElement","createPositionAfter","createPositionBefore","isEqual","insert","merge","isEmpty","parentToRemove","mergeRight","nodeBefore","nodeAfter","name","rename","clearAttributes","setAttributes","Object","fromEntries","getAttributes","isCrossingLimitElement","positionA","positionB","ancestorsA","ancestorsB","i","isTextAllowed","checkChild","isParagraphAllowed","leftPos","rightPos","rangeToCheck","getWalker","value","item","paragraph","createElement","limitElement","getLimitElement","createRangeIn","containsEntireContent","positionOrRange","setSelection","setTo"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/utils/deletecontent\n */\n\nimport LivePosition from '../liveposition';\nimport Range from '../range';\nimport DocumentSelection from '../documentselection';\n\n/**\n * Deletes content of the selection and merge siblings. The resulting selection is always collapsed.\n *\n * **Note:** Use {@link module:engine/model/model~Model#deleteContent} instead of this function.\n * This function is only exposed to be reusable in algorithms\n * which change the {@link module:engine/model/model~Model#deleteContent}\n * method's behavior.\n *\n * @param {module:engine/model/model~Model} model The model in context of which the insertion\n * should be performed.\n * @param {module:engine/model/selection~Selection|module:engine/model/documentselection~DocumentSelection} selection\n * Selection of which the content should be deleted.\n * @param {Object} [options]\n * @param {Boolean} [options.leaveUnmerged=false] Whether to merge elements after removing the content of the selection.\n *\n * For example `<heading>x[x</heading><paragraph>y]y</paragraph>` will become:\n *\n * * `<heading>x^y</heading>` with the option disabled (`leaveUnmerged == false`)\n * * `<heading>x^</heading><paragraph>y</paragraph>` with enabled (`leaveUnmerged == true`).\n *\n * Note: {@link module:engine/model/schema~Schema#isObject object} and {@link module:engine/model/schema~Schema#isLimit limit}\n * elements will not be merged.\n *\n * @param {Boolean} [options.doNotResetEntireContent=false] Whether to skip replacing the entire content with a\n * paragraph when the entire content was selected.\n *\n * For example `<heading>[x</heading><paragraph>y]</paragraph>` will become:\n *\n * * `<paragraph>^</paragraph>` with the option disabled (`doNotResetEntireContent == false`)\n * * `<heading>^</heading>` with enabled (`doNotResetEntireContent == true`).\n *\n * @param {Boolean} [options.doNotAutoparagraph=false] Whether to create a paragraph if after content deletion selection is moved\n * to a place where text cannot be inserted.\n *\n * For example `<paragraph>x</paragraph>[<image src=\"foo.jpg\"></image>]` will become:\n *\n * * `<paragraph>x</paragraph><paragraph>[]</paragraph>` with the option disabled (`doNotAutoparagraph == false`)\n * * `<paragraph>x</paragraph>[]` with the option enabled (`doNotAutoparagraph == true`).\n *\n * If you use this option you need to make sure to handle invalid selections yourself or leave\n * them to the selection post-fixer (may not always work).\n *\n * **Note:** if there is no valid position for the selection, the paragraph will always be created:\n *\n * `[<image src=\"foo.jpg\"></image>]` -> `<paragraph>[]</paragraph>`.\n */\nexport default function deleteContent( model, selection, options = {} ) {\n\tif ( selection.isCollapsed ) {\n\t\treturn;\n\t}\n\n\tconst selRange = selection.getFirstRange();\n\n\t// If the selection is already removed, don't do anything.\n\tif ( selRange.root.rootName == '$graveyard' ) {\n\t\treturn;\n\t}\n\n\tconst schema = model.schema;\n\n\tmodel.change( writer => {\n\t\t// 1. Replace the entire content with paragraph.\n\t\t// See: https://github.com/ckeditor/ckeditor5-engine/issues/1012#issuecomment-315017594.\n\t\tif ( !options.doNotResetEntireContent && shouldEntireContentBeReplacedWithParagraph( schema, selection ) ) {\n\t\t\treplaceEntireContentWithParagraph( writer, selection, schema );\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Get the live positions for the range adjusted to span only blocks selected from the user perspective.\n\t\tconst [ startPosition, endPosition ] = getLivePositionsForSelectedBlocks( selRange );\n\n\t\t// 2. Remove the content if there is any.\n\t\tif ( !startPosition.isTouching( endPosition ) ) {\n\t\t\twriter.remove( writer.createRange( startPosition, endPosition ) );\n\t\t}\n\n\t\t// 3. Merge elements in the right branch to the elements in the left branch.\n\t\t// The only reasonable (in terms of data and selection correctness) case in which we need to do that is:\n\t\t//\n\t\t// <heading type=1>Fo[</heading><paragraph>]ar</paragraph> => <heading type=1>Fo^ar</heading>\n\t\t//\n\t\t// However, the algorithm supports also merging deeper structures (up to the depth of the shallower branch),\n\t\t// as it's hard to imagine what should actually be the default behavior. Usually, specific features will\n\t\t// want to override that behavior anyway.\n\t\tif ( !options.leaveUnmerged ) {\n\t\t\tmergeBranches( writer, startPosition, endPosition );\n\n\t\t\t// TMP this will be replaced with a postfixer.\n\t\t\t// We need to check and strip disallowed attributes in all nested nodes because after merge\n\t\t\t// some attributes could end up in a path where are disallowed.\n\t\t\t//\n\t\t\t// e.g. bold is disallowed for <H1>\n\t\t\t// <h1>Fo{o</h1><p>b}a<b>r</b><p> -> <h1>Fo{}a<b>r</b><h1> -> <h1>Fo{}ar<h1>.\n\t\t\tschema.removeDisallowedAttributes( startPosition.parent.getChildren(), writer );\n\t\t}\n\n\t\tcollapseSelectionAt( writer, selection, startPosition );\n\n\t\t// 4. Add a paragraph to set selection in it.\n\t\t// Check if a text is allowed in the new container. If not, try to create a new paragraph (if it's allowed here).\n\t\t// If autoparagraphing is off, we assume that you know what you do so we leave the selection wherever it was.\n\t\tif ( !options.doNotAutoparagraph && shouldAutoparagraph( schema, startPosition ) ) {\n\t\t\tinsertParagraph( writer, startPosition, selection );\n\t\t}\n\n\t\tstartPosition.detach();\n\t\tendPosition.detach();\n\t} );\n}\n\n// Returns the live positions for the range adjusted to span only blocks selected from the user perspective. Example:\n//\n//     <heading1>[foo</heading1>\n//     <paragraph>bar</paragraph>\n//     <heading1>]abc</heading1>  <-- this block is not considered as selected\n//\n// This is the same behavior as in Selection#getSelectedBlocks() \"special case\".\nfunction getLivePositionsForSelectedBlocks( range ) {\n\tconst model = range.root.document.model;\n\n\tconst startPosition = range.start;\n\tlet endPosition = range.end;\n\n\t// If the end of selection is at the start position of last block in the selection, then\n\t// shrink it to not include that trailing block. Note that this should happen only for not empty selection.\n\tif ( model.hasContent( range, { ignoreMarkers: true } ) ) {\n\t\tconst endBlock = getParentBlock( endPosition );\n\n\t\tif ( endBlock && endPosition.isTouching( model.createPositionAt( endBlock, 0 ) ) ) {\n\t\t\t// Create forward selection as a probe to find a valid position after excluding last block from the range.\n\t\t\tconst selection = model.createSelection( range );\n\n\t\t\t// Modify the forward selection in backward direction to shrink it and remove first position of following block from it.\n\t\t\t// This is how modifySelection works and here we are making use of it.\n\t\t\tmodel.modifySelection( selection, { direction: 'backward' } );\n\n\t\t\tendPosition = selection.getLastPosition();\n\t\t}\n\t}\n\n\treturn [\n\t\tLivePosition.fromPosition( startPosition, 'toPrevious' ),\n\t\tLivePosition.fromPosition( endPosition, 'toNext' )\n\t];\n}\n\n// Finds the lowest element in position's ancestors which is a block.\n// Returns null if a limit element is encountered before reaching a block element.\nfunction getParentBlock( position ) {\n\tconst element = position.parent;\n\tconst schema = element.root.document.model.schema;\n\tconst ancestors = element.getAncestors( { parentFirst: true, includeSelf: true } );\n\n\tfor ( const element of ancestors ) {\n\t\tif ( schema.isLimit( element ) ) {\n\t\t\treturn null;\n\t\t}\n\n\t\tif ( schema.isBlock( element ) ) {\n\t\t\treturn element;\n\t\t}\n\t}\n}\n\n// This function is a result of reaching the Ballmer's peak for just the right amount of time.\n// Even I had troubles documenting it after a while and after reading it again I couldn't believe that it really works.\nfunction mergeBranches( writer, startPosition, endPosition ) {\n\tconst model = writer.model;\n\n\t// Verify if there is a need and possibility to merge.\n\tif ( !checkShouldMerge( writer.model.schema, startPosition, endPosition ) ) {\n\t\treturn;\n\t}\n\n\t// If the start element on the common ancestor level is empty, and the end element on the same level is not empty\n\t// then merge those to the right element so that it's properties are preserved (name, attributes).\n\t// Because of OT merging is used instead of removing elements.\n\t//\n\t// Merge left:\n\t//     <heading1>foo[</heading1>    ->  <heading1>foo[]bar</heading1>\n\t//     <paragraph>]bar</paragraph>  ->               --^\n\t//\n\t// Merge right:\n\t//     <heading1>[</heading1>       ->\n\t//     <paragraph>]bar</paragraph>  ->  <paragraph>[]bar</paragraph>\n\t//\n\t// Merge left:\n\t//     <blockQuote>                     ->  <blockQuote>\n\t//         <heading1>foo[</heading1>    ->      <heading1>foo[]bar</heading1>\n\t//         <paragraph>]bar</paragraph>  ->                   --^\n\t//     </blockQuote>                    ->  </blockQuote>\n\t//\n\t// Merge right:\n\t//     <blockQuote>                     ->  <blockQuote>\n\t//         <heading1>[</heading1>       ->\n\t//         <paragraph>]bar</paragraph>  ->      <paragraph>[]bar</paragraph>\n\t//     </blockQuote>                    ->  </blockQuote>\n\n\t// Merging should not go deeper than common ancestor.\n\tconst [ startAncestor, endAncestor ] = getAncestorsJustBelowCommonAncestor( startPosition, endPosition );\n\n\t// Branches can't be merged if one of the positions is directly inside a common ancestor.\n\t//\n\t// Example:\n\t//     <blockQuote>\n\t//         <paragraph>[foo</paragraph>]\n\t//         <table> ... </table>\n\t//     <blockQuote>\n\t//\n\tif ( !startAncestor || !endAncestor ) {\n\t\treturn;\n\t}\n\n\tif ( !model.hasContent( startAncestor, { ignoreMarkers: true } ) && model.hasContent( endAncestor, { ignoreMarkers: true } ) ) {\n\t\tmergeBranchesRight( writer, startPosition, endPosition, startAncestor.parent );\n\t} else {\n\t\tmergeBranchesLeft( writer, startPosition, endPosition, startAncestor.parent );\n\t}\n}\n\n// Merging blocks to the left (properties of the left block are preserved).\n// Simple example:\n//     <heading1>foo[</heading1>    ->  <heading1>foo[bar</heading1>]\n//     <paragraph>]bar</paragraph>  ->              --^\n//\n// Nested example:\n//     <blockQuote>                     ->  <blockQuote>\n//         <heading1>foo[</heading1>    ->      <heading1>foo[bar</heading1>\n//     </blockQuote>                    ->  </blockQuote>]    ^\n//     <blockBlock>                     ->                    |\n//         <paragraph>]bar</paragraph>  ->                 ---\n//     </blockBlock>                    ->\n//\nfunction mergeBranchesLeft( writer, startPosition, endPosition, commonAncestor ) {\n\tconst startElement = startPosition.parent;\n\tconst endElement = endPosition.parent;\n\n\t// Merging reached the common ancestor element, stop here.\n\tif ( startElement == commonAncestor || endElement == commonAncestor ) {\n\t\treturn;\n\t}\n\n\t// Remember next positions to merge in next recursive step (also used as modification points pointers).\n\tstartPosition = writer.createPositionAfter( startElement );\n\tendPosition = writer.createPositionBefore( endElement );\n\n\t// Move endElement just after startElement if they aren't siblings.\n\tif ( !endPosition.isEqual( startPosition ) ) {\n\t\t//\n\t\t//     <blockQuote>                     ->  <blockQuote>\n\t\t//         <heading1>foo[</heading1>    ->      <heading1>foo</heading1>[<paragraph>bar</paragraph>\n\t\t//     </blockQuote>                    ->  </blockQuote>                ^\n\t\t//     <blockBlock>                     ->  <blockBlock>                 |\n\t\t//         <paragraph>]bar</paragraph>  ->      ]                     ---\n\t\t//     </blockBlock>                    ->  </blockBlock>\n\t\t//\n\t\twriter.insert( endElement, startPosition );\n\t}\n\n\t// Merge two siblings (nodes on sides of startPosition):\n\t//\n\t//     <blockQuote>                                             ->  <blockQuote>\n\t//         <heading1>foo</heading1>[<paragraph>bar</paragraph>  ->      <heading1>foo[bar</heading1>\n\t//     </blockQuote>                                            ->  </blockQuote>\n\t//     <blockBlock>                                             ->  <blockBlock>\n\t//         ]                                                    ->      ]\n\t//     </blockBlock>                                            ->  </blockBlock>\n\t//\n\t// Or in simple case (without moving elements in above if):\n\t//     <heading1>foo</heading1>[<paragraph>bar</paragraph>]  ->  <heading1>foo[bar</heading1>]\n\t//\n\twriter.merge( startPosition );\n\n\t// Remove empty end ancestors:\n\t//\n\t//     <blockQuote>                      ->  <blockQuote>\n\t//         <heading1>foo[bar</heading1>  ->      <heading1>foo[bar</heading1>\n\t//     </blockQuote>                     ->  </blockQuote>\n\t//     <blockBlock>                      ->\n\t//         ]                             ->  ]\n\t//     </blockBlock>                     ->\n\t//\n\twhile ( endPosition.parent.isEmpty ) {\n\t\tconst parentToRemove = endPosition.parent;\n\n\t\tendPosition = writer.createPositionBefore( parentToRemove );\n\n\t\twriter.remove( parentToRemove );\n\t}\n\n\t// Verify if there is a need and possibility to merge next level.\n\tif ( !checkShouldMerge( writer.model.schema, startPosition, endPosition ) ) {\n\t\treturn;\n\t}\n\n\t// Continue merging next level (blockQuote with blockBlock in the examples above if it would not be empty and got removed).\n\tmergeBranchesLeft( writer, startPosition, endPosition, commonAncestor );\n}\n\n// Merging blocks to the right (properties of the right block are preserved).\n// Simple example:\n//     <heading1>foo[</heading1>    ->            --v\n//     <paragraph>]bar</paragraph>  ->  [<paragraph>foo]bar</paragraph>\n//\n// Nested example:\n//     <blockQuote>                     ->\n//         <heading1>foo[</heading1>    ->              ---\n//     </blockQuote>                    ->                 |\n//     <blockBlock>                     ->  [<blockBlock>  v\n//         <paragraph>]bar</paragraph>  ->      <paragraph>foo]bar</paragraph>\n//     </blockBlock>                    ->  </blockBlock>\n//\nfunction mergeBranchesRight( writer, startPosition, endPosition, commonAncestor ) {\n\tconst startElement = startPosition.parent;\n\tconst endElement = endPosition.parent;\n\n\t// Merging reached the common ancestor element, stop here.\n\tif ( startElement == commonAncestor || endElement == commonAncestor ) {\n\t\treturn;\n\t}\n\n\t// Remember next positions to merge in next recursive step (also used as modification points pointers).\n\tstartPosition = writer.createPositionAfter( startElement );\n\tendPosition = writer.createPositionBefore( endElement );\n\n\t// Move startElement just before endElement if they aren't siblings.\n\tif ( !endPosition.isEqual( startPosition ) ) {\n\t\t//\n\t\t//     <blockQuote>                     ->  <blockQuote>\n\t\t//         <heading1>foo[</heading1>    ->      [                   ---\n\t\t//     </blockQuote>                    ->  </blockQuote>              |\n\t\t//     <blockBlock>                     ->  <blockBlock>               v\n\t\t//         <paragraph>]bar</paragraph>  ->      <heading1>foo</heading1>]<paragraph>bar</paragraph>\n\t\t//     </blockBlock>                    ->  </blockBlock>\n\t\t//\n\t\twriter.insert( startElement, endPosition );\n\t}\n\n\t// Remove empty end ancestors:\n\t//\n\t//     <blockQuote>                                             ->\n\t//         [                                                    ->  [\n\t//     </blockQuote>                                            ->\n\t//     <blockBlock>                                             ->  <blockBlock>\n\t//         <heading1>foo</heading1>]<paragraph>bar</paragraph>  ->      <heading1>foo</heading1>]<paragraph>bar</paragraph>\n\t//     </blockBlock>                                            ->  </blockBlock>\n\t//\n\twhile ( startPosition.parent.isEmpty ) {\n\t\tconst parentToRemove = startPosition.parent;\n\n\t\tstartPosition = writer.createPositionBefore( parentToRemove );\n\n\t\twriter.remove( parentToRemove );\n\t}\n\n\t// Update endPosition after inserting and removing elements.\n\tendPosition = writer.createPositionBefore( endElement );\n\n\t// Merge right two siblings (nodes on sides of endPosition):\n\t//                                                              ->\n\t//     [                                                        ->  [\n\t//                                                              ->\n\t//     <blockBlock>                                             ->  <blockBlock>\n\t//         <heading1>foo</heading1>]<paragraph>bar</paragraph>  ->      <paragraph>foo]bar</paragraph>\n\t//     </blockBlock>                                            ->  </blockBlock>\n\t//\n\t// Or in simple case (without moving elements in above if):\n\t//     [<heading1>foo</heading1>]<paragraph>bar</paragraph>  ->  [<heading1>foo]bar</heading1>\n\t//\n\tmergeRight( writer, endPosition );\n\n\t// Verify if there is a need and possibility to merge next level.\n\tif ( !checkShouldMerge( writer.model.schema, startPosition, endPosition ) ) {\n\t\treturn;\n\t}\n\n\t// Continue merging next level (blockQuote with blockBlock in the examples above if it would not be empty and got removed).\n\tmergeBranchesRight( writer, startPosition, endPosition, commonAncestor );\n}\n\n// There is no right merge operation so we need to simulate it.\nfunction mergeRight( writer, position ) {\n\tconst startElement = position.nodeBefore;\n\tconst endElement = position.nodeAfter;\n\n\tif ( startElement.name != endElement.name ) {\n\t\twriter.rename( startElement, endElement.name );\n\t}\n\n\twriter.clearAttributes( startElement );\n\twriter.setAttributes( Object.fromEntries( endElement.getAttributes() ), startElement );\n\n\twriter.merge( position );\n}\n\n// Verifies if merging is needed and possible. It's not needed if both positions are in the same element\n// and it's not possible if some element is a limit or the range crosses a limit element.\nfunction checkShouldMerge( schema, startPosition, endPosition ) {\n\tconst startElement = startPosition.parent;\n\tconst endElement = endPosition.parent;\n\n\t// If both positions ended up in the same parent, then there's nothing more to merge:\n\t// <$root><p>x[</p><p>]y</p></$root> => <$root><p>xy</p>[]</$root>\n\tif ( startElement == endElement ) {\n\t\treturn false;\n\t}\n\n\t// If one of the positions is a limit element, then there's nothing to merge because we don't want to cross the limit boundaries.\n\tif ( schema.isLimit( startElement ) || schema.isLimit( endElement ) ) {\n\t\treturn false;\n\t}\n\n\t// Check if operations we'll need to do won't need to cross object or limit boundaries.\n\t// E.g., we can't merge endElement into startElement in this case:\n\t// <limit><startElement>x[</startElement></limit><endElement>]</endElement>\n\treturn isCrossingLimitElement( startPosition, endPosition, schema );\n}\n\n// Returns the elements that are the ancestors of the provided positions that are direct children of the common ancestor.\nfunction getAncestorsJustBelowCommonAncestor( positionA, positionB ) {\n\tconst ancestorsA = positionA.getAncestors();\n\tconst ancestorsB = positionB.getAncestors();\n\n\tlet i = 0;\n\n\twhile ( ancestorsA[ i ] && ancestorsA[ i ] == ancestorsB[ i ] ) {\n\t\ti++;\n\t}\n\n\treturn [ ancestorsA[ i ], ancestorsB[ i ] ];\n}\n\nfunction shouldAutoparagraph( schema, position ) {\n\tconst isTextAllowed = schema.checkChild( position, '$text' );\n\tconst isParagraphAllowed = schema.checkChild( position, 'paragraph' );\n\n\treturn !isTextAllowed && isParagraphAllowed;\n}\n\n// Check if parents of two positions can be merged by checking if there are no limit/object\n// boundaries between those two positions.\n//\n// E.g. in <bQ><p>x[]</p></bQ><widget><caption>{}</caption></widget>\n// we'll check <p>, <bQ>, <widget> and <caption>.\n// Usually, widget and caption are marked as objects/limits in the schema, so in this case merging will be blocked.\nfunction isCrossingLimitElement( leftPos, rightPos, schema ) {\n\tconst rangeToCheck = new Range( leftPos, rightPos );\n\n\tfor ( const value of rangeToCheck.getWalker() ) {\n\t\tif ( schema.isLimit( value.item ) ) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n\nfunction insertParagraph( writer, position, selection ) {\n\tconst paragraph = writer.createElement( 'paragraph' );\n\n\twriter.insert( paragraph, position );\n\n\tcollapseSelectionAt( writer, selection, writer.createPositionAt( paragraph, 0 ) );\n}\n\nfunction replaceEntireContentWithParagraph( writer, selection ) {\n\tconst limitElement = writer.model.schema.getLimitElement( selection );\n\n\twriter.remove( writer.createRangeIn( limitElement ) );\n\tinsertParagraph( writer, writer.createPositionAt( limitElement, 0 ), selection );\n}\n\n// We want to replace the entire content with a paragraph when:\n// * the entire content is selected,\n// * selection contains at least two elements,\n// * whether the paragraph is allowed in schema in the common ancestor.\nfunction shouldEntireContentBeReplacedWithParagraph( schema, selection ) {\n\tconst limitElement = schema.getLimitElement( selection );\n\n\tif ( !selection.containsEntireContent( limitElement ) ) {\n\t\treturn false;\n\t}\n\n\tconst range = selection.getFirstRange();\n\n\tif ( range.start.parent == range.end.parent ) {\n\t\treturn false;\n\t}\n\n\treturn schema.checkChild( limitElement, 'paragraph' );\n}\n\n// Helper function that sets the selection. Depending whether given `selection` is a document selection or not,\n// uses a different method to set it.\nfunction collapseSelectionAt( writer, selection, positionOrRange ) {\n\tif ( selection instanceof DocumentSelection ) {\n\t\twriter.setSelection( positionOrRange );\n\t} else {\n\t\tselection.setTo( positionOrRange );\n\t}\n}\n"]}]}