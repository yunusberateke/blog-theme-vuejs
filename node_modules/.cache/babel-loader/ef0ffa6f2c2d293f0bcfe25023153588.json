{"remainingRequest":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/babel-loader/lib/index.js!/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-dev-webpack-plugin/lib/translatesourceloader.js?{}!/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-engine/src/view/text.js","dependencies":[{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-engine/src/view/text.js","mtime":499162500000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-dev-webpack-plugin/lib/translatesourceloader.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tICIvaG9tZS9la2ViZXJhdC9ZYW5kZXguRGlzay9Qcm9qZWxlcmltL0JlbmltUHJvamVsZXJpbS93ZWJzaXRlbS93ZWJzaXRlbS13ZWIvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NsYXNzQ2FsbENoZWNrIjsKaW1wb3J0IF9jcmVhdGVDbGFzcyBmcm9tICIvaG9tZS9la2ViZXJhdC9ZYW5kZXguRGlzay9Qcm9qZWxlcmltL0JlbmltUHJvamVsZXJpbS93ZWJzaXRlbS93ZWJzaXRlbS13ZWIvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZUNsYXNzIjsKaW1wb3J0IF9pbmhlcml0cyBmcm9tICIvaG9tZS9la2ViZXJhdC9ZYW5kZXguRGlzay9Qcm9qZWxlcmltL0JlbmltUHJvamVsZXJpbS93ZWJzaXRlbS93ZWJzaXRlbS13ZWIvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzIjsKaW1wb3J0IF9jcmVhdGVTdXBlciBmcm9tICIvaG9tZS9la2ViZXJhdC9ZYW5kZXguRGlzay9Qcm9qZWxlcmltL0JlbmltUHJvamVsZXJpbS93ZWJzaXRlbS93ZWJzaXRlbS13ZWIvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZVN1cGVyIjsKCi8qKgogKiBAbGljZW5zZSBDb3B5cmlnaHQgKGMpIDIwMDMtMjAyMSwgQ0tTb3VyY2UgLSBGcmVkZXJpY28gS25hYmJlbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KICogRm9yIGxpY2Vuc2luZywgc2VlIExJQ0VOU0UubWQgb3IgaHR0cHM6Ly9ja2VkaXRvci5jb20vbGVnYWwvY2tlZGl0b3Itb3NzLWxpY2Vuc2UKICovCgovKioKICogQG1vZHVsZSBlbmdpbmUvdmlldy90ZXh0CiAqLwppbXBvcnQgTm9kZSBmcm9tICcuL25vZGUnOwovKioKICogVHJlZSB2aWV3IHRleHQgbm9kZS4KICoKICogVGhlIGNvbnN0cnVjdG9yIG9mIHRoaXMgY2xhc3Mgc2hvdWxkIG5vdCBiZSB1c2VkIGRpcmVjdGx5LiBUbyBjcmVhdGUgYSBuZXcgdGV4dCBub2RlIGluc3RhbmNlCiAqIHVzZSB0aGUge0BsaW5rIG1vZHVsZTplbmdpbmUvdmlldy9kb3duY2FzdHdyaXRlcn5Eb3duY2FzdFdyaXRlciNjcmVhdGVUZXh0IGBEb3duY2FzdFdyaXRlciNjcmVhdGVUZXh0KClgfQogKiBtZXRob2Qgd2hlbiB3b3JraW5nIG9uIGRhdGEgZG93bmNhc3RlZCBmcm9tIHRoZSBtb2RlbCBvciB0aGUKICoge0BsaW5rIG1vZHVsZTplbmdpbmUvdmlldy91cGNhc3R3cml0ZXJ+VXBjYXN0V3JpdGVyI2NyZWF0ZVRleHQgYFVwY2FzdFdyaXRlciNjcmVhdGVUZXh0KClgfQogKiBtZXRob2Qgd2hlbiB3b3JraW5nIG9uIG5vbi1zZW1hbnRpYyB2aWV3cy4KICoKICogQGV4dGVuZHMgbW9kdWxlOmVuZ2luZS92aWV3L25vZGV+Tm9kZQogKi8KCnZhciBUZXh0ID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfTm9kZSkgewogIF9pbmhlcml0cyhUZXh0LCBfTm9kZSk7CgogIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoVGV4dCk7CgogIC8qKgogICAqIENyZWF0ZXMgYSB0cmVlIHZpZXcgdGV4dCBub2RlLgogICAqCiAgICogQHByb3RlY3RlZAogICAqIEBwYXJhbSB7bW9kdWxlOmVuZ2luZS92aWV3L2RvY3VtZW50fkRvY3VtZW50fSBkb2N1bWVudCBUaGUgZG9jdW1lbnQgaW5zdGFuY2UgdG8gd2hpY2ggdGhpcyB0ZXh0IG5vZGUgYmVsb25ncy4KICAgKiBAcGFyYW0ge1N0cmluZ30gZGF0YSBUaGUgdGV4dCdzIGRhdGEuCiAgICovCiAgZnVuY3Rpb24gVGV4dChkb2N1bWVudCwgZGF0YSkgewogICAgdmFyIF90aGlzOwoKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBUZXh0KTsKCiAgICBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRvY3VtZW50KTsKICAgIC8qKgogICAgICogVGhlIHRleHQgY29udGVudC4KICAgICAqCiAgICAgKiBTZXR0aW5nIHRoZSBkYXRhIGZpcmVzIHRoZSB7QGxpbmsgbW9kdWxlOmVuZ2luZS92aWV3L25vZGV+Tm9kZSNldmVudDpjaGFuZ2U6dGV4dCBjaGFuZ2UgZXZlbnR9LgogICAgICoKICAgICAqIEBwcm90ZWN0ZWQKICAgICAqIEBtZW1iZXIge1N0cmluZ30gbW9kdWxlOmVuZ2luZS92aWV3L3RleHR+VGV4dCNfdGV4dERhdGEKICAgICAqLwoKICAgIF90aGlzLl90ZXh0RGF0YSA9IGRhdGE7CiAgICByZXR1cm4gX3RoaXM7CiAgfQogIC8qKgogICAqIENoZWNrcyB3aGV0aGVyIHRoaXMgb2JqZWN0IGlzIG9mIHRoZSBnaXZlbiB0eXBlLgogICAqCiAgICoJCXRleHQuaXMoICckdGV4dCcgKTsgLy8gLT4gdHJ1ZQogICAqCQl0ZXh0LmlzKCAnbm9kZScgKTsgLy8gLT4gdHJ1ZQogICAqCQl0ZXh0LmlzKCAndmlldzokdGV4dCcgKTsgLy8gLT4gdHJ1ZQogICAqCQl0ZXh0LmlzKCAndmlldzpub2RlJyApOyAvLyAtPiB0cnVlCiAgICoKICAgKgkJdGV4dC5pcyggJ21vZGVsOiR0ZXh0JyApOyAvLyAtPiBmYWxzZQogICAqCQl0ZXh0LmlzKCAnZWxlbWVudCcgKTsgLy8gLT4gZmFsc2UKICAgKgkJdGV4dC5pcyggJ3JhbmdlJyApOyAvLyAtPiBmYWxzZQogICAqCiAgICoge0BsaW5rIG1vZHVsZTplbmdpbmUvdmlldy9ub2Rlfk5vZGUjaXMgQ2hlY2sgdGhlIGVudGlyZSBsaXN0IG9mIHZpZXcgb2JqZWN0c30gd2hpY2ggaW1wbGVtZW50IHRoZSBgaXMoKWAgbWV0aG9kLgogICAqCiAgICogKipOb3RlOioqIFVudGlsIHZlcnNpb24gMjAuMC4wIHRoaXMgbWV0aG9kIHdhc24ndCBhY2NlcHRpbmcgYCckdGV4dCdgIHR5cGUuIFRoZSBsZWdhY3kgYCd0ZXh0J2AgdHlwZSBpcyBzdGlsbAogICAqIGFjY2VwdGVkIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LgogICAqCiAgICogQHBhcmFtIHtTdHJpbmd9IHR5cGUgVHlwZSB0byBjaGVjay4KICAgKiBAcmV0dXJucyB7Qm9vbGVhbn0KICAgKi8KCgogIF9jcmVhdGVDbGFzcyhUZXh0LCBbewogICAga2V5OiAiaXMiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGlzKHR5cGUpIHsKICAgICAgcmV0dXJuIHR5cGUgPT09ICckdGV4dCcgfHwgdHlwZSA9PT0gJ3ZpZXc6JHRleHQnIHx8IC8vIFRoaXMgYXJlIGxlZ2FjeSB2YWx1ZXMga2VwdCBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eS4KICAgICAgdHlwZSA9PT0gJ3RleHQnIHx8IHR5cGUgPT09ICd2aWV3OnRleHQnIHx8IC8vIEZyb20gc3VwZXIuaXMoKS4gVGhpcyBpcyBoaWdobHkgdXRpbGlzZWQgbWV0aG9kIGFuZCBjYW5ub3QgY2FsbCBzdXBlci4gU2VlIGNrZWRpdG9yL2NrZWRpdG9yNSM2NTI5LgogICAgICB0eXBlID09PSAnbm9kZScgfHwgdHlwZSA9PT0gJ3ZpZXc6bm9kZSc7CiAgICB9CiAgICAvKioKICAgICAqIFRoZSB0ZXh0IGNvbnRlbnQuCiAgICAgKgogICAgICogQHJlYWRvbmx5CiAgICAgKiBAdHlwZSB7U3RyaW5nfQogICAgICovCgogIH0sIHsKICAgIGtleTogImRhdGEiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiB0aGlzLl90ZXh0RGF0YTsKICAgIH0KICAgIC8qKgogICAgICogVGhlIGBfZGF0YWAgcHJvcGVydHkgaXMgY29udHJvbGxlZCBieSBhIGdldHRlciBhbmQgYSBzZXR0ZXIuCiAgICAgKgogICAgICogVGhlIGdldHRlciBpcyByZXF1aXJlZCB3aGVuIHVzaW5nIHRoZSBhZGRpdGlvbiBhc3NpZ25tZW50IG9wZXJhdG9yIG9uIHByb3RlY3RlZCBwcm9wZXJ0eToKICAgICAqCiAgICAgKgkJY29uc3QgZm9vID0gZG93bmNhc3RXcml0ZXIuY3JlYXRlVGV4dCggJ2ZvbycgKTsKICAgICAqCQljb25zdCBiYXIgPSBkb3duY2FzdFdyaXRlci5jcmVhdGVUZXh0KCAnYmFyJyApOwogICAgICoKICAgICAqCQlmb28uX2RhdGEgKz0gYmFyLmRhdGE7ICAgLy8gZXhlY3V0ZXM6IGBmb28uX2RhdGEgPSBmb28uX2RhdGEgKyBiYXIuZGF0YWAKICAgICAqCQljb25zb2xlLmxvZyggZm9vLmRhdGEgKTsgLy8gcHJpbnRzOiAnZm9vYmFyJwogICAgICoKICAgICAqIElmIHRoZSBwcm90ZWN0ZWQgZ2V0dGVyIGRpZG4ndCBleGlzdCwgYGZvby5fZGF0YWAgd2lsbCByZXR1cm4gYHVuZGVmaW5lZGAgYW5kIHJlc3VsdCBvZiB0aGUgbWVyZ2Ugd2lsbCBiZSBpbnZhbGlkLgogICAgICoKICAgICAqIFRoZSBzZXR0ZXIgc2V0cyBkYXRhIGFuZCBmaXJlcyB0aGUge0BsaW5rIG1vZHVsZTplbmdpbmUvdmlldy9ub2Rlfk5vZGUjZXZlbnQ6Y2hhbmdlOnRleHQgY2hhbmdlIGV2ZW50fS4KICAgICAqCiAgICAgKiBAcHJvdGVjdGVkCiAgICAgKiBAdHlwZSB7U3RyaW5nfQogICAgICovCgogIH0sIHsKICAgIGtleTogIl9kYXRhIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gdGhpcy5kYXRhOwogICAgfSwKICAgIHNldDogZnVuY3Rpb24gc2V0KGRhdGEpIHsKICAgICAgdGhpcy5fZmlyZUNoYW5nZSgndGV4dCcsIHRoaXMpOwoKICAgICAgdGhpcy5fdGV4dERhdGEgPSBkYXRhOwogICAgfQogICAgLyoqCiAgICAgKiBDaGVja3MgaWYgdGhpcyB0ZXh0IG5vZGUgaXMgc2ltaWxhciB0byBvdGhlciB0ZXh0IG5vZGUuCiAgICAgKiBCb3RoIG5vZGVzIHNob3VsZCBoYXZlIHRoZSBzYW1lIGRhdGEgdG8gYmUgY29uc2lkZXJlZCBhcyBzaW1pbGFyLgogICAgICoKICAgICAqIEBwYXJhbSB7bW9kdWxlOmVuZ2luZS92aWV3L3RleHR+VGV4dH0gb3RoZXJOb2RlIE5vZGUgdG8gY2hlY2sgaWYgaXQgaXMgc2FtZSBhcyB0aGlzIG5vZGUuCiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn0KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJpc1NpbWlsYXIiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGlzU2ltaWxhcihvdGhlck5vZGUpIHsKICAgICAgaWYgKCEob3RoZXJOb2RlIGluc3RhbmNlb2YgVGV4dCkpIHsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0KCiAgICAgIHJldHVybiB0aGlzID09PSBvdGhlck5vZGUgfHwgdGhpcy5kYXRhID09PSBvdGhlck5vZGUuZGF0YTsKICAgIH0KICAgIC8qKgogICAgICogQ2xvbmVzIHRoaXMgbm9kZS4KICAgICAqCiAgICAgKiBAcHJvdGVjdGVkCiAgICAgKiBAcmV0dXJucyB7bW9kdWxlOmVuZ2luZS92aWV3L3RleHR+VGV4dH0gVGV4dCBub2RlIHRoYXQgaXMgYSBjbG9uZSBvZiB0aGlzIG5vZGUuCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAiX2Nsb25lIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBfY2xvbmUoKSB7CiAgICAgIHJldHVybiBuZXcgVGV4dCh0aGlzLmRvY3VtZW50LCB0aGlzLmRhdGEpOwogICAgfSAvLyBAaWYgQ0tfREVCVUdfRU5HSU5FIC8vIHRvU3RyaW5nKCkgewogICAgLy8gQGlmIENLX0RFQlVHX0VOR0lORSAvLyAJcmV0dXJuIGAjJHsgdGhpcy5kYXRhIH1gOwogICAgLy8gQGlmIENLX0RFQlVHX0VOR0lORSAvLyB9CiAgICAvLyBAaWYgQ0tfREVCVUdfRU5HSU5FIC8vIGxvZygpIHsKICAgIC8vIEBpZiBDS19ERUJVR19FTkdJTkUgLy8gCWNvbnNvbGUubG9nKCAnVmlld1RleHQ6ICcgKyB0aGlzICk7CiAgICAvLyBAaWYgQ0tfREVCVUdfRU5HSU5FIC8vIH0KICAgIC8vIEBpZiBDS19ERUJVR19FTkdJTkUgLy8gbG9nRXh0ZW5kZWQoKSB7CiAgICAvLyBAaWYgQ0tfREVCVUdfRU5HSU5FIC8vIAljb25zb2xlLmxvZyggJ1ZpZXdUZXh0OiAnICsgdGhpcyApOwogICAgLy8gQGlmIENLX0RFQlVHX0VOR0lORSAvLyB9CgogIH1dKTsKCiAgcmV0dXJuIFRleHQ7Cn0oTm9kZSk7CgpleHBvcnQgeyBUZXh0IGFzIGRlZmF1bHQgfTs="},{"version":3,"sources":["/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-engine/src/view/text.js"],"names":["Node","Text","document","data","_textData","type","_fireChange","otherNode"],"mappings":";;;;;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA,OAAOA,IAAP,MAAiB,QAAjB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IACqBC,I;;;;;AACpB;AACD;AACA;AACA;AACA;AACA;AACA;AACC,gBAAaC,QAAb,EAAuBC,IAAvB,EAA8B;AAAA;;AAAA;;AAC7B,8BAAOD,QAAP;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,UAAKE,SAAL,GAAiBD,IAAjB;AAX6B;AAY7B;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;WACC,YAAIE,IAAJ,EAAW;AACV,aAAOA,IAAI,KAAK,OAAT,IAAoBA,IAAI,KAAK,YAA7B,IACN;AACAA,MAAAA,IAAI,KAAK,MAFH,IAEaA,IAAI,KAAK,WAFtB,IAGN;AACAA,MAAAA,IAAI,KAAK,MAJH,IAIaA,IAAI,KAAK,WAJ7B;AAKA;AAED;AACD;AACA;AACA;AACA;AACA;;;;SACC,eAAW;AACV,aAAO,KAAKD,SAAZ;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;SACC,eAAY;AACX,aAAO,KAAKD,IAAZ;AACA,K;SAED,aAAWA,IAAX,EAAkB;AACjB,WAAKG,WAAL,CAAkB,MAAlB,EAA0B,IAA1B;;AAEA,WAAKF,SAAL,GAAiBD,IAAjB;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;;;;WACC,mBAAWI,SAAX,EAAuB;AACtB,UAAK,EAAGA,SAAS,YAAYN,IAAxB,CAAL,EAAsC;AACrC,eAAO,KAAP;AACA;;AAED,aAAO,SAASM,SAAT,IAAsB,KAAKJ,IAAL,KAAcI,SAAS,CAACJ,IAArD;AACA;AAED;AACD;AACA;AACA;AACA;AACA;;;;WACC,kBAAS;AACR,aAAO,IAAIF,IAAJ,CAAU,KAAKC,QAAf,EAAyB,KAAKC,IAA9B,CAAP;AACA,K,CAED;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;;;;;EA3HiCH,I;;SAAbC,I","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/text\n */\n\nimport Node from './node';\n\n/**\n * Tree view text node.\n *\n * The constructor of this class should not be used directly. To create a new text node instance\n * use the {@link module:engine/view/downcastwriter~DowncastWriter#createText `DowncastWriter#createText()`}\n * method when working on data downcasted from the model or the\n * {@link module:engine/view/upcastwriter~UpcastWriter#createText `UpcastWriter#createText()`}\n * method when working on non-semantic views.\n *\n * @extends module:engine/view/node~Node\n */\nexport default class Text extends Node {\n\t/**\n\t * Creates a tree view text node.\n\t *\n\t * @protected\n\t * @param {module:engine/view/document~Document} document The document instance to which this text node belongs.\n\t * @param {String} data The text's data.\n\t */\n\tconstructor( document, data ) {\n\t\tsuper( document );\n\n\t\t/**\n\t\t * The text content.\n\t\t *\n\t\t * Setting the data fires the {@link module:engine/view/node~Node#event:change:text change event}.\n\t\t *\n\t\t * @protected\n\t\t * @member {String} module:engine/view/text~Text#_textData\n\t\t */\n\t\tthis._textData = data;\n\t}\n\n\t/**\n\t * Checks whether this object is of the given type.\n\t *\n\t *\t\ttext.is( '$text' ); // -> true\n\t *\t\ttext.is( 'node' ); // -> true\n\t *\t\ttext.is( 'view:$text' ); // -> true\n\t *\t\ttext.is( 'view:node' ); // -> true\n\t *\n\t *\t\ttext.is( 'model:$text' ); // -> false\n\t *\t\ttext.is( 'element' ); // -> false\n\t *\t\ttext.is( 'range' ); // -> false\n\t *\n\t * {@link module:engine/view/node~Node#is Check the entire list of view objects} which implement the `is()` method.\n\t *\n\t * **Note:** Until version 20.0.0 this method wasn't accepting `'$text'` type. The legacy `'text'` type is still\n\t * accepted for backward compatibility.\n\t *\n\t * @param {String} type Type to check.\n\t * @returns {Boolean}\n\t */\n\tis( type ) {\n\t\treturn type === '$text' || type === 'view:$text' ||\n\t\t\t// This are legacy values kept for backward compatibility.\n\t\t\ttype === 'text' || type === 'view:text' ||\n\t\t\t// From super.is(). This is highly utilised method and cannot call super. See ckeditor/ckeditor5#6529.\n\t\t\ttype === 'node' || type === 'view:node';\n\t}\n\n\t/**\n\t * The text content.\n\t *\n\t * @readonly\n\t * @type {String}\n\t */\n\tget data() {\n\t\treturn this._textData;\n\t}\n\n\t/**\n\t * The `_data` property is controlled by a getter and a setter.\n\t *\n\t * The getter is required when using the addition assignment operator on protected property:\n\t *\n\t *\t\tconst foo = downcastWriter.createText( 'foo' );\n\t *\t\tconst bar = downcastWriter.createText( 'bar' );\n\t *\n\t *\t\tfoo._data += bar.data;   // executes: `foo._data = foo._data + bar.data`\n\t *\t\tconsole.log( foo.data ); // prints: 'foobar'\n\t *\n\t * If the protected getter didn't exist, `foo._data` will return `undefined` and result of the merge will be invalid.\n\t *\n\t * The setter sets data and fires the {@link module:engine/view/node~Node#event:change:text change event}.\n\t *\n\t * @protected\n\t * @type {String}\n\t */\n\tget _data() {\n\t\treturn this.data;\n\t}\n\n\tset _data( data ) {\n\t\tthis._fireChange( 'text', this );\n\n\t\tthis._textData = data;\n\t}\n\n\t/**\n\t * Checks if this text node is similar to other text node.\n\t * Both nodes should have the same data to be considered as similar.\n\t *\n\t * @param {module:engine/view/text~Text} otherNode Node to check if it is same as this node.\n\t * @returns {Boolean}\n\t */\n\tisSimilar( otherNode ) {\n\t\tif ( !( otherNode instanceof Text ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn this === otherNode || this.data === otherNode.data;\n\t}\n\n\t/**\n\t * Clones this node.\n\t *\n\t * @protected\n\t * @returns {module:engine/view/text~Text} Text node that is a clone of this node.\n\t */\n\t_clone() {\n\t\treturn new Text( this.document, this.data );\n\t}\n\n\t// @if CK_DEBUG_ENGINE // toString() {\n\t// @if CK_DEBUG_ENGINE // \treturn `#${ this.data }`;\n\t// @if CK_DEBUG_ENGINE // }\n\n\t// @if CK_DEBUG_ENGINE // log() {\n\t// @if CK_DEBUG_ENGINE // \tconsole.log( 'ViewText: ' + this );\n\t// @if CK_DEBUG_ENGINE // }\n\n\t// @if CK_DEBUG_ENGINE // logExtended() {\n\t// @if CK_DEBUG_ENGINE // \tconsole.log( 'ViewText: ' + this );\n\t// @if CK_DEBUG_ENGINE // }\n}\n"]}]}