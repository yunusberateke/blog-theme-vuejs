{"remainingRequest":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/babel-loader/lib/index.js!/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-dev-webpack-plugin/lib/translatesourceloader.js?{}!/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-ui/src/toolbar/toolbarview.js","dependencies":[{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-ui/src/toolbar/toolbarview.js","mtime":499162500000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-dev-webpack-plugin/lib/translatesourceloader.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-ui/src/toolbar/toolbarview.js"],"names":["View","FocusTracker","FocusCycler","KeystrokeHandler","ToolbarSeparatorView","ToolbarLineBreakView","ResizeObserver","preventDefault","Rect","global","createDropdown","addToolbarToDropdown","logWarning","normalizeToolbarConfig","icons","ToolbarView","locale","options","bind","bindTemplate","t","set","items","createCollection","focusTracker","keystrokes","itemsView","ItemsView","children","add","focusables","_focusCycler","keystrokeHandler","actions","focusPrevious","focusNext","classes","to","if","shouldGroupWhenFull","isFloating","push","setTemplate","tag","attributes","class","role","style","maxWidth","on","mousedown","_behavior","DynamicGrouping","StaticLayout","item","element","evt","remove","listenTo","render","destroy","focusFirst","focusLast","itemsOrConfig","factory","config","itemsToClean","filter","name","idx","removeItems","indexOf","has","itemsToAdd","_cleanSeparators","map","create","addMany","nonSeparatorPredicate","count","length","firstCommandItem","findIndex","lastCommandItem","slice","reverse","isDuplicated","view","bindTo","using","extendTemplate","viewChildren","viewFocusables","viewItemsView","viewFocusTracker","viewLocale","ungroupedItems","groupedItems","groupedItemsDropdown","_createGroupedItemsDropdown","resizeObserver","cachedPadding","shouldUpdateGroupingOnNextResize","_updateFocusCycleableItems","changeData","index","removed","removedItem","currentIndex","added","addedItem","_updateGrouping","viewElement","_enableGroupingOnResize","_enableGroupingOnMaxWidthChange","ownerDocument","body","contains","offsetParent","initialGroupedItemsCount","wereItemsGrouped","_areItemsOverflowing","_groupLastItem","_ungroupFirstItem","fire","uiLanguageDirection","lastChildRect","lastChild","toolbarRect","computedStyle","window","getComputedStyle","paddingProperty","Number","parseInt","right","left","previousWidth","entry","contentRect","width","last","first","dropdown","panelPosition","buttonView","label","tooltip","tooltipPosition","icon","threeVerticalDots","toolbarView","clear"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/toolbar/toolbarview\n */\n\nimport View from '../view';\nimport FocusTracker from '@ckeditor/ckeditor5-utils/src/focustracker';\nimport FocusCycler from '../focuscycler';\nimport KeystrokeHandler from '@ckeditor/ckeditor5-utils/src/keystrokehandler';\nimport ToolbarSeparatorView from './toolbarseparatorview';\nimport ToolbarLineBreakView from './toolbarlinebreakview';\nimport ResizeObserver from '@ckeditor/ckeditor5-utils/src/dom/resizeobserver';\nimport preventDefault from '../bindings/preventdefault.js';\nimport Rect from '@ckeditor/ckeditor5-utils/src/dom/rect';\nimport global from '@ckeditor/ckeditor5-utils/src/dom/global';\nimport { createDropdown, addToolbarToDropdown } from '../dropdown/utils';\nimport { logWarning } from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport normalizeToolbarConfig from './normalizetoolbarconfig';\nimport { icons } from 'ckeditor5/src/core';\n\nimport '../../theme/components/toolbar/toolbar.css';\n\n/**\n * The toolbar view class.\n *\n * @extends module:ui/view~View\n * @implements module:ui/dropdown/dropdownpanelfocusable~DropdownPanelFocusable\n */\nexport default class ToolbarView extends View {\n\t/**\n\t * Creates an instance of the {@link module:ui/toolbar/toolbarview~ToolbarView} class.\n\t *\n\t * Also see {@link #render}.\n\t *\n\t * @param {module:utils/locale~Locale} locale The localization services instance.\n\t * @param {module:ui/toolbar/toolbarview~ToolbarOptions} [options] Configuration options of the toolbar.\n\t */\n\tconstructor( locale, options ) {\n\t\tsuper( locale );\n\n\t\tconst bind = this.bindTemplate;\n\t\tconst t = this.t;\n\n\t\t/**\n\t\t * A reference to the options object passed to the constructor.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/toolbar/toolbarview~ToolbarOptions}\n\t\t */\n\t\tthis.options = options || {};\n\n\t\t/**\n\t\t * Label used by assistive technologies to describe this toolbar element.\n\t\t *\n\t\t * @default 'Editor toolbar'\n\t\t * @member {String} #ariaLabel\n\t\t */\n\t\tthis.set( 'ariaLabel', t( 'Editor toolbar' ) );\n\n\t\t/**\n\t\t * The maximum width of the toolbar element.\n\t\t *\n\t\t * **Note**: When set to a specific value (e.g. `'200px'`), the value will affect the behavior of the\n\t\t * {@link module:ui/toolbar/toolbarview~ToolbarOptions#shouldGroupWhenFull}\n\t\t * option by changing the number of {@link #items} that will be displayed in the toolbar at a time.\n\t\t *\n\t\t * @observable\n\t\t * @default 'auto'\n\t\t * @member {String} #maxWidth\n\t\t */\n\t\tthis.set( 'maxWidth', 'auto' );\n\n\t\t/**\n\t\t * A collection of toolbar items (buttons, dropdowns, etc.).\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/viewcollection~ViewCollection}\n\t\t */\n\t\tthis.items = this.createCollection();\n\n\t\t/**\n\t\t * Tracks information about the DOM focus in the toolbar.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/focustracker~FocusTracker}\n\t\t */\n\t\tthis.focusTracker = new FocusTracker();\n\n\t\t/**\n\t\t * An instance of the {@link module:utils/keystrokehandler~KeystrokeHandler}\n\t\t * to handle keyboard navigation in the toolbar.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/keystrokehandler~KeystrokeHandler}\n\t\t */\n\t\tthis.keystrokes = new KeystrokeHandler();\n\n\t\t/**\n\t\t * An additional CSS class added to the {@link #element}.\n\t\t *\n\t\t * @observable\n\t\t * @member {String} #class\n\t\t */\n\t\tthis.set( 'class' );\n\n\t\t/**\n\t\t * When set true, makes the toolbar look compact with {@link #element}.\n\t\t *\n\t\t * @observable\n\t\t * @default false\n\t\t * @member {String} #isCompact\n\t\t */\n\t\tthis.set( 'isCompact', false );\n\n\t\t/**\n\t\t * A (child) view containing {@link #items toolbar items}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/toolbar/toolbarview~ItemsView}\n\t\t */\n\t\tthis.itemsView = new ItemsView( locale );\n\n\t\t/**\n\t\t * A top–level collection aggregating building blocks of the toolbar.\n\t\t *\n\t\t *\t┌───────────────── ToolbarView ─────────────────┐\n\t\t *\t| ┌──────────────── #children ────────────────┐ |\n\t\t *\t| |   ┌──────────── #itemsView ───────────┐   | |\n\t\t *\t| |   | [ item1 ] [ item2 ] ... [ itemN ] |   | |\n\t\t *\t| |   └──────────────────────────────────-┘   | |\n\t\t *\t| └───────────────────────────────────────────┘ |\n\t\t *\t└───────────────────────────────────────────────┘\n\t\t *\n\t\t * By default, it contains the {@link #itemsView} but it can be extended with additional\n\t\t * UI elements when necessary.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/viewcollection~ViewCollection}\n\t\t */\n\t\tthis.children = this.createCollection();\n\t\tthis.children.add( this.itemsView );\n\n\t\t/**\n\t\t * A collection of {@link #items} that take part in the focus cycling\n\t\t * (i.e. navigation using the keyboard). Usually, it contains a subset of {@link #items} with\n\t\t * some optional UI elements that also belong to the toolbar and should be focusable\n\t\t * by the user.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/viewcollection~ViewCollection}\n\t\t */\n\t\tthis.focusables = this.createCollection();\n\n\t\t/**\n\t\t * Controls the orientation of toolbar items. Only available when\n\t\t * {@link module:ui/toolbar/toolbarview~ToolbarOptions#shouldGroupWhenFull dynamic items grouping}\n\t\t * is **disabled**.\n\t\t *\n\t\t * @observable\n\t\t * @member {Boolean} #isVertical\n\t\t */\n\n\t\t/**\n\t\t * Helps cycling over {@link #focusables focusable items} in the toolbar.\n\t\t *\n\t\t * @readonly\n\t\t * @protected\n\t\t * @member {module:ui/focuscycler~FocusCycler}\n\t\t */\n\t\tthis._focusCycler = new FocusCycler( {\n\t\t\tfocusables: this.focusables,\n\t\t\tfocusTracker: this.focusTracker,\n\t\t\tkeystrokeHandler: this.keystrokes,\n\t\t\tactions: {\n\t\t\t\t// Navigate toolbar items backwards using the arrow[left,up] keys.\n\t\t\t\tfocusPrevious: [ 'arrowleft', 'arrowup' ],\n\n\t\t\t\t// Navigate toolbar items forwards using the arrow[right,down] keys.\n\t\t\t\tfocusNext: [ 'arrowright', 'arrowdown' ]\n\t\t\t}\n\t\t} );\n\n\t\tconst classes = [\n\t\t\t'ck',\n\t\t\t'ck-toolbar',\n\t\t\tbind.to( 'class' ),\n\t\t\tbind.if( 'isCompact', 'ck-toolbar_compact' )\n\t\t];\n\n\t\tif ( this.options.shouldGroupWhenFull && this.options.isFloating ) {\n\t\t\tclasses.push( 'ck-toolbar_floating' );\n\t\t}\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'div',\n\t\t\tattributes: {\n\t\t\t\tclass: classes,\n\t\t\t\trole: 'toolbar',\n\t\t\t\t'aria-label': bind.to( 'ariaLabel' ),\n\t\t\t\tstyle: {\n\t\t\t\t\tmaxWidth: bind.to( 'maxWidth' )\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tchildren: this.children,\n\n\t\t\ton: {\n\t\t\t\t// https://github.com/ckeditor/ckeditor5-ui/issues/206\n\t\t\t\tmousedown: preventDefault( this )\n\t\t\t}\n\t\t} );\n\n\t\t/**\n\t\t * An instance of the active toolbar behavior that shapes its look and functionality.\n\t\t *\n\t\t * See {@link module:ui/toolbar/toolbarview~ToolbarBehavior} to learn more.\n\t\t *\n\t\t * @protected\n\t\t * @readonly\n\t\t * @member {module:ui/toolbar/toolbarview~ToolbarBehavior}\n\t\t */\n\t\tthis._behavior = this.options.shouldGroupWhenFull ? new DynamicGrouping( this ) : new StaticLayout( this );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trender() {\n\t\tsuper.render();\n\n\t\t// Children added before rendering should be known to the #focusTracker.\n\t\tfor ( const item of this.items ) {\n\t\t\tthis.focusTracker.add( item.element );\n\t\t}\n\n\t\tthis.items.on( 'add', ( evt, item ) => {\n\t\t\tthis.focusTracker.add( item.element );\n\t\t} );\n\n\t\tthis.items.on( 'remove', ( evt, item ) => {\n\t\t\tthis.focusTracker.remove( item.element );\n\t\t} );\n\n\t\t// Start listening for the keystrokes coming from #element.\n\t\tthis.keystrokes.listenTo( this.element );\n\n\t\tthis._behavior.render( this );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdestroy() {\n\t\tthis._behavior.destroy();\n\n\t\treturn super.destroy();\n\t}\n\n\t/**\n\t * Focuses the first focusable in {@link #focusables}.\n\t */\n\tfocus() {\n\t\tthis._focusCycler.focusFirst();\n\t}\n\n\t/**\n\t * Focuses the last focusable in {@link #focusables}.\n\t */\n\tfocusLast() {\n\t\tthis._focusCycler.focusLast();\n\t}\n\n\t/**\n\t * A utility that expands the plain toolbar configuration into\n\t * {@link module:ui/toolbar/toolbarview~ToolbarView#items} using a given component factory.\n\t *\n\t * @param {Array.<String>|Object} itemsOrConfig The toolbar items or the entire toolbar configuration object.\n\t * @param {module:ui/componentfactory~ComponentFactory} factory A factory producing toolbar items.\n\t */\n\tfillFromConfig( itemsOrConfig, factory ) {\n\t\tconst config = normalizeToolbarConfig( itemsOrConfig );\n\n\t\tconst itemsToClean = config.items\n\t\t\t.filter( ( name, idx, items ) => {\n\t\t\t\tif ( name === '|' ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\t// Items listed in `config.removeItems` should not be added to the toolbar.\n\t\t\t\tif ( config.removeItems.indexOf( name ) !== -1 ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tif ( name === '-' ) {\n\t\t\t\t\t// The toolbar line breaks must not be rendered when toolbar grouping is enabled.\n\t\t\t\t\t// (https://github.com/ckeditor/ckeditor5/issues/8582)\n\t\t\t\t\tif ( this.options.shouldGroupWhenFull ) {\n\t\t\t\t\t\t/**\n\t\t\t\t\t\t * The toolbar multiline breaks (`-` items) only work when the automatic button grouping\n\t\t\t\t\t\t * is disabled in the toolbar configuration.\n\t\t\t\t\t\t * To do this, set the `shouldNotGroupWhenFull` option to `true` in the editor configuration:\n\t\t\t\t\t\t *\n\t\t\t\t\t\t *\t\tconst config = {\n\t\t\t\t\t\t *\t\t\ttoolbar: {\n\t\t\t\t\t\t *\t\t\t\titems: [ ... ],\n\t\t\t\t\t\t *\t\t\t\tshouldNotGroupWhenFull: true\n\t\t\t\t\t\t *\t\t\t}\n\t\t\t\t\t\t *\t\t}\n\t\t\t\t\t\t *\n\t\t\t\t\t\t * Learn more about {@link module:core/editor/editorconfig~EditorConfig#toolbar toolbar configuration}.\n\t\t\t\t\t\t *\n\t\t\t\t\t\t * @error toolbarview-line-break-ignored-when-grouping-items\n\t\t\t\t\t\t */\n\t\t\t\t\t\tlogWarning( 'toolbarview-line-break-ignored-when-grouping-items', items );\n\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\t// For the items that cannot be instantiated we are sending warning message. We also filter them out.\n\t\t\t\tif ( !factory.has( name ) ) {\n\t\t\t\t\t/**\n\t\t\t\t\t * There was a problem processing the configuration of the toolbar. The item with the given\n\t\t\t\t\t * name does not exist so it was omitted when rendering the toolbar.\n\t\t\t\t\t *\n\t\t\t\t\t * This warning usually shows up when the {@link module:core/plugin~Plugin} which is supposed\n\t\t\t\t\t * to provide a toolbar item has not been loaded or there is a typo in the configuration.\n\t\t\t\t\t *\n\t\t\t\t\t * Make sure the plugin responsible for this toolbar item is loaded and the toolbar configuration\n\t\t\t\t\t * is correct, e.g. {@link module:basic-styles/bold~Bold} is loaded for the `'bold'` toolbar item.\n\t\t\t\t\t *\n\t\t\t\t\t * You can use the following snippet to retrieve all available toolbar items:\n\t\t\t\t\t *\n\t\t\t\t\t *\t\tArray.from( editor.ui.componentFactory.names() );\n\t\t\t\t\t *\n\t\t\t\t\t * @error toolbarview-item-unavailable\n\t\t\t\t\t * @param {String} name The name of the component.\n\t\t\t\t\t */\n\t\t\t\t\tlogWarning( 'toolbarview-item-unavailable', { name } );\n\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\t\t\t} );\n\n\t\tconst itemsToAdd = this._cleanSeparators( itemsToClean )\n\t\t\t// Instantiate toolbar items.\n\t\t\t.map( name => {\n\t\t\t\tif ( name === '|' ) {\n\t\t\t\t\treturn new ToolbarSeparatorView();\n\t\t\t\t} else if ( name === '-' ) {\n\t\t\t\t\treturn new ToolbarLineBreakView();\n\t\t\t\t}\n\n\t\t\t\treturn factory.create( name );\n\t\t\t} );\n\n\t\tthis.items.addMany( itemsToAdd );\n\t}\n\n\t/**\n\t * Remove leading, trailing, and duplicated separators (`-` and `|`).\n\t *\n\t * @private\n\t * @param {Array.<String>} items\n\t */\n\t_cleanSeparators( items ) {\n\t\tconst nonSeparatorPredicate = item => ( item !== '-' && item !== '|' );\n\t\tconst count = items.length;\n\n\t\t// Find an index of the first item that is not a separator.\n\t\tconst firstCommandItem = items.findIndex( nonSeparatorPredicate );\n\n\t\t// Search from the end of the list, then convert found index back to the original direction.\n\t\tconst lastCommandItem = count - items\n\t\t\t.slice()\n\t\t\t.reverse()\n\t\t\t.findIndex( nonSeparatorPredicate );\n\n\t\treturn items\n\t\t\t// Return items without the leading and trailing separators.\n\t\t\t.slice( firstCommandItem, lastCommandItem )\n\t\t\t// Remove duplicated separators.\n\t\t\t.filter( ( name, idx, items ) => {\n\t\t\t\t// Filter only separators.\n\t\t\t\tif ( nonSeparatorPredicate( name ) ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\tconst isDuplicated = idx > 0 && items[ idx - 1 ] === name;\n\n\t\t\t\treturn !isDuplicated;\n\t\t\t} );\n\t}\n\n\t/**\n\t * Fired when some toolbar {@link #items} were grouped or ungrouped as a result of some change\n\t * in the toolbar geometry.\n\t *\n\t * **Note**: This event is always fired **once** regardless of the number of items that were be\n\t * grouped or ungrouped at a time.\n\t *\n\t * **Note**: This event is fired only if the items grouping functionality was enabled in\n\t * the first place (see {@link module:ui/toolbar/toolbarview~ToolbarOptions#shouldGroupWhenFull}).\n\t *\n\t * @event groupedItemsUpdate\n\t */\n}\n\n/**\n * An inner block of the {@link module:ui/toolbar/toolbarview~ToolbarView} hosting its\n * {@link module:ui/toolbar/toolbarview~ToolbarView#items}.\n *\n * @private\n * @extends module:ui/view~View\n */\nclass ItemsView extends View {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( locale ) {\n\t\tsuper( locale );\n\n\t\t/**\n\t\t * A collection of items (buttons, dropdowns, etc.).\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/viewcollection~ViewCollection}\n\t\t */\n\t\tthis.children = this.createCollection();\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'div',\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-toolbar__items'\n\t\t\t\t]\n\t\t\t},\n\t\t\tchildren: this.children\n\t\t} );\n\t}\n}\n\n/**\n * A toolbar behavior that makes it static and unresponsive to the changes of the environment.\n * At the same time, it also makes it possible to display a toolbar with a vertical layout\n * using the {@link module:ui/toolbar/toolbarview~ToolbarView#isVertical} property.\n *\n * @private\n * @implements module:ui/toolbar/toolbarview~ToolbarBehavior\n */\nclass StaticLayout {\n\t/**\n\t * Creates an instance of the {@link module:ui/toolbar/toolbarview~StaticLayout} toolbar\n\t * behavior.\n\t *\n\t * @param {module:ui/toolbar/toolbarview~ToolbarView} view An instance of the toolbar that this behavior\n\t * is added to.\n\t */\n\tconstructor( view ) {\n\t\tconst bind = view.bindTemplate;\n\n\t\t// Static toolbar can be vertical when needed.\n\t\tview.set( 'isVertical', false );\n\n\t\t// 1:1 pass–through binding, all ToolbarView#items are visible.\n\t\tview.itemsView.children.bindTo( view.items ).using( item => item );\n\n\t\t// 1:1 pass–through binding, all ToolbarView#items are focusable.\n\t\tview.focusables.bindTo( view.items ).using( item => item );\n\n\t\tview.extendTemplate( {\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t// When vertical, the toolbar has an additional CSS class.\n\t\t\t\t\tbind.if( 'isVertical', 'ck-toolbar_vertical' )\n\t\t\t\t]\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trender() {}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdestroy() {}\n}\n\n/**\n * A toolbar behavior that makes the items respond to changes in the geometry.\n *\n * In a nutshell, it groups {@link module:ui/toolbar/toolbarview~ToolbarView#items}\n * that do not fit visually into a single row of the toolbar (due to limited space).\n * Items that do not fit are aggregated in a dropdown displayed at the end of the toolbar.\n *\n *\t┌──────────────────────────────────────── ToolbarView ──────────────────────────────────────────┐\n *\t| ┌─────────────────────────────────────── #children ─────────────────────────────────────────┐ |\n *\t| |   ┌─────── #itemsView ────────┐ ┌──────────────────────┐ ┌── #groupedItemsDropdown ───┐   | |\n *\t| |   |       #ungroupedItems     | | ToolbarSeparatorView | |        #groupedItems       |   | |\n *\t| |   └──────────────────────────-┘ └──────────────────────┘ └────────────────────────────┘   | |\n *\t| |                                  \\---------- only when toolbar items overflow --------/    | |\n *\t| └───────────────────────────────────────────────────────────────────────────────────────────┘ |\n *\t└───────────────────────────────────────────────────────────────────────────────────────────────┘\n *\n * @private\n * @implements module:ui/toolbar/toolbarview~ToolbarBehavior\n */\nclass DynamicGrouping {\n\t/**\n\t * Creates an instance of the {@link module:ui/toolbar/toolbarview~DynamicGrouping} toolbar\n\t * behavior.\n\t *\n\t * @param {module:ui/toolbar/toolbarview~ToolbarView} view An instance of the toolbar that this behavior\n\t * is added to.\n\t */\n\tconstructor( view ) {\n\t\t/**\n\t\t * A toolbar view this behavior belongs to.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/toolbar~ToolbarView}\n\t\t */\n\t\tthis.view = view;\n\n\t\t/**\n\t\t * A collection of toolbar children.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/viewcollection~ViewCollection}\n\t\t */\n\t\tthis.viewChildren = view.children;\n\n\t\t/**\n\t\t * A collection of focusable toolbar elements.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/viewcollection~ViewCollection}\n\t\t */\n\t\tthis.viewFocusables = view.focusables;\n\n\t\t/**\n\t\t * A view containing toolbar items.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/toolbar/toolbarview~ItemsView}\n\t\t */\n\t\tthis.viewItemsView = view.itemsView;\n\n\t\t/**\n\t\t * Toolbar focus tracker.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/focustracker~FocusTracker}\n\t\t */\n\t\tthis.viewFocusTracker = view.focusTracker;\n\n\t\t/**\n\t\t * Toolbar locale.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/locale~Locale}\n\t\t */\n\t\tthis.viewLocale = view.locale;\n\n\t\t/**\n\t\t * Toolbar element.\n\t\t *\n\t\t * @readonly\n\t\t * @member {HTMLElement} #viewElement\n\t\t */\n\n\t\t/**\n\t\t * A subset of toolbar {@link module:ui/toolbar/toolbarview~ToolbarView#items}.\n\t\t * Aggregates items that fit into a single row of the toolbar and were not {@link #groupedItems grouped}\n\t\t * into a {@link #groupedItemsDropdown dropdown}. Items of this collection are displayed in the\n\t\t * {@link module:ui/toolbar/toolbarview~ToolbarView#itemsView}.\n\t\t *\n\t\t * When none of the {@link module:ui/toolbar/toolbarview~ToolbarView#items} were grouped, it\n\t\t * matches the {@link module:ui/toolbar/toolbarview~ToolbarView#items} collection in size and order.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/viewcollection~ViewCollection}\n\t\t */\n\t\tthis.ungroupedItems = view.createCollection();\n\n\t\t/**\n\t\t * A subset of toolbar {@link module:ui/toolbar/toolbarview~ToolbarView#items}.\n\t\t * A collection of the toolbar items that do not fit into a single row of the toolbar.\n\t\t * Grouped items are displayed in a dedicated {@link #groupedItemsDropdown dropdown}.\n\t\t *\n\t\t * When none of the {@link module:ui/toolbar/toolbarview~ToolbarView#items} were grouped,\n\t\t * this collection is empty.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/viewcollection~ViewCollection}\n\t\t */\n\t\tthis.groupedItems = view.createCollection();\n\n\t\t/**\n\t\t * The dropdown that aggregates {@link #groupedItems grouped items} that do not fit into a single\n\t\t * row of the toolbar. It is displayed on demand as the last of\n\t\t * {@link module:ui/toolbar/toolbarview~ToolbarView#children toolbar children} and offers another\n\t\t * (nested) toolbar which displays items that would normally overflow.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/dropdown/dropdownview~DropdownView}\n\t\t */\n\t\tthis.groupedItemsDropdown = this._createGroupedItemsDropdown();\n\n\t\t/**\n\t\t * An instance of the resize observer that helps dynamically determine the geometry of the toolbar\n\t\t * and manage items that do not fit into a single row.\n\t\t *\n\t\t * **Note:** Created in {@link #_enableGroupingOnResize}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/dom/resizeobserver~ResizeObserver}\n\t\t */\n\t\tthis.resizeObserver = null;\n\n\t\t/**\n\t\t * A cached value of the horizontal padding style used by {@link #_updateGrouping}\n\t\t * to manage the {@link module:ui/toolbar/toolbarview~ToolbarView#items} that do not fit into\n\t\t * a single toolbar line. This value can be reused between updates because it is unlikely that\n\t\t * the padding will change and re–using `Window.getComputedStyle()` is expensive.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Number}\n\t\t */\n\t\tthis.cachedPadding = null;\n\n\t\t/**\n\t\t * A flag indicating that an items grouping update has been queued (e.g. due to the toolbar being visible)\n\t\t * and should be executed immediately the next time the toolbar shows up.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Boolean}\n\t\t */\n\t\tthis.shouldUpdateGroupingOnNextResize = false;\n\n\t\t// Only those items that were not grouped are visible to the user.\n\t\tview.itemsView.children.bindTo( this.ungroupedItems ).using( item => item );\n\n\t\t// Make sure all #items visible in the main space of the toolbar are \"focuscycleable\".\n\t\tthis.ungroupedItems.on( 'add', this._updateFocusCycleableItems.bind( this ) );\n\t\tthis.ungroupedItems.on( 'remove', this._updateFocusCycleableItems.bind( this ) );\n\n\t\t// Make sure the #groupedItemsDropdown is also included in cycling when it appears.\n\t\tview.children.on( 'add', this._updateFocusCycleableItems.bind( this ) );\n\t\tview.children.on( 'remove', this._updateFocusCycleableItems.bind( this ) );\n\n\t\t// ToolbarView#items is dynamic. When an item is added or removed, it should be automatically\n\t\t// represented in either grouped or ungrouped items at the right index.\n\t\t// In other words #items == concat( #ungroupedItems, #groupedItems )\n\t\t// (in length and order).\n\t\tview.items.on( 'change', ( evt, changeData ) => {\n\t\t\tconst index = changeData.index;\n\n\t\t\t// Removing.\n\t\t\tfor ( const removedItem of changeData.removed ) {\n\t\t\t\tif ( index >= this.ungroupedItems.length ) {\n\t\t\t\t\tthis.groupedItems.remove( removedItem );\n\t\t\t\t} else {\n\t\t\t\t\tthis.ungroupedItems.remove( removedItem );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Adding.\n\t\t\tfor ( let currentIndex = index; currentIndex < index + changeData.added.length; currentIndex++ ) {\n\t\t\t\tconst addedItem = changeData.added[ currentIndex - index ];\n\n\t\t\t\tif ( currentIndex > this.ungroupedItems.length ) {\n\t\t\t\t\tthis.groupedItems.add( addedItem, currentIndex - this.ungroupedItems.length );\n\t\t\t\t} else {\n\t\t\t\t\tthis.ungroupedItems.add( addedItem, currentIndex );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// When new ungrouped items join in and land in #ungroupedItems, there's a chance it causes\n\t\t\t// the toolbar to overflow.\n\t\t\t// Consequently if removed from grouped or ungrouped items, there is a chance\n\t\t\t// some new space is available and we could do some ungrouping.\n\t\t\tthis._updateGrouping();\n\t\t} );\n\n\t\tview.extendTemplate( {\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t// To group items dynamically, the toolbar needs a dedicated CSS class.\n\t\t\t\t\t'ck-toolbar_grouping'\n\t\t\t\t]\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Enables dynamic items grouping based on the dimensions of the toolbar.\n\t *\n\t * @param {module:ui/toolbar/toolbarview~ToolbarView} view An instance of the toolbar that this behavior\n\t * is added to.\n\t */\n\trender( view ) {\n\t\tthis.viewElement = view.element;\n\n\t\tthis._enableGroupingOnResize();\n\t\tthis._enableGroupingOnMaxWidthChange( view );\n\t}\n\n\t/**\n\t * Cleans up the internals used by this behavior.\n\t */\n\tdestroy() {\n\t\t// The dropdown may not be in ToolbarView#children at the moment of toolbar destruction\n\t\t// so let's make sure it's actually destroyed along with the toolbar.\n\t\tthis.groupedItemsDropdown.destroy();\n\n\t\tthis.resizeObserver.destroy();\n\t}\n\n\t/**\n\t * When called, it will check if any of the {@link #ungroupedItems} do not fit into a single row of the toolbar,\n\t * and it will move them to the {@link #groupedItems} when it happens.\n\t *\n\t * At the same time, it will also check if there is enough space in the toolbar for the first of the\n\t * {@link #groupedItems} to be returned back to {@link #ungroupedItems} and still fit into a single row\n\t * without the toolbar wrapping.\n\t *\n\t * @protected\n\t */\n\t_updateGrouping() {\n\t\t// Do no grouping–related geometry analysis when the toolbar is detached from visible DOM,\n\t\t// for instance before #render(), or after render but without a parent or a parent detached\n\t\t// from DOM. DOMRects won't work anyway and there will be tons of warning in the console and\n\t\t// nothing else. This happens, for instance, when the toolbar is detached from DOM and\n\t\t// some logic adds or removes its #items.\n\t\tif ( !this.viewElement.ownerDocument.body.contains( this.viewElement ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Do not update grouping when the element is invisible. Such toolbar has DOMRect filled with zeros\n\t\t// and that would cause all items to be grouped. Instead, queue the grouping so it runs next time\n\t\t// the toolbar is visible (the next ResizeObserver callback execution). This is handy because\n\t\t// the grouping could be caused by increasing the #maxWidth when the toolbar was invisible and the next\n\t\t// time it shows up, some items could actually be ungrouped (https://github.com/ckeditor/ckeditor5/issues/6575).\n\t\tif ( !this.viewElement.offsetParent ) {\n\t\t\tthis.shouldUpdateGroupingOnNextResize = true;\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Remember how many items were initially grouped so at the it is possible to figure out if the number\n\t\t// of grouped items has changed. If the number has changed, geometry of the toolbar has also changed.\n\t\tconst initialGroupedItemsCount = this.groupedItems.length;\n\t\tlet wereItemsGrouped;\n\n\t\t// Group #items as long as some wrap to the next row. This will happen, for instance,\n\t\t// when the toolbar is getting narrow and there is not enough space to display all items in\n\t\t// a single row.\n\t\twhile ( this._areItemsOverflowing ) {\n\t\t\tthis._groupLastItem();\n\n\t\t\twereItemsGrouped = true;\n\t\t}\n\n\t\t// If none were grouped now but there were some items already grouped before,\n\t\t// then, what the hell, maybe let's see if some of them can be ungrouped. This happens when,\n\t\t// for instance, the toolbar is stretching and there's more space in it than before.\n\t\tif ( !wereItemsGrouped && this.groupedItems.length ) {\n\t\t\t// Ungroup items as long as none are overflowing or there are none to ungroup left.\n\t\t\twhile ( this.groupedItems.length && !this._areItemsOverflowing ) {\n\t\t\t\tthis._ungroupFirstItem();\n\t\t\t}\n\n\t\t\t// If the ungrouping ended up with some item wrapping to the next row,\n\t\t\t// put it back to the group toolbar (\"undo the last ungroup\"). We don't know whether\n\t\t\t// an item will wrap or not until we ungroup it (that's a DOM/CSS thing) so this\n\t\t\t// clean–up is vital for the algorithm.\n\t\t\tif ( this._areItemsOverflowing ) {\n\t\t\t\tthis._groupLastItem();\n\t\t\t}\n\t\t}\n\n\t\tif ( this.groupedItems.length !== initialGroupedItemsCount ) {\n\t\t\tthis.view.fire( 'groupedItemsUpdate' );\n\t\t}\n\t}\n\n\t/**\n\t * Returns `true` when {@link module:ui/toolbar/toolbarview~ToolbarView#element} children visually overflow,\n\t * for instance if the toolbar is narrower than its members. Returns `false` otherwise.\n\t *\n\t * @private\n\t * @type {Boolean}\n\t */\n\tget _areItemsOverflowing() {\n\t\t// An empty toolbar cannot overflow.\n\t\tif ( !this.ungroupedItems.length ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst element = this.viewElement;\n\t\tconst uiLanguageDirection = this.viewLocale.uiLanguageDirection;\n\t\tconst lastChildRect = new Rect( element.lastChild );\n\t\tconst toolbarRect = new Rect( element );\n\n\t\tif ( !this.cachedPadding ) {\n\t\t\tconst computedStyle = global.window.getComputedStyle( element );\n\t\t\tconst paddingProperty = uiLanguageDirection === 'ltr' ? 'paddingRight' : 'paddingLeft';\n\n\t\t\t// parseInt() is essential because of quirky floating point numbers logic and DOM.\n\t\t\t// If the padding turned out too big because of that, the grouped items dropdown would\n\t\t\t// always look (from the Rect perspective) like it overflows (while it's not).\n\t\t\tthis.cachedPadding = Number.parseInt( computedStyle[ paddingProperty ] );\n\t\t}\n\n\t\tif ( uiLanguageDirection === 'ltr' ) {\n\t\t\treturn lastChildRect.right > toolbarRect.right - this.cachedPadding;\n\t\t} else {\n\t\t\treturn lastChildRect.left < toolbarRect.left + this.cachedPadding;\n\t\t}\n\t}\n\n\t/**\n\t * Enables the functionality that prevents {@link #ungroupedItems} from overflowing (wrapping to the next row)\n\t * upon resize when there is little space available. Instead, the toolbar items are moved to the\n\t * {@link #groupedItems} collection and displayed in a dropdown at the end of the row (which has its own nested toolbar).\n\t *\n\t * When called, the toolbar will automatically analyze the location of its {@link #ungroupedItems} and \"group\"\n\t * them in the dropdown if necessary. It will also observe the browser window for size changes in\n\t * the future and respond to them by grouping more items or reverting already grouped back, depending\n\t * on the visual space available.\n\t *\n\t * @private\n\t */\n\t_enableGroupingOnResize() {\n\t\tlet previousWidth;\n\n\t\t// TODO: Consider debounce.\n\t\tthis.resizeObserver = new ResizeObserver( this.viewElement, entry => {\n\t\t\tif ( !previousWidth || previousWidth !== entry.contentRect.width || this.shouldUpdateGroupingOnNextResize ) {\n\t\t\t\tthis.shouldUpdateGroupingOnNextResize = false;\n\n\t\t\t\tthis._updateGrouping();\n\n\t\t\t\tpreviousWidth = entry.contentRect.width;\n\t\t\t}\n\t\t} );\n\n\t\tthis._updateGrouping();\n\t}\n\n\t/**\n\t * Enables the grouping functionality, just like {@link #_enableGroupingOnResize} but the difference is that\n\t * it listens to the changes of {@link module:ui/toolbar/toolbarview~ToolbarView#maxWidth} instead.\n\t *\n\t * @private\n\t */\n\t_enableGroupingOnMaxWidthChange( view ) {\n\t\tview.on( 'change:maxWidth', () => {\n\t\t\tthis._updateGrouping();\n\t\t} );\n\t}\n\n\t/**\n\t * When called, it will remove the last item from {@link #ungroupedItems} and move it back\n\t * to the {@link #groupedItems} collection.\n\t *\n\t * The opposite of {@link #_ungroupFirstItem}.\n\t *\n\t * @private\n\t */\n\t_groupLastItem() {\n\t\tif ( !this.groupedItems.length ) {\n\t\t\tthis.viewChildren.add( new ToolbarSeparatorView() );\n\t\t\tthis.viewChildren.add( this.groupedItemsDropdown );\n\t\t\tthis.viewFocusTracker.add( this.groupedItemsDropdown.element );\n\t\t}\n\n\t\tthis.groupedItems.add( this.ungroupedItems.remove( this.ungroupedItems.last ), 0 );\n\t}\n\n\t/**\n\t * Moves the very first item belonging to {@link #groupedItems} back\n\t * to the {@link #ungroupedItems} collection.\n\t *\n\t * The opposite of {@link #_groupLastItem}.\n\t *\n\t * @private\n\t */\n\t_ungroupFirstItem() {\n\t\tthis.ungroupedItems.add( this.groupedItems.remove( this.groupedItems.first ) );\n\n\t\tif ( !this.groupedItems.length ) {\n\t\t\tthis.viewChildren.remove( this.groupedItemsDropdown );\n\t\t\tthis.viewChildren.remove( this.viewChildren.last );\n\t\t\tthis.viewFocusTracker.remove( this.groupedItemsDropdown.element );\n\t\t}\n\t}\n\n\t/**\n\t * Creates the {@link #groupedItemsDropdown} that hosts the members of the {@link #groupedItems}\n\t * collection when there is not enough space in the toolbar to display all items in a single row.\n\t *\n\t * @private\n\t * @returns {module:ui/dropdown/dropdownview~DropdownView}\n\t */\n\t_createGroupedItemsDropdown() {\n\t\tconst locale = this.viewLocale;\n\t\tconst t = locale.t;\n\t\tconst dropdown = createDropdown( locale );\n\n\t\tdropdown.class = 'ck-toolbar__grouped-dropdown';\n\n\t\t// Make sure the dropdown never sticks out to the left/right. It should be under the main toolbar.\n\t\t// (https://github.com/ckeditor/ckeditor5/issues/5608)\n\t\tdropdown.panelPosition = locale.uiLanguageDirection === 'ltr' ? 'sw' : 'se';\n\n\t\taddToolbarToDropdown( dropdown, [] );\n\n\t\tdropdown.buttonView.set( {\n\t\t\tlabel: t( 'Show more items' ),\n\t\t\ttooltip: true,\n\t\t\ttooltipPosition: locale.uiLanguageDirection === 'rtl' ? 'se' : 'sw',\n\t\t\ticon: icons.threeVerticalDots\n\t\t} );\n\n\t\t// 1:1 pass–through binding.\n\t\tdropdown.toolbarView.items.bindTo( this.groupedItems ).using( item => item );\n\n\t\treturn dropdown;\n\t}\n\n\t/**\n\t * Updates the {@link module:ui/toolbar/toolbarview~ToolbarView#focusables focus–cycleable items}\n\t * collection so it represents the up–to–date state of the UI from the perspective of the user.\n\t *\n\t * For instance, the {@link #groupedItemsDropdown} can show up and hide but when it is visible,\n\t * it must be subject to focus cycling in the toolbar.\n\t *\n\t * See the {@link module:ui/toolbar/toolbarview~ToolbarView#focusables collection} documentation\n\t * to learn more about the purpose of this method.\n\t *\n\t * @private\n\t */\n\t_updateFocusCycleableItems() {\n\t\tthis.viewFocusables.clear();\n\n\t\tthis.ungroupedItems.map( item => {\n\t\t\tthis.viewFocusables.add( item );\n\t\t} );\n\n\t\tif ( this.groupedItems.length ) {\n\t\t\tthis.viewFocusables.add( this.groupedItemsDropdown );\n\t\t}\n\t}\n}\n\n/**\n * Options passed to the {@link module:ui/toolbar/toolbarview~ToolbarView#constructor} of the toolbar.\n *\n * @interface module:ui/toolbar/toolbarview~ToolbarOptions\n */\n\n/**\n * When set to `true`, the toolbar will automatically group {@link module:ui/toolbar/toolbarview~ToolbarView#items} that\n * would normally wrap to the next line when there is not enough space to display them in a single row, for\n * instance, if the parent container of the toolbar is narrow. For toolbars in absolutely positioned containers\n * without width restrictions also the {@link module:ui/toolbar/toolbarview~ToolbarOptions#isFloating} option is required to be `true`.\n *\n * See also: {@link module:ui/toolbar/toolbarview~ToolbarView#maxWidth}.\n *\n * @member {Boolean} module:ui/toolbar/toolbarview~ToolbarOptions#shouldGroupWhenFull\n */\n\n/**\n * This option should be enabled for toolbars in absolutely positioned containers without width restrictions\n * to enable automatic {@link module:ui/toolbar/toolbarview~ToolbarView#items} grouping.\n * When this option is set to `true`, the items will stop wrapping to the next line\n * and together with {@link module:ui/toolbar/toolbarview~ToolbarOptions#shouldGroupWhenFull},\n * this will allow grouping them when there is not enough space in a single row.\n *\n * @member {Boolean} module:ui/toolbar/toolbarview~ToolbarOptions#isFloating\n */\n\n/**\n * A class interface defining the behavior of the {@link module:ui/toolbar/toolbarview~ToolbarView}.\n *\n * Toolbar behaviors extend its look and functionality and have an impact on the\n * {@link module:ui/toolbar/toolbarview~ToolbarView#element} template or\n * {@link module:ui/toolbar/toolbarview~ToolbarView#render rendering}. They can be enabled\n * conditionally, e.g. depending on the configuration of the toolbar.\n *\n * @private\n * @interface module:ui/toolbar/toolbarview~ToolbarBehavior\n */\n\n/**\n * Creates a new toolbar behavior instance.\n *\n * The instance is created in the {@link module:ui/toolbar/toolbarview~ToolbarView#constructor} of the toolbar.\n * This is the right place to extend the {@link module:ui/toolbar/toolbarview~ToolbarView#template} of\n * the toolbar, define extra toolbar properties, etc.\n *\n * @method #constructor\n * @param {module:ui/toolbar/toolbarview~ToolbarView} view An instance of the toolbar that this behavior is added to.\n */\n\n/**\n * A method called after the toolbar has been {@link module:ui/toolbar/toolbarview~ToolbarView#render rendered}.\n * It can be used to, for example, customize the behavior of the toolbar when its {@link module:ui/toolbar/toolbarview~ToolbarView#element}\n * is available.\n *\n * @readonly\n * @member {Function} #render\n * @param {module:ui/toolbar/toolbarview~ToolbarView} view An instance of the toolbar being rendered.\n */\n\n/**\n * A method called after the toolbar has been {@link module:ui/toolbar/toolbarview~ToolbarView#destroy destroyed}.\n * It allows cleaning up after the toolbar behavior, for instance, this is the right place to detach\n * event listeners, free up references, etc.\n *\n * @readonly\n * @member {Function} #destroy\n */\n"]}]}