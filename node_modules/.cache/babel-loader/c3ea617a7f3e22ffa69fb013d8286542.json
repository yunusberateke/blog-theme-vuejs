{"remainingRequest":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/babel-loader/lib/index.js!/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-dev-webpack-plugin/lib/translatesourceloader.js?{}!/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-link/src/linkcommand.js","dependencies":[{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-link/src/linkcommand.js","mtime":499162500000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-dev-webpack-plugin/lib/translatesourceloader.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-link/src/linkcommand.js"],"names":["Command","findAttributeRange","Collection","toMap","first","AutomaticDecorators","isImageAllowed","LinkCommand","editor","manualDecorators","automaticDecorators","manualDecorator","value","_getDecoratorStateFromModel","id","model","doc","document","selectedElement","selection","getSelectedBlocks","schema","getAttribute","isEnabled","checkAttribute","checkAttributeInSelection","href","manualDecoratorIds","truthyManualDecorators","falsyManualDecorators","name","push","change","writer","isCollapsed","position","getFirstPosition","hasAttribute","linkRange","setAttribute","forEach","item","removeAttribute","setSelection","createPositionAfter","end","nodeBefore","attributes","getAttributes","set","insertContent","createText","positionAfter","removeSelectionAttribute","ranges","getValidRanges","getRanges","allowedRanges","element","createRangeOn","rangesToUpdate","slice","range","_isRangeToUpdate","decoratorName","allowedRange","containsRange"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module link/linkcommand\n */\n\nimport { Command } from 'ckeditor5/src/core';\nimport { findAttributeRange } from 'ckeditor5/src/typing';\nimport { Collection, toMap, first } from 'ckeditor5/src/utils';\n\nimport AutomaticDecorators from './utils/automaticdecorators';\nimport { isImageAllowed } from './utils';\n\n/**\n * The link command. It is used by the {@link module:link/link~Link link feature}.\n *\n * @extends module:core/command~Command\n */\nexport default class LinkCommand extends Command {\n\t/**\n\t * The value of the `'linkHref'` attribute if the start of the selection is located in a node with this attribute.\n\t *\n\t * @observable\n\t * @readonly\n\t * @member {Object|undefined} #value\n\t */\n\n\tconstructor( editor ) {\n\t\tsuper( editor );\n\n\t\t/**\n\t\t * A collection of {@link module:link/utils~ManualDecorator manual decorators}\n\t\t * corresponding to the {@link module:link/link~LinkConfig#decorators decorator configuration}.\n\t\t *\n\t\t * You can consider it a model with states of manual decorators added to the currently selected link.\n\t\t *\n\t\t * @readonly\n\t\t * @type {module:utils/collection~Collection}\n\t\t */\n\t\tthis.manualDecorators = new Collection();\n\n\t\t/**\n\t\t * An instance of the helper that ties together all {@link module:link/link~LinkDecoratorAutomaticDefinition}\n\t\t * that are used by the {@glink features/link link} and the {@glink features/image#linking-images linking images} features.\n\t\t *\n\t\t * @readonly\n\t\t * @type {module:link/utils~AutomaticDecorators}\n\t\t */\n\t\tthis.automaticDecorators = new AutomaticDecorators();\n\t}\n\n\t/**\n\t * Synchronizes the state of {@link #manualDecorators} with the currently present elements in the model.\n\t */\n\trestoreManualDecoratorStates() {\n\t\tfor ( const manualDecorator of this.manualDecorators ) {\n\t\t\tmanualDecorator.value = this._getDecoratorStateFromModel( manualDecorator.id );\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trefresh() {\n\t\tconst model = this.editor.model;\n\t\tconst doc = model.document;\n\n\t\tconst selectedElement = first( doc.selection.getSelectedBlocks() );\n\n\t\t// A check for the `LinkImage` plugin. If the selection contains an element, get values from the element.\n\t\t// Currently the selection reads attributes from text nodes only. See #7429 and #7465.\n\t\tif ( isImageAllowed( selectedElement, model.schema ) ) {\n\t\t\tthis.value = selectedElement.getAttribute( 'linkHref' );\n\t\t\tthis.isEnabled = model.schema.checkAttribute( selectedElement, 'linkHref' );\n\t\t} else {\n\t\t\tthis.value = doc.selection.getAttribute( 'linkHref' );\n\t\t\tthis.isEnabled = model.schema.checkAttributeInSelection( doc.selection, 'linkHref' );\n\t\t}\n\n\t\tfor ( const manualDecorator of this.manualDecorators ) {\n\t\t\tmanualDecorator.value = this._getDecoratorStateFromModel( manualDecorator.id );\n\t\t}\n\t}\n\n\t/**\n\t * Executes the command.\n\t *\n\t * When the selection is non-collapsed, the `linkHref` attribute will be applied to nodes inside the selection, but only to\n\t * those nodes where the `linkHref` attribute is allowed (disallowed nodes will be omitted).\n\t *\n\t * When the selection is collapsed and is not inside the text with the `linkHref` attribute, a\n\t * new {@link module:engine/model/text~Text text node} with the `linkHref` attribute will be inserted in place of the caret, but\n\t * only if such element is allowed in this place. The `_data` of the inserted text will equal the `href` parameter.\n\t * The selection will be updated to wrap the just inserted text node.\n\t *\n\t * When the selection is collapsed and inside the text with the `linkHref` attribute, the attribute value will be updated.\n\t *\n\t * # Decorators and model attribute management\n\t *\n\t * There is an optional argument to this command that applies or removes model\n\t * {@glink framework/guides/architecture/editing-engine#text-attributes text attributes} brought by\n\t * {@link module:link/utils~ManualDecorator manual link decorators}.\n\t *\n\t * Text attribute names in the model correspond to the entries in the {@link module:link/link~LinkConfig#decorators configuration}.\n\t * For every decorator configured, a model text attribute exists with the \"link\" prefix. For example, a `'linkMyDecorator'` attribute\n\t * corresponds to `'myDecorator'` in the configuration.\n\t *\n\t * To learn more about link decorators, check out the {@link module:link/link~LinkConfig#decorators `config.link.decorators`}\n\t * documentation.\n\t *\n\t * Here is how to manage decorator attributes with the link command:\n\t *\n\t *\t\tconst linkCommand = editor.commands.get( 'link' );\n\t *\n\t *\t\t// Adding a new decorator attribute.\n\t *\t\tlinkCommand.execute( 'http://example.com', {\n\t *\t\t\tlinkIsExternal: true\n\t *\t\t} );\n\t *\n\t *\t\t// Removing a decorator attribute from the selection.\n\t *\t\tlinkCommand.execute( 'http://example.com', {\n\t *\t\t\tlinkIsExternal: false\n\t *\t\t} );\n\t *\n\t *\t\t// Adding multiple decorator attributes at the same time.\n\t *\t\tlinkCommand.execute( 'http://example.com', {\n\t *\t\t\tlinkIsExternal: true,\n\t *\t\t\tlinkIsDownloadable: true,\n\t *\t\t} );\n\t *\n\t *\t\t// Removing and adding decorator attributes at the same time.\n\t *\t\tlinkCommand.execute( 'http://example.com', {\n\t *\t\t\tlinkIsExternal: false,\n\t *\t\t\tlinkFoo: true,\n\t *\t\t\tlinkIsDownloadable: false,\n\t *\t\t} );\n\t *\n\t * **Note**: If the decorator attribute name is not specified, its state remains untouched.\n\t *\n\t * **Note**: {@link module:link/unlinkcommand~UnlinkCommand#execute `UnlinkCommand#execute()`} removes all\n\t * decorator attributes.\n\t *\n\t * @fires execute\n\t * @param {String} href Link destination.\n\t * @param {Object} [manualDecoratorIds={}] The information about manual decorator attributes to be applied or removed upon execution.\n\t */\n\texecute( href, manualDecoratorIds = {} ) {\n\t\tconst model = this.editor.model;\n\t\tconst selection = model.document.selection;\n\t\t// Stores information about manual decorators to turn them on/off when command is applied.\n\t\tconst truthyManualDecorators = [];\n\t\tconst falsyManualDecorators = [];\n\n\t\tfor ( const name in manualDecoratorIds ) {\n\t\t\tif ( manualDecoratorIds[ name ] ) {\n\t\t\t\ttruthyManualDecorators.push( name );\n\t\t\t} else {\n\t\t\t\tfalsyManualDecorators.push( name );\n\t\t\t}\n\t\t}\n\n\t\tmodel.change( writer => {\n\t\t\t// If selection is collapsed then update selected link or insert new one at the place of caret.\n\t\t\tif ( selection.isCollapsed ) {\n\t\t\t\tconst position = selection.getFirstPosition();\n\n\t\t\t\t// When selection is inside text with `linkHref` attribute.\n\t\t\t\tif ( selection.hasAttribute( 'linkHref' ) ) {\n\t\t\t\t\t// Then update `linkHref` value.\n\t\t\t\t\tconst linkRange = findAttributeRange( position, 'linkHref', selection.getAttribute( 'linkHref' ), model );\n\n\t\t\t\t\twriter.setAttribute( 'linkHref', href, linkRange );\n\n\t\t\t\t\ttruthyManualDecorators.forEach( item => {\n\t\t\t\t\t\twriter.setAttribute( item, true, linkRange );\n\t\t\t\t\t} );\n\n\t\t\t\t\tfalsyManualDecorators.forEach( item => {\n\t\t\t\t\t\twriter.removeAttribute( item, linkRange );\n\t\t\t\t\t} );\n\n\t\t\t\t\t// Put the selection at the end of the updated link.\n\t\t\t\t\twriter.setSelection( writer.createPositionAfter( linkRange.end.nodeBefore ) );\n\t\t\t\t}\n\t\t\t\t// If not then insert text node with `linkHref` attribute in place of caret.\n\t\t\t\t// However, since selection is collapsed, attribute value will be used as data for text node.\n\t\t\t\t// So, if `href` is empty, do not create text node.\n\t\t\t\telse if ( href !== '' ) {\n\t\t\t\t\tconst attributes = toMap( selection.getAttributes() );\n\n\t\t\t\t\tattributes.set( 'linkHref', href );\n\n\t\t\t\t\ttruthyManualDecorators.forEach( item => {\n\t\t\t\t\t\tattributes.set( item, true );\n\t\t\t\t\t} );\n\n\t\t\t\t\tconst { end: positionAfter } = model.insertContent( writer.createText( href, attributes ), position );\n\n\t\t\t\t\t// Put the selection at the end of the inserted link.\n\t\t\t\t\t// Using end of range returned from insertContent in case nodes with the same attributes got merged.\n\t\t\t\t\twriter.setSelection( positionAfter );\n\t\t\t\t}\n\n\t\t\t\t// Remove the `linkHref` attribute and all link decorators from the selection.\n\t\t\t\t// It stops adding a new content into the link element.\n\t\t\t\t[ 'linkHref', ...truthyManualDecorators, ...falsyManualDecorators ].forEach( item => {\n\t\t\t\t\twriter.removeSelectionAttribute( item );\n\t\t\t\t} );\n\t\t\t} else {\n\t\t\t\t// If selection has non-collapsed ranges, we change attribute on nodes inside those ranges\n\t\t\t\t// omitting nodes where the `linkHref` attribute is disallowed.\n\t\t\t\tconst ranges = model.schema.getValidRanges( selection.getRanges(), 'linkHref' );\n\n\t\t\t\t// But for the first, check whether the `linkHref` attribute is allowed on selected blocks (e.g. the \"image\" element).\n\t\t\t\tconst allowedRanges = [];\n\n\t\t\t\tfor ( const element of selection.getSelectedBlocks() ) {\n\t\t\t\t\tif ( model.schema.checkAttribute( element, 'linkHref' ) ) {\n\t\t\t\t\t\tallowedRanges.push( writer.createRangeOn( element ) );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Ranges that accept the `linkHref` attribute. Since we will iterate over `allowedRanges`, let's clone it.\n\t\t\t\tconst rangesToUpdate = allowedRanges.slice();\n\n\t\t\t\t// For all selection ranges we want to check whether given range is inside an element that accepts the `linkHref` attribute.\n\t\t\t\t// If so, we don't want to propagate applying the attribute to its children.\n\t\t\t\tfor ( const range of ranges ) {\n\t\t\t\t\tif ( this._isRangeToUpdate( range, allowedRanges ) ) {\n\t\t\t\t\t\trangesToUpdate.push( range );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tfor ( const range of rangesToUpdate ) {\n\t\t\t\t\twriter.setAttribute( 'linkHref', href, range );\n\n\t\t\t\t\ttruthyManualDecorators.forEach( item => {\n\t\t\t\t\t\twriter.setAttribute( item, true, range );\n\t\t\t\t\t} );\n\n\t\t\t\t\tfalsyManualDecorators.forEach( item => {\n\t\t\t\t\t\twriter.removeAttribute( item, range );\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Provides information whether a decorator with a given name is present in the currently processed selection.\n\t *\n\t * @private\n\t * @param {String} decoratorName The name of the manual decorator used in the model\n\t * @returns {Boolean} The information whether a given decorator is currently present in the selection.\n\t */\n\t_getDecoratorStateFromModel( decoratorName ) {\n\t\tconst model = this.editor.model;\n\t\tconst doc = model.document;\n\n\t\tconst selectedElement = first( doc.selection.getSelectedBlocks() );\n\n\t\t// A check for the `LinkImage` plugin. If the selection contains an element, get values from the element.\n\t\t// Currently the selection reads attributes from text nodes only. See #7429 and #7465.\n\t\tif ( isImageAllowed( selectedElement, model.schema ) ) {\n\t\t\treturn selectedElement.getAttribute( decoratorName );\n\t\t}\n\n\t\treturn doc.selection.getAttribute( decoratorName );\n\t}\n\n\t/**\n\t * Checks whether specified `range` is inside an element that accepts the `linkHref` attribute.\n\t *\n\t * @private\n\t * @param {module:engine/view/range~Range} range A range to check.\n\t * @param {Array.<module:engine/view/range~Range>} allowedRanges An array of ranges created on elements where the attribute is accepted.\n\t * @returns {Boolean}\n\t */\n\t_isRangeToUpdate( range, allowedRanges ) {\n\t\tfor ( const allowedRange of allowedRanges ) {\n\t\t\t// A range is inside an element that will have the `linkHref` attribute. Do not modify its nodes.\n\t\t\tif ( allowedRange.containsRange( range ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n}\n"]}]}