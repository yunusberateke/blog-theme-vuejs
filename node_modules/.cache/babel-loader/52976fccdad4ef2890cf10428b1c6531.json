{"remainingRequest":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/babel-loader/lib/index.js!/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-dev-webpack-plugin/lib/translatesourceloader.js?{}!/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-engine/src/model/batch.js","dependencies":[{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-engine/src/model/batch.js","mtime":499162500000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-dev-webpack-plugin/lib/translatesourceloader.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyIGZyb20gIi9ob21lL2VrZWJlcmF0L1lhbmRleC5EaXNrL1Byb2plbGVyaW0vQmVuaW1Qcm9qZWxlcmltL3dlYnNpdGVtL3dlYnNpdGVtLXdlYi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlciI7CmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSAiL2hvbWUvZWtlYmVyYXQvWWFuZGV4LkRpc2svUHJvamVsZXJpbS9CZW5pbVByb2plbGVyaW0vd2Vic2l0ZW0vd2Vic2l0ZW0td2ViL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jbGFzc0NhbGxDaGVjayI7CmltcG9ydCBfY3JlYXRlQ2xhc3MgZnJvbSAiL2hvbWUvZWtlYmVyYXQvWWFuZGV4LkRpc2svUHJvamVsZXJpbS9CZW5pbVByb2plbGVyaW0vd2Vic2l0ZW0vd2Vic2l0ZW0td2ViL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jcmVhdGVDbGFzcyI7CgovKioKICogQGxpY2Vuc2UgQ29weXJpZ2h0IChjKSAyMDAzLTIwMjEsIENLU291cmNlIC0gRnJlZGVyaWNvIEtuYWJiZW4uIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiAqIEZvciBsaWNlbnNpbmcsIHNlZSBMSUNFTlNFLm1kIG9yIGh0dHBzOi8vY2tlZGl0b3IuY29tL2xlZ2FsL2NrZWRpdG9yLW9zcy1saWNlbnNlCiAqLwoKLyoqCiAqIEBtb2R1bGUgZW5naW5lL21vZGVsL2JhdGNoCiAqLwoKLyoqCiAqIEEgYmF0Y2ggaW5zdGFuY2UgZ3JvdXBzIG1vZGVsIGNoYW5nZXMgKHtAbGluayBtb2R1bGU6ZW5naW5lL21vZGVsL29wZXJhdGlvbi9vcGVyYXRpb25+T3BlcmF0aW9uIG9wZXJhdGlvbnN9KS4gQWxsIG9wZXJhdGlvbnMKICogZ3JvdXBlZCBpbiBhIHNpbmdsZSBiYXRjaCBjYW4gYmUgcmV2ZXJ0ZWQgdG9nZXRoZXIsIHNvIHlvdSBjYW4gYWxzbyB0aGluayBhYm91dCBhIGJhdGNoIGFzIG9mIGEgc2luZ2xlIHVuZG8gc3RlcC4gSWYgeW91IHdhbnQKICogdG8gZXh0ZW5kIGEgZ2l2ZW4gdW5kbyBzdGVwLCB5b3UgY2FuIGFkZCBtb3JlIGNoYW5nZXMgdG8gdGhlIGJhdGNoIHVzaW5nIHtAbGluayBtb2R1bGU6ZW5naW5lL21vZGVsL21vZGVsfk1vZGVsI2VucXVldWVDaGFuZ2V9OgogKgogKgkJbW9kZWwuZW5xdWV1ZUNoYW5nZSggYmF0Y2gsIHdyaXRlciA9PiB7CiAqCQkJd3JpdGVyLmluc2VydFRleHQoICdmb28nLCBwYXJhZ3JhcGgsICdlbmQnICk7CiAqCQl9ICk7CiAqCiAqIEBzZWUgbW9kdWxlOmVuZ2luZS9tb2RlbC9tb2RlbH5Nb2RlbCNlbnF1ZXVlQ2hhbmdlCiAqIEBzZWUgbW9kdWxlOmVuZ2luZS9tb2RlbC9tb2RlbH5Nb2RlbCNjaGFuZ2UKICovCnZhciBCYXRjaCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7CiAgLyoqCiAgICogQ3JlYXRlcyBhIGJhdGNoIGluc3RhbmNlLgogICAqCiAgICogQHNlZSBtb2R1bGU6ZW5naW5lL21vZGVsL21vZGVsfk1vZGVsI2VucXVldWVDaGFuZ2UKICAgKiBAc2VlIG1vZHVsZTplbmdpbmUvbW9kZWwvbW9kZWx+TW9kZWwjY2hhbmdlCiAgICogQHBhcmFtIHsndHJhbnNwYXJlbnQnfCdkZWZhdWx0J30gW3R5cGU9J2RlZmF1bHQnXSBUaGUgdHlwZSBvZiB0aGUgYmF0Y2guCiAgICovCiAgZnVuY3Rpb24gQmF0Y2goKSB7CiAgICB2YXIgdHlwZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogJ2RlZmF1bHQnOwoKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBCYXRjaCk7CgogICAgLyoqCiAgICAgKiBBbiBhcnJheSBvZiBvcGVyYXRpb25zIHRoYXQgY29tcG9zZSB0aGlzIGJhdGNoLgogICAgICoKICAgICAqIEByZWFkb25seQogICAgICogQHR5cGUge0FycmF5Ljxtb2R1bGU6ZW5naW5lL21vZGVsL29wZXJhdGlvbi9vcGVyYXRpb25+T3BlcmF0aW9uPn0KICAgICAqLwogICAgdGhpcy5vcGVyYXRpb25zID0gW107CiAgICAvKioKICAgICAqIFRoZSB0eXBlIG9mIHRoZSBiYXRjaC4KICAgICAqCiAgICAgKiBJdCBjYW4gYmUgb25lIG9mIHRoZSBmb2xsb3dpbmcgdmFsdWVzOgogICAgICogKiBgJ2RlZmF1bHQnYCAmbmRhc2g7IEFsbCAibm9ybWFsIiBiYXRjaGVzLiBUaGlzIGlzIHRoZSBtb3N0IGNvbW1vbmx5IHVzZWQgdHlwZS4KICAgICAqICogYCd0cmFuc3BhcmVudCdgICZuZGFzaDsgQSBiYXRjaCB0aGF0IHNob3VsZCBiZSBpZ25vcmVkIGJ5IG90aGVyIGZlYXR1cmVzLCBpLmUuIGFuIGluaXRpYWwgYmF0Y2ggb3IgY29sbGFib3JhdGl2ZSBlZGl0aW5nCiAgICAgKiBjaGFuZ2VzLgogICAgICoKICAgICAqIEByZWFkb25seQogICAgICogQHR5cGUgeyd0cmFuc3BhcmVudCd8J2RlZmF1bHQnfQogICAgICovCgogICAgdGhpcy50eXBlID0gdHlwZTsKICB9CiAgLyoqCiAgICogUmV0dXJucyB0aGUgYmFzZSB2ZXJzaW9uIG9mIHRoaXMgYmF0Y2gsIHdoaWNoIGlzIGVxdWFsIHRvIHRoZSBiYXNlIHZlcnNpb24gb2YgdGhlIGZpcnN0IG9wZXJhdGlvbiBpbiB0aGUgYmF0Y2guCiAgICogSWYgdGhlcmUgYXJlIG5vIG9wZXJhdGlvbnMgaW4gdGhlIGJhdGNoIG9yIG5laXRoZXIgb3BlcmF0aW9uIGhhcyB0aGUgYmFzZSB2ZXJzaW9uIHNldCwgaXQgcmV0dXJucyBgbnVsbGAuCiAgICoKICAgKiBAcmVhZG9ubHkKICAgKiBAdHlwZSB7TnVtYmVyfG51bGx9CiAgICovCgoKICBfY3JlYXRlQ2xhc3MoQmF0Y2gsIFt7CiAgICBrZXk6ICJiYXNlVmVyc2lvbiIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgdmFyIF9pdGVyYXRvciA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKHRoaXMub3BlcmF0aW9ucyksCiAgICAgICAgICBfc3RlcDsKCiAgICAgIHRyeSB7CiAgICAgICAgZm9yIChfaXRlcmF0b3IucygpOyAhKF9zdGVwID0gX2l0ZXJhdG9yLm4oKSkuZG9uZTspIHsKICAgICAgICAgIHZhciBvcCA9IF9zdGVwLnZhbHVlOwoKICAgICAgICAgIGlmIChvcC5iYXNlVmVyc2lvbiAhPT0gbnVsbCkgewogICAgICAgICAgICByZXR1cm4gb3AuYmFzZVZlcnNpb247CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9IGNhdGNoIChlcnIpIHsKICAgICAgICBfaXRlcmF0b3IuZShlcnIpOwogICAgICB9IGZpbmFsbHkgewogICAgICAgIF9pdGVyYXRvci5mKCk7CiAgICAgIH0KCiAgICAgIHJldHVybiBudWxsOwogICAgfQogICAgLyoqCiAgICAgKiBBZGRzIGFuIG9wZXJhdGlvbiB0byB0aGUgYmF0Y2ggaW5zdGFuY2UuCiAgICAgKgogICAgICogQHBhcmFtIHttb2R1bGU6ZW5naW5lL21vZGVsL29wZXJhdGlvbi9vcGVyYXRpb25+T3BlcmF0aW9ufSBvcGVyYXRpb24gQW4gb3BlcmF0aW9uIHRvIGFkZC4KICAgICAqIEByZXR1cm5zIHttb2R1bGU6ZW5naW5lL21vZGVsL29wZXJhdGlvbi9vcGVyYXRpb25+T3BlcmF0aW9ufSBUaGUgYWRkZWQgb3BlcmF0aW9uLgogICAgICovCgogIH0sIHsKICAgIGtleTogImFkZE9wZXJhdGlvbiIsCiAgICB2YWx1ZTogZnVuY3Rpb24gYWRkT3BlcmF0aW9uKG9wZXJhdGlvbikgewogICAgICBvcGVyYXRpb24uYmF0Y2ggPSB0aGlzOwogICAgICB0aGlzLm9wZXJhdGlvbnMucHVzaChvcGVyYXRpb24pOwogICAgICByZXR1cm4gb3BlcmF0aW9uOwogICAgfQogIH1dKTsKCiAgcmV0dXJuIEJhdGNoOwp9KCk7CgpleHBvcnQgeyBCYXRjaCBhcyBkZWZhdWx0IH07"},{"version":3,"sources":["/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-engine/src/model/batch.js"],"names":["Batch","type","operations","op","baseVersion","operation","batch","push"],"mappings":";;;;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACqBA,K;AACpB;AACD;AACA;AACA;AACA;AACA;AACA;AACC,mBAAgC;AAAA,QAAnBC,IAAmB,uEAAZ,SAAY;;AAAA;;AAC/B;AACF;AACA;AACA;AACA;AACA;AACE,SAAKC,UAAL,GAAkB,EAAlB;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,SAAKD,IAAL,GAAYA,IAAZ;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;;;;;SACC,eAAkB;AAAA,iDACC,KAAKC,UADN;AAAA;;AAAA;AACjB,4DAAoC;AAAA,cAAxBC,EAAwB;;AACnC,cAAKA,EAAE,CAACC,WAAH,KAAmB,IAAxB,EAA+B;AAC9B,mBAAOD,EAAE,CAACC,WAAV;AACA;AACD;AALgB;AAAA;AAAA;AAAA;AAAA;;AAOjB,aAAO,IAAP;AACA;AAED;AACD;AACA;AACA;AACA;AACA;;;;WACC,sBAAcC,SAAd,EAA0B;AACzBA,MAAAA,SAAS,CAACC,KAAV,GAAkB,IAAlB;AACA,WAAKJ,UAAL,CAAgBK,IAAhB,CAAsBF,SAAtB;AAEA,aAAOA,SAAP;AACA;;;;;;SA3DmBL,K","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/batch\n */\n\n/**\n * A batch instance groups model changes ({@link module:engine/model/operation/operation~Operation operations}). All operations\n * grouped in a single batch can be reverted together, so you can also think about a batch as of a single undo step. If you want\n * to extend a given undo step, you can add more changes to the batch using {@link module:engine/model/model~Model#enqueueChange}:\n *\n *\t\tmodel.enqueueChange( batch, writer => {\n *\t\t\twriter.insertText( 'foo', paragraph, 'end' );\n *\t\t} );\n *\n * @see module:engine/model/model~Model#enqueueChange\n * @see module:engine/model/model~Model#change\n */\nexport default class Batch {\n\t/**\n\t * Creates a batch instance.\n\t *\n\t * @see module:engine/model/model~Model#enqueueChange\n\t * @see module:engine/model/model~Model#change\n\t * @param {'transparent'|'default'} [type='default'] The type of the batch.\n\t */\n\tconstructor( type = 'default' ) {\n\t\t/**\n\t\t * An array of operations that compose this batch.\n\t\t *\n\t\t * @readonly\n\t\t * @type {Array.<module:engine/model/operation/operation~Operation>}\n\t\t */\n\t\tthis.operations = [];\n\n\t\t/**\n\t\t * The type of the batch.\n\t\t *\n\t\t * It can be one of the following values:\n\t\t * * `'default'` &ndash; All \"normal\" batches. This is the most commonly used type.\n\t\t * * `'transparent'` &ndash; A batch that should be ignored by other features, i.e. an initial batch or collaborative editing\n\t\t * changes.\n\t\t *\n\t\t * @readonly\n\t\t * @type {'transparent'|'default'}\n\t\t */\n\t\tthis.type = type;\n\t}\n\n\t/**\n\t * Returns the base version of this batch, which is equal to the base version of the first operation in the batch.\n\t * If there are no operations in the batch or neither operation has the base version set, it returns `null`.\n\t *\n\t * @readonly\n\t * @type {Number|null}\n\t */\n\tget baseVersion() {\n\t\tfor ( const op of this.operations ) {\n\t\t\tif ( op.baseVersion !== null ) {\n\t\t\t\treturn op.baseVersion;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Adds an operation to the batch instance.\n\t *\n\t * @param {module:engine/model/operation/operation~Operation} operation An operation to add.\n\t * @returns {module:engine/model/operation/operation~Operation} The added operation.\n\t */\n\taddOperation( operation ) {\n\t\toperation.batch = this;\n\t\tthis.operations.push( operation );\n\n\t\treturn operation;\n\t}\n}\n"]}]}