{"remainingRequest":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/babel-loader/lib/index.js!/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-dev-webpack-plugin/lib/translatesourceloader.js?{}!/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-typing/src/utils/getlasttextline.js","dependencies":[{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-typing/src/utils/getlasttextline.js","mtime":499162500000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-dev-webpack-plugin/lib/translatesourceloader.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkucmVkdWNlLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZnJvbS5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5pdGVyYXRvci5qcyI7CgovKioKICogQGxpY2Vuc2UgQ29weXJpZ2h0IChjKSAyMDAzLTIwMjEsIENLU291cmNlIC0gRnJlZGVyaWNvIEtuYWJiZW4uIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiAqIEZvciBsaWNlbnNpbmcsIHNlZSBMSUNFTlNFLm1kIG9yIGh0dHBzOi8vY2tlZGl0b3IuY29tL2xlZ2FsL2NrZWRpdG9yLW9zcy1saWNlbnNlCiAqLwoKLyoqCiAqIEBtb2R1bGUgdHlwaW5nL3V0aWxzL2dldGxhc3R0ZXh0bGluZQogKi8KCi8qKgogKiBSZXR1cm5zIHRoZSBsYXN0IHRleHQgbGluZSBmcm9tIHRoZSBnaXZlbiByYW5nZS4KICoKICogIlRoZSBsYXN0IHRleHQgbGluZSIgaXMgdW5kZXJzdG9vZCBhcyB0ZXh0IChmcm9tIG9uZSBvciBtb3JlIHRleHQgbm9kZXMpIHdoaWNoIGlzIGxpbWl0ZWQgZWl0aGVyIGJ5IGEgcGFyZW50IGJsb2NrCiAqIG9yIGJ5IGlubGluZSBlbGVtZW50cyAoZS5nLiBgPHNvZnRCcmVhaz5gKS4KICoKICoJCWNvbnN0IHJhbmdlVG9DaGVjayA9IG1vZGVsLmNyZWF0ZVJhbmdlKAogKgkJCW1vZGVsLmNyZWF0ZVBvc2l0aW9uQXQoIHBhcmFncmFwaCwgMCApLAogKgkJCW1vZGVsLmNyZWF0ZVBvc2l0aW9uQXQoIHBhcmFncmFwaCwgJ2VuZCcgKQogKgkJKTsKICoKICoJCWNvbnN0IHsgdGV4dCwgcmFuZ2UgfSA9IGdldExhc3RUZXh0TGluZSggcmFuZ2VUb0NoZWNrLCBtb2RlbCApOwogKgogKiBGb3IgbW9kZWwgYmVsb3csIHRoZSByZXR1cm5lZCBgdGV4dGAgd2lsbCBiZSAiRm9vIGJhciBiYXoiIGFuZCBgcmFuZ2VgIHdpbGwgYmUgc2V0IG9uIHdob2xlIGA8cGFyYWdyYXBoPmAgY29udGVudDoKICoKICoJCTxwYXJhZ3JhcGg+Rm9vIGJhciBiYXo8cGFyYWdyYXBoPgogKgogKiBIb3dldmVyLCBpbiBiZWxvdyBjYXNlLCBgdGV4dGAgd2lsbCBiZSBzZXQgdG8gImJheiIgYW5kIGByYW5nZWAgd2lsbCBiZSBzZXQgb25seSBvbiAiYmF6Ii4KICoKICoJCTxwYXJhZ3JhcGg+Rm9vPHNvZnRCcmVhaz48L3NvZnRCcmVhaz5iYXI8c29mdEJyZWFrPjwvc29mdEJyZWFrPmJhejxwYXJhZ3JhcGg+CiAqCiAqIEBwcm90ZWN0ZWQKICogQHBhcmFtIHttb2R1bGU6ZW5naW5lL21vZGVsL3JhbmdlflJhbmdlfSByYW5nZQogKiBAcGFyYW0ge21vZHVsZTplbmdpbmUvbW9kZWwvbW9kZWx+TW9kZWx9IG1vZGVsCiAqIEByZXR1cm5zIHttb2R1bGU6dHlwaW5nL3V0aWxzL2dldGxhc3R0ZXh0bGluZX5MYXN0VGV4dExpbmVEYXRhfQogKi8KZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0TGFzdFRleHRMaW5lKHJhbmdlLCBtb2RlbCkgewogIHZhciBzdGFydCA9IHJhbmdlLnN0YXJ0OwogIHZhciB0ZXh0ID0gQXJyYXkuZnJvbShyYW5nZS5nZXRJdGVtcygpKS5yZWR1Y2UoZnVuY3Rpb24gKHJhbmdlVGV4dCwgbm9kZSkgewogICAgLy8gVHJpbSB0ZXh0IHRvIGEgbGFzdCBvY2N1cnJlbmNlIG9mIGFuIGlubGluZSBlbGVtZW50IGFuZCB1cGRhdGUgcmFuZ2Ugc3RhcnQuCiAgICBpZiAoIShub2RlLmlzKCckdGV4dCcpIHx8IG5vZGUuaXMoJyR0ZXh0UHJveHknKSkpIHsKICAgICAgc3RhcnQgPSBtb2RlbC5jcmVhdGVQb3NpdGlvbkFmdGVyKG5vZGUpOwogICAgICByZXR1cm4gJyc7CiAgICB9CgogICAgcmV0dXJuIHJhbmdlVGV4dCArIG5vZGUuZGF0YTsKICB9LCAnJyk7CiAgcmV0dXJuIHsKICAgIHRleHQ6IHRleHQsCiAgICByYW5nZTogbW9kZWwuY3JlYXRlUmFuZ2Uoc3RhcnQsIHJhbmdlLmVuZCkKICB9Owp9Ci8qKgogKiBUaGUgdmFsdWUgcmV0dXJuZWQgYnkge0BsaW5rIG1vZHVsZTp0eXBpbmcvdXRpbHMvZ2V0bGFzdHRleHRsaW5lfmdldExhc3RUZXh0TGluZX0uCiAqCiAqIEB0eXBlZGVmIHtPYmplY3R9IG1vZHVsZTp0eXBpbmcvdXRpbHMvZ2V0bGFzdHRleHRsaW5lfkxhc3RUZXh0TGluZURhdGEKICoKICogQHByb3BlcnR5IHtTdHJpbmd9IHRleHQgVGhlIHRleHQgZnJvbSB0aGUgdGV4dCBub2RlcyBpbiB0aGUgbGFzdCB0ZXh0IGxpbmUuCiAqIEBwcm9wZXJ0eSB7bW9kdWxlOmVuZ2luZS9tb2RlbC9yYW5nZX5SYW5nZX0gcmFuZ2UgVGhlIHJhbmdlIHNldCBvbiB0aGUgdGV4dCBub2RlcyBpbiB0aGUgbGFzdCB0ZXh0IGxpbmUuCiAqLw=="},{"version":3,"sources":["/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-typing/src/utils/getlasttextline.js"],"names":["getLastTextLine","range","model","start","text","Array","from","getItems","reduce","rangeText","node","is","createPositionAfter","data","createRange","end"],"mappings":";;;;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASA,eAAT,CAA0BC,KAA1B,EAAiCC,KAAjC,EAAyC;AACvD,MAAIC,KAAK,GAAGF,KAAK,CAACE,KAAlB;AAEA,MAAMC,IAAI,GAAGC,KAAK,CAACC,IAAN,CAAYL,KAAK,CAACM,QAAN,EAAZ,EAA+BC,MAA/B,CAAuC,UAAEC,SAAF,EAAaC,IAAb,EAAuB;AAC1E;AACA,QAAK,EAAGA,IAAI,CAACC,EAAL,CAAS,OAAT,KAAsBD,IAAI,CAACC,EAAL,CAAS,YAAT,CAAzB,CAAL,EAA0D;AACzDR,MAAAA,KAAK,GAAGD,KAAK,CAACU,mBAAN,CAA2BF,IAA3B,CAAR;AAEA,aAAO,EAAP;AACA;;AAED,WAAOD,SAAS,GAAGC,IAAI,CAACG,IAAxB;AACA,GATY,EASV,EATU,CAAb;AAWA,SAAO;AAAET,IAAAA,IAAI,EAAJA,IAAF;AAAQH,IAAAA,KAAK,EAAEC,KAAK,CAACY,WAAN,CAAmBX,KAAnB,EAA0BF,KAAK,CAACc,GAAhC;AAAf,GAAP;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module typing/utils/getlasttextline\n */\n\n/**\n * Returns the last text line from the given range.\n *\n * \"The last text line\" is understood as text (from one or more text nodes) which is limited either by a parent block\n * or by inline elements (e.g. `<softBreak>`).\n *\n *\t\tconst rangeToCheck = model.createRange(\n *\t\t\tmodel.createPositionAt( paragraph, 0 ),\n *\t\t\tmodel.createPositionAt( paragraph, 'end' )\n *\t\t);\n *\n *\t\tconst { text, range } = getLastTextLine( rangeToCheck, model );\n *\n * For model below, the returned `text` will be \"Foo bar baz\" and `range` will be set on whole `<paragraph>` content:\n *\n *\t\t<paragraph>Foo bar baz<paragraph>\n *\n * However, in below case, `text` will be set to \"baz\" and `range` will be set only on \"baz\".\n *\n *\t\t<paragraph>Foo<softBreak></softBreak>bar<softBreak></softBreak>baz<paragraph>\n *\n * @protected\n * @param {module:engine/model/range~Range} range\n * @param {module:engine/model/model~Model} model\n * @returns {module:typing/utils/getlasttextline~LastTextLineData}\n */\nexport default function getLastTextLine( range, model ) {\n\tlet start = range.start;\n\n\tconst text = Array.from( range.getItems() ).reduce( ( rangeText, node ) => {\n\t\t// Trim text to a last occurrence of an inline element and update range start.\n\t\tif ( !( node.is( '$text' ) || node.is( '$textProxy' ) ) ) {\n\t\t\tstart = model.createPositionAfter( node );\n\n\t\t\treturn '';\n\t\t}\n\n\t\treturn rangeText + node.data;\n\t}, '' );\n\n\treturn { text, range: model.createRange( start, range.end ) };\n}\n\n/**\n * The value returned by {@link module:typing/utils/getlasttextline~getLastTextLine}.\n *\n * @typedef {Object} module:typing/utils/getlasttextline~LastTextLineData\n *\n * @property {String} text The text from the text nodes in the last text line.\n * @property {module:engine/model/range~Range} range The range set on the text nodes in the last text line.\n */\n"]}]}