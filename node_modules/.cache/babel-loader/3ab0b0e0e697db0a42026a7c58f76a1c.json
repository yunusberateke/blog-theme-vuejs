{"remainingRequest":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/babel-loader/lib/index.js!/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-dev-webpack-plugin/lib/translatesourceloader.js?{}!/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-core/src/context.js","dependencies":[{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-core/src/context.js","mtime":499162500000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-dev-webpack-plugin/lib/translatesourceloader.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyIGZyb20gIi9ob21lL2VrZWJlcmF0L1lhbmRleC5EaXNrL1Byb2plbGVyaW0vQmVuaW1Qcm9qZWxlcmltL3dlYnNpdGVtL3dlYnNpdGVtLXdlYi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlciI7CmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSAiL2hvbWUvZWtlYmVyYXQvWWFuZGV4LkRpc2svUHJvamVsZXJpbS9CZW5pbVByb2plbGVyaW0vd2Vic2l0ZW0vd2Vic2l0ZW0td2ViL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jbGFzc0NhbGxDaGVjayI7CmltcG9ydCBfY3JlYXRlQ2xhc3MgZnJvbSAiL2hvbWUvZWtlYmVyYXQvWWFuZGV4LkRpc2svUHJvamVsZXJpbS9CZW5pbVByb2plbGVyaW0vd2Vic2l0ZW0vd2Vic2l0ZW0td2ViL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jcmVhdGVDbGFzcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmNvbmNhdC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC50by1zdHJpbmcuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuaXRlcmF0b3IuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy93ZWIuZG9tLWNvbGxlY3Rpb25zLml0ZXJhdG9yLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZnJvbS5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmluY2x1ZGVzLmpzIjsKCi8qKgogKiBAbGljZW5zZSBDb3B5cmlnaHQgKGMpIDIwMDMtMjAyMSwgQ0tTb3VyY2UgLSBGcmVkZXJpY28gS25hYmJlbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KICogRm9yIGxpY2Vuc2luZywgc2VlIExJQ0VOU0UubWQgb3IgaHR0cHM6Ly9ja2VkaXRvci5jb20vbGVnYWwvY2tlZGl0b3Itb3NzLWxpY2Vuc2UKICovCgovKioKICogQG1vZHVsZSBjb3JlL2NvbnRleHQKICovCmltcG9ydCBDb25maWcgZnJvbSAnQGNrZWRpdG9yL2NrZWRpdG9yNS11dGlscy9zcmMvY29uZmlnJzsKaW1wb3J0IENvbGxlY3Rpb24gZnJvbSAnQGNrZWRpdG9yL2NrZWRpdG9yNS11dGlscy9zcmMvY29sbGVjdGlvbic7CmltcG9ydCBQbHVnaW5Db2xsZWN0aW9uIGZyb20gJy4vcGx1Z2luY29sbGVjdGlvbic7CmltcG9ydCBMb2NhbGUgZnJvbSAnQGNrZWRpdG9yL2NrZWRpdG9yNS11dGlscy9zcmMvbG9jYWxlJzsKaW1wb3J0IENLRWRpdG9yRXJyb3IgZnJvbSAnQGNrZWRpdG9yL2NrZWRpdG9yNS11dGlscy9zcmMvY2tlZGl0b3JlcnJvcic7Ci8qKgogKiBQcm92aWRlcyBhIGNvbW1vbiwgaGlnaGVyLWxldmVsIGVudmlyb25tZW50IGZvciBzb2x1dGlvbnMgdGhhdCB1c2UgbXVsdGlwbGUge0BsaW5rIG1vZHVsZTpjb3JlL2VkaXRvci9lZGl0b3J+RWRpdG9yIGVkaXRvcnN9CiAqIG9yIHBsdWdpbnMgdGhhdCB3b3JrIG91dHNpZGUgdGhlIGVkaXRvci4gVXNlIGl0IGluc3RlYWQgb2Yge0BsaW5rIG1vZHVsZTpjb3JlL2VkaXRvci9lZGl0b3J+RWRpdG9yLmNyZWF0ZSBgRWRpdG9yLmNyZWF0ZSgpYH0KICogaW4gYWR2YW5jZWQgYXBwbGljYXRpb24gaW50ZWdyYXRpb25zLgogKgogKiBBbGwgY29uZmlndXJhdGlvbiBvcHRpb25zIHBhc3NlZCB0byBhIGNvbnRleHQgd2lsbCBiZSB1c2VkIGFzIGRlZmF1bHQgb3B0aW9ucyBmb3IgZWRpdG9yIGluc3RhbmNlcyBpbml0aWFsaXplZCBpbiB0aGF0IGNvbnRleHQuCiAqCiAqIHtAbGluayBtb2R1bGU6Y29yZS9jb250ZXh0cGx1Z2lufkNvbnRleHRQbHVnaW4gQ29udGV4dCBwbHVnaW5zfSBwYXNzZWQgdG8gYSBjb250ZXh0IGluc3RhbmNlIHdpbGwgYmUgc2hhcmVkIGFtb25nIGFsbAogKiBlZGl0b3IgaW5zdGFuY2VzIGluaXRpYWxpemVkIGluIHRoaXMgY29udGV4dC4gVGhlc2Ugd2lsbCBiZSB0aGUgc2FtZSBwbHVnaW4gaW5zdGFuY2VzIGZvciBhbGwgdGhlIGVkaXRvcnMuCiAqCiAqICoqTm90ZToqKiBUaGUgY29udGV4dCBjYW4gb25seSBiZSBpbml0aWFsaXplZCB3aXRoIHtAbGluayBtb2R1bGU6Y29yZS9jb250ZXh0cGx1Z2lufkNvbnRleHRQbHVnaW4gY29udGV4dCBwbHVnaW5zfQogKiAoZS5nLiBbY29tbWVudHNdKGh0dHBzOi8vY2tlZGl0b3IuY29tL2NvbGxhYm9yYXRpb24vY29tbWVudHMvKSkuIFJlZ3VsYXIge0BsaW5rIG1vZHVsZTpjb3JlL3BsdWdpbn5QbHVnaW4gcGx1Z2luc30gcmVxdWlyZSBhbgogKiBlZGl0b3IgaW5zdGFuY2UgdG8gd29yayBhbmQgY2Fubm90IGJlIGFkZGVkIHRvIGEgY29udGV4dC4KICoKICogKipOb3RlOioqIFlvdSBjYW4gYWRkIGEgY29udGV4dCBwbHVnaW4gdG8gYW4gZWRpdG9yIGluc3RhbmNlLCB0aG91Z2guCiAqCiAqIElmIHlvdSBhcmUgdXNpbmcgbXVsdGlwbGUgZWRpdG9yIGluc3RhbmNlcyBvbiBvbmUgcGFnZSBhbmQgdXNlIGFueSBjb250ZXh0IHBsdWdpbnMsIGNyZWF0ZSBhIGNvbnRleHQgdG8gc2hhcmUgdGhlIGNvbmZpZ3VyYXRpb24gYW5kCiAqIHBsdWdpbnMgYW1vbmcgdGhlc2UgZWRpdG9ycy4gU29tZSBwbHVnaW5zIHdpbGwgdXNlIHRoZSBpbmZvcm1hdGlvbiBhYm91dCBhbGwgZXhpc3RpbmcgZWRpdG9ycyB0byBiZXR0ZXIgaW50ZWdyYXRlIGJldHdlZW4gdGhlbS4KICoKICogSWYgeW91IGFyZSB1c2luZyBwbHVnaW5zIHRoYXQgZG8gbm90IHJlcXVpcmUgYW4gZWRpdG9yIHRvIHdvcmsgKGUuZy4gW2NvbW1lbnRzXShodHRwczovL2NrZWRpdG9yLmNvbS9jb2xsYWJvcmF0aW9uL2NvbW1lbnRzLykpLAogKiBlbmFibGUgYW5kIGNvbmZpZ3VyZSB0aGVtIHVzaW5nIHRoZSBjb250ZXh0LgogKgogKiBJZiB5b3UgYXJlIHVzaW5nIG9ubHkgYSBzaW5nbGUgZWRpdG9yIG9uIGVhY2ggcGFnZSwgdXNlIHtAbGluayBtb2R1bGU6Y29yZS9lZGl0b3IvZWRpdG9yfkVkaXRvci5jcmVhdGUgYEVkaXRvci5jcmVhdGUoKWB9IGluc3RlYWQuCiAqIEluIHN1Y2ggY2FzZSwgYSBjb250ZXh0IGluc3RhbmNlIHdpbGwgYmUgY3JlYXRlZCBieSB0aGUgZWRpdG9yIGluc3RhbmNlIGluIGEgdHJhbnNwYXJlbnQgd2F5LgogKgogKiBTZWUge0BsaW5rIG1vZHVsZTpjb3JlL2NvbnRleHR+Q29udGV4dC5jcmVhdGUgYENvbnRleHQuY3JlYXRlKClgfSBmb3IgdXNhZ2UgZXhhbXBsZXMuCiAqLwoKdmFyIENvbnRleHQgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogIC8qKgogICAqIENyZWF0ZXMgYSBjb250ZXh0IGluc3RhbmNlIHdpdGggYSBnaXZlbiBjb25maWd1cmF0aW9uLgogICAqCiAgICogVXN1YWxseSBub3QgdG8gYmUgdXNlZCBkaXJlY3RseS4gU2VlIHRoZSBzdGF0aWMge0BsaW5rIG1vZHVsZTpjb3JlL2NvbnRleHR+Q29udGV4dC5jcmVhdGUgYGNyZWF0ZSgpYH0gbWV0aG9kLgogICAqCiAgICogQHBhcmFtIHtPYmplY3R9IFtjb25maWc9e31dIFRoZSBjb250ZXh0IGNvbmZpZ3VyYXRpb24uCiAgICovCiAgZnVuY3Rpb24gQ29udGV4dChjb25maWcpIHsKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDb250ZXh0KTsKCiAgICAvKioKICAgICAqIFN0b3JlcyBhbGwgdGhlIGNvbmZpZ3VyYXRpb25zIHNwZWNpZmljIHRvIHRoaXMgY29udGV4dCBpbnN0YW5jZS4KICAgICAqCiAgICAgKiBAcmVhZG9ubHkKICAgICAqIEB0eXBlIHttb2R1bGU6dXRpbHMvY29uZmlnfkNvbmZpZ30KICAgICAqLwogICAgdGhpcy5jb25maWcgPSBuZXcgQ29uZmlnKGNvbmZpZywgdGhpcy5jb25zdHJ1Y3Rvci5kZWZhdWx0Q29uZmlnKTsKICAgIHZhciBhdmFpbGFibGVQbHVnaW5zID0gdGhpcy5jb25zdHJ1Y3Rvci5idWlsdGluUGx1Z2luczsKICAgIHRoaXMuY29uZmlnLmRlZmluZSgncGx1Z2lucycsIGF2YWlsYWJsZVBsdWdpbnMpOwogICAgLyoqCiAgICAgKiBUaGUgcGx1Z2lucyBsb2FkZWQgYW5kIGluIHVzZSBieSB0aGlzIGNvbnRleHQgaW5zdGFuY2UuCiAgICAgKgogICAgICogQHJlYWRvbmx5CiAgICAgKiBAdHlwZSB7bW9kdWxlOmNvcmUvcGx1Z2luY29sbGVjdGlvbn5QbHVnaW5Db2xsZWN0aW9ufQogICAgICovCgogICAgdGhpcy5wbHVnaW5zID0gbmV3IFBsdWdpbkNvbGxlY3Rpb24odGhpcywgYXZhaWxhYmxlUGx1Z2lucyk7CiAgICB2YXIgbGFuZ3VhZ2VDb25maWcgPSB0aGlzLmNvbmZpZy5nZXQoJ2xhbmd1YWdlJykgfHwge307CiAgICAvKioKICAgICAqIEByZWFkb25seQogICAgICogQHR5cGUge21vZHVsZTp1dGlscy9sb2NhbGV+TG9jYWxlfQogICAgICovCgogICAgdGhpcy5sb2NhbGUgPSBuZXcgTG9jYWxlKHsKICAgICAgdWlMYW5ndWFnZTogdHlwZW9mIGxhbmd1YWdlQ29uZmlnID09PSAnc3RyaW5nJyA/IGxhbmd1YWdlQ29uZmlnIDogbGFuZ3VhZ2VDb25maWcudWksCiAgICAgIGNvbnRlbnRMYW5ndWFnZTogdGhpcy5jb25maWcuZ2V0KCdsYW5ndWFnZS5jb250ZW50JykKICAgIH0pOwogICAgLyoqCiAgICAgKiBTaG9ydGhhbmQgZm9yIHtAbGluayBtb2R1bGU6dXRpbHMvbG9jYWxlfkxvY2FsZSN0fS4KICAgICAqCiAgICAgKiBAc2VlIG1vZHVsZTp1dGlscy9sb2NhbGV+TG9jYWxlI3QKICAgICAqIEBtZXRob2QgI3QKICAgICAqLwoKICAgIHRoaXMudCA9IHRoaXMubG9jYWxlLnQ7CiAgICAvKioKICAgICAqIEEgbGlzdCBvZiBlZGl0b3JzIHRoYXQgdGhpcyBjb250ZXh0IGluc3RhbmNlIGlzIGluamVjdGVkIHRvLgogICAgICoKICAgICAqIEByZWFkb25seQogICAgICogQHR5cGUge21vZHVsZTp1dGlscy9jb2xsZWN0aW9ufkNvbGxlY3Rpb259CiAgICAgKi8KCiAgICB0aGlzLmVkaXRvcnMgPSBuZXcgQ29sbGVjdGlvbigpOwogICAgLyoqCiAgICAgKiBSZWZlcmVuY2UgdG8gdGhlIGVkaXRvciB3aGljaCBjcmVhdGVkIHRoZSBjb250ZXh0LgogICAgICogTnVsbCB3aGVuIHRoZSBjb250ZXh0IHdhcyBjcmVhdGVkIG91dHNpZGUgb2YgdGhlIGVkaXRvci4KICAgICAqCiAgICAgKiBJdCBpcyB1c2VkIHRvIGRlc3Ryb3kgdGhlIGNvbnRleHQgd2hlbiByZW1vdmluZyB0aGUgZWRpdG9yIHRoYXQgaGFzIGNyZWF0ZWQgdGhlIGNvbnRleHQuCiAgICAgKgogICAgICogQHByaXZhdGUKICAgICAqIEB0eXBlIHttb2R1bGU6Y29yZS9lZGl0b3IvZWRpdG9yfkVkaXRvcnxudWxsfQogICAgICovCgogICAgdGhpcy5fY29udGV4dE93bmVyID0gbnVsbDsKICB9CiAgLyoqCiAgICogTG9hZHMgYW5kIGluaXRpYWxpemVzIHBsdWdpbnMgc3BlY2lmaWVkIGluIHRoZSBjb25maWd1cmF0aW9uLgogICAqCiAgICogQHJldHVybnMge1Byb21pc2UuPG1vZHVsZTpjb3JlL3BsdWdpbn5Mb2FkZWRQbHVnaW5zPn0gQSBwcm9taXNlIHdoaWNoIHJlc29sdmVzCiAgICogb25jZSB0aGUgaW5pdGlhbGl6YXRpb24gaXMgY29tcGxldGVkLCBwcm92aWRpbmcgYW4gYXJyYXkgb2YgbG9hZGVkIHBsdWdpbnMuCiAgICovCgoKICBfY3JlYXRlQ2xhc3MoQ29udGV4dCwgW3sKICAgIGtleTogImluaXRQbHVnaW5zIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBpbml0UGx1Z2lucygpIHsKICAgICAgdmFyIHBsdWdpbnMgPSB0aGlzLmNvbmZpZy5nZXQoJ3BsdWdpbnMnKSB8fCBbXTsKICAgICAgdmFyIHN1YnN0aXR1dGVQbHVnaW5zID0gdGhpcy5jb25maWcuZ2V0KCdzdWJzdGl0dXRlUGx1Z2lucycpIHx8IFtdOyAvLyBQbHVnaW5zIGZvciBzdWJzdGl0dXRpb24gc2hvdWxkIGJlIGNoZWNrZWQgYXMgd2VsbC4KCiAgICAgIHZhciBfaXRlcmF0b3IgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihwbHVnaW5zLmNvbmNhdChzdWJzdGl0dXRlUGx1Z2lucykpLAogICAgICAgICAgX3N0ZXA7CgogICAgICB0cnkgewogICAgICAgIGZvciAoX2l0ZXJhdG9yLnMoKTsgIShfc3RlcCA9IF9pdGVyYXRvci5uKCkpLmRvbmU7KSB7CiAgICAgICAgICB2YXIgUGx1Z2luID0gX3N0ZXAudmFsdWU7CgogICAgICAgICAgaWYgKHR5cGVvZiBQbHVnaW4gIT0gJ2Z1bmN0aW9uJykgewogICAgICAgICAgICAvKioKICAgICAgICAgICAgICogT25seSBhIGNvbnN0cnVjdG9yIGZ1bmN0aW9uIGlzIGFsbG93ZWQgYXMgYSB7QGxpbmsgbW9kdWxlOmNvcmUvY29udGV4dHBsdWdpbn5Db250ZXh0UGx1Z2luIGNvbnRleHQgcGx1Z2lufS4KICAgICAgICAgICAgICoKICAgICAgICAgICAgICogQGVycm9yIGNvbnRleHQtaW5pdHBsdWdpbnMtY29uc3RydWN0b3Itb25seQogICAgICAgICAgICAgKi8KICAgICAgICAgICAgdGhyb3cgbmV3IENLRWRpdG9yRXJyb3IoJ2NvbnRleHQtaW5pdHBsdWdpbnMtY29uc3RydWN0b3Itb25seScsIG51bGwsIHsKICAgICAgICAgICAgICBQbHVnaW46IFBsdWdpbgogICAgICAgICAgICB9KTsKICAgICAgICAgIH0KCiAgICAgICAgICBpZiAoUGx1Z2luLmlzQ29udGV4dFBsdWdpbiAhPT0gdHJ1ZSkgewogICAgICAgICAgICAvKioKICAgICAgICAgICAgICogT25seSBhIHBsdWdpbiBtYXJrZWQgYXMgYSB7QGxpbmsgbW9kdWxlOmNvcmUvY29udGV4dHBsdWdpbn5Db250ZXh0UGx1Z2luLmlzQ29udGV4dFBsdWdpbiBjb250ZXh0IHBsdWdpbn0KICAgICAgICAgICAgICogaXMgYWxsb3dlZCB0byBiZSB1c2VkIHdpdGggYSBjb250ZXh0LgogICAgICAgICAgICAgKgogICAgICAgICAgICAgKiBAZXJyb3IgY29udGV4dC1pbml0cGx1Z2lucy1pbnZhbGlkLXBsdWdpbgogICAgICAgICAgICAgKi8KICAgICAgICAgICAgdGhyb3cgbmV3IENLRWRpdG9yRXJyb3IoJ2NvbnRleHQtaW5pdHBsdWdpbnMtaW52YWxpZC1wbHVnaW4nLCBudWxsLCB7CiAgICAgICAgICAgICAgUGx1Z2luOiBQbHVnaW4KICAgICAgICAgICAgfSk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9IGNhdGNoIChlcnIpIHsKICAgICAgICBfaXRlcmF0b3IuZShlcnIpOwogICAgICB9IGZpbmFsbHkgewogICAgICAgIF9pdGVyYXRvci5mKCk7CiAgICAgIH0KCiAgICAgIHJldHVybiB0aGlzLnBsdWdpbnMuaW5pdChwbHVnaW5zLCBbXSwgc3Vic3RpdHV0ZVBsdWdpbnMpOwogICAgfQogICAgLyoqCiAgICAgKiBEZXN0cm95cyB0aGUgY29udGV4dCBpbnN0YW5jZSBhbmQgYWxsIGVkaXRvcnMgdXNlZCB3aXRoIHRoZSBjb250ZXh0LAogICAgICogcmVsZWFzaW5nIGFsbCByZXNvdXJjZXMgdXNlZCBieSB0aGUgY29udGV4dC4KICAgICAqCiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZX0gQSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgb25jZSB0aGUgY29udGV4dCBpbnN0YW5jZSBpcyBmdWxseSBkZXN0cm95ZWQuCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAiZGVzdHJveSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZGVzdHJveSgpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHJldHVybiBQcm9taXNlLmFsbChBcnJheS5mcm9tKHRoaXMuZWRpdG9ycywgZnVuY3Rpb24gKGVkaXRvcikgewogICAgICAgIHJldHVybiBlZGl0b3IuZGVzdHJveSgpOwogICAgICB9KSkudGhlbihmdW5jdGlvbiAoKSB7CiAgICAgICAgcmV0dXJuIF90aGlzLnBsdWdpbnMuZGVzdHJveSgpOwogICAgICB9KTsKICAgIH0KICAgIC8qKgogICAgICogQWRkcyBhIHJlZmVyZW5jZSB0byB0aGUgZWRpdG9yIHdoaWNoIGlzIHVzZWQgd2l0aCB0aGlzIGNvbnRleHQuCiAgICAgKgogICAgICogV2hlbiB0aGUgZ2l2ZW4gZWRpdG9yIGhhcyBjcmVhdGVkIHRoZSBjb250ZXh0LCB0aGUgcmVmZXJlbmNlIHRvIHRoaXMgZWRpdG9yIHdpbGwgYmUgc3RvcmVkCiAgICAgKiBhcyBhIHtAbGluayB+Q29udGV4dCNfY29udGV4dE93bmVyfS4KICAgICAqCiAgICAgKiBUaGlzIG1ldGhvZCBzaG91bGQgb25seSBiZSB1c2VkIGJ5IHRoZSBlZGl0b3IuCiAgICAgKgogICAgICogQHByb3RlY3RlZAogICAgICogQHBhcmFtIHttb2R1bGU6Y29yZS9lZGl0b3IvZWRpdG9yfkVkaXRvcn0gZWRpdG9yCiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IGlzQ29udGV4dE93bmVyIFN0b3JlcyB0aGUgZ2l2ZW4gZWRpdG9yIGFzIGEgY29udGV4dCBvd25lci4KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJfYWRkRWRpdG9yIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBfYWRkRWRpdG9yKGVkaXRvciwgaXNDb250ZXh0T3duZXIpIHsKICAgICAgaWYgKHRoaXMuX2NvbnRleHRPd25lcikgewogICAgICAgIC8qKgogICAgICAgICAqIENhbm5vdCBhZGQgbXVsdGlwbGUgZWRpdG9ycyB0byB0aGUgY29udGV4dCB3aGljaCBpcyBjcmVhdGVkIGJ5IHRoZSBlZGl0b3IuCiAgICAgICAgICoKICAgICAgICAgKiBAZXJyb3IgY29udGV4dC1hZGRlZGl0b3ItcHJpdmF0ZS1jb250ZXh0CiAgICAgICAgICovCiAgICAgICAgdGhyb3cgbmV3IENLRWRpdG9yRXJyb3IoJ2NvbnRleHQtYWRkZWRpdG9yLXByaXZhdGUtY29udGV4dCcpOwogICAgICB9CgogICAgICB0aGlzLmVkaXRvcnMuYWRkKGVkaXRvcik7CgogICAgICBpZiAoaXNDb250ZXh0T3duZXIpIHsKICAgICAgICB0aGlzLl9jb250ZXh0T3duZXIgPSBlZGl0b3I7CiAgICAgIH0KICAgIH0KICAgIC8qKgogICAgICogUmVtb3ZlcyBhIHJlZmVyZW5jZSB0byB0aGUgZWRpdG9yIHdoaWNoIHdhcyB1c2VkIHdpdGggdGhpcyBjb250ZXh0LgogICAgICogV2hlbiB0aGUgY29udGV4dCB3YXMgY3JlYXRlZCBieSB0aGUgZ2l2ZW4gZWRpdG9yLCB0aGUgY29udGV4dCB3aWxsIGJlIGRlc3Ryb3llZC4KICAgICAqCiAgICAgKiBUaGlzIG1ldGhvZCBzaG91bGQgb25seSBiZSB1c2VkIGJ5IHRoZSBlZGl0b3IuCiAgICAgKgogICAgICogQHByb3RlY3RlZAogICAgICogQHBhcmFtIHttb2R1bGU6Y29yZS9lZGl0b3IvZWRpdG9yfkVkaXRvcn0gZWRpdG9yCiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSBBIHByb21pc2UgdGhhdCByZXNvbHZlcyBvbmNlIHRoZSBlZGl0b3IgaXMgcmVtb3ZlZCBmcm9tIHRoZSBjb250ZXh0IG9yIHdoZW4gdGhlIGNvbnRleHQgd2FzIGRlc3Ryb3llZC4KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJfcmVtb3ZlRWRpdG9yIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBfcmVtb3ZlRWRpdG9yKGVkaXRvcikgewogICAgICBpZiAodGhpcy5lZGl0b3JzLmhhcyhlZGl0b3IpKSB7CiAgICAgICAgdGhpcy5lZGl0b3JzLnJlbW92ZShlZGl0b3IpOwogICAgICB9CgogICAgICBpZiAodGhpcy5fY29udGV4dE93bmVyID09PSBlZGl0b3IpIHsKICAgICAgICByZXR1cm4gdGhpcy5kZXN0cm95KCk7CiAgICAgIH0KCiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTsKICAgIH0KICAgIC8qKgogICAgICogUmV0dXJucyB0aGUgY29udGV4dCBjb25maWd1cmF0aW9uIHdoaWNoIHdpbGwgYmUgY29waWVkIHRvIHRoZSBlZGl0b3JzIGNyZWF0ZWQgdXNpbmcgdGhpcyBjb250ZXh0LgogICAgICoKICAgICAqIFRoZSBjb25maWd1cmF0aW9uIHJldHVybmVkIGJ5IHRoaXMgbWV0aG9kIGhhcyB0aGUgcGx1Z2lucyBjb25maWd1cmF0aW9uIHJlbW92ZWQgJm1kYXNoOyBwbHVnaW5zIGFyZSBzaGFyZWQgd2l0aCBhbGwgZWRpdG9ycwogICAgICogdGhyb3VnaCBhbm90aGVyIG1lY2hhbmlzbS4KICAgICAqCiAgICAgKiBUaGlzIG1ldGhvZCBzaG91bGQgb25seSBiZSB1c2VkIGJ5IHRoZSBlZGl0b3IuCiAgICAgKgogICAgICogQHByb3RlY3RlZAogICAgICogQHJldHVybnMge09iamVjdH0gQ29uZmlndXJhdGlvbiBhcyBhIHBsYWluIG9iamVjdC4KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJfZ2V0RWRpdG9yQ29uZmlnIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBfZ2V0RWRpdG9yQ29uZmlnKCkgewogICAgICB2YXIgcmVzdWx0ID0ge307CgogICAgICB2YXIgX2l0ZXJhdG9yMiA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKHRoaXMuY29uZmlnLm5hbWVzKCkpLAogICAgICAgICAgX3N0ZXAyOwoKICAgICAgdHJ5IHsKICAgICAgICBmb3IgKF9pdGVyYXRvcjIucygpOyAhKF9zdGVwMiA9IF9pdGVyYXRvcjIubigpKS5kb25lOykgewogICAgICAgICAgdmFyIG5hbWUgPSBfc3RlcDIudmFsdWU7CgogICAgICAgICAgaWYgKCFbJ3BsdWdpbnMnLCAncmVtb3ZlUGx1Z2lucycsICdleHRyYVBsdWdpbnMnXS5pbmNsdWRlcyhuYW1lKSkgewogICAgICAgICAgICByZXN1bHRbbmFtZV0gPSB0aGlzLmNvbmZpZy5nZXQobmFtZSk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9IGNhdGNoIChlcnIpIHsKICAgICAgICBfaXRlcmF0b3IyLmUoZXJyKTsKICAgICAgfSBmaW5hbGx5IHsKICAgICAgICBfaXRlcmF0b3IyLmYoKTsKICAgICAgfQoKICAgICAgcmV0dXJuIHJlc3VsdDsKICAgIH0KICAgIC8qKgogICAgICogQ3JlYXRlcyBhbmQgaW5pdGlhbGl6ZXMgYSBuZXcgY29udGV4dCBpbnN0YW5jZS4KICAgICAqCiAgICAgKgkJY29uc3QgY29tbW9uQ29uZmlnID0geyAuLi4gfTsgLy8gQ29uZmlndXJhdGlvbiBmb3IgYWxsIHRoZSBwbHVnaW5zIGFuZCBlZGl0b3JzLgogICAgICoJCWNvbnN0IGVkaXRvclBsdWdpbnMgPSBbIC4uLiBdOyAvLyBSZWd1bGFyIHBsdWdpbnMgaGVyZS4KICAgICAqCiAgICAgKgkJQ29udGV4dAogICAgICoJCQkuY3JlYXRlKCB7CiAgICAgKgkJCQkvLyBPbmx5IGNvbnRleHQgcGx1Z2lucyBoZXJlLgogICAgICoJCQkJcGx1Z2luczogWyAuLi4gXSwKICAgICAqCiAgICAgKgkJCQkvLyBDb25maWd1cmUgdGhlIGxhbmd1YWdlIGZvciBhbGwgdGhlIGVkaXRvcnMgKGl0IGNhbm5vdCBiZSBvdmVyd3JpdHRlbikuCiAgICAgKgkJCQlsYW5ndWFnZTogeyAuLi4gfSwKICAgICAqCiAgICAgKgkJCQkvLyBDb25maWd1cmF0aW9uIGZvciBjb250ZXh0IHBsdWdpbnMuCiAgICAgKgkJCQljb21tZW50czogeyAuLi4gfSwKICAgICAqCQkJCS4uLgogICAgICoKICAgICAqCQkJCS8vIERlZmF1bHQgY29uZmlndXJhdGlvbiBmb3IgZWRpdG9yIHBsdWdpbnMuCiAgICAgKgkJCQl0b29sYmFyOiB7IC4uLiB9LAogICAgICoJCQkJaW1hZ2U6IHsgLi4uIH0sCiAgICAgKgkJCQkuLi4KICAgICAqCQkJfSApCiAgICAgKgkJCS50aGVuKCBjb250ZXh0ID0+IHsKICAgICAqCQkJCWNvbnN0IHByb21pc2VzID0gW107CiAgICAgKgogICAgICoJCQkJcHJvbWlzZXMucHVzaCggQ2xhc3NpY0VkaXRvci5jcmVhdGUoCiAgICAgKgkJCQkJZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoICdlZGl0b3IxJyApLAogICAgICoJCQkJCXsKICAgICAqCQkJCQkJZWRpdG9yUGx1Z2lucywKICAgICAqCQkJCQkJY29udGV4dAogICAgICoJCQkJCX0KICAgICAqCQkJCSkgKTsKICAgICAqCiAgICAgKgkJCQlwcm9taXNlcy5wdXNoKCBDbGFzc2ljRWRpdG9yLmNyZWF0ZSgKICAgICAqCQkJCQlkb2N1bWVudC5nZXRFbGVtZW50QnlJZCggJ2VkaXRvcjInICksCiAgICAgKgkJCQkJewogICAgICoJCQkJCQllZGl0b3JQbHVnaW5zLAogICAgICoJCQkJCQljb250ZXh0LAogICAgICoJCQkJCQl0b29sYmFyOiB7IC4uLiB9IC8vIFlvdSBjYW4gb3ZlcndyaXRlIHRoZSBjb25maWd1cmF0aW9uIG9mIHRoZSBjb250ZXh0LgogICAgICoJCQkJCX0KICAgICAqCQkJCSkgKTsKICAgICAqCiAgICAgKgkJCQlyZXR1cm4gUHJvbWlzZS5hbGwoIHByb21pc2VzICk7CiAgICAgKgkJCX0gKTsKICAgICAqCiAgICAgKiBAcGFyYW0ge09iamVjdH0gW2NvbmZpZ10gVGhlIGNvbnRleHQgY29uZmlndXJhdGlvbi4KICAgICAqIEByZXR1cm5zIHtQcm9taXNlfSBBIHByb21pc2UgcmVzb2x2ZWQgb25jZSB0aGUgY29udGV4dCBpcyByZWFkeS4gVGhlIHByb21pc2UgcmVzb2x2ZXMgd2l0aCB0aGUgY3JlYXRlZCBjb250ZXh0IGluc3RhbmNlLgogICAgICovCgogIH1dLCBbewogICAga2V5OiAiY3JlYXRlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBjcmVhdGUoY29uZmlnKSB7CiAgICAgIHZhciBfdGhpczIgPSB0aGlzOwoKICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7CiAgICAgICAgdmFyIGNvbnRleHQgPSBuZXcgX3RoaXMyKGNvbmZpZyk7CiAgICAgICAgcmVzb2x2ZShjb250ZXh0LmluaXRQbHVnaW5zKCkudGhlbihmdW5jdGlvbiAoKSB7CiAgICAgICAgICByZXR1cm4gY29udGV4dDsKICAgICAgICB9KSk7CiAgICAgIH0pOwogICAgfQogIH1dKTsKCiAgcmV0dXJuIENvbnRleHQ7Cn0oKTsKLyoqCiAqIEFuIGFycmF5IG9mIHBsdWdpbnMgYnVpbHQgaW50byB0aGUgYENvbnRleHRgIGNsYXNzLgogKgogKiBJdCBpcyB1c2VkIGluIENLRWRpdG9yIDUgYnVpbGRzIGZlYXR1cmluZyBgQ29udGV4dGAgdG8gcHJvdmlkZSBhIGxpc3Qgb2YgY29udGV4dCBwbHVnaW5zIHdoaWNoIGFyZSBsYXRlciBhdXRvbWF0aWNhbGx5IGluaXRpYWxpemVkCiAqIGR1cmluZyB0aGUgY29udGV4dCBpbml0aWFsaXphdGlvbi4KICoKICogVGhleSB3aWxsIGJlIGF1dG9tYXRpY2FsbHkgaW5pdGlhbGl6ZWQgYnkgYENvbnRleHRgIHVubGVzcyBgY29uZmlnLnBsdWdpbnNgIGlzIHBhc3NlZC4KICoKICoJCS8vIEJ1aWxkIHNvbWUgY29udGV4dCBwbHVnaW5zIGludG8gdGhlIENvbnRleHQgY2xhc3MgZmlyc3QuCiAqCQlDb250ZXh0LmJ1aWx0aW5QbHVnaW5zID0gWyBGb29QbHVnaW4sIEJhclBsdWdpbiBdOwogKgogKgkJLy8gTm9ybWFsbHksIHlvdSBuZWVkIHRvIGRlZmluZSBjb25maWcucGx1Z2lucywgYnV0IHNpbmNlIENvbnRleHQuYnVpbHRpblBsdWdpbnMgd2FzCiAqCQkvLyBkZWZpbmVkLCBub3cgeW91IGNhbiBjYWxsIGNyZWF0ZSgpIHdpdGhvdXQgYW55IGNvbmZpZ3VyYXRpb24uCiAqCQlDb250ZXh0CiAqCQkJLmNyZWF0ZSgpCiAqCQkJLnRoZW4oIGNvbnRleHQgPT4gewogKgkJCQljb250ZXh0LnBsdWdpbnMuZ2V0KCBGb29QbHVnaW4gKTsgLy8gLT4gQW4gaW5zdGFuY2Ugb2YgdGhlIEZvbyBwbHVnaW4uCiAqCQkJCWNvbnRleHQucGx1Z2lucy5nZXQoIEJhclBsdWdpbiApOyAvLyAtPiBBbiBpbnN0YW5jZSBvZiB0aGUgQmFyIHBsdWdpbi4KICoJCQl9ICk7CiAqCiAqIFNlZSBhbHNvIHtAbGluayBtb2R1bGU6Y29yZS9jb250ZXh0fkNvbnRleHQuZGVmYXVsdENvbmZpZyBgQ29udGV4dC5kZWZhdWx0Q29uZmlnYH0KICogYW5kIHtAbGluayBtb2R1bGU6Y29yZS9lZGl0b3IvZWRpdG9yfkVkaXRvci5idWlsdGluUGx1Z2lucyBgRWRpdG9yLmJ1aWx0aW5QbHVnaW5zYH0uCiAqCiAqIEBzdGF0aWMKICogQG1lbWJlciB7QXJyYXkuPEZ1bmN0aW9uPn0gbW9kdWxlOmNvcmUvY29udGV4dH5Db250ZXh0LmJ1aWx0aW5QbHVnaW5zCiAqLwoKLyoqCiAqIFRoZSBkZWZhdWx0IGNvbmZpZ3VyYXRpb24gd2hpY2ggaXMgYnVpbHQgaW50byB0aGUgYENvbnRleHRgIGNsYXNzLgogKgogKiBJdCBpcyB1c2VkIGluIENLRWRpdG9yIDUgYnVpbGRzIGZlYXR1cmluZyBgQ29udGV4dGAgdG8gcHJvdmlkZSB0aGUgZGVmYXVsdCBjb25maWd1cmF0aW9uIG9wdGlvbnMgd2hpY2ggYXJlIGxhdGVyIHVzZWQgZHVyaW5nIHRoZQogKiBjb250ZXh0IGluaXRpYWxpemF0aW9uLgogKgogKgkJQ29udGV4dC5kZWZhdWx0Q29uZmlnID0gewogKgkJCWZvbzogMSwKICoJCQliYXI6IDIKICoJCX07CiAqCiAqCQlDb250ZXh0CiAqCQkJLmNyZWF0ZSgpCiAqCQkJLnRoZW4oIGNvbnRleHQgPT4gewogKgkJCQljb250ZXh0LmNvbmZpZy5nZXQoICdmb28nICk7IC8vIC0+IDEKICoJCQkJY29udGV4dC5jb25maWcuZ2V0KCAnYmFyJyApOyAvLyAtPiAyCiAqCQkJfSApOwogKgogKgkJLy8gVGhlIGRlZmF1bHQgb3B0aW9ucyBjYW4gYmUgb3ZlcnJpZGRlbiBieSB0aGUgY29uZmlndXJhdGlvbiBwYXNzZWQgdG8gY3JlYXRlKCkuCiAqCQlDb250ZXh0CiAqCQkJLmNyZWF0ZSggeyBiYXI6IDMgfSApCiAqCQkJLnRoZW4oIGNvbnRleHQgPT4gewogKgkJCQljb250ZXh0LmNvbmZpZy5nZXQoICdmb28nICk7IC8vIC0+IDEKICoJCQkJY29udGV4dC5jb25maWcuZ2V0KCAnYmFyJyApOyAvLyAtPiAzCiAqCQkJfSApOwogKgogKiBTZWUgYWxzbyB7QGxpbmsgbW9kdWxlOmNvcmUvY29udGV4dH5Db250ZXh0LmJ1aWx0aW5QbHVnaW5zIGBDb250ZXh0LmJ1aWx0aW5QbHVnaW5zYH0KICogYW5kIHtAbGluayBtb2R1bGU6Y29yZS9lZGl0b3IvZWRpdG9yfkVkaXRvci5kZWZhdWx0Q29uZmlnIGBFZGl0b3IuZGVmYXVsdENvbmZpZ2B9LgogKgogKiBAc3RhdGljCiAqIEBtZW1iZXIge09iamVjdH0gbW9kdWxlOmNvcmUvY29udGV4dH5Db250ZXh0LmRlZmF1bHRDb25maWcKICovCgoKZXhwb3J0IHsgQ29udGV4dCBhcyBkZWZhdWx0IH07"},{"version":3,"sources":["/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-core/src/context.js"],"names":["Config","Collection","PluginCollection","Locale","CKEditorError","Context","config","constructor","defaultConfig","availablePlugins","builtinPlugins","define","plugins","languageConfig","get","locale","uiLanguage","ui","contentLanguage","t","editors","_contextOwner","substitutePlugins","concat","Plugin","isContextPlugin","init","Promise","all","Array","from","editor","destroy","then","isContextOwner","add","has","remove","resolve","result","names","name","includes","context","initPlugins"],"mappings":"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D,WAAKgB,OAAL,CAAae,GAAb,CAAkBJ,MAAlB;;AAEA,UAAKG,cAAL,EAAsB;AACrB,aAAKb,aAAL,GAAqBU,MAArB;AACA;AACD;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACC,uBAAeA,MAAf,EAAwB;AACvB,UAAK,KAAKX,OAAL,CAAagB,GAAb,CAAkBL,MAAlB,CAAL,EAAkC;AACjC,aAAKX,OAAL,CAAaiB,MAAb,CAAqBN,MAArB;AACA;;AAED,UAAK,KAAKV,aAAL,KAAuBU,MAA5B,EAAqC;AACpC,eAAO,KAAKC,OAAL,EAAP;AACA;;AAED,aAAOL,OAAO,CAACW,OAAR,EAAP;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACC,4BAAmB;AAClB,UAAMC,MAAM,GAAG,EAAf;;AADkB,kDAGE,KAAKjC,MAAL,CAAYkC,KAAZ,EAHF;AAAA;;AAAA;AAGlB,+DAA0C;AAAA,cAA9BC,IAA8B;;AACzC,cAAK,CAAC,CAAE,SAAF,EAAa,eAAb,EAA8B,cAA9B,EAA+CC,QAA/C,CAAyDD,IAAzD,CAAN,EAAwE;AACvEF,YAAAA,MAAM,CAAEE,IAAF,CAAN,GAAiB,KAAKnC,MAAL,CAAYQ,GAAZ,CAAiB2B,IAAjB,CAAjB;AACA;AACD;AAPiB;AAAA;AAAA;AAAA;AAAA;;AASlB,aAAOF,MAAP;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACC,gBAAejC,MAAf,EAAwB;AAAA;;AACvB,aAAO,IAAIqB,OAAJ,CAAa,UAAAW,OAAO,EAAI;AAC9B,YAAMK,OAAO,GAAG,IAAI,MAAJ,CAAUrC,MAAV,CAAhB;AAEAgC,QAAAA,OAAO,CAAEK,OAAO,CAACC,WAAR,GAAsBX,IAAtB,CAA4B;AAAA,iBAAMU,OAAN;AAAA,SAA5B,CAAF,CAAP;AACA,OAJM,CAAP;AAKA;;;;;AAGF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;SAxTqBtC,O","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module core/context\n */\n\nimport Config from '@ckeditor/ckeditor5-utils/src/config';\nimport Collection from '@ckeditor/ckeditor5-utils/src/collection';\nimport PluginCollection from './plugincollection';\nimport Locale from '@ckeditor/ckeditor5-utils/src/locale';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * Provides a common, higher-level environment for solutions that use multiple {@link module:core/editor/editor~Editor editors}\n * or plugins that work outside the editor. Use it instead of {@link module:core/editor/editor~Editor.create `Editor.create()`}\n * in advanced application integrations.\n *\n * All configuration options passed to a context will be used as default options for editor instances initialized in that context.\n *\n * {@link module:core/contextplugin~ContextPlugin Context plugins} passed to a context instance will be shared among all\n * editor instances initialized in this context. These will be the same plugin instances for all the editors.\n *\n * **Note:** The context can only be initialized with {@link module:core/contextplugin~ContextPlugin context plugins}\n * (e.g. [comments](https://ckeditor.com/collaboration/comments/)). Regular {@link module:core/plugin~Plugin plugins} require an\n * editor instance to work and cannot be added to a context.\n *\n * **Note:** You can add a context plugin to an editor instance, though.\n *\n * If you are using multiple editor instances on one page and use any context plugins, create a context to share the configuration and\n * plugins among these editors. Some plugins will use the information about all existing editors to better integrate between them.\n *\n * If you are using plugins that do not require an editor to work (e.g. [comments](https://ckeditor.com/collaboration/comments/)),\n * enable and configure them using the context.\n *\n * If you are using only a single editor on each page, use {@link module:core/editor/editor~Editor.create `Editor.create()`} instead.\n * In such case, a context instance will be created by the editor instance in a transparent way.\n *\n * See {@link module:core/context~Context.create `Context.create()`} for usage examples.\n */\nexport default class Context {\n\t/**\n\t * Creates a context instance with a given configuration.\n\t *\n\t * Usually not to be used directly. See the static {@link module:core/context~Context.create `create()`} method.\n\t *\n\t * @param {Object} [config={}] The context configuration.\n\t */\n\tconstructor( config ) {\n\t\t/**\n\t\t * Stores all the configurations specific to this context instance.\n\t\t *\n\t\t * @readonly\n\t\t * @type {module:utils/config~Config}\n\t\t */\n\t\tthis.config = new Config( config, this.constructor.defaultConfig );\n\n\t\tconst availablePlugins = this.constructor.builtinPlugins;\n\n\t\tthis.config.define( 'plugins', availablePlugins );\n\n\t\t/**\n\t\t * The plugins loaded and in use by this context instance.\n\t\t *\n\t\t * @readonly\n\t\t * @type {module:core/plugincollection~PluginCollection}\n\t\t */\n\t\tthis.plugins = new PluginCollection( this, availablePlugins );\n\n\t\tconst languageConfig = this.config.get( 'language' ) || {};\n\n\t\t/**\n\t\t * @readonly\n\t\t * @type {module:utils/locale~Locale}\n\t\t */\n\t\tthis.locale = new Locale( {\n\t\t\tuiLanguage: typeof languageConfig === 'string' ? languageConfig : languageConfig.ui,\n\t\t\tcontentLanguage: this.config.get( 'language.content' )\n\t\t} );\n\n\t\t/**\n\t\t * Shorthand for {@link module:utils/locale~Locale#t}.\n\t\t *\n\t\t * @see module:utils/locale~Locale#t\n\t\t * @method #t\n\t\t */\n\t\tthis.t = this.locale.t;\n\n\t\t/**\n\t\t * A list of editors that this context instance is injected to.\n\t\t *\n\t\t * @readonly\n\t\t * @type {module:utils/collection~Collection}\n\t\t */\n\t\tthis.editors = new Collection();\n\n\t\t/**\n\t\t * Reference to the editor which created the context.\n\t\t * Null when the context was created outside of the editor.\n\t\t *\n\t\t * It is used to destroy the context when removing the editor that has created the context.\n\t\t *\n\t\t * @private\n\t\t * @type {module:core/editor/editor~Editor|null}\n\t\t */\n\t\tthis._contextOwner = null;\n\t}\n\n\t/**\n\t * Loads and initializes plugins specified in the configuration.\n\t *\n\t * @returns {Promise.<module:core/plugin~LoadedPlugins>} A promise which resolves\n\t * once the initialization is completed, providing an array of loaded plugins.\n\t */\n\tinitPlugins() {\n\t\tconst plugins = this.config.get( 'plugins' ) || [];\n\t\tconst substitutePlugins = this.config.get( 'substitutePlugins' ) || [];\n\n\t\t// Plugins for substitution should be checked as well.\n\t\tfor ( const Plugin of plugins.concat( substitutePlugins ) ) {\n\t\t\tif ( typeof Plugin != 'function' ) {\n\t\t\t\t/**\n\t\t\t\t * Only a constructor function is allowed as a {@link module:core/contextplugin~ContextPlugin context plugin}.\n\t\t\t\t *\n\t\t\t\t * @error context-initplugins-constructor-only\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError(\n\t\t\t\t\t'context-initplugins-constructor-only',\n\t\t\t\t\tnull,\n\t\t\t\t\t{ Plugin }\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif ( Plugin.isContextPlugin !== true ) {\n\t\t\t\t/**\n\t\t\t\t * Only a plugin marked as a {@link module:core/contextplugin~ContextPlugin.isContextPlugin context plugin}\n\t\t\t\t * is allowed to be used with a context.\n\t\t\t\t *\n\t\t\t\t * @error context-initplugins-invalid-plugin\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError(\n\t\t\t\t\t'context-initplugins-invalid-plugin',\n\t\t\t\t\tnull,\n\t\t\t\t\t{ Plugin }\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\treturn this.plugins.init( plugins, [], substitutePlugins );\n\t}\n\n\t/**\n\t * Destroys the context instance and all editors used with the context,\n\t * releasing all resources used by the context.\n\t *\n\t * @returns {Promise} A promise that resolves once the context instance is fully destroyed.\n\t */\n\tdestroy() {\n\t\treturn Promise.all( Array.from( this.editors, editor => editor.destroy() ) )\n\t\t\t.then( () => this.plugins.destroy() );\n\t}\n\n\t/**\n\t * Adds a reference to the editor which is used with this context.\n\t *\n\t * When the given editor has created the context, the reference to this editor will be stored\n\t * as a {@link ~Context#_contextOwner}.\n\t *\n\t * This method should only be used by the editor.\n\t *\n\t * @protected\n\t * @param {module:core/editor/editor~Editor} editor\n\t * @param {Boolean} isContextOwner Stores the given editor as a context owner.\n\t */\n\t_addEditor( editor, isContextOwner ) {\n\t\tif ( this._contextOwner ) {\n\t\t\t/**\n\t\t\t * Cannot add multiple editors to the context which is created by the editor.\n\t\t\t *\n\t\t\t * @error context-addeditor-private-context\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'context-addeditor-private-context' );\n\t\t}\n\n\t\tthis.editors.add( editor );\n\n\t\tif ( isContextOwner ) {\n\t\t\tthis._contextOwner = editor;\n\t\t}\n\t}\n\n\t/**\n\t * Removes a reference to the editor which was used with this context.\n\t * When the context was created by the given editor, the context will be destroyed.\n\t *\n\t * This method should only be used by the editor.\n\t *\n\t * @protected\n\t * @param {module:core/editor/editor~Editor} editor\n\t * @return {Promise} A promise that resolves once the editor is removed from the context or when the context was destroyed.\n\t */\n\t_removeEditor( editor ) {\n\t\tif ( this.editors.has( editor ) ) {\n\t\t\tthis.editors.remove( editor );\n\t\t}\n\n\t\tif ( this._contextOwner === editor ) {\n\t\t\treturn this.destroy();\n\t\t}\n\n\t\treturn Promise.resolve();\n\t}\n\n\t/**\n\t * Returns the context configuration which will be copied to the editors created using this context.\n\t *\n\t * The configuration returned by this method has the plugins configuration removed &mdash; plugins are shared with all editors\n\t * through another mechanism.\n\t *\n\t * This method should only be used by the editor.\n\t *\n\t * @protected\n\t * @returns {Object} Configuration as a plain object.\n\t */\n\t_getEditorConfig() {\n\t\tconst result = {};\n\n\t\tfor ( const name of this.config.names() ) {\n\t\t\tif ( ![ 'plugins', 'removePlugins', 'extraPlugins' ].includes( name ) ) {\n\t\t\t\tresult[ name ] = this.config.get( name );\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n\n\t/**\n\t * Creates and initializes a new context instance.\n\t *\n\t *\t\tconst commonConfig = { ... }; // Configuration for all the plugins and editors.\n\t *\t\tconst editorPlugins = [ ... ]; // Regular plugins here.\n\t *\n\t *\t\tContext\n\t *\t\t\t.create( {\n\t *\t\t\t\t// Only context plugins here.\n\t *\t\t\t\tplugins: [ ... ],\n\t *\n\t *\t\t\t\t// Configure the language for all the editors (it cannot be overwritten).\n\t *\t\t\t\tlanguage: { ... },\n\t *\n\t *\t\t\t\t// Configuration for context plugins.\n\t *\t\t\t\tcomments: { ... },\n\t *\t\t\t\t...\n\t *\n\t *\t\t\t\t// Default configuration for editor plugins.\n\t *\t\t\t\ttoolbar: { ... },\n\t *\t\t\t\timage: { ... },\n\t *\t\t\t\t...\n\t *\t\t\t} )\n\t *\t\t\t.then( context => {\n\t *\t\t\t\tconst promises = [];\n\t *\n\t *\t\t\t\tpromises.push( ClassicEditor.create(\n\t *\t\t\t\t\tdocument.getElementById( 'editor1' ),\n\t *\t\t\t\t\t{\n\t *\t\t\t\t\t\teditorPlugins,\n\t *\t\t\t\t\t\tcontext\n\t *\t\t\t\t\t}\n\t *\t\t\t\t) );\n\t *\n\t *\t\t\t\tpromises.push( ClassicEditor.create(\n\t *\t\t\t\t\tdocument.getElementById( 'editor2' ),\n\t *\t\t\t\t\t{\n\t *\t\t\t\t\t\teditorPlugins,\n\t *\t\t\t\t\t\tcontext,\n\t *\t\t\t\t\t\ttoolbar: { ... } // You can overwrite the configuration of the context.\n\t *\t\t\t\t\t}\n\t *\t\t\t\t) );\n\t *\n\t *\t\t\t\treturn Promise.all( promises );\n\t *\t\t\t} );\n\t *\n\t * @param {Object} [config] The context configuration.\n\t * @returns {Promise} A promise resolved once the context is ready. The promise resolves with the created context instance.\n\t */\n\tstatic create( config ) {\n\t\treturn new Promise( resolve => {\n\t\t\tconst context = new this( config );\n\n\t\t\tresolve( context.initPlugins().then( () => context ) );\n\t\t} );\n\t}\n}\n\n/**\n * An array of plugins built into the `Context` class.\n *\n * It is used in CKEditor 5 builds featuring `Context` to provide a list of context plugins which are later automatically initialized\n * during the context initialization.\n *\n * They will be automatically initialized by `Context` unless `config.plugins` is passed.\n *\n *\t\t// Build some context plugins into the Context class first.\n *\t\tContext.builtinPlugins = [ FooPlugin, BarPlugin ];\n *\n *\t\t// Normally, you need to define config.plugins, but since Context.builtinPlugins was\n *\t\t// defined, now you can call create() without any configuration.\n *\t\tContext\n *\t\t\t.create()\n *\t\t\t.then( context => {\n *\t\t\t\tcontext.plugins.get( FooPlugin ); // -> An instance of the Foo plugin.\n *\t\t\t\tcontext.plugins.get( BarPlugin ); // -> An instance of the Bar plugin.\n *\t\t\t} );\n *\n * See also {@link module:core/context~Context.defaultConfig `Context.defaultConfig`}\n * and {@link module:core/editor/editor~Editor.builtinPlugins `Editor.builtinPlugins`}.\n *\n * @static\n * @member {Array.<Function>} module:core/context~Context.builtinPlugins\n */\n\n/**\n * The default configuration which is built into the `Context` class.\n *\n * It is used in CKEditor 5 builds featuring `Context` to provide the default configuration options which are later used during the\n * context initialization.\n *\n *\t\tContext.defaultConfig = {\n *\t\t\tfoo: 1,\n *\t\t\tbar: 2\n *\t\t};\n *\n *\t\tContext\n *\t\t\t.create()\n *\t\t\t.then( context => {\n *\t\t\t\tcontext.config.get( 'foo' ); // -> 1\n *\t\t\t\tcontext.config.get( 'bar' ); // -> 2\n *\t\t\t} );\n *\n *\t\t// The default options can be overridden by the configuration passed to create().\n *\t\tContext\n *\t\t\t.create( { bar: 3 } )\n *\t\t\t.then( context => {\n *\t\t\t\tcontext.config.get( 'foo' ); // -> 1\n *\t\t\t\tcontext.config.get( 'bar' ); // -> 3\n *\t\t\t} );\n *\n * See also {@link module:core/context~Context.builtinPlugins `Context.builtinPlugins`}\n * and {@link module:core/editor/editor~Editor.defaultConfig `Editor.defaultConfig`}.\n *\n * @static\n * @member {Object} module:core/context~Context.defaultConfig\n */\n"]}]}