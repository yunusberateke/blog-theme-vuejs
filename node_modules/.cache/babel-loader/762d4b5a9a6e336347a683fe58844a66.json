{"remainingRequest":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/babel-loader/lib/index.js!/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-dev-webpack-plugin/lib/translatesourceloader.js?{}!/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-typing/src/utils/changebuffer.js","dependencies":[{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-typing/src/utils/changebuffer.js","mtime":499162500000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-dev-webpack-plugin/lib/translatesourceloader.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tICIvaG9tZS9la2ViZXJhdC9ZYW5kZXguRGlzay9Qcm9qZWxlcmltL0JlbmltUHJvamVsZXJpbS93ZWJzaXRlbS93ZWJzaXRlbS13ZWIvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NsYXNzQ2FsbENoZWNrIjsKaW1wb3J0IF9jcmVhdGVDbGFzcyBmcm9tICIvaG9tZS9la2ViZXJhdC9ZYW5kZXguRGlzay9Qcm9qZWxlcmltL0JlbmltUHJvamVsZXJpbS93ZWJzaXRlbS93ZWJzaXRlbS13ZWIvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZUNsYXNzIjsKCi8qKgogKiBAbGljZW5zZSBDb3B5cmlnaHQgKGMpIDIwMDMtMjAyMSwgQ0tTb3VyY2UgLSBGcmVkZXJpY28gS25hYmJlbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KICogRm9yIGxpY2Vuc2luZywgc2VlIExJQ0VOU0UubWQgb3IgaHR0cHM6Ly9ja2VkaXRvci5jb20vbGVnYWwvY2tlZGl0b3Itb3NzLWxpY2Vuc2UKICovCgovKioKICogQG1vZHVsZSB0eXBpbmcvdXRpbHMvY2hhbmdlYnVmZmVyCiAqLwoKLyoqCiAqIENoYW5nZSBidWZmZXIgYWxsb3dzIHRvIGdyb3VwIGF0b21pYyBjaGFuZ2VzIChsaWtlIGNoYXJhY3RlcnMgdGhhdCBoYXZlIGJlZW4gdHlwZWQpIGludG8KICoge0BsaW5rIG1vZHVsZTplbmdpbmUvbW9kZWwvYmF0Y2h+QmF0Y2ggYmF0Y2hlc30uCiAqCiAqIEJhdGNoZXMgcmVwcmVzZW50IHNpbmdsZSB1bmRvIHN0ZXBzLCBoZW5jZSBjaGFuZ2VzIGFkZGVkIHRvIG9uZSBzaW5nbGUgYmF0Y2ggYXJlIHVuZG9uZSB0b2dldGhlci4KICoKICogVGhlIGJ1ZmZlciBoYXMgYSBjb25maWd1cmFibGUgbGltaXQgb2YgYXRvbWljIGNoYW5nZXMgdGhhdCBpdCBjYW4gYWNjb21tb2RhdGUuIEFmdGVyIHRoZSBsaW1pdCB3YXMKICogZXhjZWVkZWQgKHNlZSB7QGxpbmsgfkNoYW5nZUJ1ZmZlciNpbnB1dH0pLCBhIG5ldyBiYXRjaCBpcyBjcmVhdGVkIGluIHtAbGluayB+Q2hhbmdlQnVmZmVyI2JhdGNofS4KICoKICogVG8gdXNlIHRoZSBjaGFuZ2UgYnVmZmVyIHlvdSBuZWVkIHRvIGxldCBpdCBrbm93IGFib3V0IHRoZSBudW1iZXIgb2YgY2hhbmdlcyB0aGF0IHdlcmUgYWRkZWQgdG8gdGhlIGJhdGNoOgogKgogKgkJY29uc3QgYnVmZmVyID0gbmV3IENoYW5nZUJ1ZmZlciggbW9kZWwsIExJTUlUICk7CiAqCiAqCQkvLyBMYXRlciBvbiBpbiB5b3VyIGZlYXR1cmU6CiAqCQlidWZmZXIuYmF0Y2guaW5zZXJ0KCBwb3MsIGluc2VydGVkQ2hhcmFjdGVycyApOwogKgkJYnVmZmVyLmlucHV0KCBpbnNlcnRlZENoYXJhY3RlcnMubGVuZ3RoICk7CiAqCiAqLwp2YXIgQ2hhbmdlQnVmZmVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHsKICAvKioKICAgKiBDcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIHRoZSBjaGFuZ2UgYnVmZmVyLgogICAqCiAgICogQHBhcmFtIHttb2R1bGU6ZW5naW5lL21vZGVsL21vZGVsfk1vZGVsfSBtb2RlbAogICAqIEBwYXJhbSB7TnVtYmVyfSBbbGltaXQ9MjBdIFRoZSBtYXhpbXVtIG51bWJlciBvZiBhdG9taWMgY2hhbmdlcyB3aGljaCBjYW4gYmUgY29udGFpbmVkIGluIG9uZSBiYXRjaC4KICAgKi8KICBmdW5jdGlvbiBDaGFuZ2VCdWZmZXIobW9kZWwpIHsKICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgdmFyIGxpbWl0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAyMDsKCiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ2hhbmdlQnVmZmVyKTsKCiAgICAvKioKICAgICAqIFRoZSBtb2RlbCBpbnN0YW5jZS4KICAgICAqCiAgICAgKiBAcmVhZG9ubHkKICAgICAqIEBtZW1iZXIge21vZHVsZTplbmdpbmUvbW9kZWwvbW9kZWx+TW9kZWx9ICNtb2RlbAogICAgICovCiAgICB0aGlzLm1vZGVsID0gbW9kZWw7CiAgICAvKioKICAgICAqIFRoZSBudW1iZXIgb2YgYXRvbWljIGNoYW5nZXMgaW4gdGhlIGJ1ZmZlci4gT25jZSBpdCBleGNlZWRzIHRoZSB7QGxpbmsgI2xpbWl0fSwKICAgICAqIHRoZSB7QGxpbmsgI2JhdGNoIGJhdGNofSBpcyBzZXQgdG8gYSBuZXcgb25lLgogICAgICoKICAgICAqIEByZWFkb25seQogICAgICogQG1lbWJlciB7TnVtYmVyfSAjc2l6ZQogICAgICovCgogICAgdGhpcy5zaXplID0gMDsKICAgIC8qKgogICAgICogVGhlIG1heGltdW0gbnVtYmVyIG9mIGF0b21pYyBjaGFuZ2VzIHdoaWNoIGNhbiBiZSBjb250YWluZWQgaW4gb25lIGJhdGNoLgogICAgICoKICAgICAqIEByZWFkb25seQogICAgICogQG1lbWJlciB7TnVtYmVyfSAjbGltaXQKICAgICAqLwoKICAgIHRoaXMubGltaXQgPSBsaW1pdDsKICAgIC8qKgogICAgICogV2hldGhlciB0aGUgYnVmZmVyIGlzIGxvY2tlZC4gQSBsb2NrZWQgYnVmZmVyIGNhbm5vdCBiZSByZXNldCB1bmxlc3MgaXQgZ2V0cyB1bmxvY2tlZC4KICAgICAqCiAgICAgKiBAcmVhZG9ubHkKICAgICAqIEBtZW1iZXIge0Jvb2xlYW59ICNpc0xvY2tlZAogICAgICovCgogICAgdGhpcy5pc0xvY2tlZCA9IGZhbHNlOyAvLyBUaGUgZnVuY3Rpb24gdG8gYmUgY2FsbGVkIGluIG9yZGVyIHRvIG5vdGlmeSB0aGUgYnVmZmVyIGFib3V0IGJhdGNoZXMgd2hpY2ggYXBwZWFyZWQgaW4gdGhlIGRvY3VtZW50LgogICAgLy8gVGhlIGNhbGxiYWNrIHdpbGwgY2hlY2sgd2hldGhlciBpdCBpcyBhIG5ldyBiYXRjaCBhbmQgaW4gdGhhdCBjYXNlIHRoZSBidWZmZXIgd2lsbCBiZSBmbHVzaGVkLgogICAgLy8KICAgIC8vIFRoZSByZWFzb24gd2h5IHRoZSBidWZmZXIgbmVlZHMgdG8gYmUgZmx1c2hlZCB3aGVuZXZlciBhIG5ldyBiYXRjaCBhcHBlYXJzIGlzIHRoYXQgdGhlIGNoYW5nZXMgYWRkZWQgYWZ0ZXJ3YXJkcwogICAgLy8gc2hvdWxkIGJlIGFkZGVkIHRvIGEgbmV3IGJhdGNoLiBGb3IgaW5zdGFuY2UsIHdoZW4gdGhlICB1c2VyIHR5cGVzLCB0aGVuIGluc2VydHMgYW4gaW1hZ2UsIGFuZCB0aGVuIHR5cGVzIGFnYWluLAogICAgLy8gdGhlIGNoYXJhY3RlcnMgdHlwZWQgYWZ0ZXIgaW5zZXJ0aW5nIHRoZSBpbWFnZSBzaG91bGQgYmUgYWRkZWQgdG8gYSBkaWZmZXJlbnQgYmF0Y2ggdGhhbiB0aGUgY2hhcmFjdGVycyB0eXBlZCBiZWZvcmUuCgogICAgdGhpcy5fY2hhbmdlQ2FsbGJhY2sgPSBmdW5jdGlvbiAoZXZ0LCBiYXRjaCkgewogICAgICBpZiAoYmF0Y2gudHlwZSAhPSAndHJhbnNwYXJlbnQnICYmIGJhdGNoICE9PSBfdGhpcy5fYmF0Y2gpIHsKICAgICAgICBfdGhpcy5fcmVzZXQodHJ1ZSk7CiAgICAgIH0KICAgIH07CgogICAgdGhpcy5fc2VsZWN0aW9uQ2hhbmdlQ2FsbGJhY2sgPSBmdW5jdGlvbiAoKSB7CiAgICAgIF90aGlzLl9yZXNldCgpOwogICAgfTsKCiAgICB0aGlzLm1vZGVsLmRvY3VtZW50Lm9uKCdjaGFuZ2UnLCB0aGlzLl9jaGFuZ2VDYWxsYmFjayk7CiAgICB0aGlzLm1vZGVsLmRvY3VtZW50LnNlbGVjdGlvbi5vbignY2hhbmdlOnJhbmdlJywgdGhpcy5fc2VsZWN0aW9uQ2hhbmdlQ2FsbGJhY2spOwogICAgdGhpcy5tb2RlbC5kb2N1bWVudC5zZWxlY3Rpb24ub24oJ2NoYW5nZTphdHRyaWJ1dGUnLCB0aGlzLl9zZWxlY3Rpb25DaGFuZ2VDYWxsYmFjayk7CiAgICAvKioKICAgICAqIFRoZSBjdXJyZW50IGJhdGNoIGluc3RhbmNlLgogICAgICoKICAgICAqIEBwcml2YXRlCiAgICAgKiBAbWVtYmVyICNfYmF0Y2gKICAgICAqLwoKICAgIC8qKgogICAgICogVGhlIGNhbGxiYWNrIHRvIGRvY3VtZW50IHRoZSBjaGFuZ2UgZXZlbnQgd2hpY2ggbGF0ZXIgbmVlZHMgdG8gYmUgcmVtb3ZlZC4KICAgICAqCiAgICAgKiBAcHJpdmF0ZQogICAgICogQG1lbWJlciAjX2NoYW5nZUNhbGxiYWNrCiAgICAgKi8KCiAgICAvKioKICAgICAqIFRoZSBjYWxsYmFjayB0byBkb2N1bWVudCBzZWxlY3Rpb24gYGNoYW5nZTphdHRyaWJ1dGVgIGFuZCBgY2hhbmdlOnJhbmdlYCBldmVudHMgd2hpY2ggcmVzZXRzIHRoZSBidWZmZXIuCiAgICAgKgogICAgICogQHByaXZhdGUKICAgICAqIEBtZW1iZXIgI19zZWxlY3Rpb25DaGFuZ2VDYWxsYmFjawogICAgICovCiAgfQogIC8qKgogICAqIFRoZSBjdXJyZW50IGJhdGNoIHRvIHdoaWNoIGEgZmVhdHVyZSBzaG91bGQgYWRkIGl0cyBvcGVyYXRpb25zLiBPbmNlIHRoZSB7QGxpbmsgI3NpemV9CiAgICogaXMgcmVhY2hlZCBvciBleGNlZWRzIHRoZSB7QGxpbmsgI2xpbWl0fSwgdGhlIGJhdGNoIGlzIHNldCB0byBhIG5ldyBpbnN0YW5jZSBhbmQgdGhlIHNpemUgaXMgcmVzZXQuCiAgICoKICAgKiBAdHlwZSB7bW9kdWxlOmVuZ2luZS9tb2RlbC9iYXRjaH5CYXRjaH0KICAgKi8KCgogIF9jcmVhdGVDbGFzcyhDaGFuZ2VCdWZmZXIsIFt7CiAgICBrZXk6ICJiYXRjaCIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgaWYgKCF0aGlzLl9iYXRjaCkgewogICAgICAgIHRoaXMuX2JhdGNoID0gdGhpcy5tb2RlbC5jcmVhdGVCYXRjaCgpOwogICAgICB9CgogICAgICByZXR1cm4gdGhpcy5fYmF0Y2g7CiAgICB9CiAgICAvKioKICAgICAqIFRoZSBpbnB1dCBudW1iZXIgb2YgY2hhbmdlcyBpbnRvIHRoZSBidWZmZXIuIE9uY2UgdGhlIHtAbGluayAjc2l6ZX0gaXMKICAgICAqIHJlYWNoZWQgb3IgZXhjZWVkcyB0aGUge0BsaW5rICNsaW1pdH0sIHRoZSBiYXRjaCBpcyBzZXQgdG8gYSBuZXcgaW5zdGFuY2UgYW5kIHRoZSBzaXplIGlzIHJlc2V0LgogICAgICoKICAgICAqIEBwYXJhbSB7TnVtYmVyfSBjaGFuZ2VDb3VudCBUaGUgbnVtYmVyIG9mIGF0b21pYyBjaGFuZ2VzIHRvIGlucHV0LgogICAgICovCgogIH0sIHsKICAgIGtleTogImlucHV0IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBpbnB1dChjaGFuZ2VDb3VudCkgewogICAgICB0aGlzLnNpemUgKz0gY2hhbmdlQ291bnQ7CgogICAgICBpZiAodGhpcy5zaXplID49IHRoaXMubGltaXQpIHsKICAgICAgICB0aGlzLl9yZXNldCh0cnVlKTsKICAgICAgfQogICAgfQogICAgLyoqCiAgICAgKiBMb2NrcyB0aGUgYnVmZmVyLgogICAgICovCgogIH0sIHsKICAgIGtleTogImxvY2siLAogICAgdmFsdWU6IGZ1bmN0aW9uIGxvY2soKSB7CiAgICAgIHRoaXMuaXNMb2NrZWQgPSB0cnVlOwogICAgfQogICAgLyoqCiAgICAgKiBVbmxvY2tzIHRoZSBidWZmZXIuCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAidW5sb2NrIiwKICAgIHZhbHVlOiBmdW5jdGlvbiB1bmxvY2soKSB7CiAgICAgIHRoaXMuaXNMb2NrZWQgPSBmYWxzZTsKICAgIH0KICAgIC8qKgogICAgICogRGVzdHJveXMgdGhlIGJ1ZmZlci4KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJkZXN0cm95IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBkZXN0cm95KCkgewogICAgICB0aGlzLm1vZGVsLmRvY3VtZW50Lm9mZignY2hhbmdlJywgdGhpcy5fY2hhbmdlQ2FsbGJhY2spOwogICAgICB0aGlzLm1vZGVsLmRvY3VtZW50LnNlbGVjdGlvbi5vZmYoJ2NoYW5nZTpyYW5nZScsIHRoaXMuX3NlbGVjdGlvbkNoYW5nZUNhbGxiYWNrKTsKICAgICAgdGhpcy5tb2RlbC5kb2N1bWVudC5zZWxlY3Rpb24ub2ZmKCdjaGFuZ2U6YXR0cmlidXRlJywgdGhpcy5fc2VsZWN0aW9uQ2hhbmdlQ2FsbGJhY2spOwogICAgfQogICAgLyoqCiAgICAgKiBSZXNldHMgdGhlIGNoYW5nZSBidWZmZXIuCiAgICAgKgogICAgICogQHByaXZhdGUKICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2lnbm9yZUxvY2tdIFdoZXRoZXIgaW50ZXJuYWwgbG9jayB7QGxpbmsgI2lzTG9ja2VkfSBzaG91bGQgYmUgaWdub3JlZC4KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJfcmVzZXQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9yZXNldChpZ25vcmVMb2NrKSB7CiAgICAgIGlmICghdGhpcy5pc0xvY2tlZCB8fCBpZ25vcmVMb2NrKSB7CiAgICAgICAgdGhpcy5fYmF0Y2ggPSBudWxsOwogICAgICAgIHRoaXMuc2l6ZSA9IDA7CiAgICAgIH0KICAgIH0KICB9XSk7CgogIHJldHVybiBDaGFuZ2VCdWZmZXI7Cn0oKTsKCmV4cG9ydCB7IENoYW5nZUJ1ZmZlciBhcyBkZWZhdWx0IH07"},{"version":3,"sources":["/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-typing/src/utils/changebuffer.js"],"names":["ChangeBuffer","model","limit","size","isLocked","_changeCallback","evt","batch","type","_batch","_reset","_selectionChangeCallback","document","on","selection","createBatch","changeCount","off","ignoreLock"],"mappings":";;;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACqBA,Y;AACpB;AACD;AACA;AACA;AACA;AACA;AACC,wBAAaC,KAAb,EAAiC;AAAA;;AAAA,QAAbC,KAAa,uEAAL,EAAK;;AAAA;;AAChC;AACF;AACA;AACA;AACA;AACA;AACE,SAAKD,KAAL,GAAaA,KAAb;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;;AACE,SAAKE,IAAL,GAAY,CAAZ;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,SAAKD,KAAL,GAAaA,KAAb;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,SAAKE,QAAL,GAAgB,KAAhB,CAhCgC,CAkChC;AACA;AACA;AACA;AACA;AACA;;AACA,SAAKC,eAAL,GAAuB,UAAEC,GAAF,EAAOC,KAAP,EAAkB;AACxC,UAAKA,KAAK,CAACC,IAAN,IAAc,aAAd,IAA+BD,KAAK,KAAK,KAAI,CAACE,MAAnD,EAA4D;AAC3D,QAAA,KAAI,CAACC,MAAL,CAAa,IAAb;AACA;AACD,KAJD;;AAMA,SAAKC,wBAAL,GAAgC,YAAM;AACrC,MAAA,KAAI,CAACD,MAAL;AACA,KAFD;;AAIA,SAAKT,KAAL,CAAWW,QAAX,CAAoBC,EAApB,CAAwB,QAAxB,EAAkC,KAAKR,eAAvC;AAEA,SAAKJ,KAAL,CAAWW,QAAX,CAAoBE,SAApB,CAA8BD,EAA9B,CAAkC,cAAlC,EAAkD,KAAKF,wBAAvD;AACA,SAAKV,KAAL,CAAWW,QAAX,CAAoBE,SAApB,CAA8BD,EAA9B,CAAkC,kBAAlC,EAAsD,KAAKF,wBAA3D;AAEA;AACF;AACA;AACA;AACA;AACA;;AAEE;AACF;AACA;AACA;AACA;AACA;;AAEE;AACF;AACA;AACA;AACA;AACA;AACE;AAED;AACD;AACA;AACA;AACA;AACA;;;;;SACC,eAAY;AACX,UAAK,CAAC,KAAKF,MAAX,EAAoB;AACnB,aAAKA,MAAL,GAAc,KAAKR,KAAL,CAAWc,WAAX,EAAd;AACA;;AAED,aAAO,KAAKN,MAAZ;AACA;AAED;AACD;AACA;AACA;AACA;AACA;;;;WACC,eAAOO,WAAP,EAAqB;AACpB,WAAKb,IAAL,IAAaa,WAAb;;AAEA,UAAK,KAAKb,IAAL,IAAa,KAAKD,KAAvB,EAA+B;AAC9B,aAAKQ,MAAL,CAAa,IAAb;AACA;AACD;AAED;AACD;AACA;;;;WACC,gBAAO;AACN,WAAKN,QAAL,GAAgB,IAAhB;AACA;AAED;AACD;AACA;;;;WACC,kBAAS;AACR,WAAKA,QAAL,GAAgB,KAAhB;AACA;AAED;AACD;AACA;;;;WACC,mBAAU;AACT,WAAKH,KAAL,CAAWW,QAAX,CAAoBK,GAApB,CAAyB,QAAzB,EAAmC,KAAKZ,eAAxC;AACA,WAAKJ,KAAL,CAAWW,QAAX,CAAoBE,SAApB,CAA8BG,GAA9B,CAAmC,cAAnC,EAAmD,KAAKN,wBAAxD;AACA,WAAKV,KAAL,CAAWW,QAAX,CAAoBE,SAApB,CAA8BG,GAA9B,CAAmC,kBAAnC,EAAuD,KAAKN,wBAA5D;AACA;AAED;AACD;AACA;AACA;AACA;AACA;;;;WACC,gBAAQO,UAAR,EAAqB;AACpB,UAAK,CAAC,KAAKd,QAAN,IAAkBc,UAAvB,EAAoC;AACnC,aAAKT,MAAL,GAAc,IAAd;AACA,aAAKN,IAAL,GAAY,CAAZ;AACA;AACD;;;;;;SAlJmBH,Y","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module typing/utils/changebuffer\n */\n\n/**\n * Change buffer allows to group atomic changes (like characters that have been typed) into\n * {@link module:engine/model/batch~Batch batches}.\n *\n * Batches represent single undo steps, hence changes added to one single batch are undone together.\n *\n * The buffer has a configurable limit of atomic changes that it can accommodate. After the limit was\n * exceeded (see {@link ~ChangeBuffer#input}), a new batch is created in {@link ~ChangeBuffer#batch}.\n *\n * To use the change buffer you need to let it know about the number of changes that were added to the batch:\n *\n *\t\tconst buffer = new ChangeBuffer( model, LIMIT );\n *\n *\t\t// Later on in your feature:\n *\t\tbuffer.batch.insert( pos, insertedCharacters );\n *\t\tbuffer.input( insertedCharacters.length );\n *\n */\nexport default class ChangeBuffer {\n\t/**\n\t * Creates a new instance of the change buffer.\n\t *\n\t * @param {module:engine/model/model~Model} model\n\t * @param {Number} [limit=20] The maximum number of atomic changes which can be contained in one batch.\n\t */\n\tconstructor( model, limit = 20 ) {\n\t\t/**\n\t\t * The model instance.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/model~Model} #model\n\t\t */\n\t\tthis.model = model;\n\n\t\t/**\n\t\t * The number of atomic changes in the buffer. Once it exceeds the {@link #limit},\n\t\t * the {@link #batch batch} is set to a new one.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Number} #size\n\t\t */\n\t\tthis.size = 0;\n\n\t\t/**\n\t\t * The maximum number of atomic changes which can be contained in one batch.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Number} #limit\n\t\t */\n\t\tthis.limit = limit;\n\n\t\t/**\n\t\t * Whether the buffer is locked. A locked buffer cannot be reset unless it gets unlocked.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Boolean} #isLocked\n\t\t */\n\t\tthis.isLocked = false;\n\n\t\t// The function to be called in order to notify the buffer about batches which appeared in the document.\n\t\t// The callback will check whether it is a new batch and in that case the buffer will be flushed.\n\t\t//\n\t\t// The reason why the buffer needs to be flushed whenever a new batch appears is that the changes added afterwards\n\t\t// should be added to a new batch. For instance, when the  user types, then inserts an image, and then types again,\n\t\t// the characters typed after inserting the image should be added to a different batch than the characters typed before.\n\t\tthis._changeCallback = ( evt, batch ) => {\n\t\t\tif ( batch.type != 'transparent' && batch !== this._batch ) {\n\t\t\t\tthis._reset( true );\n\t\t\t}\n\t\t};\n\n\t\tthis._selectionChangeCallback = () => {\n\t\t\tthis._reset();\n\t\t};\n\n\t\tthis.model.document.on( 'change', this._changeCallback );\n\n\t\tthis.model.document.selection.on( 'change:range', this._selectionChangeCallback );\n\t\tthis.model.document.selection.on( 'change:attribute', this._selectionChangeCallback );\n\n\t\t/**\n\t\t * The current batch instance.\n\t\t *\n\t\t * @private\n\t\t * @member #_batch\n\t\t */\n\n\t\t/**\n\t\t * The callback to document the change event which later needs to be removed.\n\t\t *\n\t\t * @private\n\t\t * @member #_changeCallback\n\t\t */\n\n\t\t/**\n\t\t * The callback to document selection `change:attribute` and `change:range` events which resets the buffer.\n\t\t *\n\t\t * @private\n\t\t * @member #_selectionChangeCallback\n\t\t */\n\t}\n\n\t/**\n\t * The current batch to which a feature should add its operations. Once the {@link #size}\n\t * is reached or exceeds the {@link #limit}, the batch is set to a new instance and the size is reset.\n\t *\n\t * @type {module:engine/model/batch~Batch}\n\t */\n\tget batch() {\n\t\tif ( !this._batch ) {\n\t\t\tthis._batch = this.model.createBatch();\n\t\t}\n\n\t\treturn this._batch;\n\t}\n\n\t/**\n\t * The input number of changes into the buffer. Once the {@link #size} is\n\t * reached or exceeds the {@link #limit}, the batch is set to a new instance and the size is reset.\n\t *\n\t * @param {Number} changeCount The number of atomic changes to input.\n\t */\n\tinput( changeCount ) {\n\t\tthis.size += changeCount;\n\n\t\tif ( this.size >= this.limit ) {\n\t\t\tthis._reset( true );\n\t\t}\n\t}\n\n\t/**\n\t * Locks the buffer.\n\t */\n\tlock() {\n\t\tthis.isLocked = true;\n\t}\n\n\t/**\n\t * Unlocks the buffer.\n\t */\n\tunlock() {\n\t\tthis.isLocked = false;\n\t}\n\n\t/**\n\t * Destroys the buffer.\n\t */\n\tdestroy() {\n\t\tthis.model.document.off( 'change', this._changeCallback );\n\t\tthis.model.document.selection.off( 'change:range', this._selectionChangeCallback );\n\t\tthis.model.document.selection.off( 'change:attribute', this._selectionChangeCallback );\n\t}\n\n\t/**\n\t * Resets the change buffer.\n\t *\n\t * @private\n\t * @param {Boolean} [ignoreLock] Whether internal lock {@link #isLocked} should be ignored.\n\t */\n\t_reset( ignoreLock ) {\n\t\tif ( !this.isLocked || ignoreLock ) {\n\t\t\tthis._batch = null;\n\t\t\tthis.size = 0;\n\t\t}\n\t}\n}\n"]}]}