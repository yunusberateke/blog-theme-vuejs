{"remainingRequest":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/babel-loader/lib/index.js!/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-dev-webpack-plugin/lib/translatesourceloader.js?{}!/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-widget/src/highlightstack.js","dependencies":[{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-widget/src/highlightstack.js","mtime":499162500000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-dev-webpack-plugin/lib/translatesourceloader.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-widget/src/highlightstack.js"],"names":["EmitterMixin","mix","HighlightStack","_stack","descriptor","writer","stack","oldTop","_insertDescriptor","newTop","compareDescriptors","fire","oldDescriptor","newDescriptor","id","_removeDescriptor","index","findIndex","item","splice","i","shouldABeBeforeB","a","b","priority","classesToString","classes","Array","isArray","sort","join"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module widget/highlightstack\n */\n\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\n\n/**\n * Class used to handle correct order of highlights on elements.\n *\n * When different highlights are applied to same element correct order should be preserved:\n *\n * * highlight with highest priority should be applied,\n * * if two highlights have same priority - sort by CSS class provided in\n * {@link module:engine/conversion/downcasthelpers~HighlightDescriptor}.\n *\n * This way, highlight will be applied with the same rules it is applied on texts.\n */\nexport default class HighlightStack {\n\t/**\n\t * Creates class instance.\n\t */\n\tconstructor() {\n\t\tthis._stack = [];\n\t}\n\n\t/**\n\t * Adds highlight descriptor to the stack.\n\t *\n\t * @fires change:top\n\t * @param {module:engine/conversion/downcasthelpers~HighlightDescriptor} descriptor\n\t * @param {module:engine/view/downcastwriter~DowncastWriter} writer\n\t */\n\tadd( descriptor, writer ) {\n\t\tconst stack = this._stack;\n\n\t\t// Save top descriptor and insert new one. If top is changed - fire event.\n\t\tconst oldTop = stack[ 0 ];\n\t\tthis._insertDescriptor( descriptor );\n\t\tconst newTop = stack[ 0 ];\n\n\t\t// When new object is at the top and stores different information.\n\t\tif ( oldTop !== newTop && !compareDescriptors( oldTop, newTop ) ) {\n\t\t\tthis.fire( 'change:top', {\n\t\t\t\toldDescriptor: oldTop,\n\t\t\t\tnewDescriptor: newTop,\n\t\t\t\twriter\n\t\t\t} );\n\t\t}\n\t}\n\n\t/**\n\t * Removes highlight descriptor from the stack.\n\t *\n\t * @fires change:top\n\t * @param {String} id Id of the descriptor to remove.\n\t * @param {module:engine/view/downcastwriter~DowncastWriter} writer\n\t */\n\tremove( id, writer ) {\n\t\tconst stack = this._stack;\n\n\t\tconst oldTop = stack[ 0 ];\n\t\tthis._removeDescriptor( id );\n\t\tconst newTop = stack[ 0 ];\n\n\t\t// When new object is at the top and stores different information.\n\t\tif ( oldTop !== newTop && !compareDescriptors( oldTop, newTop ) ) {\n\t\t\tthis.fire( 'change:top', {\n\t\t\t\toldDescriptor: oldTop,\n\t\t\t\tnewDescriptor: newTop,\n\t\t\t\twriter\n\t\t\t} );\n\t\t}\n\t}\n\n\t/**\n\t * Inserts given descriptor in correct place in the stack. It also takes care about updating information when\n\t * descriptor with same id is already present.\n\t *\n\t * @private\n\t * @param {module:engine/conversion/downcasthelpers~HighlightDescriptor} descriptor\n\t */\n\t_insertDescriptor( descriptor ) {\n\t\tconst stack = this._stack;\n\t\tconst index = stack.findIndex( item => item.id === descriptor.id );\n\n\t\t// Inserting exact same descriptor - do nothing.\n\t\tif ( compareDescriptors( descriptor, stack[ index ] ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// If descriptor with same id but with different information is on the stack - remove it.\n\t\tif ( index > -1 ) {\n\t\t\tstack.splice( index, 1 );\n\t\t}\n\n\t\t// Find correct place to insert descriptor in the stack.\n\t\t// It have different information (for example priority) so it must be re-inserted in correct place.\n\t\tlet i = 0;\n\n\t\twhile ( stack[ i ] && shouldABeBeforeB( stack[ i ], descriptor ) ) {\n\t\t\ti++;\n\t\t}\n\n\t\tstack.splice( i, 0, descriptor );\n\t}\n\n\t/**\n\t * Removes descriptor with given id from the stack.\n\t *\n\t * @private\n\t * @param {String} id Descriptor's id.\n\t */\n\t_removeDescriptor( id ) {\n\t\tconst stack = this._stack;\n\t\tconst index = stack.findIndex( item => item.id === id );\n\n\t\t// If descriptor with same id is on the list - remove it.\n\t\tif ( index > -1 ) {\n\t\t\tstack.splice( index, 1 );\n\t\t}\n\t}\n}\n\nmix( HighlightStack, EmitterMixin );\n\n// Compares two descriptors by checking their priority and class list.\n//\n// @param {module:engine/conversion/downcasthelpers~HighlightDescriptor} a\n// @param {module:engine/conversion/downcasthelpers~HighlightDescriptor} b\n// @returns {Boolean} Returns true if both descriptors are defined and have same priority and classes.\nfunction compareDescriptors( a, b ) {\n\treturn a && b && a.priority == b.priority && classesToString( a.classes ) == classesToString( b.classes );\n}\n\n// Checks whenever first descriptor should be placed in the stack before second one.\n//\n// @param {module:engine/conversion/downcasthelpers~HighlightDescriptor} a\n// @param {module:engine/conversion/downcasthelpers~HighlightDescriptor} b\n// @returns {Boolean}\nfunction shouldABeBeforeB( a, b ) {\n\tif ( a.priority > b.priority ) {\n\t\treturn true;\n\t} else if ( a.priority < b.priority ) {\n\t\treturn false;\n\t}\n\n\t// When priorities are equal and names are different - use classes to compare.\n\treturn classesToString( a.classes ) > classesToString( b.classes );\n}\n\n// Converts CSS classes passed with {@link module:engine/conversion/downcasthelpers~HighlightDescriptor} to\n// sorted string.\n//\n// @param {String|Array<String>} descriptor\n// @returns {String}\nfunction classesToString( classes ) {\n\treturn Array.isArray( classes ) ? classes.sort().join( ',' ) : classes;\n}\n\n/**\n * Fired when top element on {@link module:widget/highlightstack~HighlightStack} has been changed\n *\n * @event change:top\n * @param {Object} data Additional information about the change.\n * @param {module:engine/conversion/downcasthelpers~HighlightDescriptor} [data.newDescriptor] New highlight\n * descriptor. It will be `undefined` when last descriptor is removed from the stack.\n * @param {module:engine/conversion/downcasthelpers~HighlightDescriptor} [data.oldDescriptor] Old highlight\n * descriptor. It will be `undefined` when first descriptor is added to the stack.\n * @param {module:engine/view/downcastwriter~DowncastWriter} writer View writer that can be used to modify element.\n */\n"]}]}