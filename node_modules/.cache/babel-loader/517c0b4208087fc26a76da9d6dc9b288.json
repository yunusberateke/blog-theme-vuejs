{"remainingRequest":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/babel-loader/lib/index.js!/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-dev-webpack-plugin/lib/translatesourceloader.js?{}!/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-utils/src/keyboard.js","dependencies":[{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-utils/src/keyboard.js","mtime":499162500000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-dev-webpack-plugin/lib/translatesourceloader.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-utils/src/keyboard.js"],"names":["CKEditorError","env","modifiersToGlyphsMac","ctrl","cmd","alt","shift","modifiersToGlyphsNonMac","keyCodes","generateKnownKeyCodes","keyCodeNames","Object","fromEntries","entries","map","name","code","charAt","toUpperCase","slice","getCode","key","keyCode","toLowerCase","altKey","ctrlKey","shiftKey","metaKey","parseKeystroke","keystroke","splitKeystrokeText","getEnvKeyCode","reduce","sum","getEnvKeystrokeText","keystrokeCode","modifiersToGlyphs","isMac","modifiers","glyph","isArrowKeyCode","arrowright","arrowleft","arrowup","arrowdown","getLocalizedArrowKeyCodeDirection","contentLanguageDirection","isLtrContent","endsWith","isForwardArrowKeyCode","localizedKeyCodeDirection","backspace","delete","enter","space","esc","tab","letter","String","fromCharCode","split","trim"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * A set of utilities related to keyboard support.\n *\n * @module utils/keyboard\n */\n\nimport CKEditorError from './ckeditorerror';\nimport env from './env';\n\nconst modifiersToGlyphsMac = {\n\tctrl: '⌃',\n\tcmd: '⌘',\n\talt: '⌥',\n\tshift: '⇧'\n};\n\nconst modifiersToGlyphsNonMac = {\n\tctrl: 'Ctrl+',\n\talt: 'Alt+',\n\tshift: 'Shift+'\n};\n\n/**\n * An object with `keyName => keyCode` pairs for a set of known keys.\n *\n * Contains:\n *\n * * `a-z`,\n * * `0-9`,\n * * `f1-f12`,\n * * `arrow(left|up|right|bottom)`,\n * * `backspace`, `delete`, `enter`, `esc`, `tab`,\n * * `ctrl`, `cmd`, `shift`, `alt`.\n */\nexport const keyCodes = generateKnownKeyCodes();\n\nconst keyCodeNames = Object.fromEntries(\n\tObject.entries( keyCodes ).map( ( [ name, code ] ) => [ code, name.charAt( 0 ).toUpperCase() + name.slice( 1 ) ] )\n);\n\n/**\n * Converts a key name or {@link module:utils/keyboard~KeystrokeInfo keystroke info} into a key code.\n *\n * Note: Key names are matched with {@link module:utils/keyboard~keyCodes} in a case-insensitive way.\n *\n * @param {String|module:utils/keyboard~KeystrokeInfo} A key name (see {@link module:utils/keyboard~keyCodes})\n * or a keystroke data object.\n * @returns {Number} Key or keystroke code.\n */\nexport function getCode( key ) {\n\tlet keyCode;\n\n\tif ( typeof key == 'string' ) {\n\t\tkeyCode = keyCodes[ key.toLowerCase() ];\n\n\t\tif ( !keyCode ) {\n\t\t\t/**\n\t\t\t * Unknown key name. Only key names included in the {@link module:utils/keyboard~keyCodes} can be used.\n\t\t\t *\n\t\t\t * @error keyboard-unknown-key\n\t\t\t * @param {String} key\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'keyboard-unknown-key', null, { key } );\n\t\t}\n\t} else {\n\t\tkeyCode = key.keyCode +\n\t\t\t( key.altKey ? keyCodes.alt : 0 ) +\n\t\t\t( key.ctrlKey ? keyCodes.ctrl : 0 ) +\n\t\t\t( key.shiftKey ? keyCodes.shift : 0 ) +\n\t\t\t( key.metaKey ? keyCodes.cmd : 0 );\n\t}\n\n\treturn keyCode;\n}\n\n/**\n * Parses the keystroke and returns a keystroke code that will match the code returned by\n * {@link module:utils/keyboard~getCode} for the corresponding {@link module:utils/keyboard~KeystrokeInfo keystroke info}.\n *\n * The keystroke can be passed in two formats:\n *\n * * as a single string – e.g. `ctrl + A`,\n * * as an array of {@link module:utils/keyboard~keyCodes known key names} and key codes – e.g.:\n *   * `[ 'ctrl', 32 ]` (ctrl + space),\n *   * `[ 'ctrl', 'a' ]` (ctrl + A).\n *\n * Note: Key names are matched with {@link module:utils/keyboard~keyCodes} in a case-insensitive way.\n *\n * Note: Only keystrokes with a single non-modifier key are supported (e.g. `ctrl+A` is OK, but `ctrl+A+B` is not).\n *\n * Note: On macOS, keystroke handling is translating the `Ctrl` key to the `Cmd` key and handling only that keystroke.\n * For example, a registered keystroke `Ctrl+A` will be translated to `Cmd+A` on macOS. To disable the translation of some keystroke,\n * use the forced modifier: `Ctrl!+A` (note the exclamation mark).\n *\n * @param {String|Array.<Number|String>} keystroke The keystroke definition.\n * @returns {Number} Keystroke code.\n */\nexport function parseKeystroke( keystroke ) {\n\tif ( typeof keystroke == 'string' ) {\n\t\tkeystroke = splitKeystrokeText( keystroke );\n\t}\n\n\treturn keystroke\n\t\t.map( key => ( typeof key == 'string' ) ? getEnvKeyCode( key ) : key )\n\t\t.reduce( ( key, sum ) => sum + key, 0 );\n}\n\n/**\n * Translates any keystroke string text like `\"Ctrl+A\"` to an\n * environment–specific keystroke, i.e. `\"⌘A\"` on macOS.\n *\n * @param {String} keystroke The keystroke text.\n * @returns {String} The keystroke text specific for the environment.\n */\nexport function getEnvKeystrokeText( keystroke ) {\n\tlet keystrokeCode = parseKeystroke( keystroke );\n\n\tconst modifiersToGlyphs = Object.entries( env.isMac ? modifiersToGlyphsMac : modifiersToGlyphsNonMac );\n\n\tconst modifiers = modifiersToGlyphs.reduce( ( modifiers, [ name, glyph ] ) => {\n\t\t// Modifier keys are stored as a bit mask so extract those from the keystroke code.\n\t\tif ( ( keystrokeCode & keyCodes[ name ] ) != 0 ) {\n\t\t\tkeystrokeCode &= ~keyCodes[ name ];\n\t\t\tmodifiers += glyph;\n\t\t}\n\n\t\treturn modifiers;\n\t}, '' );\n\n\treturn modifiers + ( keystrokeCode ? keyCodeNames[ keystrokeCode ] : '' );\n}\n\n/**\n * Returns `true` if the provided key code represents one of the arrow keys.\n *\n * @param {Number} keyCode A key code as in {@link module:utils/keyboard~KeystrokeInfo#keyCode}.\n * @returns {Boolean}\n */\nexport function isArrowKeyCode( keyCode ) {\n\treturn keyCode == keyCodes.arrowright ||\n\t\tkeyCode == keyCodes.arrowleft ||\n\t\tkeyCode == keyCodes.arrowup ||\n\t\tkeyCode == keyCodes.arrowdown;\n}\n\n/**\n * Returns the direction in which the {@link module:engine/model/documentselection~DocumentSelection selection}\n * will move when the provided arrow key code is pressed considering the language direction of the editor content.\n *\n * For instance, in right–to–left (RTL) content languages, pressing the left arrow means moving the selection right (forward)\n * in the model structure. Similarly, pressing the right arrow moves the selection left (backward).\n *\n * @param {Number} keyCode A key code as in {@link module:utils/keyboard~KeystrokeInfo#keyCode}.\n * @param {'ltr'|'rtl'} contentLanguageDirection The content language direction, corresponding to\n * {@link module:utils/locale~Locale#contentLanguageDirection}.\n * @returns {'left'|'up'|'right'|'down'} Localized arrow direction.\n */\nexport function getLocalizedArrowKeyCodeDirection( keyCode, contentLanguageDirection ) {\n\tconst isLtrContent = contentLanguageDirection === 'ltr';\n\n\tswitch ( keyCode ) {\n\t\tcase keyCodes.arrowleft:\n\t\t\treturn isLtrContent ? 'left' : 'right';\n\n\t\tcase keyCodes.arrowright:\n\t\t\treturn isLtrContent ? 'right' : 'left';\n\n\t\tcase keyCodes.arrowup:\n\t\t\treturn 'up';\n\n\t\tcase keyCodes.arrowdown:\n\t\t\treturn 'down';\n\t}\n}\n\n// Converts a key name to the key code with mapping based on the env.\n//\n// See: {@link module:utils/keyboard~getCode}.\n//\n// @param {String} key The key name (see {@link module:utils/keyboard~keyCodes}).\n// @returns {Number} Key code.\nfunction getEnvKeyCode( key ) {\n\t// Don't remap modifier key for forced modifiers.\n\tif ( key.endsWith( '!' ) ) {\n\t\treturn getCode( key.slice( 0, -1 ) );\n\t}\n\n\tconst code = getCode( key );\n\n\treturn env.isMac && code == keyCodes.ctrl ? keyCodes.cmd : code;\n}\n\n/**\n * Determines if the provided key code moves the {@link module:engine/model/documentselection~DocumentSelection selection}\n * forward or backward considering the language direction of the editor content.\n *\n * For instance, in right–to–left (RTL) languages, pressing the left arrow means moving forward\n * in the model structure. Similarly, pressing the right arrow moves the selection backward.\n *\n * @param {Number} keyCode A key code as in {@link module:utils/keyboard~KeystrokeInfo#keyCode}.\n * @param {'ltr'|'rtl'} contentLanguageDirection The content language direction, corresponding to\n * {@link module:utils/locale~Locale#contentLanguageDirection}.\n * @returns {Boolean}\n */\nexport function isForwardArrowKeyCode( keyCode, contentLanguageDirection ) {\n\tconst localizedKeyCodeDirection = getLocalizedArrowKeyCodeDirection( keyCode, contentLanguageDirection );\n\n\treturn localizedKeyCodeDirection === 'down' || localizedKeyCodeDirection === 'right';\n}\n\nfunction generateKnownKeyCodes() {\n\tconst keyCodes = {\n\t\tarrowleft: 37,\n\t\tarrowup: 38,\n\t\tarrowright: 39,\n\t\tarrowdown: 40,\n\t\tbackspace: 8,\n\t\tdelete: 46,\n\t\tenter: 13,\n\t\tspace: 32,\n\t\tesc: 27,\n\t\ttab: 9,\n\n\t\t// The idea about these numbers is that they do not collide with any real key codes, so we can use them\n\t\t// like bit masks.\n\t\tctrl: 0x110000,\n\t\tshift: 0x220000,\n\t\talt: 0x440000,\n\t\tcmd: 0x880000\n\t};\n\n\t// a-z\n\tfor ( let code = 65; code <= 90; code++ ) {\n\t\tconst letter = String.fromCharCode( code );\n\n\t\tkeyCodes[ letter.toLowerCase() ] = code;\n\t}\n\n\t// 0-9\n\tfor ( let code = 48; code <= 57; code++ ) {\n\t\tkeyCodes[ code - 48 ] = code;\n\t}\n\n\t// F1-F12\n\tfor ( let code = 112; code <= 123; code++ ) {\n\t\tkeyCodes[ 'f' + ( code - 111 ) ] = code;\n\t}\n\n\treturn keyCodes;\n}\n\nfunction splitKeystrokeText( keystroke ) {\n\treturn keystroke.split( '+' ).map( key => key.trim() );\n}\n\n/**\n * Information about the keystroke.\n *\n * @interface module:utils/keyboard~KeystrokeInfo\n */\n\n/**\n * The [key code](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/keyCode).\n *\n * @member {Number} module:utils/keyboard~KeystrokeInfo#keyCode\n */\n\n/**\n * Whether the <kbd>Alt</kbd> modifier was pressed.\n *\n * @member {Boolean} module:utils/keyboard~KeystrokeInfo#altKey\n */\n\n/**\n * Whether the <kbd>Ctrl</kbd> modifier was pressed.\n *\n * @member {Boolean} module:utils/keyboard~KeystrokeInfo#ctrlKey\n */\n\n/**\n * Whether the <kbd>Shift</kbd> modifier was pressed.\n *\n * @member {Boolean} module:utils/keyboard~KeystrokeInfo#shiftKey\n */\n\n/**\n * Whether the <kbd>Cmd</kbd> modifier was pressed.\n *\n * @member {Boolean} module:utils/keyboard~KeystrokeInfo#metaKey\n */\n"]}]}