{"remainingRequest":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/babel-loader/lib/index.js!/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-dev-webpack-plugin/lib/translatesourceloader.js?{}!/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-engine/src/model/range.js","dependencies":[{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-engine/src/model/range.js","mtime":499162500000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-dev-webpack-plugin/lib/translatesourceloader.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/ekeberat/Yandex.Disk/Projelerim/BenimProjelerim/websitem/websitem-web/node_modules/@ckeditor/ckeditor5-engine/src/model/range.js"],"names":["Position","TreeWalker","CKEditorError","compareArrays","Range","start","end","_createAt","stickiness","isCollapsed","Symbol","iterator","boundaries","ignoreElementEnd","isEqual","startParentPath","getParentPath","endParentPath","root","position","isAfter","isBefore","otherRange","loose","containsStart","containsPosition","containsEnd","item","pos","_createBefore","type","ranges","isIntersecting","push","commonRangeStart","commonRangeEnd","shouldJoin","isTouching","startPosition","endPosition","diffAt","getCommonPath","length","posParent","parent","path","howMany","maxOffset","offset","getShiftedBy","slice","options","treeWalker","value","nextPosition","operation","_getTransformedByInsertOperation","_getTransformedByMoveOperation","_getTransformedBySplitOperation","_getTransformedByMergeOperation","operations","i","result","getTransformedByOperation","splice","range","j","next","containsRange","getCommonAncestor","nodeAfterStart","nodeAfter","nodeBeforeEnd","nodeBefore","is","toJSON","constructor","spread","_getTransformedByInsertion","sourcePosition","targetPosition","_getTransformedByMove","insertionPosition","deletionPosition","insertPosition","newPos","moveRange","_createFromPositionAndShift","_getTransformedByDeletion","differenceSet","getDifference","difference","common","getIntersection","transformedCommon","_getCombined","deletePosition","newStart","newEnd","shift","element","offsetSize","clone","ref","sort","a","b","refIndex","indexOf","json","doc","fromJSON"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/range\n */\n\nimport Position from './position';\nimport TreeWalker from './treewalker';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport compareArrays from '@ckeditor/ckeditor5-utils/src/comparearrays';\n\n/**\n * Represents a range in the model tree.\n *\n * A range is defined by its {@link module:engine/model/range~Range#start} and {@link module:engine/model/range~Range#end}\n * positions.\n *\n * You can create range instances via its constructor or the `createRange*()` factory methods of\n * {@link module:engine/model/model~Model} and {@link module:engine/model/writer~Writer}.\n */\nexport default class Range {\n\t/**\n\t * Creates a range spanning from `start` position to `end` position.\n\t *\n\t * @param {module:engine/model/position~Position} start Start position.\n\t * @param {module:engine/model/position~Position} [end] End position. If not set, range will be collapsed at `start` position.\n\t */\n\tconstructor( start, end = null ) {\n\t\t/**\n\t\t * Start position.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/position~Position}\n\t\t */\n\t\tthis.start = Position._createAt( start );\n\n\t\t/**\n\t\t * End position.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/position~Position}\n\t\t */\n\t\tthis.end = end ? Position._createAt( end ) : Position._createAt( start );\n\n\t\t// If the range is collapsed, treat in a similar way as a position and set its boundaries stickiness to 'toNone'.\n\t\t// In other case, make the boundaries stick to the \"inside\" of the range.\n\t\tthis.start.stickiness = this.isCollapsed ? 'toNone' : 'toNext';\n\t\tthis.end.stickiness = this.isCollapsed ? 'toNone' : 'toPrevious';\n\t}\n\n\t/**\n\t * Iterable interface.\n\t *\n\t * Iterates over all {@link module:engine/model/item~Item items} that are in this range and returns\n\t * them together with additional information like length or {@link module:engine/model/position~Position positions},\n\t * grouped as {@link module:engine/model/treewalker~TreeWalkerValue}.\n\t * It iterates over all {@link module:engine/model/textproxy~TextProxy text contents} that are inside the range\n\t * and all the {@link module:engine/model/element~Element}s that are entered into when iterating over this range.\n\t *\n\t * This iterator uses {@link module:engine/model/treewalker~TreeWalker} with `boundaries` set to this range\n\t * and `ignoreElementEnd` option set to `true`.\n\t *\n\t * @returns {Iterable.<module:engine/model/treewalker~TreeWalkerValue>}\n\t */\n\t* [ Symbol.iterator ]() {\n\t\tyield* new TreeWalker( { boundaries: this, ignoreElementEnd: true } );\n\t}\n\n\t/**\n\t * Returns whether the range is collapsed, that is if {@link #start} and\n\t * {@link #end} positions are equal.\n\t *\n\t * @type {Boolean}\n\t */\n\tget isCollapsed() {\n\t\treturn this.start.isEqual( this.end );\n\t}\n\n\t/**\n\t * Returns whether this range is flat, that is if {@link #start} position and\n\t * {@link #end} position are in the same {@link module:engine/model/position~Position#parent}.\n\t *\n\t * @type {Boolean}\n\t */\n\tget isFlat() {\n\t\tconst startParentPath = this.start.getParentPath();\n\t\tconst endParentPath = this.end.getParentPath();\n\n\t\treturn compareArrays( startParentPath, endParentPath ) == 'same';\n\t}\n\n\t/**\n\t * Range root element.\n\t *\n\t * @type {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment}\n\t */\n\tget root() {\n\t\treturn this.start.root;\n\t}\n\n\t/**\n\t * Checks whether this range contains given {@link module:engine/model/position~Position position}.\n\t *\n\t * @param {module:engine/model/position~Position} position Position to check.\n\t * @returns {Boolean} `true` if given {@link module:engine/model/position~Position position} is contained\n\t * in this range,`false` otherwise.\n\t */\n\tcontainsPosition( position ) {\n\t\treturn position.isAfter( this.start ) && position.isBefore( this.end );\n\t}\n\n\t/**\n\t * Checks whether this range contains given {@link ~Range range}.\n\t *\n\t * @param {module:engine/model/range~Range} otherRange Range to check.\n\t * @param {Boolean} [loose=false] Whether the check is loose or strict. If the check is strict (`false`), compared range cannot\n\t * start or end at the same position as this range boundaries. If the check is loose (`true`), compared range can start, end or\n\t * even be equal to this range. Note that collapsed ranges are always compared in strict mode.\n\t * @returns {Boolean} `true` if given {@link ~Range range} boundaries are contained by this range, `false` otherwise.\n\t */\n\tcontainsRange( otherRange, loose = false ) {\n\t\tif ( otherRange.isCollapsed ) {\n\t\t\tloose = false;\n\t\t}\n\n\t\tconst containsStart = this.containsPosition( otherRange.start ) || ( loose && this.start.isEqual( otherRange.start ) );\n\t\tconst containsEnd = this.containsPosition( otherRange.end ) || ( loose && this.end.isEqual( otherRange.end ) );\n\n\t\treturn containsStart && containsEnd;\n\t}\n\n\t/**\n\t * Checks whether given {@link module:engine/model/item~Item} is inside this range.\n\t *\n\t * @param {module:engine/model/item~Item} item Model item to check.\n\t */\n\tcontainsItem( item ) {\n\t\tconst pos = Position._createBefore( item );\n\n\t\treturn this.containsPosition( pos ) || this.start.isEqual( pos );\n\t}\n\n\t/**\n\t * Checks whether this object is of the given.\n\t *\n\t *\t\trange.is( 'range' ); // -> true\n\t *\t\trange.is( 'model:range' ); // -> true\n\t *\n\t *\t\trange.is( 'view:range' ); // -> false\n\t *\t\trange.is( 'documentSelection' ); // -> false\n\t *\n\t * {@link module:engine/model/node~Node#is Check the entire list of model objects} which implement the `is()` method.\n\t *\n\t * @param {String} type\n\t * @returns {Boolean}\n\t */\n\tis( type ) {\n\t\treturn type === 'range' || type === 'model:range';\n\t}\n\n\t/**\n\t * Two ranges are equal if their {@link #start} and {@link #end} positions are equal.\n\t *\n\t * @param {module:engine/model/range~Range} otherRange Range to compare with.\n\t * @returns {Boolean} `true` if ranges are equal, `false` otherwise.\n\t */\n\tisEqual( otherRange ) {\n\t\treturn this.start.isEqual( otherRange.start ) && this.end.isEqual( otherRange.end );\n\t}\n\n\t/**\n\t * Checks and returns whether this range intersects with given range.\n\t *\n\t * @param {module:engine/model/range~Range} otherRange Range to compare with.\n\t * @returns {Boolean} `true` if ranges intersect, `false` otherwise.\n\t */\n\tisIntersecting( otherRange ) {\n\t\treturn this.start.isBefore( otherRange.end ) && this.end.isAfter( otherRange.start );\n\t}\n\n\t/**\n\t * Computes which part(s) of this {@link ~Range range} is not a part of given {@link ~Range range}.\n\t * Returned array contains zero, one or two {@link ~Range ranges}.\n\t *\n\t * Examples:\n\t *\n\t *\t\tlet range = model.createRange(\n\t *\t\t\tmodel.createPositionFromPath( root, [ 2, 7 ] ),\n\t *\t\t\tmodel.createPositionFromPath( root, [ 4, 0, 1 ] )\n\t *\t\t);\n\t *\t\tlet otherRange = model.createRange( model.createPositionFromPath( root, [ 1 ] ), model.createPositionFromPath( root, [ 5 ] ) );\n\t *\t\tlet transformed = range.getDifference( otherRange );\n\t *\t\t// transformed array has no ranges because `otherRange` contains `range`\n\t *\n\t *\t\totherRange = model.createRange( model.createPositionFromPath( root, [ 1 ] ), model.createPositionFromPath( root, [ 3 ] ) );\n\t *\t\ttransformed = range.getDifference( otherRange );\n\t *\t\t// transformed array has one range: from [ 3 ] to [ 4, 0, 1 ]\n\t *\n\t *\t\totherRange = model.createRange( model.createPositionFromPath( root, [ 3 ] ), model.createPositionFromPath( root, [ 4 ] ) );\n\t *\t\ttransformed = range.getDifference( otherRange );\n\t *\t\t// transformed array has two ranges: from [ 2, 7 ] to [ 3 ] and from [ 4 ] to [ 4, 0, 1 ]\n\t *\n\t * @param {module:engine/model/range~Range} otherRange Range to differentiate against.\n\t * @returns {Array.<module:engine/model/range~Range>} The difference between ranges.\n\t */\n\tgetDifference( otherRange ) {\n\t\tconst ranges = [];\n\n\t\tif ( this.isIntersecting( otherRange ) ) {\n\t\t\t// Ranges intersect.\n\n\t\t\tif ( this.containsPosition( otherRange.start ) ) {\n\t\t\t\t// Given range start is inside this range. This means that we have to\n\t\t\t\t// add shrunken range - from the start to the middle of this range.\n\t\t\t\tranges.push( new Range( this.start, otherRange.start ) );\n\t\t\t}\n\n\t\t\tif ( this.containsPosition( otherRange.end ) ) {\n\t\t\t\t// Given range end is inside this range. This means that we have to\n\t\t\t\t// add shrunken range - from the middle of this range to the end.\n\t\t\t\tranges.push( new Range( otherRange.end, this.end ) );\n\t\t\t}\n\t\t} else {\n\t\t\t// Ranges do not intersect, return the original range.\n\t\t\tranges.push( new Range( this.start, this.end ) );\n\t\t}\n\n\t\treturn ranges;\n\t}\n\n\t/**\n\t * Returns an intersection of this {@link ~Range range} and given {@link ~Range range}.\n\t * Intersection is a common part of both of those ranges. If ranges has no common part, returns `null`.\n\t *\n\t * Examples:\n\t *\n\t *\t\tlet range = model.createRange(\n\t *\t\t\tmodel.createPositionFromPath( root, [ 2, 7 ] ),\n\t *\t\t\tmodel.createPositionFromPath( root, [ 4, 0, 1 ] )\n\t *\t\t);\n\t *\t\tlet otherRange = model.createRange( model.createPositionFromPath( root, [ 1 ] ), model.createPositionFromPath( root, [ 2 ] ) );\n\t *\t\tlet transformed = range.getIntersection( otherRange ); // null - ranges have no common part\n\t *\n\t *\t\totherRange = model.createRange( model.createPositionFromPath( root, [ 3 ] ), model.createPositionFromPath( root, [ 5 ] ) );\n\t *\t\ttransformed = range.getIntersection( otherRange ); // range from [ 3 ] to [ 4, 0, 1 ]\n\t *\n\t * @param {module:engine/model/range~Range} otherRange Range to check for intersection.\n\t * @returns {module:engine/model/range~Range|null} A common part of given ranges or `null` if ranges have no common part.\n\t */\n\tgetIntersection( otherRange ) {\n\t\tif ( this.isIntersecting( otherRange ) ) {\n\t\t\t// Ranges intersect, so a common range will be returned.\n\t\t\t// At most, it will be same as this range.\n\t\t\tlet commonRangeStart = this.start;\n\t\t\tlet commonRangeEnd = this.end;\n\n\t\t\tif ( this.containsPosition( otherRange.start ) ) {\n\t\t\t\t// Given range start is inside this range. This means thaNt we have to\n\t\t\t\t// shrink common range to the given range start.\n\t\t\t\tcommonRangeStart = otherRange.start;\n\t\t\t}\n\n\t\t\tif ( this.containsPosition( otherRange.end ) ) {\n\t\t\t\t// Given range end is inside this range. This means that we have to\n\t\t\t\t// shrink common range to the given range end.\n\t\t\t\tcommonRangeEnd = otherRange.end;\n\t\t\t}\n\n\t\t\treturn new Range( commonRangeStart, commonRangeEnd );\n\t\t}\n\n\t\t// Ranges do not intersect, so they do not have common part.\n\t\treturn null;\n\t}\n\n\t/**\n\t * Returns a range created by joining this {@link ~Range range} with the given {@link ~Range range}.\n\t * If ranges have no common part, returns `null`.\n\t *\n\t * Examples:\n\t *\n\t *\t\tlet range = model.createRange(\n\t *\t\t\tmodel.createPositionFromPath( root, [ 2, 7 ] ),\n\t *\t\t\tmodel.createPositionFromPath( root, [ 4, 0, 1 ] )\n\t *\t\t);\n\t *\t\tlet otherRange = model.createRange(\n\t *\t\t\tmodel.createPositionFromPath( root, [ 1 ] ),\n\t *\t\t\tmodel.createPositionFromPath( root, [ 2 ] )\n \t *\t\t);\n\t *\t\tlet transformed = range.getJoined( otherRange ); // null - ranges have no common part\n\t *\n\t *\t\totherRange = model.createRange(\n\t *\t\t\tmodel.createPositionFromPath( root, [ 3 ] ),\n\t *\t\t\tmodel.createPositionFromPath( root, [ 5 ] )\n\t *\t\t);\n\t *\t\ttransformed = range.getJoined( otherRange ); // range from [ 2, 7 ] to [ 5 ]\n\t *\n\t * @param {module:engine/model/range~Range} otherRange Range to be joined.\n\t * @param {Boolean} [loose=false] Whether the intersection check is loose or strict. If the check is strict (`false`),\n\t * ranges are tested for intersection or whether start/end positions are equal. If the check is loose (`true`),\n\t * compared range is also checked if it's {@link module:engine/model/position~Position#isTouching touching} current range.\n\t * @returns {module:engine/model/range~Range|null} A sum of given ranges or `null` if ranges have no common part.\n\t */\n\tgetJoined( otherRange, loose = false ) {\n\t\tlet shouldJoin = this.isIntersecting( otherRange );\n\n\t\tif ( !shouldJoin ) {\n\t\t\tif ( this.start.isBefore( otherRange.start ) ) {\n\t\t\t\tshouldJoin = loose ? this.end.isTouching( otherRange.start ) : this.end.isEqual( otherRange.start );\n\t\t\t} else {\n\t\t\t\tshouldJoin = loose ? otherRange.end.isTouching( this.start ) : otherRange.end.isEqual( this.start );\n\t\t\t}\n\t\t}\n\n\t\tif ( !shouldJoin ) {\n\t\t\treturn null;\n\t\t}\n\n\t\tlet startPosition = this.start;\n\t\tlet endPosition = this.end;\n\n\t\tif ( otherRange.start.isBefore( startPosition ) ) {\n\t\t\tstartPosition = otherRange.start;\n\t\t}\n\n\t\tif ( otherRange.end.isAfter( endPosition ) ) {\n\t\t\tendPosition = otherRange.end;\n\t\t}\n\n\t\treturn new Range( startPosition, endPosition );\n\t}\n\n\t/**\n\t * Computes and returns the smallest set of {@link #isFlat flat} ranges, that covers this range in whole.\n\t *\n\t * See an example of a model structure (`[` and `]` are range boundaries):\n\t *\n\t *\t\troot                                                            root\n\t *\t\t |- element DIV                         DIV             P2              P3             DIV\n\t *\t\t |   |- element H                   H        P1        f o o           b a r       H         P4\n\t *\t\t |   |   |- \"fir[st\"             fir[st     lorem                               se]cond     ipsum\n\t *\t\t |   |- element P1\n\t *\t\t |   |   |- \"lorem\"                                              ||\n\t *\t\t |- element P2                                                   ||\n\t *\t\t |   |- \"foo\"                                                    VV\n\t *\t\t |- element P3\n\t *\t\t |   |- \"bar\"                                                   root\n\t *\t\t |- element DIV                         DIV             [P2             P3]             DIV\n\t *\t\t |   |- element H                   H       [P1]       f o o           b a r        H         P4\n\t *\t\t |   |   |- \"se]cond\"            fir[st]    lorem                               [se]cond     ipsum\n\t *\t\t |   |- element P4\n\t *\t\t |   |   |- \"ipsum\"\n\t *\n\t * As it can be seen, letters contained in the range are: `stloremfoobarse`, spread across different parents.\n\t * We are looking for minimal set of flat ranges that contains the same nodes.\n\t *\n\t * Minimal flat ranges for above range `( [ 0, 0, 3 ], [ 3, 0, 2 ] )` will be:\n\t *\n\t *\t\t( [ 0, 0, 3 ], [ 0, 0, 5 ] ) = \"st\"\n\t *\t\t( [ 0, 1 ], [ 0, 2 ] ) = element P1 (\"lorem\")\n\t *\t\t( [ 1 ], [ 3 ] ) = element P2, element P3 (\"foobar\")\n\t *\t\t( [ 3, 0, 0 ], [ 3, 0, 2 ] ) = \"se\"\n\t *\n\t * **Note:** if an {@link module:engine/model/element~Element element} is not wholly contained in this range, it won't be returned\n\t * in any of the returned flat ranges. See in the example how `H` elements at the beginning and at the end of the range\n\t * were omitted. Only their parts that were wholly in the range were returned.\n\t *\n\t * **Note:** this method is not returning flat ranges that contain no nodes.\n\t *\n\t * @returns {Array.<module:engine/model/range~Range>} Array of flat ranges covering this range.\n\t */\n\tgetMinimalFlatRanges() {\n\t\tconst ranges = [];\n\t\tconst diffAt = this.start.getCommonPath( this.end ).length;\n\n\t\tconst pos = Position._createAt( this.start );\n\t\tlet posParent = pos.parent;\n\n\t\t// Go up.\n\t\twhile ( pos.path.length > diffAt + 1 ) {\n\t\t\tconst howMany = posParent.maxOffset - pos.offset;\n\n\t\t\tif ( howMany !== 0 ) {\n\t\t\t\tranges.push( new Range( pos, pos.getShiftedBy( howMany ) ) );\n\t\t\t}\n\n\t\t\tpos.path = pos.path.slice( 0, -1 );\n\t\t\tpos.offset++;\n\t\t\tposParent = posParent.parent;\n\t\t}\n\n\t\t// Go down.\n\t\twhile ( pos.path.length <= this.end.path.length ) {\n\t\t\tconst offset = this.end.path[ pos.path.length - 1 ];\n\t\t\tconst howMany = offset - pos.offset;\n\n\t\t\tif ( howMany !== 0 ) {\n\t\t\t\tranges.push( new Range( pos, pos.getShiftedBy( howMany ) ) );\n\t\t\t}\n\n\t\t\tpos.offset = offset;\n\t\t\tpos.path.push( 0 );\n\t\t}\n\n\t\treturn ranges;\n\t}\n\n\t/**\n\t * Creates a {@link module:engine/model/treewalker~TreeWalker TreeWalker} instance with this range as a boundary.\n\t *\n\t * For example, to iterate over all items in the entire document root:\n\t *\n\t *\t\t// Create a range spanning over the entire root content:\n\t *\t\tconst range = editor.model.createRangeIn( editor.model.document.getRoot() );\n\t *\n\t *\t\t// Iterate over all items in this range:\n\t *\t\tfor ( const value of range.getWalker() ) {\n\t *\t\t\tconsole.log( value.item );\n\t *\t\t}\n\t *\n\t * @param {Object} options Object with configuration options. See {@link module:engine/model/treewalker~TreeWalker}.\n\t * @param {module:engine/model/position~Position} [options.startPosition]\n\t * @param {Boolean} [options.singleCharacters=false]\n\t * @param {Boolean} [options.shallow=false]\n\t * @param {Boolean} [options.ignoreElementEnd=false]\n\t */\n\tgetWalker( options = {} ) {\n\t\toptions.boundaries = this;\n\n\t\treturn new TreeWalker( options );\n\t}\n\n\t/**\n\t * Returns an iterator that iterates over all {@link module:engine/model/item~Item items} that are in this range and returns\n\t * them.\n\t *\n\t * This method uses {@link module:engine/model/treewalker~TreeWalker} with `boundaries` set to this range and `ignoreElementEnd` option\n\t * set to `true`. However it returns only {@link module:engine/model/item~Item model items},\n\t * not {@link module:engine/model/treewalker~TreeWalkerValue}.\n\t *\n\t * You may specify additional options for the tree walker. See {@link module:engine/model/treewalker~TreeWalker} for\n\t * a full list of available options.\n\t *\n\t * @param {Object} options Object with configuration options. See {@link module:engine/model/treewalker~TreeWalker}.\n\t * @returns {Iterable.<module:engine/model/item~Item>}\n\t */\n\t* getItems( options = {} ) {\n\t\toptions.boundaries = this;\n\t\toptions.ignoreElementEnd = true;\n\n\t\tconst treeWalker = new TreeWalker( options );\n\n\t\tfor ( const value of treeWalker ) {\n\t\t\tyield value.item;\n\t\t}\n\t}\n\n\t/**\n\t * Returns an iterator that iterates over all {@link module:engine/model/position~Position positions} that are boundaries or\n\t * contained in this range.\n\t *\n\t * This method uses {@link module:engine/model/treewalker~TreeWalker} with `boundaries` set to this range. However it returns only\n\t * {@link module:engine/model/position~Position positions}, not {@link module:engine/model/treewalker~TreeWalkerValue}.\n\t *\n\t * You may specify additional options for the tree walker. See {@link module:engine/model/treewalker~TreeWalker} for\n\t * a full list of available options.\n\t *\n\t * @param {Object} options Object with configuration options. See {@link module:engine/model/treewalker~TreeWalker}.\n\t * @returns {Iterable.<module:engine/model/position~Position>}\n\t */\n\t* getPositions( options = {} ) {\n\t\toptions.boundaries = this;\n\n\t\tconst treeWalker = new TreeWalker( options );\n\n\t\tyield treeWalker.position;\n\n\t\tfor ( const value of treeWalker ) {\n\t\t\tyield value.nextPosition;\n\t\t}\n\t}\n\n\t/**\n\t * Returns a range that is a result of transforming this range by given `operation`.\n\t *\n\t * **Note:** transformation may break one range into multiple ranges (for example, when a part of the range is\n\t * moved to a different part of document tree). For this reason, an array is returned by this method and it\n\t * may contain one or more `Range` instances.\n\t *\n\t * @param {module:engine/model/operation/operation~Operation} operation Operation to transform range by.\n\t * @returns {Array.<module:engine/model/range~Range>} Range which is the result of transformation.\n\t */\n\tgetTransformedByOperation( operation ) {\n\t\tswitch ( operation.type ) {\n\t\t\tcase 'insert':\n\t\t\t\treturn this._getTransformedByInsertOperation( operation );\n\t\t\tcase 'move':\n\t\t\tcase 'remove':\n\t\t\tcase 'reinsert':\n\t\t\t\treturn this._getTransformedByMoveOperation( operation );\n\t\t\tcase 'split':\n\t\t\t\treturn [ this._getTransformedBySplitOperation( operation ) ];\n\t\t\tcase 'merge':\n\t\t\t\treturn [ this._getTransformedByMergeOperation( operation ) ];\n\t\t}\n\n\t\treturn [ new Range( this.start, this.end ) ];\n\t}\n\n\t/**\n\t * Returns a range that is a result of transforming this range by multiple `operations`.\n\t *\n\t * @see ~Range#getTransformedByOperation\n\t * @param {Iterable.<module:engine/model/operation/operation~Operation>} operations Operations to transform the range by.\n\t * @returns {Array.<module:engine/model/range~Range>} Range which is the result of transformation.\n\t */\n\tgetTransformedByOperations( operations ) {\n\t\tconst ranges = [ new Range( this.start, this.end ) ];\n\n\t\tfor ( const operation of operations ) {\n\t\t\tfor ( let i = 0; i < ranges.length; i++ ) {\n\t\t\t\tconst result = ranges[ i ].getTransformedByOperation( operation );\n\n\t\t\t\tranges.splice( i, 1, ...result );\n\t\t\t\ti += result.length - 1;\n\t\t\t}\n\t\t}\n\n\t\t// It may happen that a range is split into two, and then the part of second \"piece\" is moved into first\n\t\t// \"piece\". In this case we will have incorrect third range, which should not be included in the result --\n\t\t// because it is already included in the first \"piece\". In this loop we are looking for all such ranges that\n\t\t// are inside other ranges and we simply remove them.\n\t\tfor ( let i = 0; i < ranges.length; i++ ) {\n\t\t\tconst range = ranges[ i ];\n\n\t\t\tfor ( let j = i + 1; j < ranges.length; j++ ) {\n\t\t\t\tconst next = ranges[ j ];\n\n\t\t\t\tif ( range.containsRange( next ) || next.containsRange( range ) || range.isEqual( next ) ) {\n\t\t\t\t\tranges.splice( j, 1 );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn ranges;\n\t}\n\n\t/**\n\t * Returns an {@link module:engine/model/element~Element} or {@link module:engine/model/documentfragment~DocumentFragment}\n\t * which is a common ancestor of the range's both ends (in which the entire range is contained).\n\t *\n\t * @returns {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment|null}\n\t */\n\tgetCommonAncestor() {\n\t\treturn this.start.getCommonAncestor( this.end );\n\t}\n\n\t/**\n\t * Returns an {@link module:engine/model/element~Element Element} contained by the range.\n\t * The element will be returned when it is the **only** node within the range and **fully–contained**\n\t * at the same time.\n\t *\n\t * @returns {module:engine/model/element~Element|null}\n\t */\n\tgetContainedElement() {\n\t\tif ( this.isCollapsed ) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst nodeAfterStart = this.start.nodeAfter;\n\t\tconst nodeBeforeEnd = this.end.nodeBefore;\n\n\t\tif ( nodeAfterStart && nodeAfterStart.is( 'element' ) && nodeAfterStart === nodeBeforeEnd ) {\n\t\t\treturn nodeAfterStart;\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Converts `Range` to plain object and returns it.\n\t *\n\t * @returns {Object} `Node` converted to plain object.\n\t */\n\ttoJSON() {\n\t\treturn {\n\t\t\tstart: this.start.toJSON(),\n\t\t\tend: this.end.toJSON()\n\t\t};\n\t}\n\n\t/**\n\t * Returns a new range that is equal to current range.\n\t *\n\t * @returns {module:engine/model/range~Range}\n\t */\n\tclone() {\n\t\treturn new this.constructor( this.start, this.end );\n\t}\n\n\t/**\n\t * Returns a result of transforming a copy of this range by insert operation.\n\t *\n\t * One or more ranges may be returned as a result of this transformation.\n\t *\n\t * @protected\n\t * @param {module:engine/model/operation/insertoperation~InsertOperation} operation\n\t * @returns {Array.<module:engine/model/range~Range>}\n\t */\n\t_getTransformedByInsertOperation( operation, spread = false ) {\n\t\treturn this._getTransformedByInsertion( operation.position, operation.howMany, spread );\n\t}\n\n\t/**\n\t * Returns a result of transforming a copy of this range by move operation.\n\t *\n\t * One or more ranges may be returned as a result of this transformation.\n\t *\n\t * @protected\n\t * @param {module:engine/model/operation/moveoperation~MoveOperation} operation\n\t * @returns {Array.<module:engine/model/range~Range>}\n\t */\n\t_getTransformedByMoveOperation( operation, spread = false ) {\n\t\tconst sourcePosition = operation.sourcePosition;\n\t\tconst howMany = operation.howMany;\n\t\tconst targetPosition = operation.targetPosition;\n\n\t\treturn this._getTransformedByMove( sourcePosition, targetPosition, howMany, spread );\n\t}\n\n\t/**\n\t * Returns a result of transforming a copy of this range by split operation.\n\t *\n\t * Always one range is returned. The transformation is done in a way to not break the range.\n\t *\n\t * @protected\n\t * @param {module:engine/model/operation/splitoperation~SplitOperation} operation\n\t * @returns {module:engine/model/range~Range}\n\t */\n\t_getTransformedBySplitOperation( operation ) {\n\t\tconst start = this.start._getTransformedBySplitOperation( operation );\n\t\tlet end = this.end._getTransformedBySplitOperation( operation );\n\n\t\tif ( this.end.isEqual( operation.insertionPosition ) ) {\n\t\t\tend = this.end.getShiftedBy( 1 );\n\t\t}\n\n\t\t// Below may happen when range contains graveyard element used by split operation.\n\t\tif ( start.root != end.root ) {\n\t\t\t// End position was next to the moved graveyard element and was moved with it.\n\t\t\t// Fix it by using old `end` which has proper `root`.\n\t\t\tend = this.end.getShiftedBy( -1 );\n\t\t}\n\n\t\treturn new Range( start, end );\n\t}\n\n\t/**\n\t * Returns a result of transforming a copy of this range by merge operation.\n\t *\n\t * Always one range is returned. The transformation is done in a way to not break the range.\n\t *\n\t * @protected\n\t * @param {module:engine/model/operation/mergeoperation~MergeOperation} operation\n\t * @returns {module:engine/model/range~Range}\n\t */\n\t_getTransformedByMergeOperation( operation ) {\n\t\t// Special case when the marker is set on \"the closing tag\" of an element. Marker can be set like that during\n\t\t// transformations, especially when a content of a few block elements were removed. For example:\n\t\t//\n\t\t// {} is the transformed range, [] is the removed range.\n\t\t// <p>F[o{o</p><p>B}ar</p><p>Xy]z</p>\n\t\t//\n\t\t// <p>Fo{o</p><p>B}ar</p><p>z</p>\n\t\t// <p>F{</p><p>B}ar</p><p>z</p>\n\t\t// <p>F{</p>}<p>z</p>\n\t\t// <p>F{}z</p>\n\t\t//\n\t\tif ( this.start.isEqual( operation.targetPosition ) && this.end.isEqual( operation.deletionPosition ) ) {\n\t\t\treturn new Range( this.start );\n\t\t}\n\n\t\tlet start = this.start._getTransformedByMergeOperation( operation );\n\t\tlet end = this.end._getTransformedByMergeOperation( operation );\n\n\t\tif ( start.root != end.root ) {\n\t\t\t// This happens when the end position was next to the merged (deleted) element.\n\t\t\t// Then, the end position was moved to the graveyard root. In this case we need to fix\n\t\t\t// the range cause its boundaries would be in different roots.\n\t\t\tend = this.end.getShiftedBy( -1 );\n\t\t}\n\n\t\tif ( start.isAfter( end ) ) {\n\t\t\t// This happens in three following cases:\n\t\t\t//\n\t\t\t// Case 1: Merge operation source position is before the target position (due to some transformations, OT, etc.)\n\t\t\t//         This means that start can be moved before the end of the range.\n\t\t\t//\n\t\t\t// Before: <p>a{a</p><p>b}b</p><p>cc</p>\n\t\t\t// Merge:  <p>b}b</p><p>cca{a</p>\n\t\t\t// Fix:    <p>{b}b</p><p>ccaa</p>\n\t\t\t//\n\t\t\t// Case 2: Range start is before merged node but not directly.\n\t\t\t//         Result should include all nodes that were in the original range.\n\t\t\t//\n\t\t\t// Before: <p>aa</p>{<p>cc</p><p>b}b</p>\n\t\t\t// Merge:  <p>aab}b</p>{<p>cc</p>\n\t\t\t// Fix:    <p>aa{bb</p><p>cc</p>}\n\t\t\t//\n\t\t\t//         The range is expanded by an additional `b` letter but it is better than dropping the whole `cc` paragraph.\n\t\t\t//\n\t\t\t// Case 3: Range start is directly before merged node.\n\t\t\t//         Resulting range should include only nodes from the merged element:\n\t\t\t//\n\t\t\t// Before: <p>aa</p>{<p>b}b</p><p>cc</p>\n\t\t\t// Merge:  <p>aab}b</p>{<p>cc</p>\n\t\t\t// Fix:    <p>aa{b}b</p><p>cc</p>\n\t\t\t//\n\n\t\t\tif ( operation.sourcePosition.isBefore( operation.targetPosition ) ) {\n\t\t\t\t// Case 1.\n\t\t\t\tstart = Position._createAt( end );\n\t\t\t\tstart.offset = 0;\n\t\t\t} else {\n\t\t\t\tif ( !operation.deletionPosition.isEqual( start ) ) {\n\t\t\t\t\t// Case 2.\n\t\t\t\t\tend = operation.deletionPosition;\n\t\t\t\t}\n\n\t\t\t\t// In both case 2 and 3 start is at the end of the merge-to element.\n\t\t\t\tstart = operation.targetPosition;\n\t\t\t}\n\n\t\t\treturn new Range( start, end );\n\t\t}\n\n\t\treturn new Range( start, end );\n\t}\n\n\t/**\n\t * Returns an array containing one or two {@link ~Range ranges} that are a result of transforming this\n\t * {@link ~Range range} by inserting `howMany` nodes at `insertPosition`. Two {@link ~Range ranges} are\n\t * returned if the insertion was inside this {@link ~Range range} and `spread` is set to `true`.\n\t *\n\t * Examples:\n\t *\n\t *\t\tlet range = model.createRange(\n\t *\t\t\tmodel.createPositionFromPath( root, [ 2, 7 ] ),\n\t *\t\t\tmodel.createPositionFromPath( root, [ 4, 0, 1 ] )\n\t *\t\t);\n\t *\t\tlet transformed = range._getTransformedByInsertion( model.createPositionFromPath( root, [ 1 ] ), 2 );\n\t *\t\t// transformed array has one range from [ 4, 7 ] to [ 6, 0, 1 ]\n\t *\n\t *\t\ttransformed = range._getTransformedByInsertion( model.createPositionFromPath( root, [ 4, 0, 0 ] ), 4 );\n\t *\t\t// transformed array has one range from [ 2, 7 ] to [ 4, 0, 5 ]\n\t *\n\t *\t\ttransformed = range._getTransformedByInsertion( model.createPositionFromPath( root, [ 3, 2 ] ), 4 );\n\t *\t\t// transformed array has one range, which is equal to original range\n\t *\n\t *\t\ttransformed = range._getTransformedByInsertion( model.createPositionFromPath( root, [ 3, 2 ] ), 4, true );\n\t *\t\t// transformed array has two ranges: from [ 2, 7 ] to [ 3, 2 ] and from [ 3, 6 ] to [ 4, 0, 1 ]\n\t *\n\t * @protected\n\t * @param {module:engine/model/position~Position} insertPosition Position where nodes are inserted.\n\t * @param {Number} howMany How many nodes are inserted.\n\t * @param {Boolean} [spread] Flag indicating whether this {~Range range} should be spread if insertion\n\t * was inside the range. Defaults to `false`.\n\t * @returns {Array.<module:engine/model/range~Range>} Result of the transformation.\n\t */\n\t_getTransformedByInsertion( insertPosition, howMany, spread = false ) {\n\t\tif ( spread && this.containsPosition( insertPosition ) ) {\n\t\t\t// Range has to be spread. The first part is from original start to the spread point.\n\t\t\t// The other part is from spread point to the original end, but transformed by\n\t\t\t// insertion to reflect insertion changes.\n\n\t\t\treturn [\n\t\t\t\tnew Range( this.start, insertPosition ),\n\t\t\t\tnew Range(\n\t\t\t\t\tinsertPosition.getShiftedBy( howMany ),\n\t\t\t\t\tthis.end._getTransformedByInsertion( insertPosition, howMany )\n\t\t\t\t)\n\t\t\t];\n\t\t} else {\n\t\t\tconst range = new Range( this.start, this.end );\n\n\t\t\trange.start = range.start._getTransformedByInsertion( insertPosition, howMany );\n\t\t\trange.end = range.end._getTransformedByInsertion( insertPosition, howMany );\n\n\t\t\treturn [ range ];\n\t\t}\n\t}\n\n\t/**\n\t * Returns an array containing {@link ~Range ranges} that are a result of transforming this\n\t * {@link ~Range range} by moving `howMany` nodes from `sourcePosition` to `targetPosition`.\n\t *\n\t * @protected\n\t * @param {module:engine/model/position~Position} sourcePosition Position from which nodes are moved.\n\t * @param {module:engine/model/position~Position} targetPosition Position to where nodes are moved.\n\t * @param {Number} howMany How many nodes are moved.\n\t * @param {Boolean} [spread=false] Whether the range should be spread if the move points inside the range.\n\t * @returns {Array.<module:engine/model/range~Range>} Result of the transformation.\n\t */\n\t_getTransformedByMove( sourcePosition, targetPosition, howMany, spread = false ) {\n\t\t// Special case for transforming a collapsed range. Just transform it like a position.\n\t\tif ( this.isCollapsed ) {\n\t\t\tconst newPos = this.start._getTransformedByMove( sourcePosition, targetPosition, howMany );\n\n\t\t\treturn [ new Range( newPos ) ];\n\t\t}\n\n\t\t// Special case for transformation when a part of the range is moved towards the range.\n\t\t//\n\t\t// Examples:\n\t\t//\n\t\t// <div><p>ab</p><p>c[d</p></div><p>e]f</p> --> <div><p>ab</p></div><p>c[d</p><p>e]f</p>\n\t\t// <p>e[f</p><div><p>a]b</p><p>cd</p></div> --> <p>e[f</p><p>a]b</p><div><p>cd</p></div>\n\t\t//\n\t\t// Without this special condition, the default algorithm leaves an \"artifact\" range from one of `differenceSet` parts:\n\t\t//\n\t\t// <div><p>ab</p><p>c[d</p></div><p>e]f</p> --> <div><p>ab</p>{</div>}<p>c[d</p><p>e]f</p>\n\t\t//\n\t\t// This special case is applied only if the range is to be kept together (not spread).\n\t\tconst moveRange = Range._createFromPositionAndShift( sourcePosition, howMany );\n\t\tconst insertPosition = targetPosition._getTransformedByDeletion( sourcePosition, howMany );\n\n\t\tif ( this.containsPosition( targetPosition ) && !spread ) {\n\t\t\tif ( moveRange.containsPosition( this.start ) || moveRange.containsPosition( this.end ) ) {\n\t\t\t\tconst start = this.start._getTransformedByMove( sourcePosition, targetPosition, howMany );\n\t\t\t\tconst end = this.end._getTransformedByMove( sourcePosition, targetPosition, howMany );\n\n\t\t\t\treturn [ new Range( start, end ) ];\n\t\t\t}\n\t\t}\n\n\t\t// Default algorithm.\n\t\tlet result;\n\n\t\tconst differenceSet = this.getDifference( moveRange );\n\t\tlet difference = null;\n\n\t\tconst common = this.getIntersection( moveRange );\n\n\t\tif ( differenceSet.length == 1 ) {\n\t\t\t// `moveRange` and this range may intersect but may be separate.\n\t\t\tdifference = new Range(\n\t\t\t\tdifferenceSet[ 0 ].start._getTransformedByDeletion( sourcePosition, howMany ),\n\t\t\t\tdifferenceSet[ 0 ].end._getTransformedByDeletion( sourcePosition, howMany )\n\t\t\t);\n\t\t} else if ( differenceSet.length == 2 ) {\n\t\t\t// `moveRange` is inside this range.\n\t\t\tdifference = new Range(\n\t\t\t\tthis.start,\n\t\t\t\tthis.end._getTransformedByDeletion( sourcePosition, howMany )\n\t\t\t);\n\t\t} // else, `moveRange` contains this range.\n\n\t\tif ( difference ) {\n\t\t\tresult = difference._getTransformedByInsertion( insertPosition, howMany, common !== null || spread );\n\t\t} else {\n\t\t\tresult = [];\n\t\t}\n\n\t\tif ( common ) {\n\t\t\tconst transformedCommon = new Range(\n\t\t\t\tcommon.start._getCombined( moveRange.start, insertPosition ),\n\t\t\t\tcommon.end._getCombined( moveRange.start, insertPosition )\n\t\t\t);\n\n\t\t\tif ( result.length == 2 ) {\n\t\t\t\tresult.splice( 1, 0, transformedCommon );\n\t\t\t} else {\n\t\t\t\tresult.push( transformedCommon );\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n\n\t/**\n\t * Returns a copy of this range that is transformed by deletion of `howMany` nodes from `deletePosition`.\n\t *\n\t * If the deleted range is intersecting with the transformed range, the transformed range will be shrank.\n\t *\n\t * If the deleted range contains transformed range, `null` will be returned.\n\t *\n\t * @protected\n\t * @param {module:engine/model/position~Position} deletionPosition Position from which nodes are removed.\n\t * @param {Number} howMany How many nodes are removed.\n\t * @returns {module:engine/model/range~Range|null} Result of the transformation.\n\t */\n\t_getTransformedByDeletion( deletePosition, howMany ) {\n\t\tlet newStart = this.start._getTransformedByDeletion( deletePosition, howMany );\n\t\tlet newEnd = this.end._getTransformedByDeletion( deletePosition, howMany );\n\n\t\tif ( newStart == null && newEnd == null ) {\n\t\t\treturn null;\n\t\t}\n\n\t\tif ( newStart == null ) {\n\t\t\tnewStart = deletePosition;\n\t\t}\n\n\t\tif ( newEnd == null ) {\n\t\t\tnewEnd = deletePosition;\n\t\t}\n\n\t\treturn new Range( newStart, newEnd );\n\t}\n\n\t/**\n\t * Creates a new range, spreading from specified {@link module:engine/model/position~Position position} to a position moved by\n\t * given `shift`. If `shift` is a negative value, shifted position is treated as the beginning of the range.\n\t *\n\t * @protected\n\t * @param {module:engine/model/position~Position} position Beginning of the range.\n\t * @param {Number} shift How long the range should be.\n\t * @returns {module:engine/model/range~Range}\n\t */\n\tstatic _createFromPositionAndShift( position, shift ) {\n\t\tconst start = position;\n\t\tconst end = position.getShiftedBy( shift );\n\n\t\treturn shift > 0 ? new this( start, end ) : new this( end, start );\n\t}\n\n\t/**\n\t * Creates a range inside an {@link module:engine/model/element~Element element} which starts before the first child of\n\t * that element and ends after the last child of that element.\n\t *\n\t * @protected\n\t * @param {module:engine/model/element~Element} element Element which is a parent for the range.\n\t * @returns {module:engine/model/range~Range}\n\t */\n\tstatic _createIn( element ) {\n\t\treturn new this( Position._createAt( element, 0 ), Position._createAt( element, element.maxOffset ) );\n\t}\n\n\t/**\n\t * Creates a range that starts before given {@link module:engine/model/item~Item model item} and ends after it.\n\t *\n\t * @protected\n\t * @param {module:engine/model/item~Item} item\n\t * @returns {module:engine/model/range~Range}\n\t */\n\tstatic _createOn( item ) {\n\t\treturn this._createFromPositionAndShift( Position._createBefore( item ), item.offsetSize );\n\t}\n\n\t/**\n\t * Combines all ranges from the passed array into a one range. At least one range has to be passed.\n\t * Passed ranges must not have common parts.\n\t *\n\t * The first range from the array is a reference range. If other ranges start or end on the exactly same position where\n\t * the reference range, they get combined into one range.\n\t *\n\t *\t\t[  ][]  [    ][ ][             ][ ][]  [  ]  // Passed ranges, shown sorted\n\t *\t\t[    ]                                       // The result of the function if the first range was a reference range.\n\t *\t            [                           ]        // The result of the function if the third-to-seventh range was a reference range.\n\t *\t                                           [  ]  // The result of the function if the last range was a reference range.\n\t *\n\t * @param {Array.<module:engine/model/range~Range>} ranges Ranges to combine.\n\t * @returns {module:engine/model/range~Range} Combined range.\n\t */\n\tstatic _createFromRanges( ranges ) {\n\t\tif ( ranges.length === 0 ) {\n\t\t\t/**\n\t\t\t * At least one range has to be passed to\n\t\t\t * {@link module:engine/model/range~Range._createFromRanges `Range._createFromRanges()`}.\n\t\t\t *\n\t\t\t * @error range-create-from-ranges-empty-array\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'range-create-from-ranges-empty-array',\n\t\t\t\tnull\n\t\t\t);\n\t\t} else if ( ranges.length == 1 ) {\n\t\t\treturn ranges[ 0 ].clone();\n\t\t}\n\n\t\t// 1. Set the first range in `ranges` array as a reference range.\n\t\t// If we are going to return just a one range, one of the ranges need to be the reference one.\n\t\t// Other ranges will be stuck to that range, if possible.\n\t\tconst ref = ranges[ 0 ];\n\n\t\t// 2. Sort all the ranges so it's easier to process them.\n\t\tranges.sort( ( a, b ) => {\n\t\t\treturn a.start.isAfter( b.start ) ? 1 : -1;\n\t\t} );\n\n\t\t// 3. Check at which index the reference range is now.\n\t\tconst refIndex = ranges.indexOf( ref );\n\n\t\t// 4. At this moment we don't need the original range.\n\t\t// We are going to modify the result and we need to return a new instance of Range.\n\t\t// We have to create a copy of the reference range.\n\t\tconst result = new this( ref.start, ref.end );\n\n\t\t// 5. Ranges should be checked and glued starting from the range that is closest to the reference range.\n\t\t// Since ranges are sorted, start with the range with index that is closest to reference range index.\n\t\tif ( refIndex > 0 ) {\n\t\t\tfor ( let i = refIndex - 1; true; i++ ) {\n\t\t\t\tif ( ranges[ i ].end.isEqual( result.start ) ) {\n\t\t\t\t\tresult.start = Position._createAt( ranges[ i ].start );\n\t\t\t\t} else {\n\t\t\t\t\t// If ranges are not starting/ending at the same position there is no point in looking further.\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// 6. Ranges should be checked and glued starting from the range that is closest to the reference range.\n\t\t// Since ranges are sorted, start with the range with index that is closest to reference range index.\n\t\tfor ( let i = refIndex + 1; i < ranges.length; i++ ) {\n\t\t\tif ( ranges[ i ].start.isEqual( result.end ) ) {\n\t\t\t\tresult.end = Position._createAt( ranges[ i ].end );\n\t\t\t} else {\n\t\t\t\t// If ranges are not starting/ending at the same position there is no point in looking further.\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n\n\t/**\n\t * Creates a `Range` instance from given plain object (i.e. parsed JSON string).\n\t *\n\t * @param {Object} json Plain object to be converted to `Range`.\n\t * @param {module:engine/model/document~Document} doc Document object that will be range owner.\n\t * @returns {module:engine/model/element~Element} `Range` instance created using given plain object.\n\t */\n\tstatic fromJSON( json, doc ) {\n\t\treturn new this( Position.fromJSON( json.start, doc ), Position.fromJSON( json.end, doc ) );\n\t}\n\n\t// @if CK_DEBUG_ENGINE // toString() {\n\t// @if CK_DEBUG_ENGINE // \treturn `${ this.root } [ ${ this.start.path.join( ', ' ) } ] - [ ${ this.end.path.join( ', ' ) } ]`;\n\t// @if CK_DEBUG_ENGINE // }\n\n\t// @if CK_DEBUG_ENGINE // log() {\n\t// @if CK_DEBUG_ENGINE // \tconsole.log( 'ModelPosition: ' + this );\n\t// @if CK_DEBUG_ENGINE // }\n}\n"]}]}